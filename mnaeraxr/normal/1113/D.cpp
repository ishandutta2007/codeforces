/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author marX
 */

#include <iostream>
#include <fstream>

#include <bits/stdc++.h>

using namespace std;
vector<int> manacher(const string &s)
{
    int n = 2 * s.length();
    vector<int> rad(n);

    for (int i = 0, j = 0, k; i < n; i += k, j = max(j - k, 0))
    {
        for (; i >= j && i + j + 1 < n
               && s[(i - j) / 2] == s[(i + j + 1) / 2]; ++j);
        rad[i] = j;
        for (k = 1; i >= k &&
                    rad[i] >= k && rad[i - k] != rad[i] - k; ++k)
            rad[i + k] = min(rad[i - k], rad[i] - k);
    }

    return rad;
}

vector<int> zfunction(const string &s)
{
    int n = s.length();

    vector<int> z(n, n);

    for (int i = 1, g = 0, f; i < n; ++i)
        if (i < g && z[i - f] != g - i)
            z[i] = min(z[i - f], g - i);
        else
        {
            for (g = max(g, f = i); g < n && s[g] == s[g - f]; ++g);
            z[i] = g - f;
        }

    return z;
}

bool is_pal(const vector<int> &rad, int b, int e)
{
    int n = rad.size() / 2;
    return b >= 0 && e < n && rad[b + e] >= e - b + 1;
}

class DSashaAndOneMoreName {
public:
    void solve(std::istream& in, std::ostream& out) {
        string s; in >> s;

        int n = s.length();

        bool good = false;

        for (int i = 1; i < n / 2 && !good; ++i) {
            if (s[i] != s[i - 1])
                good = true;
        }

        if (!good) {
            out << "Impossible" << endl;
            return;
        }

        s += s;

        auto z = zfunction(s);
        auto man = manacher(s);

        for (int i = 1; i < n; ++i) {
            if (is_pal(man, i, i + n - 1) && z[i] < n) {
                out << 1 << endl;
                return;
            }
        }

        out << 2 << endl;
    }
};


int main() {
	DSashaAndOneMoreName solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}