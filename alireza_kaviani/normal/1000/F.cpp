/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 5e5 + 10;
const ll LOG = 22;
const ll INF = 1e9;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n, q, A[MAXN], L[MAXN], R[MAXN], ans[MAXN];
vector<ll> vec[MAXN], Q[MAXN];
int seg[MAXN << 2];

void modify(int x, int val, int id = 1, int l = 0, int r = MAXN) {
    if (r - l == 1) {
        seg[id] = val;
        return;
    }
    int mid = l + r >> 1;
    if (x < mid) modify(x, val, id << 1, l, mid);
    else modify(x, val, id << 1 | 1, mid, r);
    seg[id] = max(seg[id << 1], seg[id << 1 | 1]);
}

int get(int x, int id = 1, int l = 0, int r = MAXN) {
    if (r - l == 1) return l;
    int mid = l + r >> 1;
    if (seg[id << 1] > x) return get(x, id << 1, l, mid);
    return get(x, id << 1 | 1, mid, r);
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    cin >> n;
    for (ll i = 1; i <= n; i++) {
        cin >> A[i];
        vec[A[i]].push_back(i);
    }
    for (ll i = 0; i < MAXN; i++) {
        vec[i].push_back(INF);
        reverse(all(vec[i]));
        if (SZ(vec[i]) >= 2) {
            modify(vec[i].back(), vec[i][SZ(vec[i]) - 2]);
            vec[i].pop_back();
        }
    }

    cin >> q;
    for (ll i = 1; i <= n; i++) {
        cin >> L[i] >> R[i];
        Q[L[i]].push_back(i);
    }

    for (ll i = 1; i <= n; i++) {
        for (ll j : Q[i]) {
            ans[j] = get(R[j]);
            if (ans[j] > R[j]) ans[j] = 0;
        }
        modify(i, 0);
        if (SZ(vec[A[i]]) >= 2) {
            modify(vec[A[i]].back(), vec[A[i]][SZ(vec[A[i]]) - 2]);
            vec[A[i]].pop_back();
        }
    }
    for (ll i = 1; i <= q; i++) cout << A[ans[i]] << endl;

    return 0;
}
/*

*/