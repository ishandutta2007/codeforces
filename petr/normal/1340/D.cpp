/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <algorithm>
#include <array>
#include <bitset>
#include <cassert>
#include <climits>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <functional>
#include <iostream>
#include <map>
#include <memory>
#include <numeric>
#include <queue>
#include <random>
#include <set>
#include <stack>
#include <string>
#include <unordered_map>
#include <vector>

#define pb push_back
#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()
#define mp make_pair

using namespace std;

typedef long long int64;
typedef vector<int> vi;
typedef pair<int, int> ii;

class TaskD {
 public:
  int n;
  vector<vector<int>> adj;
  int mx;
  vector<ii> res;

  void dfs(int at, int when, int parent) {
    res.emplace_back(at, when);
    int now = when;
    int togo = adj[at].size();
    if (parent >= 0) --togo;
    bool jumped = false;
    for (int i : adj[at]) {
      if (i == parent) continue;
      if (now == mx) {
        jumped = true;
        now = when - 1 - togo;
        assert(now >= 0);
        res.emplace_back(at, now);
      }
      ++now;
      dfs(i, now, at);
      res.emplace_back(at, now);
      --togo;
    }
    if (parent >= 0) {
      if (!jumped) {
        assert(now > when - 1);
        res.emplace_back(at, when - 1);
      } else {
        assert(now == when - 1);
      }
    } else {
      assert(!jumped);
    }
  }

  void solveOne(istream &in, ostream &out) {
    in >> n;
    adj = vector<vector<int>>(n);
    for (int i = 0; i < n - 1; ++i) {
      int a, b;
      in >> a >> b;
      --a;
      --b;
      adj[a].push_back(b);
      adj[b].push_back(a);
    }
    if (n == 1) {
      out << "1\n";
      out << "1 0\n";
      return;
    }
    mx = 0;
    for (int i = 0; i < n; ++i) mx = max(mx, sz(adj[i]));
    res = vector<ii>();
    dfs(0, 0, -1);
    out << res.size() << "\n";
    for (ii x : res) {
      out << (x.first + 1) << " " << x.second << "\n";
    }
  }

  void solve(std::istream &in, std::ostream &out) {
    int nt = 1;
    for (int it = 0; it < nt; ++it) {
      solveOne(in, out);
    }
  }
};


int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  TaskD solver;
  std::istream& in(std::cin);
  std::ostream& out(std::cout);
  solver.solve(in, out);
  return 0;
}