/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author majk
 */

#ifndef MAJK_LIB
#define MAJK_LIB

#include <vector>
#include <stack>
#include <iostream>
#include <unordered_map>
#include <unordered_set>
#include <map>
#include <iomanip>
#include <set>
#include <functional>
#include <fstream>
#include <algorithm>
#include <cassert>
#include <cmath>
#include <string>
#include <sstream>
#include <queue>
#include <bitset>
using namespace std;

#define x first
#define y second
typedef std::pair<int,int> pii; typedef long long ll; typedef unsigned long long ull; typedef unsigned int ui; typedef pair<ui,ui> puu;

template <typename T, typename U> std::istream&operator>>(std::istream&i, pair<T,U>&p) {i >> p.x >> p.y; return i;}
template<typename T>std::istream&operator>>(std::istream&i,vector<T>&t) {for(auto&v:t){i>>v;}return i;}
template <typename T, typename U> std::ostream&operator<<(std::ostream&o, const pair<T,U>&p) {o << p.x << ' ' << p.y; return o;}
template<typename T>std::ostream&operator<<(std::ostream&o,const vector<T>&t) {if(t.empty())o<<'\n';for(size_t i=0;i<t.size();++i){o<<t[i]<<" \n"[i == t.size()-1];}return o;}
template<typename T> using minheap = priority_queue<T, vector<T>, greater<T>>;
template<typename T> using maxheap = priority_queue<T, vector<T>, less<T>>;
template <typename T> bool in(T a, T b, T c) { return a <= b && b < c; }
ui logceil(int x) { return 8*sizeof(int)-__builtin_clz(x); }

namespace std { template<typename T,typename U>struct hash<pair<T,U>>{hash<T>t;hash<U>u;size_t operator()(const pair<T,U>&p)const{return t(p.x)^(u(p.y)<<7);}}; }
template<typename T,typename F>T bsh(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){l=m+1;r=m;}else{h=m-1;}}return r;}
template<typename F> double bshd(double l,double h,const F&f,double p=1e-9){ui r=3+(ui)log2((h-l)/p);while(r--){double m=(l+h)/2;if(f(m)){l=m;}else{h=m;}}return (l+h)/2;}
template<typename T,typename F>T bsl(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){h=m-1;r=m;}else{l=m+1;}}return r;}
template<typename F> double bsld(double l,double h,const F&f,double p=1e-9){ui r=3+(ui)log2((h-l)/p);while(r--){double m=(l+h)/2;if(f(m)){h=m;}else{l=m;}}return (l+h)/2;}
template<typename T> T gcd(T a,T b) { if (a<b) swap(a,b); return b?gcd(b,a%b):a; }

template<typename T>class vector2:public vector<vector<T>>{public:vector2(){} vector2(size_t a,size_t b,T t=T()):vector<vector<T>>(a,vector<T>(b,t)){}};
template<typename T>class vector3:public vector<vector2<T>>{public:vector3(){} vector3(size_t a,size_t b,size_t c,T t=T()):vector<vector2<T>>(a,vector2<T>(b,c,t)){}};
template<typename T>class vector4:public vector<vector3<T>>{public:vector4(){} vector4(size_t a,size_t b,size_t c,size_t d,T t=T()):vector<vector3<T>>(a,vector3<T>(b,c,d,t)){}};
template<typename T>class vector5:public vector<vector4<T>>{public:vector5(){} vector5(size_t a,size_t b,size_t c,size_t d,size_t e,T t=T()):vector<vector4<T>>(a,vector4<T>(b,c,d,e,t)){}};


#endif
// #include "../l/mod.h"

class cielandgondolas {
public:

    vector<vector<int>> P;

    inline int get(int i, int j) {
        return P[j][j] + P[i][i] - P[j][i] - P[i][j];
    }

    void dnc(const vector<int>&src, vector<int>&tar, int left, int right, int lo, int hi) {
        if (left >= right) return;

        int center = (left+right)/2;
        pii best = {src[lo] + get(lo,center), lo};
        for (int i = lo+1; i < hi; ++i) best = min(best, {src[i] + get(i,center), i});
        tar[center] = best.x;
        dnc(src, tar, left, center, lo, best.y+1);
        dnc(src, tar, center+1, right, best.y, hi);
    }


    void solve(istream& cin, ostream& cout) {
        int N, K; cin >> N >> K;
        P = vector2<int>(N+1, N+1, 0);
        for (int i = 0; i < N; ++i) {
            for (int j = 0; j < N; ++j) {
                char c; cin >> c;
                P[i+1][j+1] = c-'0' + P[i+1][j] + P[i][j+1] - P[i][j];
            }
        }

        vector<int> D(N+1, 1e9);
        vector<pair<pii,pii>> Q(N+1);
        Q[0] = {{0,N+1},{0,N+1}};

        D[0] = 0;
        for (int k = 0; k < K; ++k) {
            vector<int> E(N+1, 0);
            int j = 1;
            for (int i = 0; i <= N; ++i) {
                auto q = Q[i];

                int center = (q.x.x+q.x.y)/2;
                pii best = {D[q.y.x] + get(q.y.x,center), q.y.x};
                for (int i = q.y.x+1; i < q.y.y; ++i) best = min(best, {D[i] + get(i,center), i});
                E[center] = best.x;
                if (q.x.x < center) Q[j++] = {{q.x.x, center}, {q.y.x, best.y+1}};
                if (center+1 < q.x.y) Q[j++] = {{center+1, q.x.y}, {best.y, q.y.y}};
            }
            swap(E,D);
        }

        cout << D[N]/2;
    }
};


int main() {
	ios_base::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr);
	cielandgondolas solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
    return 0;
}