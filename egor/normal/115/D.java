import java.util.InputMismatchException;
import java.math.BigInteger;
import java.io.*;
import java.util.Arrays;

/**
 * Generated by Contest helper plug-in
 * Actual solution is at the bottom
 */
public class Main {
	public static void main(String[] args) {
		InputReader in = new StreamInputReader(System.in);
		PrintWriter out = new PrintWriter(System.out);
		run(in, out);
	}

	public static void run(InputReader in, PrintWriter out) {
		Solver solver = new TaskD();
		solver.solve(1, in, out);
		Exit.exit(in, out);
	}
}

abstract class InputReader {
	private boolean finished = false;

	public abstract int read();

	public String readString() {
		int c = read();
		while (isSpaceChar(c))
			c = read();
		StringBuffer res = new StringBuffer();
		do {
			res.appendCodePoint(c);
			c = read();
		} while (!isSpaceChar(c));
		return res.toString();
	}

	private boolean isSpaceChar(int c) {
		return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
	}

	public void setFinished(boolean finished) {
		this.finished = finished;
	}

	public abstract void close();
}

class StreamInputReader extends InputReader {
	private InputStream stream;
	private byte[] buf = new byte[1024];
	private int curChar, numChars;

	public StreamInputReader(InputStream stream) {
		this.stream = stream;
	}

	public int read() {
		if (numChars == -1)
			throw new InputMismatchException();
		if (curChar >= numChars) {
			curChar = 0;
			try {
				numChars = stream.read(buf);
			} catch (IOException e) {
				throw new InputMismatchException();
			}
			if (numChars <= 0)
				return -1;
		}
		return buf[curChar++];
	}

	public void close() {
		try {
			stream.close();
		} catch (IOException ignored) {
		}
	}
}

class Exit {
	private Exit() {
	}

	public static void exit(InputReader in, PrintWriter out) {
		in.setFinished(true);
		in.close();
		out.close();
	}
}

interface Solver {
	public void solve(int testNumber, InputReader in, PrintWriter out);
}

class TaskD implements Solver {
	private static final long MOD = 1000003;

	public void solve(int testNumber, InputReader in, PrintWriter out) {
		String formula = "+" + in.readString();
		if (!Character.isDigit(formula.charAt(formula.length() - 1))) {
			out.println(0);
			return;
		}
		String[] tokens = formula.split("[0-9]+");
		int[] count = new int[tokens.length];
		for (int i = 0; i < tokens.length; i++) {
			for (int j = 1; j < tokens[i].length(); j++) {
				if (tokens[i].charAt(j) != '+' && tokens[i].charAt(j) != '-') {
					out.println(0);
					return;
				}
			}
			count[i] = tokens[i].length() - 1;
		}
		long[] result = new long[count.length];
		long[] nextResult = new long[count.length];
		result[0] = 1;
		long[] reverse = new long[count.length];
		BigInteger bigMod = BigInteger.valueOf(MOD);
		for (int i = 0; i < count.length; i++)
			reverse[i] = BigInteger.valueOf(i + 1).modInverse(bigMod).longValue();
		for (int i = count.length - 2; i >= 0; i--) {
			int maxPower = count.length - 1 - i;
			Arrays.fill(nextResult, 0, maxPower + 1, 0);
			long multiplyBy = 1;
			for (int j = 0; j <= maxPower; j++) {
				for (int k = j; k <= maxPower; k++)
					nextResult[k] += result[k - j] * multiplyBy;
				nextResult[j] %= MOD;
				multiplyBy = multiplyBy * (count[i] + j + 1) % MOD * reverse[j] % MOD;
			}
			long[] temp = result;
			result = nextResult;
			nextResult = temp;
		}
		out.println(result[count.length - 1]);
	}
}