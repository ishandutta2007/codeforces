/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

// Actual solution is at the bottom

#include <algorithm>
#include <array>
#include <bitset>
#include <cassert>
#include <climits>
#include <cstdint>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <memory>
#include <numeric>
#include <queue>
#include <random>
#include <set>
#include <stack>
#include <string>
#include <unordered_set>
#include <unordered_map>
#include <vector>
//#include "../atcoder/all"

#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()

using namespace std;

typedef int64_t int64;
typedef pair<int, int> ii;

class BRasstavteTarelki {
 public:
  void solveOne() {
    int h, w;
    cin >> h >> w;
    vector<vector<int>> res(h, vector<int>(w));
    res[0][0] = 1;
    res[0][w - 1] = 1;
    res[h - 1][0] = 1;
    res[h - 1][w - 1] = 1;
    for (int c = 2; c + 1 < w - 1; c += 2) {
      res[0][c] = 1;
      res[h - 1][c] = 1;
    }
    for (int r = 2; r + 1 < h - 1; r += 2) {
      res[r][0] = 1;
      res[r][w - 1] = 1;
    }
    for (int r = 0; r < h; ++r) {
      for (int c = 0; c < w; ++c) {
        cout << res[r][c];
      }
      cout << "\n";
    }
    cout << "\n";
  }

  void solve() {
    int nt;
    cin >> nt;
    for (int it = 0; it < nt; ++it) {
      solveOne();
    }
  }
};


int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(0);
    BRasstavteTarelki solver;


    solver.solve();
    return 0;
}