/* Generated by powerful Codeforces Tool
 * You can download the binary file in here https://github.com/xalanq/cf-tool (Windows, macOS, Linux)
 * Author: alireza_kaviani
 * Time: 2020-08-30 10:52:55
**/
#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<int, int> pii;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())
#define lc							id << 1
#define rc							lc | 1

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 2e5 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n , q , A[MAXN] , seg[MAXN << 2] , lz[MAXN << 2];

void shift(int id){
	lz[lc] += lz[id];
	lz[rc] += lz[id];
	seg[lc] += lz[id];
	seg[rc] += lz[id];
	lz[id] = 0;
}

void update(int ql , int qr , int x , int id = 1 , int l = 1 , int r = n + 1){
	if(qr <= l || r <= ql || qr <= ql)	return;
	if(ql <= l && r <= qr){
		lz[id] += x;
		seg[id] += x;
		return;
	}
	shift(id);
	int mid = l + r >> 1;
	update(ql , qr , x , lc , l , mid);
	update(ql , qr , x , rc , mid , r);
	seg[id] = max(seg[lc] , seg[rc]);
}

int find(int id = 1 , int l = 1 , int r = n + 1){
	if(r - l == 1 && seg[id] != 0)	return -1;
	if(r - l == 1 && seg[id] == 0)	return l;
	if(seg[id] < 0)	return -1;
	shift(id);
	int mid = l + r >> 1;
	int x = find(lc , l , mid);
	if(x != -1)	return x;
	return find(rc , mid , r);
}

int main() {
	ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);

	cin >> n >> q;
	for(int i = 1 ; i <= n ; i++)	cin >> A[i];
	for(int i = 1 ; i <= n ; i++){
		update(i , i + 1 , A[i]);
		update(i + 1 , n + 1 , -A[i]);
	}

	while(q--){
		int p , x , diff;
		cin >> p >> x;
		diff = x - A[p];
		A[p] = x;
		update(p , p + 1 , diff);
		update(p + 1 , n + 1 , -diff);
		if(A[1] == 0){
			cout << 1 << endl;
			continue;
		}
		cout << find() << endl;
	}

    return 0;
}
/*

*/