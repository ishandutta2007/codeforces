/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <bits/stdc++.h>

#define pb push_back
#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()
#define mp make_pair

using namespace std;

typedef long long int64;
typedef vector<int> vi;
typedef pair<int, int> ii;

class TaskD {
 public:

  void updateCandidates(const vector<vector<int>>& res, int r, int c, vector<ii>& candidates) {
    for (int rr = r - 1; rr <= r + 1; ++rr) if (rr >= 0 && rr < res.size()) {
      for (int cc = c - 1; cc <= c + 1; ++cc) if (cc >= 0 && cc < res[0].size() && abs(rr - r) + abs(cc - c) == 1) {
        if (res[rr][cc] == -1) {
          int count = 0;
          for (int rrr = rr - 1; rrr <= rr + 1; ++rrr) if (rrr >= 0 && rrr < res.size()) {
              for (int ccc = cc - 1; ccc <= cc + 1; ++ccc)
                if (ccc >= 0 && ccc < res[0].size() && abs(rrr - rr) + abs(ccc - cc) == 1) {
                  if (res[rrr][ccc] >= 0) ++count;
                }
          }
          if (count == 2) {
            candidates.emplace_back(rr, cc);
          }
        }
      }
    }
  }

  void solveOne(istream &in, ostream &out) {
    int height;
    int width;
    in >> height >> width;
    vector<vector<int>> a(height, vector<int>(width));
    vector<int> atr(height * width);
    vector<int> atc(height * width);
    for (int r = 0; r < height; ++r) {
      for (int c = 0; c < width; ++c) {
        int x;
        in >> x;
        --x;
        a[r][c] = x;
        atr[x] = r;
        atc[x] = c;
      }
    }
    int rows = 0;
    int cols = 0;
    vector<vector<int>> res(height, vector<int>(width, -1));
    vector<ii> candidates;
    for (int val = height * width - 1; val >= 0; --val) {
      bool maxInRow = true;
      bool maxInCol = true;
      int r = atr[val];
      int c = atc[val];
      for (int i = 0; i < height; ++i) if (a[i][c] > val) maxInCol = false;
      for (int i = 0; i < width; ++i) if (a[r][i] > val) maxInRow = false;
      if (maxInRow && maxInCol) {
        res[rows][cols] = val;
        updateCandidates(res, rows, cols, candidates);
        ++rows;
        ++cols;
      } else if (maxInRow) {
        res[rows][cols - 1] = val;
        updateCandidates(res, rows, cols - 1, candidates);
        ++rows;
      } else if (maxInCol) {
        res[rows - 1][cols] = val;
        updateCandidates(res, rows - 1, cols, candidates);
        ++cols;
      } else {
        assert(!candidates.empty());
        auto pp = candidates.back();
        candidates.pop_back();
        res[pp.first][pp.second] = val;
        updateCandidates(res, pp.first, pp.second, candidates);
      }
    }
    assert(rows == height);
    assert(cols == width);
    assert(candidates.empty());
    for (int r = 0; r < height; ++r) {
      for (int c = 0; c < width; ++c) {
        out << res[r][c] + 1 << " ";
      }
      out << "\n";
    }
  }

  void solve(std::istream &in, std::ostream &out) {
    int nt = 1;
    for (int it = 0; it < nt; ++it) {
      solveOne(in, out);
    }
  }
};


int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  TaskD solver;
  std::istream& in(std::cin);
  std::ostream& out(std::cout);
  solver.solve(in, out);
  return 0;
}