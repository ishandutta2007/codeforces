/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <bits/stdc++.h>

#define pb push_back
#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()
#define mp make_pair

using namespace std;

typedef long long int64;
typedef vector<int> vi;
typedef pair<int, int> ii;

class TaskC {
 public:
  void solveOne(istream &in, ostream &out) {
    int n, exact, inexact;
    in >> n >> exact >> inexact;
    vector<int> b(n);
    vector<vector<int>> where(n + 2);
    for (int i = 0; i < n; ++i) {
      in >> b[i];
      where[b[i]].push_back(i);
    }
    int missing = 1;
    while (!where[missing].empty()) ++missing;
    set<pair<int, int>> counts;
    for (int i = 1; i <= n + 1; ++i) if (where[i].size() > 0) {
      counts.emplace(where[i].size(), i);
    }
    int other = n - inexact;
    inexact -= exact;
    vector<int> res(n, 0);
    for (int i = 0; i < exact; ++i) {
      int a = counts.rbegin()->second;
      counts.erase(ii(where[a].size(), a));
      int p = where[a].back();
      where[a].pop_back();
      res[p] = a;
      counts.emplace(where[a].size(), a);
    }
    vector<int> positions;
    for (int i = 1; i <= n + 1; ++i) {
      for (int x : where[i]) positions.push_back(x);
    }
    assert(inexact + other == positions.size());
    int at = (inexact + other) / 2;
    vector<int> replacements;
    for (int i = 1; i <= n + 1; ++i) {
      for (int x : where[i]) {
        if (b[positions[at]] == i) {
          if (other == 0) {
            out << "NO\n";
            return;
          }
          --other;
          res[positions[at]] = missing;
        } else {
          res[positions[at]] = i;
          replacements.push_back(positions[at]);
        }
        ++at;
        if (at >= positions.size()) at = 0;
      }
    }
    assert(other <= replacements.size());
    for (int i = 0; i < other; ++i) {
      res[replacements[i]] = missing;
    }
    for (int x : res) assert(x > 0);
    out << "YES\n";
    for (int x : res) {
      out << x << " ";
    }
    out << "\n";
  }

  void solve(std::istream &in, std::ostream &out) {
    int nt;
    in >> nt;
    for (int it = 0; it < nt; ++it) {
      solveOne(in, out);
    }
  }
};


int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  TaskC solver;
  std::istream& in(std::cin);
  std::ostream& out(std::cout);
  solver.solve(in, out);
  return 0;
}