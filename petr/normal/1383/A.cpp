/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <bits/stdc++.h>

#define pb push_back
#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()
#define mp make_pair

using namespace std;

typedef long long int64;
typedef vector<int> vi;
typedef pair<int, int> ii;

class TaskA {
 public:
  void solveOne(istream &in, ostream &out) {
    int n;
    in >> n;
    string a, b;
    in >> a >> b;
    vector<vector<bool>> need(20, vector<bool>(20));
    for (int i = 0; i < n; ++i) {
      if (a[i] != b[i]) {
        need[a[i] - 'a'][b[i] - 'a'] = true;
      }
    }
    int res = 0;
    for (int src = 0; src < need.size(); ++src) {
      for (int dst = 0; dst < need.size(); ++dst) {
        if (need[src][dst]) {
          if (src > dst) {
            out << -1 << "\n";
            return;
          }
          ++res;
          for (int i = dst + 1; i < need.size(); ++i) {
            if (need[src][i]) {
              need[src][i] = false;
              need[dst][i] = true;
            }
          }
        }
      }
    }
    out << res << "\n";
  }

  void solve(std::istream &in, std::ostream &out) {
    int nt;
    in >> nt;
    for (int it = 0; it < nt; ++it) {
      solveOne(in, out);
    }
  }
};


int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  TaskA solver;
  std::istream& in(std::cin);
  std::ostream& out(std::cout);
  solver.solve(in, out);
  return 0;
}