/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author marX
 */

#include <iostream>
#include <fstream>

#include <bits/stdc++.h>

using namespace std;

int reachable(vector<vector<int>> &graph, int source, int veto) {
    int n = graph.size();
    vector<bool> vis(n);

    vis[source] = true;
    queue<int> q;
    q.push(source);

    while (!q.empty()) {
        int u = q.front();
        q.pop();

        for (auto v : graph[u]) {
            if (!vis[v] && v != veto) {
                vis[v] = true;
                q.push(v);
            }
        }
    }

    int answer = 0;

    for (auto x : vis)
        answer += x;

    return answer;
}

class BTwoFairs {
public:
    void solve(std::istream &in, std::ostream &out) {
        int t;
        in >> t;

        while (t-- > 0) {
            int n, m, a, b;
            in >> n >> m >> a >> b;

            a--;
            b--;

            vector<vector<int>> graph(n);

            for (int i = 0; i < m; ++i) {
                int u, v;
                in >> u >> v;
                u--;
                v--;
                graph[u].push_back(v);
                graph[v].push_back(u);
            }

            int x = reachable(graph, a, b);
            int y = reachable(graph, b, a);

            x = n - x - 1;
            y = n - y - 1;

            out << 1LL * x * y << endl;
        }
    }
};


int main() {
    BTwoFairs solver;
    std::istream &in(std::cin);
    std::ostream &out(std::cout);
    solver.solve(in, out);
    return 0;
}