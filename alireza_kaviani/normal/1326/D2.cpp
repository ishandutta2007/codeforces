/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll q , n , cnt , hs[2][3][MAXN] , mod[3] = {ll(1e9 + 7) , ll(1e9 + 9) , ll(1e9 + 21)} , base[3] , pw[3][MAXN];
ll prime[6] = {31 , 37 , 41 , 43 , 47 , 53};
mt19937_64 rng(time(0));
string s , S[2];

void build(ll x , ll y){
    pw[y][0] = 1;
    for(ll i = 1 ; i <= n ; i++)    pw[y][i] = pw[y][i - 1] * base[y] % mod[y];
    for(ll i = 0 ; i < n ; i++){
        hs[x][y][i + 1] = (hs[x][y][i] * base[y] % mod[y] + ll(S[x][i] - 96)) % mod[y];
    }
}

ll get(ll x , ll y , ll l , ll r){
    r++;
    return (hs[x][y][r] - hs[x][y][l] * pw[y][r - l] % mod[y] + mod[y]) % mod[y];
}

ll check(ll l , ll r){
    ll l2 = n - r - 1 , r2 = n - l - 1;
    for(ll i = 0 ; i < 3 ; i++){
        if(get(0 , i , l , r) != get(1 , i , l2 , r2))  return 0;
    }
    return 1;
}

int main() {
    ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);

    cin >> q;
    while(q--){
        cnt = 0;
        cin >> s;
        n = s.size(); S[0] = S[1] = s;
        reverse(all(S[1]));
        for(ll i = 0 ; i < 3 ; i++) base[i] = prime[rng() % 6];
        for(ll i = 0 ; i < 2 ; i++) for(ll j = 0 ; j < 3 ; j++) build(i , j);
        for(ll i = 0 ; i < n / 2 ; i++){
            if(s[i] == s[n - i - 1])    cnt++;
            else    break;
        }
        ll ans = 0 , mark = 0;
        for(ll i = 1 ; i <= n - 2 * cnt ; i++) {
            if (check(cnt, cnt + i - 1)) ans = i, mark = 0;
            if (check(n - cnt - i, n - cnt - 1)) ans = i, mark = 1;
        }
        if(mark)    cout << s.substr(0 , cnt) << s.substr(n - cnt - ans , cnt + ans) << endl;
        else    cout << s.substr(0 , cnt + ans) << s.substr(n - cnt , cnt) << endl;
    }

    return 0;
}
/*

*/