/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

vector<ll> V , g[MAXN] , gr[MAXN] , adj[MAXN];
ll n , k , A[MAXN] , B[MAXN] , inDeg[MAXN] , ans[MAXN] , val[MAXN] , mark[MAXN] , comp[MAXN];
vector<pll> E;
vector<ll> ts , TS;

void DFS1(ll v) {
    mark[v] = 1;
    for (ll u : g[v])
        if (!mark[u])
            DFS1(u);
    TS.push_back(v);
}

void DFS2(ll v, ll cmp) {
    comp[v] = cmp;
    for (ll u : gr[v])
        if (!comp[u])
            DFS2(u, cmp);
}

void SCC() {
    for (ll i = 1; i <= n; i++) {
        if (!mark[i])
            DFS1(i);
    }
    while (TS.size()) {
        ll v = TS.back();
        TS.pop_back();
        if (!comp[v]) {
            DFS2(v, v);
            V.push_back(v);
        }
    }
}

ll topoSort(){
    queue<ll> q;
    for(ll i : V){
        if(inDeg[i] == 0){
            q.push(i);
        }
    }

    while(!q.empty()){
        ll v = q.front();
        q.pop();
        ts.push_back(v);
        for(ll u : adj[v]){
            inDeg[u]--;
            if(inDeg[u] == 0)   q.push(u);
        }
    }
    return (ts.size() == V.size());
}

int main() {
    fast_io;

    cin >> n >> k;
    for(ll i = 0 ; i < n ; i++){
        cin >> A[i];
        if(i != 0){
            g[A[i - 1]].push_back(A[i]);
            gr[A[i]].push_back(A[i - 1]);
            E.push_back({A[i - 1] , A[i]});
        }
    }

    for(ll i = 0 ; i < n ; i++){
        cin >> B[i];
        if(i != 0){
            g[B[i - 1]].push_back(B[i]);
            gr[B[i]].push_back(B[i - 1]);
            E.push_back({B[i - 1] , B[i]});
        }
    }

    SCC();
    for(pll i : E){
        ll v = comp[i.X] , u = comp[i.Y];
        if(u == v) continue;
        adj[v].push_back(u);
        inDeg[u]++;
    }

    if(!topoSort()) return cout << "NO" << endl , 0;
    if(ts.size() < k)   return cout << "NO" << endl , 0;

    cout << "YES" << endl;
    for(ll i = 0 ; i < ts.size() ; i++){
        val[ts[i]] = min(25LL , i);
    }
    for(ll i = 1 ; i <= n ; i++)    ans[i] = val[comp[i]];
    for(ll i = 1 ; i <= n ; i++)    cout << char(97 + ans[i]);


    return 0;
}
/*

*/