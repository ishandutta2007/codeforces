/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n, q, mark[3][MAXN];
set<ll> bad;

ll check(ll x) {
    if (mark[1][x] && mark[2][x]) return 1;
    if (mark[1][x] && mark[2][x + 1]) return 1;
    if (mark[2][x] && mark[1][x + 1]) return 1;
    return 0;
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    cin >> n >> q;
    while (q--) {
        ll r, c;
        cin >> r >> c;
        mark[r][c] ^= 1;
        bad.erase(c);
        bad.erase(c - 1);
        if (c != n && check(c)) bad.insert(c);
        if (c != 1 && check(c - 1)) bad.insert(c - 1);
        if (SZ(bad) != 0 || mark[2][n]) cout << "No" << endl;
        else cout << "Yes" << endl;
    }

    return 0;
}
/*

*/