/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <bits/stdc++.h>

#define pb push_back
#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()
#define mp make_pair

using namespace std;

typedef long long int64;
typedef vector<int> vi;
typedef pair<int, int> ii;

class TaskE {
 public:
  void solveOne(istream &in, ostream &out) {
    int n;
    in >> n;
    vector<int64> a(n);
    for (int i = 0; i < n; ++i) {
      in >> a[i];
      a[i] *= n;
      a[i] += i;
    }
    vector<pair<int64, int>> p;
    for (int i = 0; i < n; ++i) {
      p.emplace_back(a[i], i);
    }
    sort(all(p));
    vector<int> what(n);
    for (int i = 0; i < n; ++i) {
      what[p[i].second] = i;
    }
    vector<ii> res;
    for (int v = n - 1; v >= 0; --v) {
      int at = p[v].second;
      for (int j = 0; j < at; ++j) {
        if (what[j] > v) {
          res.emplace_back(j, at);
        }
      }
    }
    out << res.size() << "\n";
    for (auto x : res) {
      out << x.first + 1 << " " << x.second + 1 << "\n";
    }
  }

  void solve(std::istream &in, std::ostream &out) {
    int nt = 1;
    for (int it = 0; it < nt; ++it) {
      solveOne(in, out);
    }
  }
};


int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  TaskE solver;
  std::istream& in(std::cin);
  std::ostream& out(std::cout);
  solver.solve(in, out);
  return 0;
}