/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */
 
#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>
 
using namespace std;
using namespace __gnu_pbds;
 
template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;
 
typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;
 
#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())
 
ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}
 
const ll MAXN = 1e6 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;
 
ll n , k , ans = INF , A[MAXN] , ps[MAXN];
map<ll , ll> cnt;
 
int main() {
    ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
 
    cin >> n >> k;
    for(ll i = 1 ; i <= n ; i++)    cin >> A[i] , cnt[A[i]]++;
    sort(A + 1 , A + n + 1);
    partial_sum(A , A + MAXN , ps);
 
    for(ll i = 1 ; i <= n ; i++) {
        if (cnt[A[i]] >= k) return cout << 0 << endl, 0;
        ll cost = i * A[i] - ps[i] + ps[n] - ps[i] - A[i] * (n - i);
        ans = min(ans, cost - n + k);
        if (i >= k) {
            ans = min(ans, i * A[i] - ps[i] - i + k);
        }
        if (n - i + 1 >= k) {
            ans = min(ans, ps[n] - ps[i - 1] - A[i] * (n - i +  1) - (n - i + 1) + k);
        }
    }
    cout << ans << endl;
 
    return 0;
}