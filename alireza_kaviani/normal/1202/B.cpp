/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

set_random;

const ll MAXN = 20;
const ll INF = 1e10;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n , cnt[MAXN] , dist[MAXN][MAXN][MAXN];
string s;

int main() {
    fast_io;

    for(ll i = 0 ; i < MAXN ; i++){
        for(ll j = 0 ; j < MAXN ; j++){
            for(ll k = 0 ; k < MAXN ; k++){
                dist[i][j][k] = INF;
            }
        }
    }

    for(ll i = 0 ; i < 10 ; i++){
        for(ll j = 0 ; j < 10 ; j++){
            for(ll k = 0 ; k < 10; k++){
                for(ll l = 0 ; l < 10 ; l++){
                    if(l + k == 0) continue;
                    dist[i][j][(i * k + j * l) % 10] = min(dist[i][j][(i * k + j * l) % 10] , k + l);
                }
            }
        }
    }

    cin >> s;
    n = s.size();
    for(ll i = 1 ; i < n ; i++) cnt[(s[i] - s[i - 1] + 10) % 10]++;

    for(ll i = 0 ; i < 10 ; i++){
        for(ll j = 0 ; j < 10 ; j++){
            ll ans = -n + 1;
            for(ll k = 0 ; k < 10 ; k++) ans += cnt[k] * dist[i][j][k];
            if(ans >= 2e9){
                cout << -1 << sep;
            }
            else{
                cout << ans << sep;
            }
        }
        cout << endl;
    }

    return 0;
}
/*

*/