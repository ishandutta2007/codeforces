/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Oleg Mingalev <oleg@mingalev.net> aka shhdup
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <cmath>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <cstdio>
#include <cstdlib>
#include <string>
#include <bitset>
#include <cassert>
#include <algorithm>

using namespace std;

typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;

#define pb push_back
#define fs first
#define sc second
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()

class TaskB {
public:
    TaskB() {
        std::ios::sync_with_stdio(false);
    }
    ld dist(const pair<ld, ld> a, const pair<ld, ld> b) {
        return sqrt((a.fs-b.fs)*(a.fs-b.fs) + (a.sc-b.sc)*(a.sc-b.sc));
    }
    ld height(pair<ld, ld> a, pair<ld, ld> b, pair<ld, ld> c) {
        b.fs -= a.fs;
        b.sc -= a.sc;
        c.fs -= a.fs;
        c.sc -= a.sc;
        a.fs = 0;
        a.sc = 0;
        ld sq = abs(b.fs*c.sc - c.fs*b.sc);
        return sq / dist(a, c);
    }
    void solve(std::istream& in, std::ostream& out) {
        int n;
        in >> n;
        vector<pair<ld, ld>> a(n);
        for (auto& it : a) {
            in >> it.first >> it.second;
        }
        a.push_back(a[0]);
        a.push_back(a[1]);
        ld ans = dist(a[0], a[1]);
        for (int i = 0; i < n; ++i) {
            ld cur = dist(a[i], a[i+1]) / 2;
            if (cur < ans) ans = cur;
        }
        for (int i = 0; i < n; ++i) {
            ld cur = height(a[i], a[i+1], a[i+2]) / 2;
            if (cur < ans) ans = cur;
            cerr << cur << endl;
        }
        out.precision(10);
        out << fixed << ans << endl;
    }
};


int main() {
    TaskB solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}