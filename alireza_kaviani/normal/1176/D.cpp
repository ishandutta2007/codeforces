/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;
typedef pair<ld, ld> pld;
typedef pair<string, string> pss;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define file_io                     freopen("in.txt" , "r+" , stdin) ; freopen("out.txt" , "w+" , stdout);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

inline ll input() {
    ll n;
    cin >> n;
    return n;
}

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

set_random;

const ll MAXN = 3e6 + 10;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n , ind = 1 , a[MAXN] , b[MAXN] , cnt[MAXN] , prime[MAXN] , d[MAXN];

int main() {
    fast_io;
    fill(prime , prime + MAXN , 1);
    fill(d , d + MAXN , INF);
    prime[0] = 0;
    prime[1] = 0;

    for(ll i = 2 ; i * i <= MAXN ; i++){
        if(prime[i]){
            for(ll j = i * i ; j < MAXN ; j += i){
                prime[j] = 0;
                d[j] = min(d[j] , i);
            }
        }
    }

    for(ll i = 0 ; i < MAXN ; i++){
        if(prime[i]){
            prime[i] = ind++;
        }
    }

    cin >> n;
    for(ll i = 0 ; i < 2 * n ; i++){
        cin >> b[i];
        cnt[b[i]]++;
    }

    ind = 0;
    sort(b , b + n + n);
    for(ll i = n + n - 1 ; i >= 0 ; i--){
        if(!prime[b[i]] && cnt[b[i]] && cnt[b[i] / d[b[i]]]){
            a[ind++] = b[i];
            cnt[b[i] / d[b[i]]]--;
            cnt[b[i]]--;
        }
        if(prime[b[i]] && prime[prime[b[i]]] && cnt[b[i]] && cnt[prime[b[i]]]){
            a[ind++] = prime[b[i]];
            cnt[b[i]]--;
            cnt[prime[b[i]]]--;
        }
    }

    for(ll i = 0 ; i < n ; i++) cout << a[i] << sep;

    return 0;
}
/*
todo :
    1- set constants
    2- check TimeLimit and MemoryLimit
    3- check special test cases
    4- don't forget BS can help you that is good idea(use for loop for floats)
    5- don't forget printf and scanf can help you in your code speed
*/