/* Generated by powerful Codeforces Tool
 * You can download the binary file in here https://github.com/xalanq/cf-tool (Windows, macOS, Linux)
 * Author: alireza_kaviani
 * Time: 2020-03-17 19:50:02
**/
#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n , m , inDeg[MAXN];
vector<pll> adj[MAXN];
vector<pair<pll , ll>> ans;

void DFS(ll v , ll root , ll mn = INF){
	if(mn != INF && SZ(adj[v]) == 0)	ans.push_back({{root , v} , mn});
	for(pll i : adj[v]){
		DFS(i.X , root , min(mn , i.Y));
	}
}

int main() {
    ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);

	cin >> n >> m;
	for(ll i = 0 ; i < m ; i++){
		ll v , u , w;
		cin >> v >> u >> w;
		adj[v].push_back({u , w});
		inDeg[u]++;
	}

	for(ll i = 1 ; i <= n ; i++){
		if(inDeg[i] == 0)	DFS(i , i);
	}
	cout << SZ(ans) << endl;
	for(pair<pll , ll> i : ans)	cout << i.X.X << sep << i.X.Y << sep << i.Y << endl;

    return 0;
}
/*

*/