/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author RiaD
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <cassert>
#include <map>
#include <vector>


#include <iterator>


#include <string>
#include <stdexcept>

#ifndef SPCPPL_ASSERT
	#ifdef SPCPPL_DEBUG
		#define SPCPPL_ASSERT(condition) \
		if(!(condition)) { \
			throw std::runtime_error(std::string() + #condition + " in line " + std::to_string(__LINE__) + " in " + __PRETTY_FUNCTION__); \
		}
	#else
		#define SPCPPL_ASSERT(condition)
	#endif
#endif


/**
* Support decrementing and multi-passing, but not declared bidirectional(or even forward) because
* it's reference type is not a reference.
*
* It doesn't return reference because
* 1. Anyway it'll not satisfy requirement [forward.iterators]/6
*   If a and b are both dereferenceable, then a == b if and only if *a and
*   b are bound to the same object.
* 2. It'll not work with reverse_iterator that returns operator * of temporary which is temporary for this iterator
*
* Note, reverse_iterator is not guaranteed to work  now too since it works only with bidirectional iterators,
* but it's seems to work at least on my implementation.
*
* It's not really useful anywhere except iterating anyway.
*/
template <typename T>
class IntegerIterator {
public:
	using value_type = T;
	using difference_type = std::ptrdiff_t;
	using pointer = T*;
	using reference = T;
	using iterator_category = std::input_iterator_tag;

	explicit IntegerIterator(T value): value(value) {

	}

	IntegerIterator& operator++() {
		++value;
		return *this;
	}

	IntegerIterator operator++(int) {
		IntegerIterator copy = *this;
		++value;
		return copy;
	}

	IntegerIterator& operator--() {
		--value;
		return *this;
	}

	IntegerIterator operator--(int) {
		IntegerIterator copy = *this;
		--value;
		return copy;
	}

	T operator*() const {
		return value;
	}

	bool operator==(IntegerIterator rhs) const {
		return value == rhs.value;
	}

	bool operator!=(IntegerIterator rhs) const {
		return !(*this == rhs);
	}

private:
	T value;
};

template <typename T>
class IntegerRange {
public:
	IntegerRange(T begin, T end): begin_(begin), end_(end) {
		SPCPPL_ASSERT(begin <= end);
	}

	IntegerIterator<T> begin() const {
		return IntegerIterator<T>(begin_);
	}

	IntegerIterator<T> end() const {
		return IntegerIterator<T>(end_);
	}

private:
	T begin_;
	T end_;
};

template <typename T>
class ReversedIntegerRange {
	using IteratorType = std::reverse_iterator<IntegerIterator<T>>;
public:
	ReversedIntegerRange(T begin, T end): begin_(begin), end_(end) {
		SPCPPL_ASSERT(begin >= end);
	}

	IteratorType begin() const {
		return IteratorType(IntegerIterator<T>(begin_));
	}

	IteratorType end() const {
		return IteratorType(IntegerIterator<T>(end_));
	}

private:
	T begin_;
	T end_;
};

template <typename T>
IntegerRange<T> range(T to) {
	return IntegerRange<T>(0, to);
}

template <typename T>
IntegerRange<T> range(T from, T to) {
	return IntegerRange<T>(from, to);
}

template <typename T>
IntegerRange<T> inclusiveRange(T to) {
	return IntegerRange<T>(0, to + 1);
}

template <typename T>
IntegerRange<T> inclusiveRange(T from, T to) {
	return IntegerRange<T>(from, to + 1);
}

template <typename T>
ReversedIntegerRange<T> downrange(T from) {
	return ReversedIntegerRange<T>(from, 0);
}

template <typename T>
ReversedIntegerRange<T> downrange(T from, T to) {
	return ReversedIntegerRange<T>(from, to);
}

template <typename T>
ReversedIntegerRange<T> inclusiveDownrange(T from) {
	return ReversedIntegerRange<T>(from + 1, 0);
}

template <typename T>
ReversedIntegerRange<T> inclusiveDownrange(T from, T to) {
	return ReversedIntegerRange<T>(from + 1, to);
}

//#define PROBLEM "problem_name.h"
//#include PROBLEM
//#include <message.h>
//#include <spcppl/dgcj.h>

using namespace std;

class CBalansSumm {
public:
	static constexpr int kStressCount = 0;
	static void generateTest(std::ostream& test) {
	}
	void solve(std::istream& in, std::ostream& out) {
		//static int testnumber = 0;
		//out << "Case #" << ++testnumber << ": ";

		int k;
		in >> k;
		vector<vector<int>> a(k);
		map<int, pair<int, int>> where;
		int64_t sum = 0;
		vector<int64_t> boxsum(k);
		for (int i: range(k)) {
			int y;
			in >> y;
			a[i].resize(y);
			for (int x: range(y)) {
				in >> a[i][x];
				sum += a[i][x];
				boxsum[i] += a[i][x];
				where[a[i][x]] = {i, x};
			}
		}

		if (sum % k != 0) {
			out << "No";
			return;
		}
		int64_t expected = sum / k;

		vector<vector<pair<int, int>>> masks(1<<k);

		for (int startBox: range(k)) {
			for (int startValue: a[startBox]) {
				unsigned mask = 0;
				int box = startBox;
				int value = startValue;
				vector<pair<int, int>> values = {{box, value}};
				while (true) {
					int64_t needDelta = expected - boxsum[box];
					int64_t needValue = value + needDelta;

					if (abs(needValue) > 1000000000 || !where.count(needValue)) {
						break;
					}

					auto p = where[needValue];
					box = p.first;
					value = a[p.first][p.second];
					if (mask & (1u << box)) {
						break;
					}
					mask |= (1u << box);
					if (box == startBox) {
						if (value == startValue) {
							if (masks[mask].empty()) {
								masks[mask] = move(values);
							}
						}
						break;
					}
					values.emplace_back(box, value);
				}
			}
		}

		vector<char> ans(1 << k);

		for (int i: range(1 << k)) {
			ans[i] = masks[i].size() > 0 || i == 0;
			for (int subMask = i; subMask > 0; subMask = (subMask - 1) & i) {
				if (ans[subMask] && ans[i & ~subMask]) {
					ans[i] = true;
				}
			}
		}

		if (!ans.back()) {
			out << "No\n";
			return;
		}

		vector<pair<int, int>> res(k);

		out << "Yes\n";

		auto go = [&](auto& go, int mask) {
			if (mask == 0) {
				return;
			}
			if (masks[mask].empty()) {
				for (int subMask = mask; subMask > 0; subMask = (subMask - 1) & mask) {
					if (subMask != mask && ans[subMask] && ans[mask & ~subMask]) {
						go(go, subMask);
						go(go, mask & ~subMask);
						return;
					}
				}
				assert(false);
			} else {
				for (int i: range(masks[mask].size())) {
					auto cur = masks[mask][i];
					auto nex = masks[mask][(i + 1) % masks[mask].size()];
					res[nex.first] = {nex.second, cur.first};
				}
			}
		};

		go(go, (1 << k) - 1);

		for (auto p :res) {
			out << p.first << ' ' << p.second + 1 << "\n";
		}
	}
};


int main() {
	std::ios_base::sync_with_stdio(false);
	CBalansSumm solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	in.tie(nullptr);
	out << std::fixed;
	out.precision(20);
	solver.solve(in, out);
	return 0;
}