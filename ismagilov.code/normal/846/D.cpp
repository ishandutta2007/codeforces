/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Azat Ismagilov
 */

/**********.*****.**************************:-******-:*******************
**********......:*****************+@%@*+#@@@+.****.***********************
...------........-*+*********+%#####@@@##########*************************
********:........----------%@#####################@@-...............------
**********......:********@%#####@###################@#@=+***************::
*********.:****--******%##@#####@#######################@*+***************
********.*******:-**+@@####@#@@@#################@#########=**************
*******-*********:*@@@######@###############################=*************
*****--**********%%@##@########@#############################=:***********
****.************+##################@#@@#####################@************
***.*************%######################@@###################=***********-
*-:**************=##########@@%%%%=%@=%=%=%@################@@**********.*
.****************########%++***+++****+++=+===+++***+=%@######%*******:-**
****************+#######%+*::::::::::::***********:::::**@@###%******.:***
****************#######@%*:::::::::::::::*:*****:::::::::*@@##@*****.*****
****************######@%+*:::::::-::::::::::::::::::::::::=@##%****-******
.......-------:*######=::::::----------:::::::::::::::::::+###:**--*******
............:==:%####=:::::----:-:::::::::::::::::::::::::=@##:-.:********
************=@++*%##@::::*=%%%@@###@=***::::::::::::::::::=@#@*..*********
************=**+@+@#*:::**+++%@#@###%@%%+*::*+=======*::::*##-:**.********
*************:=%%:%*::::*+=%##%###=@@@%=*::*=%@@@%%@@#@%::+#@:****.*******
:**************==:=:::--::::*++++=%@@@%*:--*%#@####@#=+***@@%@*****.******
--**************:-*::--------::**+***:::---*+%%%%%%@@%+*::#*@%******.*****
*:-************---*::::-----------::--:---::::+++++**:::::%*%********-:***
**:.************++*:::::--------::**+------::::::::::::::*++**********--**
****.**************::::::-----::**==:-------+*:::::---:::**************:-*
*****.***********.*::::::::-:::***:*+@**::**=+*::::::::::****************-
******.*:*%@######+::::::::::::::::::++++=******::::::::******************
******:############*::::::::****::::::*+*:*:*:***::::::*******************
******#############***::*:*:*+==@@##=======:*+***:::*:********************
******#############:*+**********:*++**+**++=%=***:*::*********************
.....##############::*++**************+***:*********###+******************
***:##############@*:**+=***:::**++===++***********#####%.................
*:*###############******++=+*:::::::*:::::*::***#########=****************
**:################%*****++==++********::::*+++=##########+***************
*:%##################******++++==+=++++++++++++@############**************
######################@******+++++++++++++++++=%#############*************
########################+++++++++++++++++++++==@#############@***********.
#########################%+++++++++++++++++===%###############%********:-*
########################@=#=++++++++++++====%@##################******-**/

#include <bits/stdc++.h>

#define fs first
#define sc second
#define pb push_back
#define ppb pop_back
#define pf push_front
#define ppf pop_front
#define mp make_pair
#define len(v) ((int)v.size())
#define vc vector
#define pr pair
#define endd "\n"; return 0;
#define all(v) v.begin(), v.end()

using namespace std;

const int MAXN = 600;
const int INF = 2e9;
const int MOD = 1e9 + 7;

int t[MAXN][4 * MAXN];
int a[MAXN][MAXN];

void build(int v, int l, int r, int kek) {
    if (l == r) {
        t[kek][v] = a[kek][l];
        return;
    }
    int mid = (l + r) / 2;
    build(2 * v, l, mid, kek);
    build(2 * v + 1, mid + 1, r, kek);
    t[kek][v] = max(t[kek][2 * v], t[kek][2 * v + 1]);
}

int maxx(int v, int l, int r, int tl, int tr, int kek) {
    if (tl <= l && r <= tr) {
        return t[kek][v];
    }
    if (l > tr || r < tl) {
        return -INF;
    }
    int mid = (l + r) / 2;
    return max(maxx(2 * v, l, mid, tl, tr, kek), maxx(2 * v + 1, mid + 1, r, tl, tr, kek));
}

class TaskD {
public:
    void solve(std::istream &in, std::ostream &out) {
        int n, m, k, q;
        in >> n >> m >> k >> q;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                a[i][j] = INF;
            }
        }
        for (int i = 0; i < q; i++) {
            int x, y, t;
            in >> x >> y >> t;
            x--;
            y--;
            a[x][y] = min(a[x][y], t);
        }
        for (int i = 0; i < n; i++) {
            build(1, 0, m - 1, i);
        }
        int ans = INF;
        for (int j = 0; j <= m - k; j++) {
            int kek[n];
            for (int i = 0; i < n; i++) {
                kek[i] = maxx(1, 0, m - 1, j, j + k - 1, i);
            }
            int tekans = 0;
            multiset<int> lel;
            for (int i = 0; i < k; i++) {
                lel.insert(kek[i]);
            }
            ans = min(ans, *lel.rbegin());
            for (int i = 1; i <= n - k; i++) {
                lel.erase(lel.find(kek[i - 1]));
                lel.insert(kek[i + k - 1]);
                ans = min(ans, *lel.rbegin());
            }
        }
        if (ans == INF) {
            out << -1;
        } else {
            out << ans;
        }
    }
};


main() {
    TaskD solver;
    std::istream &in(std::cin);
    std::ostream &out(std::cout);
    solver.solve(in, out);
    return 0;
}