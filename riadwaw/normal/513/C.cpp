/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author RiaD
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <vector>

using namespace std;

class TaskC {
public:
	void solve(std::istream& in, std::ostream& out) {
		int n;
		in >> n;
		vector<int> l(n);
		vector<int> r(n);
		for(int i = 0; i < n; ++i) {
			in >> l[i] >> r[i];
		}
		double ans = 0.0;
		for(int second = 1; second <= 100000; ++second) {
			for (int mask = 1; mask < (1 << n); ++mask) {
				for(int first = 0; first < n + 1; ++first) {
					if((1 << first) & mask)
						continue;

					if((mask & (mask - 1)) == 0 && first == n)
						continue;
					double p = 1;
					for (int i = 0; i < n; ++i) {
						if(i == first) {
							p *= max(0, r[i] - max(l[i], second + 1) + 1) / 1.0 /(r[i] - l[i] + 1);
						}
						else if((1 << i) & mask) {
							p *= pp(l[i], r[i], second);
						}
						else {
							p *= max(0, min(r[i], second - 1) - l[i] + 1) / 1.0 / (r[i] - l[i] + 1);
						}
					}
					ans += p * second;
				}
			}
		}
		out << ans;
	}

	double pp(int l, int r, int v) {
		if(v > r)
			return 0;
		if(v < l)
			return 0;
		return 1.0 / (r - l + 1);
	}
};


int main() {
	std::cin.sync_with_stdio(false);
	std::cin.tie(0);
	std::cout << std::fixed;
	std::cout.precision(20);
	TaskC solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}