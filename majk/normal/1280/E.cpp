/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author majk
 */

#ifndef MAJK_LIB
#define MAJK_LIB

#include <vector>
#include <stack>
#include <iostream>
#include <fstream>
#include <unordered_map>
#include <unordered_set>
#include <map>
#include <iomanip>
#include <set>
#include <functional>
#include <algorithm>
#include <numeric>
#include <cassert>
#include <cmath>
#include <string>
#include <queue>
#include <array>
#include <bitset>
using namespace std;

#define x first
#define y second
typedef std::pair<int,int> pii; typedef long long ll; typedef unsigned long long ull; typedef unsigned int ui; typedef pair<ui,ui> puu;

template <typename T, typename U> std::istream&operator>>(std::istream&i, pair<T,U>&p) {i >> p.x >> p.y; return i;}
template<typename T>std::istream&operator>>(std::istream&i,vector<T>&t) {for(auto&v:t){i>>v;}return i;}
template <typename T, typename U> std::ostream&operator<<(std::ostream&o, const pair<T,U>&p) {o << p.x << ' ' << p.y; return o;}
template<typename T>std::ostream&operator<<(std::ostream&o,const vector<T>&t) {if(t.empty())o<<'\n';for(size_t i=0;i<t.size();++i){o<<t[i]<<" \n"[i == t.size()-1];}return o;}
template<typename T> using minheap = priority_queue<T, vector<T>, greater<T>>;
template<typename T> using maxheap = priority_queue<T, vector<T>, less<T>>;
ui logceil(ll x) { return x?8*sizeof(ll)-__builtin_clzll(x):0; }

namespace std { template<typename T,typename U>struct hash<pair<T,U>>{hash<T>t;hash<U>u;size_t operator()(const pair<T,U>&p)const{return t(p.x)^(u(p.y)<<7);}}; }
template<typename T,typename F>T bsh(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){l=m+1;r=m;}else{h=m-1;}}return r;}
template<typename F> double bshd(double l,double h,const F&f,double p=1e-9){ui r=3+(ui)log2((h-l)/p);while(r--){double m=(l+h)/2;if(f(m)){l=m;}else{h=m;}}return (l+h)/2;}
template<typename T,typename F>T bsl(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){h=m-1;r=m;}else{l=m+1;}}return r;}
template<typename F> double bsld(double l,double h,const F&f,double p=1e-9){ui r=3+(ui)log2((h-l)/p);while(r--){double m=(l+h)/2;if(f(m)){h=m;}else{l=m;}}return (l+h)/2;}
template<typename T> T gcd(T a,T b) { if (a<b) swap(a,b); return b?gcd(b,a%b):a; }


template<typename T>class vector2:public vector<vector<T>>{public:vector2(){} vector2(size_t a,size_t b,T t=T()):vector<vector<T>>(a,vector<T>(b,t)){}};
template<typename T>class vector3:public vector<vector2<T>>{public:vector3(){} vector3(size_t a,size_t b,size_t c,T t=T()):vector<vector2<T>>(a,vector2<T>(b,c,t)){}};
template<typename T>class vector4:public vector<vector3<T>>{public:vector4(){} vector4(size_t a,size_t b,size_t c,size_t d,T t=T()):vector<vector3<T>>(a,vector3<T>(b,c,d,t)){}};
template<typename T>class vector5:public vector<vector4<T>>{public:vector5(){} vector5(size_t a,size_t b,size_t c,size_t d,size_t e,T t=T()):vector<vector4<T>>(a,vector4<T>(b,c,d,e,t)){}};


#endif

struct Node {
    int resId;
    int x;
    bool ser;
    vector<Node*> nodes;
};

class EKirchhoffsCurrentLoss {
public:
    int id; ll R;
    vector<ll> Ans;

    void put(Node* n, int val) {
        if (n->resId != -1) {
            Ans[n->resId] = R*val;
        } else if (n->ser) {
            for (Node*o:n->nodes) {
                if (o->x == n->x) { put(o, val); val = 0; } else put(o, 0);
            }
        } else {
            for (Node*o:n->nodes) put(o, val);
        }
    }

    Node* readRes(const string& S, int &i) {
        if (S[i] == '*') {
            ++i;
            return new Node{id++, 1};
        } else {
            Node* n = new Node{-1};
            ++i;
            while (true) {
                n->nodes.push_back(readRes(S, i));
                if (S[i] == 'S') { n->ser = true; ++i; }
                else if (S[i] == 'P') { n->ser = false; ++i; }
                else {
                    ++i;
                    if (n->ser) {
                        n->x = n->nodes[0]->x;
                        for (Node* o: n->nodes) n->x = min(n->x, o->x);
                    } else {
                        n->x = 0;
                        for (Node* o: n->nodes) n->x += o->x;
                    }
                    return n;
                }
            }
        }
    };

    void print(Node*n, ostream&cout) {
        cout << "[" << n->x << "]";
        if (n->resId != -1) {
            cout << n->resId;
        } else {
            for (int i = 0; i < n->nodes.size(); ++i) {
                if (i == 0) cout << "(";
                else cout << "PS"[n->ser] << " ";
                print(n->nodes[i], cout);
                cout << " )"[i==n->nodes.size()-1];
            }
        }
    }

    void solve(istream& cin, ostream& cout) {
        int T; cin >> T;
        for (int t = 0; t < T; ++t) {
            cin >> R;
            int bal = 0;
            string S;
            do {
                char c; cin >> c;
                S += c;
                if (c == '(') ++bal;
                else if (c == ')') --bal;
            } while (bal > 0);
            id = 0;
            int i = 0;
            Node *n = readRes(S, i);
//            print(n, cout);
            Ans.resize(id);
            put(n, n->x);
//            cout << n->x << endl;
            cout << "REVOLTING " << Ans;
        }
    }
};


int main() {
	ios_base::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr);
	EKirchhoffsCurrentLoss solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
    return 0;
}