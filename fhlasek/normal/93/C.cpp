/* Writen by Filip Hlasek 2011 */
#include <cstdio>
#include <cstdlib>
#include <vector>
#include <queue>
#include <stack>
#include <set>
#include <string>
#include <algorithm>
#include <cmath>

#define FOR(i,n) for(i=0;i<n;i++)

using namespace std;

int N;
vector<int> best;
vector<int> tmp;
vector<int> aa;

const int P[]={1,2,4,8};

void add(int x){
  int i;
  FOR(i,tmp.size()) if(x==tmp[i]) return;
  FOR(i,aa.size()) if(x==aa[i]) return;
  tmp.push_back(x);
}


void go(vector<int> a){
  int A=a.size(),i,j,k;
  aa=a;
  if(A>=best.size()||A>6) return;
  if(a[A-1]==N){
    if(A<best.size()) best=a;
  }
  else{
    tmp.clear();
    vector<int> TMP;
    FOR(i,a.size()) FOR(k,4) add(P[k]*a[i]);
    FOR(i,a.size()) FOR(j,a.size()) FOR(k,4) add(a[i]+P[k]*a[j]);
    TMP=tmp;
    FOR(i,TMP.size()){
      if(TMP[i]>N) continue;
      vector<int> n=a;
      n.push_back(TMP[i]);
      go(n);
    }
  }
}

int dp[256][10]={{0},{1},{1,2},{1,3},{1,4},{1,5},{1,2,6},{1,3,7},{1,8},{1,9},{1,2,10},{1,3,11},{1,4,12},{1,3,13},{1,2,3,14},{1,3,15},{1,2,16},{1,2,17},{1,2,18},{1,9,19},{1,4,20},{1,5,21},{1,2,5,22},{1,3,5,23},{1,8,24},{1,3,25},{1,2,3,26},{1,3,27},{1,4,3,28},{1,3,5,29},{1,2,6,30},{1,3,7,31},{1,4,32},{1,4,33},{1,2,4,34},{1,2,17,35},{1,4,36},{1,9,37},{1,2,9,38},{1,3,9,39},{1,8,40},{1,5,41},{1,2,5,42},{1,3,5,43},{1,4,5,44},{1,5,45},{1,5,6,46},{1,3,11,47},{1,2,16,48},{1,2,6,49},{1,2,6,50},{1,2,17,51},{1,4,6,52},{1,3,13,53},{1,2,6,54},{1,3,13,55},{1,8,12,56},{1,3,7,57},{1,2,3,7,58},{1,3,7,59},{1,4,12,60},{1,3,15,61},{1,2,3,15,62},{1,3,7,63},{1,8,64},{1,8,65},{1,2,8,66},{1,4,33,67},{1,2,17,68},{1,2,17,69},{1,2,17,70},{1,2,3,17,71},{1,8,72},{1,9,73},{1,2,9,74},{1,3,9,75},{1,4,9,76},{1,5,9,77},{1,2,3,26,78},{1,2,3,19,79},{1,2,16,80},{1,9,81},{1,2,10,82},{1,5,41,83},{1,4,20,84},{1,2,17,85},{1,2,5,21,86},{1,5,41,87},{1,8,10,88},{1,3,11,89},{1,2,10,90},{1,3,11,91},{1,2,5,45,92},{1,5,11,93},{1,2,6,22,94},{1,5,45,95},{1,4,32,96},{1,4,12,97},{1,2,4,12,98},{1,4,33,99},{1,4,12,100},{1,3,25,101},{1,2,4,34,102},{1,3,25,103},{1,8,12,104},{1,3,13,105},{1,2,3,13,106},{1,3,13,107},{1,4,12,108},{1,3,27,109},{1,2,3,27,110},{1,3,27,111},{1,2,16,24,112},{1,9,13,113},{1,2,3,14,114},{1,2,3,14,115},{1,4,3,28,116},{1,3,13,117},{1,2,6,14,118},{1,2,17,51,119},{1,8,24,120},{1,3,15,121},{1,2,3,15,122},{1,3,15,123},{1,4,3,15,124},{1,3,25,125},{1,2,3,14,126},{1,3,7,15,127},{1,2,16,128},{1,2,16,129},{1,2,16,130},{1,8,65,131},{1,4,16,132},{1,4,33,133},{1,2,4,33,134},{1,3,15,135},{1,2,17,136},{1,2,17,137},{1,2,17,138},{1,2,3,17,139},{1,4,17,140},{1,2,5,17,141},{1,2,17,35,142},{1,4,3,35,143},{1,2,16,144},{1,2,18,145},{1,2,18,146},{1,9,73,147},{1,4,36,148},{1,9,37,149},{1,2,9,37,150},{1,3,9,37,151},{1,8,72,152},{1,2,17,153},{1,2,3,19,154},{1,9,73,155},{1,4,3,19,156},{1,9,37,157},{1,4,6,38,158},{1,3,9,39,159},{1,4,32,160},{1,4,20,161},{1,2,18,162},{1,9,81,163},{1,4,20,164},{1,4,33,165},{1,2,5,41,166},{1,4,33,67,167},{1,8,40,168},{1,5,21,169},{1,2,4,34,170},{1,9,19,171},{1,2,17,36,172},{1,5,21,173},{1,2,10,41,174},{1,2,17,35,175},{1,2,16,20,176},{1,2,5,22,177},{1,2,5,22,178},{1,8,17,81,179},{1,4,20,180},{1,5,45,181},{1,2,5,45,182},{1,3,5,45,183},{1,4,5,45,184},{1,5,45,185},{1,2,10,22,186},{1,2,17,51,187},{1,4,12,44,188},{1,5,21,189},{1,2,9,38,190},{1,3,11,45,191},{1,8,64,192},{1,8,24,193},{1,2,8,24,194},{1,8,65,195},{1,2,6,49,196},{1,2,6,49,197},{1,2,8,66,198},{1,4,33,67,199},{1,8,24,200},{1,3,25,201},{1,2,3,25,202},{1,3,25,203},{1,2,17,68,204},{1,5,41,205},{1,2,17,70,206},{1,2,17,69,207},{1,2,16,24,208},{1,2,3,26,209},{1,2,3,26,210},{1,2,3,26,211},{1,4,6,52,212},{1,4,17,49,213},{1,2,6,26,214},{1,3,5,43,215},{1,8,24,216},{1,3,27,217},{1,2,3,27,218},{1,3,27,219},{1,4,3,27,220},{1,2,17,51,221},{1,2,9,74,222},{1,3,7,27,223},{1,4,32,48,224},{1,3,25,225},{1,2,18,26,226},{1,4,3,28,227},{1,4,3,28,228},{1,4,33,49,229},{1,4,6,28,230},{1,4,33,99,231},{1,8,5,28,232},{1,3,5,29,233},{1,2,3,26,234},{1,3,5,29,235},{1,4,12,28,236},{1,3,5,29,237},{1,5,6,29,238},{1,3,7,29,239},{1,2,16,48,240},{1,2,6,30,241},{1,2,6,30,242},{1,3,27,243},{1,4,6,30,244},{1,2,6,49,245},{1,2,6,30,246},{1,3,13,117,247},{1,8,10,30,248},{1,3,7,31,249},{1,2,6,50,250},{1,3,7,31,251},{1,4,3,28,252},{1,3,7,63,253},{1,2,3,7,63,254},{1,2,17,51,255}};
int main(int argc, char *argv[]){
  scanf("%d",&N);
  int i;
  FOR(i,100) best.push_back(1);
  tmp.push_back(1);
/*  if(N>182){
    go(tmp);
    FOR(i,best.size()) dp[N][i]=best[i];
  }*/
/*    printf("{");
    FOR(i,best.size()){ if(i) printf(","); printf("%d",best[i]); }
    printf("}");*/
  int p,j,k,M;
  bool ok=true;
  for(i=0;dp[N][i]!=N;i++);
  M=i;
  printf("%d\n",M);
  FOR(p,M){
    ok=false;
    FOR(i,p+1){
      if(ok) break;
      FOR(k,4){
        if(P[k]*dp[N][i]==dp[N][p+1]){
          printf("lea e%cx, [%d*e%cx]\n",'b'+p,P[k],'a'+i);
          ok=true;
          break;
        }
      }
    }
    if(ok) continue;
    FOR(i,p+1){
      if(ok) break;
      FOR(j,p+1){
        if(ok) break;
        FOR(k,4){
          if(dp[N][i]+P[k]*dp[N][j]==dp[N][p+1]){
            printf("lea e%cx, [e%cx + %d*e%cx]\n",'b'+p,'a'+i,P[k],'a'+j);
            ok=true;
            break;
          }
        }
      }
    }
  }
  return 0;
}