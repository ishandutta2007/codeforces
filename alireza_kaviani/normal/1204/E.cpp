/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 2e3 + 10;
const ll INF = 8e18;
const ll MOD = 998244853; // 1e9 + 9;

ll n , m , ans , dp[MAXN][MAXN] , dp2[MAXN][MAXN];

int main() {
    fast_io;
    for(ll i = 0 ; i < MAXN ; i++)  dp[0][i] = 1 , dp2[0][i] = 1;
    for(ll i = 1 ; i < MAXN ; i++){
        for(ll j = 1 ; j < MAXN ; j++){
            if(i > j) continue;
            dp2[i][j] = (dp2[i][j - 1] + dp2[i - 1][j]) % MOD;
            if(i == j) continue;
            dp[i][j] = (dp[i][j - 1] + dp[i - 1][j]) % MOD;
        }
    }

    cin >> n >> m;

    for(ll i = 0 ; i <= n ; i++){
        for(ll j = 0 ; j <= m ; j++){
            if(i > j){
                ans = (ans + dp[n - i][m - j] * dp2[j][i] % MOD * (i - j) % MOD) % MOD;
            }
        }
    }
    cout << ans << endl;

    return 0;
}
/*

*/