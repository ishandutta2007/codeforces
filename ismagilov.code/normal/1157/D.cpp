/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Azat Ismagilov
 */

#include <fstream>

#include <iostream>
#include <algorithm>
#include <vector>
#include <numeric>

#define int long long
#define fs first
#define sc second
#define pb push_back
#define ppb pop_back
#define pf push_front
#define ppf pop_front
#define mp make_pair
#define len(v) ((int)v.size())
#define vc vector
#define pr pair
#define all(v) v.begin(), v.end()
//#pragma GCC optimize("Ofast")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,tune=native")
//#pragma GCC optimize("unroll-loops")

using namespace std;

template<typename T, typename U>
inline ostream &operator<<(ostream &_out, const pair<T, U> &_p) {
    _out << _p.first << ' ' << _p.second;
    return _out;
}

template<typename T, typename U>
inline istream &operator>>(istream &_in, pair<T, U> &_p) {
    _in >> _p.first >> _p.second;
    return _in;
}

template<typename T>
inline ostream &operator<<(ostream &_out, const vector<T> &_v) {
    if (_v.empty()) { return _out; }
    _out << _v.front();
    for (auto _it = ++_v.begin(); _it != _v.end(); ++_it) { _out << ' ' << *_it; }
    return _out;
}

template<typename T>
inline istream &operator>>(istream &_in, vector<T> &_v) {
    for (auto &_i : _v) { _in >> _i; }
    return _in;
}

const int MAXN = 1e5;
const int INF = 1e9;
const int MOD = 1e9 + 7;

class DNZadachZaKDnei {
public:
    void solve(std::istream &in, std::ostream &out) {
        int n, k;
        in >> n >> k;
        vc<int> ans;
        int sum = 0;
        for (int i = 0; i < k; i++) {
            int l = 0;
            int r = n + 1;
            if (len(ans) > 0) {
                l = ans.back();
                r = 2 * ans.back() + 1;
            }
            while (r - l > 1) {
                int mid = (l + r) / 2;
                if (sum + (k - i) * (2 * mid + k - i - 1) / 2 <= n) {
                    l = mid;
                } else {
                    r = mid;
                }
            }
            if (l < 1 || (len(ans) > 0 && (l <= ans.back() || l > ans.back() * 2))) {
                out << "NO";
                return;
            }
            n -= l;
            ans.push_back(l);
        }
        if (n == 0) {
            out << "YES\n" << ans;
        } else {
            out << "NO";
        }
    }
};


main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    DNZadachZaKDnei solver;
    std::istream &in(std::cin);
    std::ostream &out(std::cout);
    solver.solve(in, out);
    return 0;
}