/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author RiaD
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <vector>
#include <algorithm>


class DSU {
public:
	DSU(size_t n): dsu(n) {
		for (size_t i = 0; i < n; ++i) {
			dsu[i] = i;
		}
	}

	size_t getSet(size_t v) {
		if (v == dsu[v]) {
			return v;
		}
		return dsu[v] = getSet(dsu[v]);
	}

	void unite(size_t u, size_t v) {
		u = getSet(u);
		v = getSet(v);
		dsu[v] = u;
	}
private:
	std::vector<size_t> dsu;
};


class B {
public:
	void solve(std::istream& in, std::ostream& out) {
		int n;
		in >> n;
		std::vector<int> a(n);
		DSU dsu(n);
		for(int i = 0; i < n; ++i) {
			in >> a[i];
			//--a[i];
		}
		std::string s;
		for(int i = 0; i < n; ++i) {
			in >> s;
			for (int j = 0; j < n; ++j) {
				if (s[j] == '1') {
					dsu.unite(i, j);
				}
			}
		}

		for (int set = 0; set < n; ++set) {
			std::vector<int> indices;
			std::vector<int> values;
			for(int i = 0; i < n; ++i) {
				if (dsu.getSet(i) == set) {
					indices.push_back(i);
					values.push_back(a[i]);
				}
			}
			std::sort(values.begin(), values.end());
			for (int i = 0; i < indices.size(); ++i) {
				a[indices[i]] = values[i];
			}
		}

		for (int i = 0; i < n; ++i) {
			out << a[i] << ' ';
		}

	}
};


int main() {
	std::cin.sync_with_stdio(false);
	std::cin.tie(0);
	std::cout << std::fixed;
	std::cout.precision(20);
	B solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}