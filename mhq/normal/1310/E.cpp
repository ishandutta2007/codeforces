#pragma GCC optimize("O3")
#include <bits/stdc++.h>
using namespace std;
typedef long double ld;
typedef long long ll;
vector < int > make_step(vector < int > f) {
    sort(f.begin(), f.end());
    reverse(f.begin(), f.end());
    vector < int > gg;
    for (int i = 0; i < f.size(); i++) {
        for (int j = 0; j < f[i]; j++) gg.push_back(i + 1);
    }
    return gg;
}
int n, k;
const int mod = 998244353;
int sum(int a, int b) {
    int s = a + b;
    if (s >= mod) s -= mod;
    return s;
}
int ans;

const int maxN = 2040;
//int anses[maxN];
bool is_ok(vector < int >& f) {
    vector < int > c = f;
//    cout << "K " << k << endl;
//    for (int v : c) cout << v << " ";
    for (int p = 0; p < k; p++) {
        vector < int > ng = make_step(c);
        c = ng;
        if (c.size() > n) return false;
    }
//    for (int v : c) cout << v << " ";
//    cout << endl;
    return true;
}
void gen(const vector < int >& what, int at_least) {
    ans++;
    for (int p = at_least; ; p++) {
        vector < int > nf = what;
        nf.push_back(p);
        if (!is_ok(nf)) return;
        gen(nf, p);
    }
}
int sub(int a, int b) {
    int s = a - b;
    if (s < 0) s += mod;
    return s;
}
int mult(int a, int b) {
    return (1LL * a * b) % mod;
}
int dp[maxN][maxN];
int anses[2021]={};
int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
  //  freopen("input.txt", "w", stdout);
 //   freopen("output.txt", "w", stdout);
    cin >> n >> k;
    //n = 2020; k = 3;
    if (k == 3) {
        int tot = 0;
        for (int i = 1; i <= n; i++) tot += anses[i];
        cout << tot;
        return 0;
    }
    if (k >= 10) {
        cout << 1;
        return 0;
    }
    if (k == 1) {
        dp[0][0] = 1;
        int ans = 0;
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= i; j++) {
                dp[i][j] = sum(dp[i - j][j], dp[i - 1][j - 1]);
                ans = sum(ans, dp[i][j]);
            }
        }
        cout << ans;
        return 0;
    }
    if (k == 2) {
        dp[0][0] = 1;
        int ans = 0;
        for (int k = 1; ; k++) {
            int c = (k * (k + 1)) / 2;
            //cout << c << " HERE" << endl;
            if (c > n) break;
            for (int tot = 0; tot <= n; tot++) {
                for (int d = 0; d * c + tot <= n; d++) {
                    dp[d * c + tot][k] = sum(dp[d * c + tot][k], dp[tot][k - 1]);
                }
            }
            for (int p = 1; p <= n; p++) {
                if (p >= c) {
                    ans = sum(ans, dp[p - c][k]);
                }
            }
        }
        cout << ans;
        return 0;
    }


    for (int i = 1; ; i++) {
        vector < int > qq = {i};
        //cerr << i << endl;
        if (!is_ok(qq)) break;
        gen(qq, i);
    }
    /*int pppp = 0;
    cout << "anses[2021]={";
    for (int i = 0; i <= 2020; i++) {
        cout << anses[i] << ",";
        pppp += anses[i];
    }
    cout << "}";
    cout << pppp << endl;
    exit(0);*/
    cout << ans;
    /*vector < int > p = {2};
    for (int it = 0; it < 9; it++) {
        auto r = make_step(p);
        p = r;
    }*/
    return 0;
}