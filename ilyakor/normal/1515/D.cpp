/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <algorithm>
#include <queue>
#include <vector>
#include <set>
#include <map>
#include <cassert>
#include <functional>
#include <sstream>
#include <cmath>

#include <cstring>
#include <cstdio>

using namespace std;

typedef pair<int, int> ii;
typedef long long int64;
typedef vector<int> vi;

#define pb push_back
#define mp make_pair
#define all(v) (v).begin(),(v).end()
#define sz(v) ((int)(v).size())

template<class T> T abs(T x) { return x >= 0 ? x : -x; }
template<class T> T sqr(T x) { return x * x; }

class TaskD {
public:
	void solve(std::istream& in, std::ostream& out) {
	    int n;
	    int L, R;
	    in >> n >> L >> R;
	    vi a(n + 1, 0);
	    for (int i = 0; i < n; ++i) {
	        int x;
	        in >> x;
	        if (i < L) a[x] += 1;
	        else a[x] -= 1;
	    }
	    int numPlus = 0, numMinus = 0, sumPlus = 0, sumMinus = 0;
        int res = 0;
        for (int x : a) if (x) {
            res += abs(x);
	        if (abs(x) % 2) {
	            if (x > 0) ++numPlus;
	            else ++numMinus;
	        }
	        if (x > 0) sumPlus += x;
	        else sumMinus -= x;
	    }
	    res /= 2;
	    int t = max(numPlus - sumMinus, numMinus - sumPlus);
	    if (t > 0) {
	        assert(t % 2 == 0);
            res += t / 2;
        }
	    out << res << "\n";
	}
};


int main() {
	TaskD solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	int n;
in >> n;
for(int i = 0; i < n; ++i) {
	solver.solve(in, out);
}

	return 0;
}