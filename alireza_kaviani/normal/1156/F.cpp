/* Generated by powerful Codeforces Tool
 * You can download the binary file in here https://github.com/xalanq/cf-tool (Windows, macOS, Linux)
 * Author: alireza_kaviani
 * Time: 2020-04-04 17:29:02
**/
#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 5e3 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 998244353; // 1e9 + 9;

ll n , ans , inv[MAXN] , A[MAXN] , cnt[MAXN] , dp[MAXN][MAXN];

int main() {
    ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);

    for(ll i = 1 ; i < MAXN ; i++)  inv[i] = poww(i , MOD - 2 , MOD);
    cin >> n;
    for(ll i = 1 ; i <= n ; i++)    cin >> A[i] , cnt[A[i]]++;
    
    fill(dp[0] , dp[0] + MAXN , 1);
    for(ll i = 1 ; i <= n ; i++){
        for(ll j = 1 ; j <= n ; j++){
            dp[i][j] = dp[i - 1][j - 1] * cnt[j] % MOD * inv[n - i + 1] % MOD;
        }
        for(ll j = 1 ; j <= n ; j++){
            ans = (ans + dp[i][j] * (cnt[j] - 1) % MOD * inv[n - i]) % MOD;
            dp[i][j] = (dp[i][j - 1] + dp[i][j]) % MOD;
        }
    }
    cout << ans << endl;

    return 0;
}
/*

*/