/* Generated by powerful Codeforces Tool
 * You can download the binary file in here https://github.com/xalanq/cf-tool (Windows, macOS, Linux)
 * Author: alireza_kaviani
 * Time: 2020-08-24 10:40:20
**/
#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<int, int> pii;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 2e5 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n , q , A[MAXN] , nxt[LOG][MAXN] , sum[LOG][MAXN] , pw2[MAXN] , ps[MAXN];

int main() {
	ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);

	pw2[0] = 1;
	for(int i = 1 ; i < MAXN ; i++)	pw2[i] = pw2[i - 1] * 2 % MOD;
	cin >> n >> q;
	for(int i = 0 ; i < n ; i++)	cin >> A[i];
	reverse(A , A + n);
	nxt[0][n] = n;
	for(int i = 0 ; i < n ; i++){
		ll cur = A[i] , ind = i;
		while(ind < n && cur > 0 && cur < MOD){
			ind++;
			cur = 2 * cur + A[ind];
		}
		nxt[0][i] = (cur >= MOD || ind == n ? n : ind + 1);
		sum[0][i] = cur * 2 % MOD;
		//cout << i << sep << nxt[0][i] << endl;
	}
	ps[0] = A[0];
	for(int i = 1 ; i < n ; i++)	ps[i] = (ps[i - 1] * 2 + A[i]) % MOD;
	for(int i = 1 ; i < LOG ; i++){
		for(int j = 0 ; j <= n ; j++){
			nxt[i][j] = nxt[i - 1][nxt[i - 1][j]];
			sum[i][j] = (sum[i - 1][j] + sum[i - 1][nxt[i - 1][j]]);
			if(sum[i][j] >= MOD)	sum[i][j] -= MOD;
		}
	}

	while(q--){
		ll l , r , ans = 0;
		cin >> l >> r;
		r = n - r; l = n - l; swap(l , r);
		for(int i = LOG - 1 ; i >= 0 ; i--){
			if(nxt[i][l] <= r){
				ans += sum[i][l];
				l = nxt[i][l];
			}
		}
		ans += ps[r] - ps[l - 1] * pw2[r - l + 1];
		cout << (ans % MOD + MOD) % MOD << endl;
	}

    return 0;
}
/*

*/