import java.util.InputMismatchException;
import java.math.BigInteger;
import java.io.*;

/**
 * Generated by Contest helper plug-in
 * Actual solution is at the bottom
 */
public class Main {
	public static void main(String[] args) {
		InputReader in = new StreamInputReader(System.in);
		PrintWriter out = new PrintWriter(System.out);
		run(in, out);
	}

	public static void run(InputReader in, PrintWriter out) {
		Solver solver = new TaskC();
		solver.solve(1, in, out);
		Exit.exit(in, out);
	}
}

abstract class InputReader {
	private boolean finished = false;

	public abstract int read();

	public int readInt() {
		int c = read();
		while (isSpaceChar(c))
			c = read();
		int sgn = 1;
		if (c == '-') {
			sgn = -1;
			c = read();
		}
		int res = 0;
		do {
			if (c < '0' || c > '9')
				throw new InputMismatchException();
			res *= 10;
			res += c - '0';
			c = read();
		} while (!isSpaceChar(c));
		return res * sgn;
	}

	public String readString() {
		int c = read();
		while (isSpaceChar(c))
			c = read();
		StringBuffer res = new StringBuffer();
		do {
			res.appendCodePoint(c);
			c = read();
		} while (!isSpaceChar(c));
		return res.toString();
	}

	private boolean isSpaceChar(int c) {
		return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
	}

	public void setFinished(boolean finished) {
		this.finished = finished;
	}

	public abstract void close();
}

class StreamInputReader extends InputReader {
	private InputStream stream;
	private byte[] buf = new byte[1024];
	private int curChar, numChars;

	public StreamInputReader(InputStream stream) {
		this.stream = stream;
	}

	public int read() {
		if (numChars == -1)
			throw new InputMismatchException();
		if (curChar >= numChars) {
			curChar = 0;
			try {
				numChars = stream.read(buf);
			} catch (IOException e) {
				throw new InputMismatchException();
			}
			if (numChars <= 0)
				return -1;
		}
		return buf[curChar++];
	}

	public void close() {
		try {
			stream.close();
		} catch (IOException ignored) {
		}
	}
}

class Exit {
	private Exit() {
	}

	public static void exit(InputReader in, PrintWriter out) {
		in.setFinished(true);
		in.close();
		out.close();
	}
}

interface Solver {
	public void solve(int testNumber, InputReader in, PrintWriter out);
}

class TaskC implements Solver {
	private int result = Integer.MAX_VALUE;
	private int[] answerFirstRegister = new int[6];
	private int[] answerSecondRegister = new int[6];
	private int[] answerSecondCoefficient = new int[6];

	public void solve(int testNumber, InputReader in, PrintWriter out) {
		int n = in.readInt();
		int[] achieved = new int[6];
		int[] firstRegister = new int[6];
		int[] secondRegister = new int[6];
		int[] secondCoefficient = new int[6];
		achieved[0] = 1;
		go(1, n, achieved, firstRegister, secondRegister, secondCoefficient);
		out.println(result);
		for (int i = 1; i <= result; i++) {
			out.print("lea e" + (char)('a' + i) + "x, [");
			if (answerSecondCoefficient[i] < 0)
				out.print(-answerSecondCoefficient[i] + "*");
			out.print("e" + (char)('a' + answerFirstRegister[i]) + "x");
			if (answerSecondCoefficient[i] > 0)
				out.print(" + " + answerSecondCoefficient[i] + "*e" + (char)('a' + answerSecondRegister[i]) + "x");
			out.println("]");
		}
	}

	private void go(int step, int target, int[] achieved, int[] firstRegister, int[] secondRegister, int[] secondCoefficient) {
		if (achieved[step - 1] == target) {
			result = step - 1;
			System.arraycopy(firstRegister, 0, answerFirstRegister, 0, step);
			System.arraycopy(secondRegister, 0, answerSecondRegister, 0, step);
			System.arraycopy(secondCoefficient, 0, answerSecondCoefficient, 0, step);
			return;
		}
		if (step == 6 || step >= result)
			return;
		for (int i = 0; i < step; i++) {
			firstRegister[step] = i;
			for (int k = 0; k <= 3; k++) {
				achieved[step] = achieved[i] << k;
				secondCoefficient[step] = -(1 << k);
				go(step + 1, target, achieved, firstRegister, secondRegister, secondCoefficient);
			}
			for (int j = 0; j < step; j++) {
				secondRegister[step] = j;
				for (int k = 0; k <= 3; k++) {
					achieved[step] = achieved[i] + (achieved[j] << k);
					secondCoefficient[step] = 1 << k;
					go(step + 1, target, achieved, firstRegister, secondRegister, secondCoefficient);
				}
			}
		}
	}
}