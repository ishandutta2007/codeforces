/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author RiaD
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <array>
#include <vector>
#include <algorithm>


#include <iterator>


#include <string>
#include <stdexcept>

#ifndef SPCPPL_ASSERT
	#ifdef SPCPPL_DEBUG
		#define SPCPPL_ASSERT(condition) \
		if(!(condition)) { \
			throw std::runtime_error(std::string() + #condition + " in line " + std::to_string(__LINE__) + " in " + __PRETTY_FUNCTION__); \
		}
	#else
		#define SPCPPL_ASSERT(condition)
	#endif
#endif


/**
* Support decrementing and multi-passing, but not declared bidirectional(or even forward) because
* it's reference type is not a reference.
*
* It doesn't return reference because
* 1. Anyway it'll not satisfy requirement [forward.iterators]/6
*   If a and b are both dereferenceable, then a == b if and only if *a and
*   b are bound to the same object.
* 2. It'll not work with reverse_iterator that returns operator * of temporary which is temporary for this iterator
*
* Note, reverse_iterator is not guaranteed to work  now too since it works only with bidirectional iterators,
* but it's seems to work at least on my implementation.
*
* It's not really useful anywhere except iterating anyway.
*/
template <typename T>
class IntegerIterator: public std::iterator<std::input_iterator_tag, T, std::ptrdiff_t, T*, T> {
public:
	explicit IntegerIterator(int value): value(value) {

	}

	IntegerIterator& operator++() {
		++value;
		return *this;
	}

	IntegerIterator operator++(int) {
		IntegerIterator copy = *this;
		++value;
		return copy;
	}

	IntegerIterator& operator--() {
		--value;
		return *this;
	}

	IntegerIterator operator--(int) {
		IntegerIterator copy = *this;
		--value;
		return copy;
	}

	T operator*() const {
		return value;
	}

	bool operator==(IntegerIterator rhs) {
		return value == rhs.value;
	}

	bool operator!=(IntegerIterator rhs) {
		return !(*this == rhs);
	}

private:
	T value;
};

template <typename T>
class IntegerRange {
public:
	IntegerRange(T begin, T end): begin_(begin), end_(end) {

	}

	IntegerIterator<T> begin() const {
		return IntegerIterator<T>(begin_);
	}

	IntegerIterator<T> end() const {
		return IntegerIterator<T>(end_);
	}

private:
	T begin_;
	T end_;
};

template <typename T>
class ReversedIntegerRange {
	typedef std::reverse_iterator<IntegerIterator<T>> IteratorType;
public:
	ReversedIntegerRange(T begin, T end): begin_(begin), end_(end) {

	}

	IteratorType begin() const {
		return IteratorType(IntegerIterator<T>(begin_));
	}

	IteratorType end() const {
		return IteratorType(IntegerIterator<T>(end_));
	}

private:
	T begin_;
	T end_;
};

template <typename T>
IntegerRange<T> range(T to) {
	SPCPPL_ASSERT(to >= 0);
	return IntegerRange<T>(0, to);
}

template <typename T>
IntegerRange<T> range(T from, T to) {
	SPCPPL_ASSERT(from <= to);
	return IntegerRange<T>(from, to);
}

template <typename T>
IntegerRange<T> inclusiveRange(T to) {
	SPCPPL_ASSERT(to >= 0);
	return IntegerRange<T>(0, to + 1);
}

template <typename T>
IntegerRange<T> inclusiveRange(T from, T to) {
	SPCPPL_ASSERT(from <= to);
	return IntegerRange<T>(from, to + 1);
}

template <typename T>
ReversedIntegerRange<T> downrange(T from) {
	SPCPPL_ASSERT(from >= 0);
	return ReversedIntegerRange<T>(from, 0);
}

template <typename T>
ReversedIntegerRange<T> downrange(T from, T to) {
	SPCPPL_ASSERT(from >= to);
	return ReversedIntegerRange<T>(from, to);
}

template <typename T>
ReversedIntegerRange<T> inclusiveDownrange(T from) {
	SPCPPL_ASSERT(from >= 0);
	return ReversedIntegerRange<T>(from + 1, 0);
}

template <typename T>
ReversedIntegerRange<T> inclusiveDownrange(T from, T to) {
	SPCPPL_ASSERT(from >= to);
	return ReversedIntegerRange<T>(from + 1, to);
}


#include <type_traits>

template <typename T, size_t N>
struct MakeVector {
	template <
			typename... Args,
			typename R = std::vector<decltype(MakeVector<T, N - 1>::make_vector(std::declval<Args>()...))>
	>
	static R make_vector(std::size_t first, Args... sizes) {
		auto inner = MakeVector<T, N - 1>::make_vector(sizes...);
		return R(first, inner);
	}
};

template <typename T>
struct MakeVector<T, 1> {
	/*
	 * This template is to fool CLion.
	 * Without it CLion thinks that make_vector always returns std::vector<T> and marks code like
	 *
	 * auto dp = make_vector<int>(n, m, 0);
	 * dp[0][0] = 1 as error because it suppose that dp[0] is int
	 *
	 * TODO: Consider removing it once https://youtrack.jetbrains.com/issue/CPP-3340 is fixed
	 */
	template <typename R = std::vector<T>>
	static R make_vector(std::size_t size, const T& value) {
		return R(size, value);
	}
};

template <typename T, typename... Args>
auto make_vector(Args... args) -> decltype(MakeVector<T, sizeof...(Args) - 1>::make_vector(args...)) {
	return MakeVector<T, sizeof...(Args) - 1>::make_vector(args...);
}


using namespace std;


struct FastVector {
	int cnt = 0;
	std::array<int, 10> v;

	FastVector() {

	}


	int* begin() {
		return &v[0];
	}

	int* end() {
		return begin() + cnt;
	}

	void add(int x) {
		if(cnt == 10)
			return;
		v[cnt++] = x;
	}
};

int res[20];

FastVector merge(FastVector l, FastVector r) {
	std::merge(l.begin(), l.end(), r.begin(), r.end(), res);
	FastVector rr;
	for (int i = 0; i < 10 && i < l.cnt + r.cnt; ++i) {
		rr.add(res[i]);
	}
	return rr;
}


class TaskC {
public:

	vector<vector<int>> g;
	vector<vector<int>> parent;
	vector<vector<FastVector>> minimums;

	vector<int> depth;
	void solve(std::istream& in, std::ostream& out) {
		int n, m, q;
		in >> n >> m >> q;
		g.resize(n);
		parent = make_vector<int>(n, 17, 0);
		minimums = make_vector<FastVector>(n, 17, FastVector());
		depth.resize(n, -1);
		for (int i: range(n - 1)) {
			int a, b;
			in >> a >> b;
			--a, --b;
			g[a].push_back(b);
			g[b].push_back(a);
		}

		for (int i = 0; i < m; ++i) {
			int x;
			in >> x;
			--x;
			minimums[x][0].add(i);
		}

		dfs(0, 0);

		for(int j: range(q)) {
			int x, y, a;
			in >> x >> y >> a;
			FastVector r = go(x - 1, y - 1);
			out << min(r.cnt, a);
			for (int i = 0; i < r.cnt && i < a; ++i) {
				out << ' ' << r.v[i] + 1;
			}
			out << "\n";
		}
	}

	void dfs(int v, int p) {
		parent[v][0] = p;
		for (int i: range(0, 16)) {
			int par = parent[v][i];
			parent[v][i + 1] = parent[par][i];
			minimums[v][i + 1] = merge(minimums[v][i], minimums[par][i]);
		}

		depth[v] = depth[p] + 1;

		for (int to: g[v]) {
			if(to == p)
				continue;
			dfs(to, v);
		}
	}

	FastVector go(int a, int b) {
		if(depth[a] < depth[b]) {
			swap(a, b);
		}

		FastVector res;

		int diff = depth[a] - depth[b];
		for (int i = 16; i >= 0; --i) {
			if(diff & (1 << i)) {
				res = merge(res, minimums[a][i]);
				a = parent[a][i];
			}
		}
		if(a != b) {
			for (int i = 16; i >= 0; --i) {
				if(parent[a][i] != parent[b][i]) {
					res = merge(res, minimums[a][i]);
					res = merge(res, minimums[b][i]);
					a = parent[a][i];
					b = parent[b][i];
				}
			}

			res = merge(res, minimums[a][0]);
			res = merge(res, minimums[b][0]);
			a = parent[a][0];
			b = parent[b][0];
		}

		res = merge(res, minimums[a][0]);

		return res;
	}
};


int main() {
	std::ios_base::sync_with_stdio(false);
	TaskC solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	in.tie(0);
	out << std::fixed;
	out.precision(20);
	solver.solve(in, out);
	return 0;
}