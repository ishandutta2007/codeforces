#include <bits/stdc++.h>

#define itn int
#define all(x) (x).begin(), (x).end()
#define make_unique(x) sort(all((x))); (x).resize(unique(all((x))) - (x).begin())

using namespace std;

inline int nxt() {
	int x;
	scanf("%d", &x);
	return x;
}

const vector<vector<pair<int, int>>> for8 = {
	{{0, 7}, {1, 6}, {2, 5}, {3, 4}},
	{{1, 7}, {0, 6}, {2, 5}, {3, 4}},
	{{2, 7}, {1, 6}, {0, 5}, {3, 4}},
	{{3, 7}, {1, 6}, {2, 5}, {0, 4}},
	{{4, 7}, {1, 6}, {2, 5}, {0, 3}},
	{{5, 7}, {1, 6}, {3, 4}, {0, 2}},
	{{6, 7}, {2, 5}, {3, 4}, {0, 1}},
	{{6, 7}, {3, 5}, {2, 4}, {0, 1}},
	{{6, 7}, {0, 5}, {1, 4}, {2, 3}}
};

const vector<vector<pair<int, int>>> for16 = {{{0, 15}, {1, 14}, {2, 13}, {3, 12}, {4, 11}, {5, 10}, {6, 9}, {7, 8}}, {{1, 15}, {0, 14}, {2, 13}, {3, 12}, {4, 11}, {5, 10}, {6, 9}, {7, 8}}, {{2, 15}, {1, 14}, {0, 13}, {3, 12}, {4, 11}, {5, 10}, {6, 9}, {7, 8}}, {{3, 15}, {1, 14}, {2, 13}, {0, 12}, {4, 11}, {5, 10}, {6, 9}, {7, 8}}, {{4, 15}, {1, 14}, {2, 13}, {3, 12}, {0, 11}, {5, 10}, {6, 9}, {7, 8}}, {{5, 15}, {1, 14}, {2, 13}, {3, 12}, {4, 11}, {0, 10}, {6, 9}, {7, 8}}, {{6, 15}, {1, 14}, {2, 13}, {3, 12}, {4, 11}, {5, 10}, {0, 9}, {7, 8}}, {{7, 15}, {1, 14}, {2, 13}, {3, 12}, {4, 11}, {5, 10}, {6, 9}, {0, 8}}, {{8, 15}, {1, 14}, {2, 13}, {3, 12}, {4, 11}, {5, 10}, {6, 9}, {0, 7}}, {{9, 15}, {1, 14}, {2, 13}, {3, 12}, {4, 11}, {5, 10}, {7, 8}, {0, 6}}, {{10, 15}, {1, 14}, {2, 13}, {3, 12}, {4, 11}, {6, 9}, {7, 8}, {0, 5}}, {{11, 15}, {1, 14}, {2, 13}, {3, 12}, {5, 10}, {6, 9}, {7, 8}, {0, 4}}, {{12, 15}, {1, 14}, {2, 13}, {4, 11}, {5, 10}, {6, 9}, {7, 8}, {0, 3}}, {{13, 15}, {1, 14}, {3, 12}, {4, 11}, {5, 10}, {6, 9}, {7, 8}, {0, 2}}, {{14, 15}, {2, 13}, {3, 12}, {4, 11}, {5, 10}, {6, 9}, {7, 8}, {0, 1}}, {{14, 15}, {3, 13}, {2, 12}, {4, 11}, {5, 10}, {6, 9}, {7, 8}, {0, 1}}, {{14, 15}, {3, 13}, {2, 12}, {5, 11}, {4, 10}, {6, 9}, {7, 8}, {0, 1}}};

void solve() {
	int n = nxt(), k = nxt();
	if (n == 4) {
		if (k == 0) {
			cout << "0 3\n1 2\n";
		} else if (k == 1) {
			cout << "0 2\n1 3\n";
		} else if (k == 2) {
			cout << "0 1\n2 3\n";
		} else {
			cout << "-1\n";
		}
	} else if (n == 8) {
		for (auto [x, y] : for8[k]) {
			cout << x << " " << y << "\n";
		}
	} else if (n == 16) {
		for (auto [x, y] : for16[k]) {
			cout << x << " " << y << "\n";
		}
	} else {
		int r = 0;
		vector<int> res(n);
		iota(all(res), 0);
		reverse(all(res));
		for (int i = 1; i < n; i *= 2) {
			if (k & i) {
				int x = i | ((2 * i) % (n - 1));
				int y = (n - 1) ^ ((2 * i) % (n - 1));
				res[x] = y;
				res[y] = x;
				res[n - 1 - x] = n - 1 - y;
				res[n - 1 - y] = n - 1 - x;
			}
		}
		for (int i = 0; i < n; ++i) {
			if (res[i] > i) {
				cout << i << " " << res[i] << "\n";
				r += i & res[i];
			}
		}
		assert(r == k);
	}
}

int main() {
	// const int n = 16;
	// const int nn = 1 << n;
	// vector<vector<int>> pr(nn, vector<int>(n + 1, -1));
	// pr[0][0] = 0;
	// for (int mask = 0; mask < nn; ++mask) {
	// 	for (int i = 0; i < n; ++i) {
	// 		for (int j = 0; j < i; ++j) {
	// 			if (!(mask & (1 << i)) || !(mask & (1 << j))) {
	// 				continue;
	// 			}
	// 			for (int c = 0; c + (i & j) <= n; ++c) {
	// 				if (pr[mask ^ (1 << i) ^ (1 << j)][c] > -1) {
	// 					pr[mask][c + (i & j)] = (1 << i) | (1 << j);
	// 				}
	// 			}
	// 		}
	// 	}
	// }
	// for (int i = 0; i <= n; ++i) {
	// 	vector<pair<int, int>> cur;
	// 	int mask = nn - 1;
	// 	int c = i;
	// 	while (mask) {
	// 		int x = pr[mask][c];
	// 		mask ^= x;
	// 		cur.push_back({__builtin_ctz(x), 31 - __builtin_clz(x)});
	// 		c -= cur.back().first & cur.back().second;
	// 	}
	// 	cerr << "{";
	// 	for (int j = 0; j < (int)cur.size(); ++j) {
	// 		if (j) {
	// 			cerr << ", ";
	// 		}
	// 		cerr << "{" << cur[j].first << ", " << cur[j].second << "}";
	// 	}
	// 	cerr << "}, ";
	// }
	// cerr << "\n";

	int t = nxt();
	while (t--) {
		solve();
	}

	return 0;
}