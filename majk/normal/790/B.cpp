/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Majk
 */

#include <vector>
#include <iostream>
#include <unordered_map>
#include <map>
#include <iomanip>
#include <set>
#include <functional>
#include <fstream>
#include <algorithm>
#include <cassert>
#include <cmath>
#include <string>
#include <sstream>
#include <queue>
using namespace std;

#define x first
#define y second
constexpr int MOD = 1000000007;

typedef std::pair<int,int> pii;
typedef long long ll;
typedef unsigned int ui;

template<typename T>std::istream&operator>>(std::istream&i,vector<T>&t) {for(auto&v:t){i>>v;}return i;}
template<typename T>std::ostream&operator<<(std::ostream&o,const vector<T>&t) {for(size_t i=0;i<t.size();++i){o<<t[i]<<" \n"[i == t.size()-1];}return o;}

namespace std {
    template<typename T,typename U>struct hash<pair<T,U>>{hash<T>t;hash<U>u;size_t operator()(const pair<T,U>&p)const{return t(p.x)^(u(p.y)<<7);}};
}
template<typename T,typename F>T bsh(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){l=m+1;r=m;}else{h=m-1;}}return r;}
template<typename T,typename F>T bsl(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){h=m-1;r=m;}else{l=m+1;}}return r;}
template<typename T> T gcd(T a,T b) { if (a<b) swap(a,b); return b?gcd(b,a%b):a; }

// #include "../l/mod.h"

class B {
public:
	int N, K;
	vector<vector<int>> E;
	ll ans;

	pair<pair<int, ll>, vector<int>> dfs(int u, int p) {
		ll cur = 0;
		int cnt = 1;
		vector<int> C(K, 0);
		C[0] = 1;

		for (int v : E[u]) {
			if (v != p) {
				auto x = dfs(v, u);

				for (int i = 0; i < K; ++i) {
					for (int j = 0; j < K; ++j) {
						if (i+j > K) {
							ans += 2*(ll)C[i]*x.y[j];
						} else if (i+j > 0) {
							ans += (ll)C[i]*x.y[j];
						}
					}
				}

				ans += x.x.y * cnt + x.x.x * cur;

				for (int i = 0; i < K; ++i) {
					C[i] += x.y[i];
				}
				cnt += x.x.x;
				cur += x.x.y;
			}
		}

		vector<int> D(K, 0);
		for (int k = 0; k < K; ++k) {
			D[(k+1)%K] = C[k];
		}
		cur += D[0];

		//cerr << u << ' ' << cnt << ' ' << cur << ' ' << ans << ':' << D << endl;
		return {{cnt, cur}, D};
	}

	void solve(istream& cin, ostream& cout) {
		cin >> N >> K;
		E.resize(N);
		ans = 0;
		for (int i = 0; i < N-1; ++i) {
			int u,v; cin >> u >> v; --u; --v;
			E[u].push_back(v);
			E[v].push_back(u);
		}

		dfs(0, -1);
		cout << ans << endl;
	}
};


int main() {
	ios_base::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr);
	B solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}