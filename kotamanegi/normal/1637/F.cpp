#include "bits/stdc++.h"
using namespace std;

typedef string::const_iterator State;
#define eps 1e-8L
#define MAX_MOD 1000000007LL
#define GYAKU 500000004LL
#define MOD 998244353LL
#define pb push_back
#define mp make_pair
typedef long long ll;
typedef long double ld;
#define REP(a, b) for (long long(a) = 0; (a) < (b); ++(a))
#define ALL(x) (x).begin(), (x).end()

#define int long long
vector<int> h;
int max_h = 0;

vector<int> vertexs[300000];

pair<int, int> dp[300000];

void first_dfs(int now, int backs)
{
  dp[now] = {0, 0};
  for (auto x : vertexs[now])
  {
    if (x == backs)
      continue;
    first_dfs(x, now);
    dp[now].first = max(dp[x].first, dp[now].first);
    dp[now].second += dp[x].second;
  }
  if (dp[now].first < h[now])
  {
    dp[now].second += h[now] - dp[now].first;
    dp[now].first = h[now];
  }
  return;
}

int answer = 1e18;

void second_dfs(int now, int backs, pair<int, int> back_calc)
{
  vector<pair<pair<int, int>, int>> nexters;
  nexters.push_back({back_calc, -1});
  for (auto x : vertexs[now])
  {
    if (x == backs)
      continue;
    nexters.push_back({dp[x], x});
  }
  sort(ALL(nexters));
  reverse(ALL(nexters));
  int now_cost = 0;
  for (auto x : nexters)
  {
    now_cost += x.first.second;
  }

  int tmp_ans = now_cost;
  if (nexters[0].first.first < h[now])
  {
    tmp_ans += h[now] - nexters[0].first.first;
  }
  answer = min(answer, tmp_ans + max_h);

  for (auto x : vertexs[now])
  {
    if (x == backs)
      continue;
    int next_cost = now_cost - dp[x].second;
    int next_max = 0;
    if (nexters[0].second == x)
    {
      next_max = nexters[1].first.first;
    }
    else
    {
      next_max = nexters[0].first.first;
    }

    if (next_max < h[now])
    {
      next_cost += h[now] - next_max;
      next_max = h[now];
    }
    second_dfs(x, now, {next_max, next_cost});
  }
}

void solve()
{
  int n;
  cin >> n;
  REP(i, n)
  {
    int a;
    cin >> a;
    h.push_back(a);
    max_h = max(max_h, a);
  }
  REP(i, n - 1)
  {
    int a, b;
    cin >> a >> b;
    a--;
    b--;
    vertexs[a].push_back(b);
    vertexs[b].push_back(a);
  }

  first_dfs(0, -1);
  second_dfs(0, -1, {0, 0});

  cout << answer << endl;
}
#undef int

// generated by oj-template v4.7.2
// (https://github.com/online-judge-tools/template-generator)
int main()
{
  // Fasterize input/output script
  ios::sync_with_stdio(false);
  cin.tie(nullptr);
  cout << fixed << setprecision(100);
  // scanf/printf user should delete this fasterize input/output script

  int t = 1;
  // cin >> t; // comment out if solving multi testcase
  for (int testCase = 1; testCase <= t; ++testCase)
  {
    solve();
  }
  return 0;
}