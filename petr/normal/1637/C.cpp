/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

// Actual solution is at the bottom

#undef NDEBUG

#include <algorithm>
#include <array>
#include <bitset>
#include <cassert>
#include <climits>
#include <cstdint>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <memory>
#include <numeric>
#include <queue>
#include <random>
#include <set>
#include <stack>
#include <string>
#include <unordered_set>
#include <unordered_map>
#include <vector>
// AtCoder library from https://github.com/atcoder/ac-library
// #include "../atcoder/all"

#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()

using namespace std;

typedef int64_t int64;
typedef pair<int, int> ii;

class CAndreiIKamni {
 public:
  void solveOne() {
    int n;
    cin >> n;
    vector<int64> a(n);
    for (auto& x : a) cin >> x;
    int64 total = 0;
    int64 odds = 0;
    int64 ones = 0;
    for (int i = 1; i + 1 < n; ++i) {
      total += a[i];
      if (a[i] == 1) ++ones;
      if (a[i] % 2) ++odds;
    }
    if (total == 0) {
      cout << "0\n";
      return;
    }
    if (total == ones) {
      cout << "-1\n";
      return;
    }
    if (odds && (n == 3)) {
      cout << "-1\n";
      return;
    }
    cout << (total + odds) / 2 << "\n";
  }

  void solve() {
    int nt;
    cin >> nt;
    for (int it = 0; it < nt; ++it) {
      // cout << "Case #" << (it + 1) << ": ";
      solveOne();
    }
  }
};

// #define st_mtimespec st_mtim

int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(0);
    CAndreiIKamni solver;


    solver.solve();
    return 0;
}