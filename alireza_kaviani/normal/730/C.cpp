/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

vector<ll> adj[MAXN];
ll n , m , w , q , dist[MAXN];
pair<ll , pll> store[MAXN];

void BFS(ll v){
    fill(dist , dist + MAXN , INF);
    queue<ll> Q;
    dist[v] = 0;
    Q.push(v);

    while(!Q.empty()){
        v = Q.front();
        Q.pop();
        for(ll u : adj[v]){
            if(dist[u] == INF){
                dist[u] = dist[v] + 1;
                Q.push(u);
            }
        }
    }
}

ll check(ll mid , ll r , ll a){
    for(ll i = 1 ; i <= w ; i++){
        if(dist[store[i].Y.X] > mid)    continue;
        ll x = min(store[i].Y.Y , r);
        r -= x;
        a -= x * store[i].X;
    }
    if(r > 0 || a < 0)  return 0;
    return 1;
}

int main() {
    fast_io;

    cin >> n >> m;
    for(ll i = 0 ; i < m ; i++){
        ll v , u;
        cin >> v >> u;
        adj[v].push_back(u);
        adj[u].push_back(v);
    }

    cin >> w;
    for(ll i = 1 ; i <= w ; i++){
        ll c , k , p;
        cin >> c >> k >> p;
        store[i] = {p , {c , k}};
    }
    sort(store + 1 , store + w + 1);

    cin >> q;
    while(q--){
        ll g , r , a;
        cin >> g >> r >> a;

        BFS(g);
        ll L = -1 , R = n + 1;
        while(R - L > 1){
            ll mid = (L + R) / 2;
            if(check(mid , r , a))  R = mid;
            else    L = mid;
        }
        if(R == n + 1)    cout << -1 << endl;
        else    cout << R << endl;
    }

    return 0;
}
/*

*/