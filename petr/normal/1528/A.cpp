/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

// Actual solution is at the bottom

#include <algorithm>
#include <array>
#include <bitset>
#include <cassert>
#include <climits>
#include <cstdint>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <memory>
#include <numeric>
#include <queue>
#include <random>
#include <set>
#include <stack>
#include <string>
#include <unordered_set>
#include <unordered_map>
#include <vector>
//#include "../atcoder/all"

#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()

using namespace std;

typedef int64_t int64;
typedef pair<int, int> ii;

class AParsasHumongousTree {
 public:
  void solveOne() {
    int n;
    cin >> n;
    vector<int> l(n), r(n);
    for (int i = 0; i < n; ++i) {
      cin >> l[i] >> r[i];
    }
    vector<vector<int>> adj(n);
    for (int i = 0; i < n - 1; ++i) {
      int a, b;
      cin >> a >> b;
      --a; --b;
      adj[a].push_back(b);
      adj[b].push_back(a);
    }

    auto rec = [&](auto self, int root, int parent) {
      pair<int64, int64> res;
      if (root == -1) return res;
      for (int child : adj[root]) {
        if (child == parent) continue;
        auto cres = self(self, child, root);
        res.first += max(cres.first + abs(l[child] - l[root]), cres.second + abs(r[child] - l[root]));
        res.second += max(cres.first + abs(l[child] - r[root]), cres.second + abs(r[child] - r[root]));
      }
      return res;
    };
    auto res = rec(rec, 0, -1);
    cout << max(res.first, res.second) << "\n";
  }

  void solve() {
    int nt;
    cin >> nt;
    for (int it = 0; it < nt; ++it) {
      solveOne();
    }
  }
};


int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(0);
    AParsasHumongousTree solver;


    solver.solve();
    return 0;
}