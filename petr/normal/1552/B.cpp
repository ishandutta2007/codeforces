/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

// Actual solution is at the bottom

#include <algorithm>
#include <array>
#include <bitset>
#include <cassert>
#include <climits>
#include <cstdint>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <memory>
#include <numeric>
#include <queue>
#include <random>
#include <set>
#include <stack>
#include <string>
#include <unordered_set>
#include <unordered_map>
#include <vector>
//#include "../atcoder/all"

#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()

using namespace std;

typedef int64_t int64;
typedef pair<int, int> ii;

class BZabegZaZolotom {
 public:
  void solveOne() {
    int n;
    cin >> n;
    vector<vector<int>> r(n, vector<int>(5));
    for (int i = 0; i < n; ++i) {
      for (int j  =0 ; j < 5; ++j) {
        cin >> r[i][j];
      }
    }
    int best = 0;
    for (int i = 1; i < n; ++i) {
      int cnt = 0;
      for (int j= 0; j < 5; ++j) if (r[i][j] < r[best][j]) ++cnt;
      if (cnt >= 3) best = i;
    }
    bool ok = true;
    for (int i = 0; i < n; ++i) {
      int cnt = 0;
      for (int j= 0; j < 5; ++j) if (r[i][j] < r[best][j]) ++cnt;
      if (cnt >= 3) ok = false;
    }
    if (ok) {
      cout << best + 1 << "\n";
    } else {
      cout << -1 << "\n";
    }
  }

  void solve() {
    int nt;
    cin >> nt;
    for (int it = 0; it < nt; ++it) {
      solveOne();
    }
  }
};


int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(0);
    BZabegZaZolotom solver;


    solver.solve();
    return 0;
}