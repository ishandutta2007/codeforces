#include "bits/stdc++.h"
using namespace std;

typedef string::const_iterator State;
#define eps 1e-8L
#define MAX_MOD 1000000007LL
#define GYAKU 500000004LL
#define MOD 998244353LL
#define pb push_back
#define mp make_pair
typedef long long ll;
typedef long double ld;
#define REP(a, b) for (long long(a) = 0; (a) < (b); ++(a))
#define ALL(x) (x).begin(), (x).end()

#define int long long
vector<int> inputs;
vector<pair<int, int>> op;
vector<int> segments;
int start_base = 1;

void reversing(int r)
{
  start_base += r;
  REP(i, r + 1)
  {
    op.push_back({start_base, inputs[i]});
    start_base++;
  }
  start_base++;
  segments.push_back((r + 1) * 2);
  reverse(inputs.begin(), inputs.begin() + r + 1);
}

void solve()
{
  inputs.clear();
  op.clear();
  segments.clear();
  start_base = 1;

  int n;
  cin >> n;
  map<int, int> cnters;
  REP(i, n)
  {
    int a;
    cin >> a;
    if (cnters[a] == 0)
    {
      inputs.push_back(a);
      cnters[a] = 1;
    }
    else
    {
      cnters[a] = 0;
      REP(i, n)
      {
        if (inputs[i] == a)
        {
          reversing(i);
          break;
        }
      }
      reversing(inputs.size() - 1);
      inputs.push_back(a);
      reversing(inputs.size() - 1);
      segments.push_back(2);
      inputs.erase(inputs.begin());
      inputs.erase(inputs.begin());
      start_base += 2;
    }
  }
  if (inputs.size() != 0)
  {
    cout << -1 << endl;
    return;
  }
  cout << op.size() << endl;
  REP(i, op.size())
  {
    cout << op[i].first << " " << op[i].second << endl;
  }
  cout << segments.size() << endl;
  REP(i, segments.size())
  {
    if (i)
      cout << " ";
    cout << segments[i];
  }
  cout << endl;
}
#undef int

// generated by oj-template v4.7.2
// (https://github.com/online-judge-tools/template-generator)
int main()
{
  // Fasterize input/output script
  ios::sync_with_stdio(false);
  cin.tie(nullptr);
  cout << fixed << setprecision(100);
  // scanf/printf user should delete this fasterize input/output script

  int t = 1;
  cin >> t; // comment out if solving multi testcase
  for (int testCase = 1; testCase <= t; ++testCase)
  {
    solve();
  }
  return 0;
}