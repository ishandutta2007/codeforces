__asm__(
"	.file	\"main.cpp\"\n"
"	.text\n"
"	.p2align 4,,15\n"
"	.def	__tcf_0;	.scl	3;	.type	32;	.endef\n"
"	.seh_proc	__tcf_0\n"
"__tcf_0:\n"
".LFB11867:\n"
"	.seh_endprologue\n"
"	leaq	_ZStL8__ioinit(%rip), %rcx\n"
"	jmp	_ZNSt8ios_base4InitD1Ev\n"
"	.seh_endproc\n"
"	.def	__main;	.scl	2;	.type	32;	.endef\n"
"	.def	__popcountdi2;	.scl	2;	.type	32;	.endef\n"
"	.section	.text.startup,\"x\"\n"
"	.p2align 4,,15\n"
"	.globl	main\n"
"	.def	main;	.scl	2;	.type	32;	.endef\n"
"	.seh_proc	main\n"
"main:\n"
".LFB10543:\n"
"	pushq	%r15\n"
"	.seh_pushreg	%r15\n"
"	pushq	%r14\n"
"	.seh_pushreg	%r14\n"
"	pushq	%r13\n"
"	.seh_pushreg	%r13\n"
"	pushq	%r12\n"
"	.seh_pushreg	%r12\n"
"	pushq	%rbp\n"
"	.seh_pushreg	%rbp\n"
"	pushq	%rdi\n"
"	.seh_pushreg	%rdi\n"
"	pushq	%rsi\n"
"	.seh_pushreg	%rsi\n"
"	pushq	%rbx\n"
"	.seh_pushreg	%rbx\n"
"	subq	$104, %rsp\n"
"	.seh_stackalloc	104\n"
"	.seh_endprologue\n"
"	call	__main\n"
"	movq	.refptr._ZSt3cin(%rip), %r12\n"
"	xorl	%ecx, %ecx\n"
"	movq	.refptr._ZSt4cout(%rip), %rax\n"
"	movq	$0, 232(%r12)\n"
"	movq	$0, 224(%rax)\n"
".LEHB0:\n"
"	call	_ZNSt8ios_base15sync_with_stdioEb\n"
"	leaq	56(%rsp), %rdx\n"
"	movq	%r12, %rcx\n"
"	call	_ZNSi10_M_extractIxEERSiRT_\n"
".LEHE0:\n"
"	movl	$8388608, %r8d\n"
"	movl	$175, %edx\n"
"	leaq	dp(%rip), %rcx\n"
"	call	memset\n"
"	movq	56(%rsp), %rsi\n"
"	testq	%rsi, %rsi\n"
"	jle	.L4\n"
"	leaq	64(%rsp), %rbp\n"
"	xorl	%ebx, %ebx\n"
"	leaq	_count(%rip), %rdi\n"
"	.p2align 4,,10\n"
".L5:\n"
"	leaq	16(%rbp), %rax\n"
"	movq	%rbp, %rdx\n"
"	movq	%r12, %rcx\n"
"	movb	$0, 80(%rsp)\n"
"	movq	%rax, 64(%rsp)\n"
"	movq	$0, 72(%rsp)\n"
".LEHB1:\n"
"	call	_ZStrsIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EE\n"
".LEHE1:\n"
"	movq	64(%rsp), %rcx\n"
"	movq	72(%rsp), %r9\n"
"	addq	%rcx, %r9\n"
"	cmpq	%r9, %rcx\n"
"	je	.L29\n"
"	movq	%rcx, %rax\n"
"	xorl	%r11d, %r11d\n"
"	xorl	%edx, %edx\n"
"	movabsq	$4611474908973580287, %r8\n"
"	imulq	$800100, %rbx, %rsi\n"
"	jmp	.L11\n"
"	.p2align 4,,10\n"
".L30:\n"
"	movq	%rdx, %r8\n"
"	movl	$1, %r11d\n"
".L9:\n"
"	leaq	400050(%rdx,%rsi), %r10\n"
"	addq	$1, (%rdi,%r10,8)\n"
".L10:\n"
"	addq	$1, %rax\n"
"	cmpq	%rax, %r9\n"
"	je	.L6\n"
".L11:\n"
"	cmpb	$40, (%rax)\n"
"	je	.L46\n"
"	subq	$1, %rdx\n"
".L8:\n"
"	cmpq	%r8, %rdx\n"
"	jl	.L30\n"
"	jne	.L10\n"
"	addq	$1, %r11\n"
"	jmp	.L9\n"
"	.p2align 4,,10\n"
".L46:\n"
"	addq	$1, %rdx\n"
"	jmp	.L8\n"
"	.p2align 4,,10\n"
".L29:\n"
"	movabsq	$4611474908973580287, %r8\n"
"	xorl	%r11d, %r11d\n"
"	xorl	%edx, %edx\n"
"	.p2align 4,,10\n"
".L6:\n"
"	leaq	vs(%rip), %rax\n"
"	movq	%rdx, (%rax,%rbx,8)\n"
"	leaq	mv(%rip), %rax\n"
"	movq	%r8, (%rax,%rbx,8)\n"
"	leaq	mc(%rip), %rax\n"
"	movq	%r11, (%rax,%rbx,8)\n"
"	leaq	16(%rbp), %rax\n"
"	cmpq	%rax, %rcx\n"
"	je	.L12\n"
"	call	_ZdlPv\n"
"	movq	56(%rsp), %rsi\n"
"	addq	$1, %rbx\n"
"	cmpq	%rsi, %rbx\n"
"	jl	.L5\n"
".L4:\n"
"	movl	%esi, %ecx\n"
"	movl	$1, %edi\n"
"	movq	$0, dp(%rip)\n"
"	sall	%cl, %edi\n"
"	movslq	%edi, %rcx\n"
"	testq	%rcx, %rcx\n"
"	movq	%rcx, 32(%rsp)\n"
"	jle	.L31\n"
"	xorl	%eax, %eax\n"
"	xorl	%ebx, %ebx\n"
"	movl	$1, %edi\n"
"	leaq	sumdelta(%rip), %r12\n"
"	cmpl	$1, %eax\n"
"	movq	%rbx, %r15\n"
"	leaq	dp(%rip), %r13\n"
"	movq	%r12, 40(%rsp)\n"
"	movq	%rcx, %rbx\n"
"	leaq	mv(%rip), %r14\n"
"	leaq	mc(%rip), %rbp\n"
"	jle	.L47\n"
"	.p2align 4,,10\n"
".L15:\n"
"	leaq	-1(%r15), %rdx\n"
"	movq	%r15, %rax\n"
"	leaq	sumdelta(%rip), %rcx\n"
"	negq	%rax\n"
"	andq	%r15, %rdx\n"
"	andq	%r15, %rax\n"
"	movq	(%rcx,%rax,8), %rax\n"
"	addq	(%rcx,%rdx,8), %rax\n"
"	movq	%rax, (%r12)\n"
".L16:\n"
"	xorl	%eax, %eax\n"
"	testq	%rsi, %rsi\n"
"	jg	.L17\n"
"	jmp	.L22\n"
"	.p2align 4,,10\n"
".L48:\n"
"	addq	0(%rbp,%rax,8), %rcx\n"
"	cmpq	%r9, %rcx\n"
"	cmovl	%r9, %rcx\n"
"	movq	%rcx, 0(%r13,%rdx,8)\n"
".L20:\n"
"	addq	$1, %rax\n"
"	cmpq	%rsi, %rax\n"
"	je	.L22\n"
".L17:\n"
"	btq	%rax, %r15\n"
"	movl	%eax, %ecx\n"
"	jc	.L20\n"
"	movq	(%r12), %rdx\n"
"	addq	(%r14,%rax,8), %rdx\n"
"	movq	%rdx, %r8\n"
"	js	.L20\n"
"	movl	%edi, %edx\n"
"	sall	%cl, %edx\n"
"	movq	0(%r13,%r15,8), %rcx\n"
"	movslq	%edx, %rdx\n"
"	orq	%r15, %rdx\n"
"	testq	%r8, %r8\n"
"	movq	0(%r13,%rdx,8), %r9\n"
"	je	.L48\n"
"	cmpq	%r9, %rcx\n"
"	cmovl	%r9, %rcx\n"
"	addq	$1, %rax\n"
"	cmpq	%rsi, %rax\n"
"	movq	%rcx, 0(%r13,%rdx,8)\n"
"	jne	.L17\n"
".L22:\n"
"	addq	$1, %r15\n"
"	addq	$8, %r12\n"
"	cmpq	%rbx, %r15\n"
"	je	.L49\n"
"	movl	%r15d, %ecx\n"
"	call	__popcountdi2\n"
"	cmpl	$1, %eax\n"
"	jg	.L15\n"
".L47:\n"
"	testq	%r15, %r15\n"
"	je	.L16\n"
"	leaq	vs(%rip), %rcx\n"
"	bsfl	%r15d, %eax\n"
"	cltq\n"
"	movq	(%rcx,%rax,8), %rax\n"
"	movq	%rax, (%r12)\n"
"	jmp	.L16\n"
"	.p2align 4,,10\n"
".L12:\n"
"	movq	56(%rsp), %rsi\n"
"	addq	$1, %rbx\n"
"	cmpq	%rbx, %rsi\n"
"	jg	.L5\n"
"	jmp	.L4\n"
"	.p2align 4,,10\n"
".L49:\n"
"	movq	40(%rsp), %r12\n"
"	xorl	%edx, %edx\n"
"	xorl	%r8d, %r8d\n"
"	movl	$400050, %ebx\n"
"	movq	32(%rsp), %r11\n"
"	leaq	_count(%rip), %rbp\n"
"	.p2align 4,,10\n"
".L18:\n"
"	movq	0(%r13,%r8,8), %r10\n"
"	cmpq	%r10, %rdx\n"
"	cmovl	%r10, %rdx\n"
"	testq	%rsi, %rsi\n"
"	jle	.L24\n"
"	xorl	%eax, %eax\n"
"	.p2align 4,,10\n"
".L26:\n"
"	btq	%rax, %r8\n"
"	jc	.L25\n"
"	imulq	$800100, %rax, %rcx\n"
"	movq	%rbx, %r9\n"
"	subq	(%r12), %r9\n"
"	addq	%r9, %rcx\n"
"	movq	0(%rbp,%rcx,8), %rdi\n"
"	addq	%r10, %rdi\n"
"	cmpq	%rdi, %rdx\n"
"	cmovl	%rdi, %rdx\n"
".L25:\n"
"	addq	$1, %rax\n"
"	cmpq	%rsi, %rax\n"
"	jne	.L26\n"
".L24:\n"
"	addq	$1, %r8\n"
"	addq	$8, %r12\n"
"	cmpq	%r11, %r8\n"
"	jne	.L18\n"
".L14:\n"
"	movq	.refptr._ZSt4cout(%rip), %rcx\n"
".LEHB2:\n"
"	call	_ZNSo9_M_insertIxEERSoT_\n"
"	xorl	%eax, %eax\n"
"	addq	$104, %rsp\n"
"	popq	%rbx\n"
"	popq	%rsi\n"
"	popq	%rdi\n"
"	popq	%rbp\n"
"	popq	%r12\n"
"	popq	%r13\n"
"	popq	%r14\n"
"	popq	%r15\n"
"	ret\n"
".L31:\n"
"	xorl	%edx, %edx\n"
"	jmp	.L14\n"
".L34:\n"
"	movq	64(%rsp), %rcx\n"
"	addq	$16, %rbp\n"
"	movq	%rax, %rbx\n"
"	cmpq	%rbp, %rcx\n"
"	je	.L28\n"
"	call	_ZdlPv\n"
".L28:\n"
"	movq	%rbx, %rcx\n"
"	call	_Unwind_Resume\n"
"	nop\n"
".LEHE2:\n"
"	.def	__gxx_personality_seh0;	.scl	2;	.type	32;	.endef\n"
"	.seh_handler	__gxx_personality_seh0, @unwind, @except\n"
"	.seh_handlerdata\n"
".LLSDA10543:\n"
"	.byte	0xff\n"
"	.byte	0xff\n"
"	.byte	0x1\n"
"	.uleb128 .LLSDACSE10543-.LLSDACSB10543\n"
".LLSDACSB10543:\n"
"	.uleb128 .LEHB0-.LFB10543\n"
"	.uleb128 .LEHE0-.LEHB0\n"
"	.uleb128 0\n"
"	.uleb128 0\n"
"	.uleb128 .LEHB1-.LFB10543\n"
"	.uleb128 .LEHE1-.LEHB1\n"
"	.uleb128 .L34-.LFB10543\n"
"	.uleb128 0\n"
"	.uleb128 .LEHB2-.LFB10543\n"
"	.uleb128 .LEHE2-.LEHB2\n"
"	.uleb128 0\n"
"	.uleb128 0\n"
".LLSDACSE10543:\n"
"	.section	.text.startup,\"x\"\n"
"	.seh_endproc\n"
"	.p2align 4,,15\n"
"	.def	_GLOBAL__sub_I_dp;	.scl	3;	.type	32;	.endef\n"
"	.seh_proc	_GLOBAL__sub_I_dp\n"
"_GLOBAL__sub_I_dp:\n"
".LFB11890:\n"
"	subq	$40, %rsp\n"
"	.seh_stackalloc	40\n"
"	.seh_endprologue\n"
"	leaq	_ZStL8__ioinit(%rip), %rcx\n"
"	call	_ZNSt8ios_base4InitC1Ev\n"
"	leaq	__tcf_0(%rip), %rcx\n"
"	addq	$40, %rsp\n"
"	jmp	atexit\n"
"	.seh_endproc\n"
"	.section	.ctors,\"w\"\n"
"	.align 8\n"
"	.quad	_GLOBAL__sub_I_dp\n"
"	.globl	_count\n"
"	.bss\n"
"	.align 32\n"
"_count:\n"
"	.space 128016000\n"
"	.globl	mc\n"
"	.align 32\n"
"mc:\n"
"	.space 160\n"
"	.globl	mv\n"
"	.align 32\n"
"mv:\n"
"	.space 160\n"
"	.globl	vs\n"
"	.align 32\n"
"vs:\n"
"	.space 160\n"
"	.globl	sumdelta\n"
"	.align 32\n"
"sumdelta:\n"
"	.space 8388608\n"
"	.globl	dp\n"
"	.align 32\n"
"dp:\n"
"	.space 8388608\n"
".lcomm _ZStL8__ioinit,1,1\n"
"	.ident	\"GCC: (x86_64-posix-seh-rev0, Built by MinGW-W64 project) 8.1.0\"\n"
"	.def	_ZNSt8ios_base4InitD1Ev;	.scl	2;	.type	32;	.endef\n"
"	.def	_ZNSt8ios_base15sync_with_stdioEb;	.scl	2;	.type	32;	.endef\n"
"	.def	_ZNSi10_M_extractIxEERSiRT_;	.scl	2;	.type	32;	.endef\n"
"	.def	memset;	.scl	2;	.type	32;	.endef\n"
"	.def	_ZStrsIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EE;	.scl	2;	.type	32;	.endef\n"
"	.def	_ZdlPv;	.scl	2;	.type	32;	.endef\n"
"	.def	_ZNSo9_M_insertIxEERSoT_;	.scl	2;	.type	32;	.endef\n"
"	.def	_Unwind_Resume;	.scl	2;	.type	32;	.endef\n"
"	.def	_ZNSt8ios_base4InitC1Ev;	.scl	2;	.type	32;	.endef\n"
"	.def	atexit;	.scl	2;	.type	32;	.endef\n"
"	.section	.rdata$.refptr._ZSt4cout, \"dr\"\n"
"	.globl	.refptr._ZSt4cout\n"
"	.linkonce	discard\n"
".refptr._ZSt4cout:\n"
"	.quad	_ZSt4cout\n"
"	.section	.rdata$.refptr._ZSt3cin, \"dr\"\n"
"	.globl	.refptr._ZSt3cin\n"
"	.linkonce	discard\n"
".refptr._ZSt3cin:\n"
"	.quad	_ZSt3cin\n"
);