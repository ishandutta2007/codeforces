/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

// Actual solution is at the bottom

#undef NDEBUG

#include <algorithm>
#include <array>
#include <bitset>
#include <cassert>
#include <climits>
#include <cstdint>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <memory>
#include <numeric>
#include <queue>
#include <random>
#include <set>
#include <stack>
#include <string>
#include <unordered_set>
#include <unordered_map>
#include <vector>
// AtCoder library from https://github.com/atcoder/ac-library
// #include "../atcoder/all"

#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()

using namespace std;

using int64 = int64_t;
using ii = pair<int, int>;

class BUporotiePrefiksnieSummi {
 public:
  void solveOne() {
    int n, k;
    cin >> n >> k;
    vector<int64> s(k);
    for (auto& x : s) cin >> x;
    if (k == 1) {
      cout << "YES\n";
      return;
    }
    for (int i = 0; i + 2 < sz(s); ++i) {
      if (s[i + 1] - s[i] > s[i + 2] - s[i + 1]) {
        cout << "NO\n";
        return;
      }
    }
    auto mx = s[1] - s[0];
    int cnt = n - k + 1;
    if (mx * cnt < s[0]) {
      cout << "NO\n";
    } else {
      cout << "YES\n";
    }
  }

  void solve() {
    int nt;
    cin >> nt;
    for (int it = 0; it < nt; ++it) {
      // cout << "Case #" << (it + 1) << ": ";
      solveOne();
      // cerr << "Case #" << (it + 1) << " done" << endl;
    }
  }
};

// #define st_mtimespec st_mtim

int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(0);
    BUporotiePrefiksnieSummi solver;


    solver.solve();
    return 0;
}