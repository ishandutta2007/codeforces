import java.util.InputMismatchException;
import java.math.BigInteger;
import java.util.Stack;
import java.util.*;
import java.util.Collection;
import java.util.ArrayList;
import java.util.List;
import java.io.*;
import java.util.Comparator;
import java.util.Iterator;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.Arrays;

/**
 * Generated by Contest helper plug-in
 * Actual solution is at the bottom
 */
public class Main {
	public static void main(String[] args) {
		InputReader in = new StreamInputReader(System.in);
		PrintWriter out = new PrintWriter(System.out);
		run(in, out);
	}

	public static void run(InputReader in, PrintWriter out) {
		Solver solver = new TaskC();
		solver.solve(1, in, out);
		Exit.exit(in, out);
	}
}

abstract class InputReader {
	private boolean finished = false;

	public abstract int read();

	public int readInt() {
		int c = read();
		while (isSpaceChar(c))
			c = read();
		int sgn = 1;
		if (c == '-') {
			sgn = -1;
			c = read();
		}
		int res = 0;
		do {
			if (c < '0' || c > '9')
				throw new InputMismatchException();
			res *= 10;
			res += c - '0';
			c = read();
		} while (!isSpaceChar(c));
		return res * sgn;
	}

	public long readLong() {
		int c = read();
		while (isSpaceChar(c))
			c = read();
		int sgn = 1;
		if (c == '-') {
			sgn = -1;
			c = read();
		}
		long res = 0;
		do {
			if (c < '0' || c > '9')
				throw new InputMismatchException();
			res *= 10;
			res += c - '0';
			c = read();
		} while (!isSpaceChar(c));
		return res * sgn;
	}

	public String readString() {
		int c = read();
		while (isSpaceChar(c))
			c = read();
		StringBuffer res = new StringBuffer();
		do {
			res.appendCodePoint(c);
			c = read();
		} while (!isSpaceChar(c));
		return res.toString();
	}

	private boolean isSpaceChar(int c) {
		return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
	}

	public void setFinished(boolean finished) {
		this.finished = finished;
	}

	public abstract void close();
}

class StreamInputReader extends InputReader {
	private InputStream stream;
	private byte[] buf = new byte[1024];
	private int curChar, numChars;

	public StreamInputReader(InputStream stream) {
		this.stream = stream;
	}

	public int read() {
		if (numChars == -1)
			throw new InputMismatchException();
		if (curChar >= numChars) {
			curChar = 0;
			try {
				numChars = stream.read(buf);
			} catch (IOException e) {
				throw new InputMismatchException();
			}
			if (numChars <= 0)
				return -1;
		}
		return buf[curChar++];
	}

	public void close() {
		try {
			stream.close();
		} catch (IOException ignored) {
		}
	}
}

class Exit {
	private Exit() {
	}

	public static void exit(InputReader in, PrintWriter out) {
		in.setFinished(true);
		in.close();
		out.close();
	}
}

interface Solver {
	public void solve(int testNumber, InputReader in, PrintWriter out);
}

class GraphUtils {

	public static int[][] buildOrientedGraph(int vertexCount, int[] from, int[] to) {
		int edgeCount = from.length;
		int[] degree = new int[vertexCount];
		for (int i = 0; i < edgeCount; i++)
			degree[from[i]]++;
		int[][] graph = new int[vertexCount][];
		for (int i = 0; i < vertexCount; i++)
			graph[i] = new int[degree[i]];
		for (int i = 0; i < edgeCount; i++)
			graph[from[i]][--degree[from[i]]] = i;
		return graph;
	}

	public static int otherVertex(int vertex, int from, int to) {
		return from + to - vertex;
	}

	public static int[][] buildSimpleOrientedGraph(int vertexCount, int[] from, int[] to) {
		int[][] graph = buildOrientedGraph(vertexCount, from, to);
		for (int i = 0; i < graph.length; i++) {
			for (int j = 0; j < graph[i].length; j++) {
				graph[i][j] = otherVertex(i, from[graph[i][j]], to[graph[i][j]]);
			}
		}
		return graph;
	}
}

class IOUtils {
	public static void printArray(int[] array, PrintWriter out) {
		if (array.length == 0) {
			out.println();
			return;
		}
		out.print(array[0]);
		for (int i = 1; i < array.length; i++)
			out.print(" " + array[i]);
		out.println();
	}

	public static void readIntArrays(InputReader in, int[]... arrays) {
		for (int i = 0; i < arrays[0].length; i++) {
			for (int j = 0; j < arrays.length; j++)
				arrays[j][i] = in.readInt();
		}
	}

	}

class TaskC implements Solver {
	private int index = 0;
	private long[][] result;
	private int[][] mark;

	public void solve(int testNumber, InputReader in, PrintWriter out) {
		int count = in.readInt();
		long index = in.readLong() - 2001;
		int restrictionCount = in.readInt();
		int[] from = new int[restrictionCount];
		int[] to = new int[restrictionCount];
		IOUtils.readIntArrays(in, from, to);
		int[] min = new int[count];
		int[] max = new int[count];
		Arrays.fill(max, count - 1);
		int mask = (1 << count) - 1;
		for (int i = 0; i < restrictionCount; i++) {
			from[i]--;
			to[i]--;
		}
		result = new long[1 << count][count + 1];
		mark = new int[1 << count][count + 1];
		int[][] graph = GraphUtils.buildSimpleOrientedGraph(count, from, to);
		int[][] transposed = GraphUtils.buildSimpleOrientedGraph(count, to, from);
		long total = go(0, min, max, mask, transposed);
		if (total <= index) {
			out.println("The times have changed");
			return;
		}
		int[] answer = new int[count];
		for (int i = 0; i < count; i++) {
			for (int j = min[i]; j <= max[i]; j++) {
				if ((mask >> j & 1) == 0)
					continue;
				int[] copyMin = min.clone();
				int[] copyMax = max.clone();
				for (int k : graph[i])
					copyMin[k] = Math.max(copyMin[k], j + 1);
				for (int k : transposed[i])
					copyMax[k] = Math.min(copyMax[k], j - 1);
				long current = go(i + 1, copyMin, copyMax, mask - (1 << j), transposed);
				if (current > index) {
					answer[i] = j + 1;
					min = copyMin;
					max = copyMax;
					mask -= 1 << j;
					break;
				} else
					index -= current;
			}
		}
		IOUtils.printArray(answer, out);
	}

	private long go(int from, int[] min, int[] max, int mask, int[][] transposed) {
		index++;
		return go((1 << min.length) - (1 << from), 0, min, max, mask, transposed);
	}

	private long go(int positions, int step, int[] min, int[] max, int mask, int[][] transposed) {
		if (mark[positions][step] == index)
			return result[positions][step];
		mark[positions][step] = index;
		if (step == min.length)
			return result[positions][step] = 1;
		if (((mask >> step) & 1) == 0)
			return result[positions][step] = go(positions,  step + 1, min, max, mask, transposed);
		result[positions][step] = 0;
		for (int i = 0; i < min.length; i++) {
			if ((positions >> i & 1) == 0 || min[i] > step)
				continue;
			if (max[i] < step)
				return result[positions][step] = 0;
			boolean good = true;
			for (int vertex : transposed[i]) {
				if ((positions >> vertex & 1) != 0) {
					good = false;
					break;
				}
			}
			if (good)
				result[positions][step] += go(positions - (1 << i), step + 1, min, max, mask, transposed);
		}
		return result[positions][step];
	}
}