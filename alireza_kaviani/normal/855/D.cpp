/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e5 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n, q, H[MAXN], par[LOG][MAXN], mx[LOG][MAXN], mn[LOG][MAXN];

pll getPar(ll v, ll h, ll x) {
    ll ans = 1;
    for (ll i = 0; i < LOG; i++) {
        if (h & (1ll << i)) {
            if (mx[i][v] != x || mn[i][v] != x) ans = 0;
            v = par[i][v];
        }
    }
    return {v, ans};
}

ll LCA(ll v, ll u) {
    if (H[v] > H[u]) swap(v, u);
    u = getPar(u, H[u] - H[v], 0).X;
    if (u == v) return v;
    for (ll i = LOG - 1; i >= 0; i--) {
        if (par[i][v] != par[i][u]) {
            v = par[i][v];
            u = par[i][u];
        }
    }
    return par[0][v];
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    for (ll i = 0; i < LOG; i++) {
        for (ll j = 0; j < MAXN; j++) {
            mx[i][j] = -INF;
            mn[i][j] = INF;
        }
    }

    cin >> n;
    for (ll i = 1; i <= n; i++) {
        cin >> par[0][i] >> mx[0][i];
        mn[0][i] = mx[0][i];
        if (par[0][i] == -1) par[0][i] = 0;
        H[i] = H[par[0][i]] + 1;
    }

    for (ll i = 1; i < LOG; i++) {
        for (ll j = 0; j <= n; j++) {
            par[i][j] = par[i - 1][par[i - 1][j]];
            mx[i][j] = max(mx[i - 1][j], mx[i - 1][par[i - 1][j]]);
            mn[i][j] = min(mn[i - 1][j], mn[i - 1][par[i - 1][j]]);
        }
    }

    cin >> q;
    while (q--) {
        ll t, v, u;
        cin >> t >> u >> v;
        ll lca = LCA(v, u);
        if (v == lca) cout << "NO" << endl;
        else if (t == 1) {
            if (u != lca || getPar(v, H[v] - H[u], 0).Y == 0) cout << "NO" << endl;
            else cout << "YES" << endl;
        } else {
            if (getPar(v, H[v] - H[lca], 1).Y == 1 && getPar(u, H[u] - H[lca], 0).Y == 1) cout << "YES" << endl;
            else cout << "NO" << endl;
        }
    }

    return 0;
}
/*

*/