/* Generated by powerful Codeforces Tool
 * You can download the binary file in here https://github.com/xalanq/cf-tool (Windows, macOS, Linux)
 * Author: alireza_kaviani
 * Time: 2020-05-12 17:05:01
**/
#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e3 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n , m , q , dist[MAXN][MAXN];
ll dx[4] = {1 , -1 , 0 , 0} , dy[4] = {0 , 0 , 1 , -1};
string s[MAXN];
queue<int> Q;

void BFS(){
    while(!Q.empty()){
        int x = Q.front() ; Q.pop();
        int y = Q.front() ; Q.pop();
        if(x == 0 || y == 0 || x == n + 1 || y == m + 1)    continue;
        for(int i = 0 ; i < 4 ; i++){
            int nx = x + dx[i] , ny = y + dy[i];
            if(dist[nx][ny] == INF){
                dist[nx][ny] = dist[x][y] + 1;
                Q.push(nx) ; Q.push(ny);
            }
        }
    }
}

int main() {
    ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
    for(int i = 0 ; i < MAXN ; i++) fill(dist[i] , dist[i] + MAXN , INF);

    cin >> n >> m >> q;
    s[0] = s[n + 1] = string(m + 2 , '.');
    for(int i = 1 ; i <= n ; i++){
        cin >> s[i] ; s[i] = "." + s[i] + ".";
    }
    for(int i = 1 ; i <= n ; i++){
        for(int j = 1 ; j <= m ; j++){
            for(int k = 0 ; k < 4 ; k++){
                int x = i + dx[k] , y = j + dy[k];
                if(s[i][j] == s[x][y])  Q.push(i) , Q.push(j) , dist[i][j] = 0;
            }
        }
    }

    BFS();
    while(q--){
        ll x , y , p;
        cin >> x >> y >> p;
        if(p % 2 == dist[x][y] % 2 || dist[x][y] >= p)    cout << s[x][y] << endl;
        else    cout << (s[x][y] == '1' ? '0' : '1') << endl;
    }

    return 0;
}
/*

*/