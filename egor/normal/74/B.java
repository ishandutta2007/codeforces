import java.util.InputMismatchException;
import java.math.BigInteger;
import java.io.*;
import java.util.Arrays;

/**
 * Generated by Contest helper plug-in
 * Actual solution is at the bottom
 */
public class Main {
	public static void main(String[] args) {
		InputReader in = new StreamInputReader(System.in);
		PrintWriter out = new PrintWriter(System.out);
		run(in, out);
	}

	public static void run(InputReader in, PrintWriter out) {
		Solver solver = new TaskB();
		solver.solve(1, in, out);
		Exit.exit(in, out);
	}
}

abstract class InputReader {
	private boolean finished = false;

	public abstract int read();

	public int readInt() {
		int c = read();
		while (isSpaceChar(c))
			c = read();
		int sgn = 1;
		if (c == '-') {
			sgn = -1;
			c = read();
		}
		int res = 0;
		do {
			if (c < '0' || c > '9')
				throw new InputMismatchException();
			res *= 10;
			res += c - '0';
			c = read();
		} while (!isSpaceChar(c));
		return res * sgn;
	}

	public String readString() {
		int c = read();
		while (isSpaceChar(c))
			c = read();
		StringBuffer res = new StringBuffer();
		do {
			res.appendCodePoint(c);
			c = read();
		} while (!isSpaceChar(c));
		return res.toString();
	}

	private boolean isSpaceChar(int c) {
		return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
	}

	private String readLine0() {
		StringBuffer buf = new StringBuffer();
		int c = read();
		while (c != '\n' && c != -1) {
			if (c != '\r')
				buf.appendCodePoint(c);
			c = read();
		}
		return buf.toString();
	}

	public String readLine() {
		String s = readLine0();
		while (s.trim().length() == 0)
			s = readLine0();
		return s;
	}

	public void setFinished(boolean finished) {
		this.finished = finished;
	}

	public abstract void close();

	}

class StreamInputReader extends InputReader {
	private InputStream stream;
	private byte[] buf = new byte[1024];
	private int curChar, numChars;

	public StreamInputReader(InputStream stream) {
		this.stream = stream;
	}

	public int read() {
		if (numChars == -1)
			throw new InputMismatchException();
		if (curChar >= numChars) {
			curChar = 0;
			try {
				numChars = stream.read(buf);
			} catch (IOException e) {
				throw new InputMismatchException();
			}
			if (numChars <= 0)
				return -1;
		}
		return buf[curChar++];
	}

	@Override
	public void close() {
		try {
			stream.close();
		} catch (IOException ignored) {
		}
	}
}

interface Solver {
	public void solve(int testNumber, InputReader in, PrintWriter out);
}

class Exit {
	private Exit() {
	}

	public static void exit(InputReader in, PrintWriter out) {
		in.setFinished(true);
		in.close();
		out.close();
	}
}

class TaskB implements Solver {
	public void solve(int testNumber, InputReader in, PrintWriter out) {
		int carCount = in.readInt();
		int cheaterCar = in.readInt() - 1;
		int controllerCar = in.readInt() - 1;
		int controllerDirection = "to tail".equals(in.readLine()) ? 1 : -1;
		boolean[] possibleCheaterLocations = new boolean[carCount];
		possibleCheaterLocations[cheaterCar] = true;
		char[] types = in.readString().toCharArray();
		for (int i = 0; i < types.length; i++) {
			boolean[] nextPossibleLocations = new boolean[carCount];
			if (controllerCar == 0)
				controllerDirection = 1;
			else if (controllerCar == carCount - 1)
				controllerDirection = -1;
			int nextControllerCar = controllerCar + controllerDirection;
			if (types[i] == '1') {
				Arrays.fill(nextPossibleLocations, true);
				nextPossibleLocations[nextControllerCar] = false;
			} else {
				boolean caught = true;
				for (int j = 0; j < carCount; j++) {
					if (j != controllerCar && j != nextControllerCar && (possibleCheaterLocations[j] || j > 0 && possibleCheaterLocations[j - 1] || j < carCount - 1 && possibleCheaterLocations[j + 1])) {
						nextPossibleLocations[j] = true;
						caught = false;
					}
				}
				if (caught) {
					out.println("Controller " + (i + 1));
					return;
				}
			}
			possibleCheaterLocations = nextPossibleLocations;
			controllerCar = nextControllerCar;
		}
		out.println("Stowaway");
	}
}