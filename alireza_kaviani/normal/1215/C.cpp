/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n;
string s, t;
vector<ll> A, B;
vector<pll> ans;

int main() {
    fast_io;

    cin >> n >> s >> t;
    for (ll i = 0; i < n; i++) {
        if (s[i] != t[i]) {
            if (s[i] == 'a') A.push_back(i + 1);
            else B.push_back(i + 1);
        }
    }

    if ((A.size() + B.size()) % 2 == 1) return cout << -1 << endl, 0;
    while (A.size() >= 2) {
        ans.push_back({A.back(), A[SZ(A) - 2]});
        A.pop_back();
        A.pop_back();
    }
    while (B.size() >= 2) {
        ans.push_back({B.back(), B[SZ(B) - 2]});
        B.pop_back();
        B.pop_back();
    }

    if (A.size()) {
        ans.push_back({A.back(), A.back()});
        ans.push_back({A.back(), B.back()});
    }
    cout << ans.size() << endl;
    for (pll i : ans) cout << i.X << sep << i.Y << endl;

    return 0;
}
/*

*/