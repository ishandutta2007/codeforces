/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       int(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n, A[MAXN], dp[4][MAXN];
vector<ll> adj[MAXN];

void DFS(ll v, ll p = -1) {
    vector<pll> vec[3];
    dp[0][v] = dp[1][v] = dp[2][v] = dp[3][v] = A[v];
    for (ll u : adj[v]) {
        if (u != p) {
            DFS(u, v);
            vec[0].push_back({dp[0][u], u});
            vec[1].push_back({dp[1][u], u});
            vec[2].push_back({dp[2][u], u});
            dp[1][v] = max(dp[1][v], dp[1][u]);
            dp[2][v] = max(dp[2][v], dp[2][u] + A[v]);
            dp[2][v] = max(dp[2][v], dp[1][u] + A[v]);
            dp[3][v] = max(dp[3][v], dp[3][u]);
        }
    }
    sort(all(vec[0]), greater<pll>());
    sort(all(vec[1]), greater<pll>());
    sort(all(vec[2]), greater<pll>());
    if (SZ(vec[0]) >= 1) dp[0][v] = max(dp[0][v], vec[0][0].X + A[v]);
    if (SZ(vec[0]) >= 2) dp[1][v] = max(dp[1][v], vec[0][0].X + vec[0][1].X + A[v]);
    if (SZ(vec[1]) >= 2) dp[3][v] = max(dp[3][v], vec[1][0].X + vec[1][1].X);
    for (ll i = 0; i < min(SZ(vec[0]), 2); i++) {
        for (ll j = 0; j < min(SZ(vec[0]), 2); j++) {
            if (vec[0][i].Y != vec[1][j].Y) {
                dp[2][v] = max(dp[2][v], vec[0][i].X + vec[1][j].X + A[v]);
            }
            if (vec[0][i].Y != vec[2][j].Y) {
                dp[3][v] = max(dp[3][v], vec[0][i].X + vec[2][j].X + A[v]);
            }
        }
    }
    for (ll i = 0; i < min(SZ(vec[0]), 3); i++) {
        for (ll j = i + 1; j < min(SZ(vec[0]), 3); j++) {
            for (ll k = 0; k < min(SZ(vec[0]), 3); k++) {
                if (vec[0][i].Y != vec[1][k].Y && vec[0][j].Y != vec[1][k].Y) {
                    dp[3][v] = max(dp[3][v], vec[0][i].X + vec[0][j].X + vec[1][k].X + A[v]);
                }
            }
        }
    }
    for (ll i = 1; i < 4; i++) dp[i][v] = max(dp[i][v], dp[i - 1][v]);
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    cin >> n;
    for (ll i = 1; i <= n; i++) cin >> A[i];
    for (ll i = 1; i < n; i++) {
        ll v, u;
        cin >> v >> u;
        adj[v].push_back(u);
        adj[u].push_back(v);
    }
    DFS(1);
    //for(ll i = 1 ; i <= n ; i++)    cout << dp[0][i] << sep << dp[1][i] << sep << dp[2][i] << sep << dp[3][i] << endl;
    cout << dp[3][1] << endl;

    return 0;
}
/*

*/