/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author majk
 */

#ifndef MAJK_LIB
#define MAJK_LIB

#include <vector>
#include <stack>
#include <iostream>
#include <unordered_map>
#include <unordered_set>
#include <map>
#include <iomanip>
#include <set>
#include <functional>
#include <fstream>
#include <algorithm>
#include <cassert>
#include <cmath>
#include <string>
#include <sstream>
#include <queue>
#include <bitset>
using namespace std;

#define x first
#define y second
typedef std::pair<int,int> pii; typedef long long ll; typedef unsigned long long ull; typedef unsigned int ui; typedef pair<ui,ui> puu;

template <typename T, typename U> std::istream&operator>>(std::istream&i, pair<T,U>&p) {i >> p.x >> p.y; return i;}
template<typename T>std::istream&operator>>(std::istream&i,vector<T>&t) {for(auto&v:t){i>>v;}return i;}
template <typename T, typename U> std::ostream&operator<<(std::ostream&o, const pair<T,U>&p) {o << p.x << ' ' << p.y; return o;}
template<typename T>std::ostream&operator<<(std::ostream&o,const vector<T>&t) {if(t.empty())o<<'\n';for(size_t i=0;i<t.size();++i){o<<t[i]<<" \n"[i == t.size()-1];}return o;}
template<typename T> using minheap = priority_queue<T, vector<T>, greater<T>>;
template<typename T> using maxheap = priority_queue<T, vector<T>, less<T>>;
template <typename T> bool in(T a, T b, T c) { return a <= b && b < c; }
ui logceil(int x) { return 8*sizeof(int)-__builtin_clz(x); }

namespace std { template<typename T,typename U>struct hash<pair<T,U>>{hash<T>t;hash<U>u;size_t operator()(const pair<T,U>&p)const{return t(p.x)^(u(p.y)<<7);}}; }
template<typename T,typename F>T bsh(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){l=m+1;r=m;}else{h=m-1;}}return r;}
template<typename F> double bshd(double l,double h,const F&f,double p=1e-9){ui r=3+(ui)log2((h-l)/p);while(r--){double m=(l+h)/2;if(f(m)){l=m;}else{h=m;}}return (l+h)/2;}
template<typename T,typename F>T bsl(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){h=m-1;r=m;}else{l=m+1;}}return r;}
template<typename F> double bsld(double l,double h,const F&f,double p=1e-9){ui r=3+(ui)log2((h-l)/p);while(r--){double m=(l+h)/2;if(f(m)){h=m;}else{l=m;}}return (l+h)/2;}
template<typename T> T gcd(T a,T b) { if (a<b) swap(a,b); return b?gcd(b,a%b):a; }

template<typename T>class vector2:public vector<vector<T>>{public:vector2(){} vector2(size_t a,size_t b,T t=T()):vector<vector<T>>(a,vector<T>(b,t)){}};
template<typename T>class vector3:public vector<vector2<T>>{public:vector3(){} vector3(size_t a,size_t b,size_t c,T t=T()):vector<vector2<T>>(a,vector2<T>(b,c,t)){}};
template<typename T>class vector4:public vector<vector3<T>>{public:vector4(){} vector4(size_t a,size_t b,size_t c,size_t d,T t=T()):vector<vector3<T>>(a,vector3<T>(b,c,d,t)){}};
template<typename T>class vector5:public vector<vector4<T>>{public:vector5(){} vector5(size_t a,size_t b,size_t c,size_t d,size_t e,T t=T()):vector<vector4<T>>(a,vector4<T>(b,c,d,e,t)){}};


#endif
#ifndef MAJK_MINCOST_MAXFLOW
#define MAJK_MINCOST_MAXFLOW


// MIN-COST MAX-FLOW ALGORITHM. LOOK ELSEWHERE
template<typename T = int, typename U = int>
struct MinCostMaxFlow{
    struct Edge{
        U c; T f; int to, rev;
        Edge(int _to, U _c, T _f, int _rev):c(_c), f(_f), to(_to), rev(_rev){}
    };
    static constexpr U INFCOST = numeric_limits<U>::max()/2;
    U eps, minEps;
    int N, source, sink;
    vector<vector<Edge>> G;
    vector<vector<int>> hs;
    vector<int> isq, cur, co, he;
    vector<T> ex;
    vector<U> h;
    MinCostMaxFlow(int N, int source, int sink): eps(0), minEps(std::numeric_limits<U>::max()), N(N), source(source), sink(sink), G(N){}
    void addEdge(int a, int b, T cap, U cost){
        eps = max(eps, abs(cost));
        if (cost != 0) minEps = min(minEps, abs(cost));
        G[a].emplace_back(b, cost, cap, G[b].size());
        G[b].emplace_back(a, -cost, 0, G[a].size()-1);
    }
    void add_flow(Edge& e, T f) {
        Edge &back = G[e.to][e.rev];
        if (!ex[e.to] && f) hs[he[e.to]].push_back(e.to);
        e.f -= f; ex[e.to] += f;
        back.f += f; ex[back.to] -= f;
    }
    T max_flow() {
        ex.assign(N, 0); he.assign(N, 0);
        hs.resize(2*N); co.assign(2*N, 0); cur.assign(N, 0);
        he[source] = N;
        ex[sink] = 1;
        co[0] = N-1;
        for(auto &e:G[source]) add_flow(e, e.f);
        if(hs[0].size())
            for (int hi = 0; hi>=0; ) {
                int u = hs[hi].back();
                hs[hi].pop_back();
                while (ex[u] > 0) { // discharge u
                    if (cur[u] == G[u].size()) {
                        he[u] = std::numeric_limits<int>::max();
                        for(int i=0;i<G[u].size();++i){
                            auto &e = G[u][i];
                            if (e.f && he[u] - 1 > he[e.to]){
                                he[u] = he[e.to] + 1, cur[u] = i;
                            }
                        }
                        if (++co[he[u]], !--co[hi] && hi < N)
                            for(int i=0;i<N;++i)
                                if (hi < he[i] && he[i] < N){
                                    --co[he[i]];
                                    he[i] = N + 1;
                                }
                        hi = he[u];
                    } else if (G[u][cur[u]].f && he[u] == he[G[u][cur[u]].to]+1)
                        add_flow(G[u][cur[u]], min(ex[u], G[u][cur[u]].f));
                    else ++cur[u];
                }
                while (hi>=0 && hs[hi].empty()) --hi;
            }
        return -ex[source];
    }
    void push(Edge &e, T amt){
        if(e.f < amt) amt=e.f;
        e.f-=amt; ex[e.to]+=amt;
        G[e.to][e.rev].f+=amt; ex[G[e.to][e.rev].to]-=amt;
    }
    void relabel(int vertex){
        U newHeight = -INFCOST;
        for(int i=0;i<G[vertex].size();++i){
            Edge const&e = G[vertex][i];
            if(e.f && newHeight < h[e.to] - e.c){
                newHeight = h[e.to] - e.c;
                cur[vertex] = i;
            }
        }
        h[vertex] = newHeight - eps;
    }
    pair<T, U> minCostMaxFlow(){
        U retCost = 0;
        for(int i=0;i<N;++i)
            for(Edge &e:G[i])
                retCost += e.c*(e.f);
        //find max-flow
        T retFlow = max_flow();
        h.assign(N, 0); ex.assign(N, 0);
        isq.assign(N, 0); cur.assign(N,0);
        queue<int> q;
        minEps = min(1e-9, minEps/1e9);
        for(;eps>minEps;eps/=4){
            //refine
            fill(cur.begin(), cur.end(), 0);
            for(int i=0;i<N;++i)
                for(auto &e:G[i])
                    if(h[i] + e.c - h[e.to] < 0 && e.f) push(e, e.f);
            for(int i=0;i<N;++i){
                if(ex[i]>0){
                    q.push(i);
                    isq[i]=1;
                }
            }
            // make flow feasible
            while(!q.empty()){
                int u=q.front();q.pop();
                isq[u]=0;
                while(ex[u]>0){
                    if(cur[u] == G[u].size())
                        relabel(u);
                    for(int &i=cur[u], max_i = G[u].size();i<max_i;++i){
                        Edge &e=G[u][i];
                        if(h[u] + e.c - h[e.to] < 0){
                            push(e, ex[u]);
                            if(ex[e.to]>0 && isq[e.to]==0){
                                q.push(e.to);
                                isq[e.to]=1;
                            }
                            if(ex[u]==0) break;
                        }
                    }
                }
            }
        }
        for(int i=0;i<N;++i){
            for(Edge &e:G[i]){
                retCost -= e.c*(e.f);
            }
        }
        return {retFlow, retCost/2};
    }
    T getFlow(Edge const &e){
        return G[e.to][e.rev].f;
    }
};
// DINIC MAX-FLOW ALGORITHM
#endif

class TaskE {
public:
void solve(istream& cin, ostream& cout) {
    int N; cin >> N;
    vector<pii> X(N);
    for (pii&x:X) cin >> x.x >> x.y;

    MinCostMaxFlow<int, double> MFC(2*N+2, 2*N, 2*N+1);
    for (int i = 0; i < N; ++i) {
        MFC.addEdge(2*N, i, 2, 0);
        MFC.addEdge(N+i, 2*N+1, 1, 0);

        for (int j = 0; j < N; ++j) {
            if (X[i].y > X[j].y) {
                double dx = X[i].x - X[j].x, dy = X[i].y - X[j].y;
                MFC.addEdge(i, j+N, 1, sqrt(dx*dx+dy*dy)/1e30);
            }
        }
    }

    pair<int, double> F = MFC.minCostMaxFlow();
    if (F.x == N-1) {
        cout << fixed << setprecision(10) << F.y*1e30 << endl;
    } else {
        cout << -1 << endl;
    }
}
};


int main() {
	ios_base::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr);
	TaskE solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
    return 0;
}