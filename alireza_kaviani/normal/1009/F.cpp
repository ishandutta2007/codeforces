/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n, timer, ver[MAXN], H[MAXN], sz[MAXN], st[MAXN], fn[MAXN], ans[MAXN], cnt[MAXN];
vector<ll> adj[MAXN];
pll mn = {INF, INF};

bool cmp(ll v, ll u) {
    return sz[v] < sz[u];
}

void DFS1(ll v, ll p = -1) {
    if (p != -1) adj[v].erase(find(all(adj[v]), p));
    H[v] = (p == -1 ? 0 : H[p] + 1);
    sz[v] = 1;
    for (ll u : adj[v]) DFS1(u, v), sz[v] += sz[u];
}

void DFS2(ll v, ll clear = 1) {
    st[v] = ++timer;
    ver[timer] = v;
    for (ll i = 0; i < SZ(adj[v]); i++) DFS2(adj[v][i], (i != SZ(adj[v]) - 1));
    cnt[H[v]]++;
    mn = min(mn, pll(-1, H[v]));
    for (ll i = 0; i < SZ(adj[v]) - 1; i++) {
        ll u = adj[v][i];
        for (ll j = st[u]; j <= fn[u]; j++) {
            ll x = ver[j];
            cnt[H[x]]++;
            mn = min(mn, pll(-cnt[H[x]], H[x]));
        }
    }
    ans[v] = mn.Y;
    fn[v] = timer;
    if (clear) {
        for (ll i = st[v]; i <= fn[v]; i++) cnt[H[ver[i]]] = 0;
        mn = {INF, INF};
    }
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    cin >> n;
    for (ll i = 1; i < n; i++) {
        ll v, u;
        cin >> v >> u;
        adj[v].push_back(u);
        adj[u].push_back(v);
    }

    DFS1(1);
    for (ll i = 1; i <= n; i++) sort(all(adj[i]), cmp);
    DFS2(1);
    for (ll i = 1; i <= n; i++) cout << ans[i] - H[i] << endl;

    return 0;
}
/*

*/