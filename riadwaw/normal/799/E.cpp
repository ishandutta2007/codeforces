/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author RiaD
 */

#include <iostream>
#include <fstream>

#include <iostream>


#include <iterator>


#include <string>
#include <stdexcept>

#ifndef SPCPPL_ASSERT
	#ifdef SPCPPL_DEBUG
		#define SPCPPL_ASSERT(condition) \
		if(!(condition)) { \
			throw std::runtime_error(std::string() + #condition + " in line " + std::to_string(__LINE__) + " in " + __PRETTY_FUNCTION__); \
		}
	#else
		#define SPCPPL_ASSERT(condition)
	#endif
#endif


/**
* Support decrementing and multi-passing, but not declared bidirectional(or even forward) because
* it's reference type is not a reference.
*
* It doesn't return reference because
* 1. Anyway it'll not satisfy requirement [forward.iterators]/6
*   If a and b are both dereferenceable, then a == b if and only if *a and
*   b are bound to the same object.
* 2. It'll not work with reverse_iterator that returns operator * of temporary which is temporary for this iterator
*
* Note, reverse_iterator is not guaranteed to work  now too since it works only with bidirectional iterators,
* but it's seems to work at least on my implementation.
*
* It's not really useful anywhere except iterating anyway.
*/
template <typename T>
class IntegerIterator: public std::iterator<std::input_iterator_tag, T, std::ptrdiff_t, T*, T> {
public:
	explicit IntegerIterator(T value): value(value) {

	}

	IntegerIterator& operator++() {
		++value;
		return *this;
	}

	IntegerIterator operator++(int) {
		IntegerIterator copy = *this;
		++value;
		return copy;
	}

	IntegerIterator& operator--() {
		--value;
		return *this;
	}

	IntegerIterator operator--(int) {
		IntegerIterator copy = *this;
		--value;
		return copy;
	}

	T operator*() const {
		return value;
	}

	bool operator==(IntegerIterator rhs) const {
		return value == rhs.value;
	}

	bool operator!=(IntegerIterator rhs) const {
		return !(*this == rhs);
	}

private:
	T value;
};

template <typename T>
class IntegerRange {
public:
	IntegerRange(T begin, T end): begin_(begin), end_(end) {
		SPCPPL_ASSERT(begin <= end);
	}

	IntegerIterator<T> begin() const {
		return IntegerIterator<T>(begin_);
	}

	IntegerIterator<T> end() const {
		return IntegerIterator<T>(end_);
	}

private:
	T begin_;
	T end_;
};

template <typename T>
class ReversedIntegerRange {
	typedef std::reverse_iterator<IntegerIterator<T>> IteratorType;
public:
	ReversedIntegerRange(T begin, T end): begin_(begin), end_(end) {
		SPCPPL_ASSERT(begin >= end);
	}

	IteratorType begin() const {
		return IteratorType(IntegerIterator<T>(begin_));
	}

	IteratorType end() const {
		return IteratorType(IntegerIterator<T>(end_));
	}

private:
	T begin_;
	T end_;
};

template <typename T>
IntegerRange<T> range(T to) {
	return IntegerRange<T>(0, to);
}

template <typename T>
IntegerRange<T> range(T from, T to) {
	return IntegerRange<T>(from, to);
}

template <typename T>
IntegerRange<T> inclusiveRange(T to) {
	return IntegerRange<T>(0, to + 1);
}

template <typename T>
IntegerRange<T> inclusiveRange(T from, T to) {
	return IntegerRange<T>(from, to + 1);
}

template <typename T>
ReversedIntegerRange<T> downrange(T from) {
	return ReversedIntegerRange<T>(from, 0);
}

template <typename T>
ReversedIntegerRange<T> downrange(T from, T to) {
	return ReversedIntegerRange<T>(from, to);
}

template <typename T>
ReversedIntegerRange<T> inclusiveDownrange(T from) {
	return ReversedIntegerRange<T>(from + 1, 0);
}

template <typename T>
ReversedIntegerRange<T> inclusiveDownrange(T from, T to) {
	return ReversedIntegerRange<T>(from + 1, to);
}



#include <algorithm>
#include <vector>


template <typename R>
void sort(R& range) {
	std::sort(range.begin(), range.end());
}

template <typename R, typename Comp>
void sort(R& range, Comp comp) {
	std::sort(range.begin(), range.end(), comp);
}

template <typename R>
void reverse(R& range) {
	std::reverse(range.begin(), range.end());
}

template <typename R, typename T>
auto lower_bound(const R& range, const T& value) -> decltype(range.begin()) {
	return std::lower_bound(range.begin(), range.end(), value);
}

template <typename R, typename T, typename Comp>
auto lower_bound(const R& range, const T& value, Comp comp) -> decltype(range.begin()) {
	return std::lower_bound(range.begin(), range.end(), value, comp);
}

template <typename R, typename T>
auto upper_bound(const R& range, const T& value) -> decltype(range.begin()) {
	return std::upper_bound(range.begin(), range.end(), value);
}

template <typename R, typename T, typename Comp>
auto upper_bound(const R& range, const T& value, Comp comp) -> decltype(range.begin()) {
	return std::upper_bound(range.begin(), range.end(), value, comp);
}

template <typename R>
auto min_element(const R& range) -> decltype(range.begin()) {
	return std::min_element(range.begin(), range.end());
}

template <typename R>
auto max_element(const R& range) -> decltype(range.begin()) {
	return std::max_element(range.begin(), range.end());
}

template <typename R>
bool next_permutation(R& range) {
	return std::next_permutation(range.begin(), range.end());
}

template <typename T>
void unique(std::vector<T>& range) {
	range.erase(std::unique(range.begin(), range.end()), range.end());
}

template <typename R>
R sorted(R range) {
	sort(range);
	return range;
}

template <typename R, typename Comp>
R sorted(R range, Comp comp) {
	sort(range, comp);
	return range;
}

template <typename R>
R reversed(R range) {
	reverse(range);
	return range;
}


#include <set>


#include <cstddef>
#include <cstdint>


#include <random>


typedef std::mt19937 impl__Random;

inline impl__Random& randomEngine() {
	static std::random_device device;
	static impl__Random engine(device());
	return engine;
}

inline int randomInteger() {
	std::uniform_int_distribution<int> d;
	return d(randomEngine());
}

inline int randomInteger(int to) {
	SPCPPL_ASSERT(to > 0);
	std::uniform_int_distribution<int> d(0, to - 1);
	return d(randomEngine());
}

inline int randomInteger(int from, int to) {
	return from + randomInteger(to - from);
}


template <typename T>
class TreapMultiset {
private:
	struct NodeStruct {
		T value;
		std::size_t count;
		NodeStruct* l;
		NodeStruct* r;
		int32_t priority;
		T sum;

		template <typename... Args>
		explicit NodeStruct(Args&&... args):
				value(std::forward<Args>(args)...),
				count(1),
				l(nullptr),
				r(nullptr),
				priority(randomInteger()),
				sum(value) {

		}

		void push() {
		}

		void recalc() {
			count = 1 + cnt(l) + cnt(r);
			sum = value + Sum(l) + Sum(r);
		}
	};
	using Node = NodeStruct*;

	static std::size_t cnt(Node v) {
		if (!v)
			return 0;
		return v->count;
	}

	static T Sum(Node v) {
		if (!v) {
			return 0;
		}
		return v->sum;
	}

	Node merge(Node l, Node r) {
		if (!l) {
			return r;
		}
		if (!r) {
			return l;
		}
		if (l->priority < r->priority) {
			l->push();
			l->r = merge(l->r, r);
			l->recalc();
			return l;
		}
		else {
			r->push();
			r->l = merge(l, r->l);
			r->recalc();
			return r;
		}
	}

	void splitByIndex(Node v, std::size_t index, Node& l, Node& r) {
		l = nullptr;
		r = nullptr;
		if (!v) {
			return;
		}
		v->push();
		if (cnt(v->l) < index) {
			l = v;
			splitByIndex(l->r, index - cnt(v->l) - 1, l->r, r);
			l->recalc();
		}
		else {
			r = v;
			splitByIndex(r->l, index, l, r->l);
			r->recalc();
		}
	}

	void splitByValue(Node v, const T& value, Node& l, Node& r) {
		l = nullptr;
		r = nullptr;
		if (!v) {
			return;
		}
		v->push();
		if (v->value < value) {
			l = v;
			splitByValue(l->r, value, l->r, r);
			l->recalc();
		}
		else {
			r = v;
			splitByValue(r->l, value, l, r->l);
			r->recalc();
		}
	}

	void insertNode(Node newNode) {
		Node l = nullptr;
		Node r = nullptr;
		splitByValue(root, newNode->value, l, r);
		root = merge(merge(l, newNode), r);
	}

public:
	TreapMultiset(): root(nullptr) {
	}

	std::size_t size() const {
		return cnt(root);
	}

	template <typename... Args>
	void emplace(Args&&... args) {
		insertNode(new NodeStruct(std::forward<Args>(args)...));
	}

	void insert(const T& value) {
		insertNode(new NodeStruct(value));
	}

	void insert(T&& value) {
		insertNode(new NodeStruct(std::move(value)));
	}

	void erase_one(const T& value) {
		Node l = nullptr;
		Node m = nullptr;
		Node r = nullptr;
		splitByValue(root, value, l, r);
		splitByIndex(r, 1, m, r);
		SPCPPL_ASSERT(m->value == value);
		delete m;
		root = merge(l, r);
	}

	const T& operator [] (std::size_t index) {
		Node l = nullptr;
		Node m = nullptr;
		Node r = nullptr;
		splitByIndex(root, index, l, r);
		splitByIndex(r, 1, m, r);
		SPCPPL_ASSERT(m != nullptr);
		root = merge(merge(l, m), r);
		return m->value;
	}

	T sumFirst(size_t k) {
		Node l = nullptr;
		Node r = nullptr;
		splitByIndex(root, k, l, r);
		T val = Sum(l);
		root = merge(l, r);
		return val;
	}

private:
	Node root;
};



template <typename T>
void updateMin(T& oldValue, const T& newValue) {
	if (newValue < oldValue) {
		oldValue = newValue;
	}
}

template <typename T>
void updateMax(T& oldValue, const T& newValue) {
	if (oldValue < newValue) {
		oldValue = newValue;
	}
}

#include <cassert>

using namespace std;

class TaskE {
public:
	void solve(std::istream& in, std::ostream& out) {
		int n, m, k;
		in >> n >> m >> k;
		vector<int> c(n);
		for (int i: range(n)) {
			in >> c[i];
		}

		vector<int> likes(n);
		for (int t: {1, 2}) {
			int a;
			in >> a;
			for (int i: range(a)) {
				int x;
				in >> x;
				--x;
				likes[x] += t;
			}
		}


		vector<int> both;
		vector<int> l1;
		vector<int> l2;
		TreapMultiset<int64_t> noone;
		int64_t sumL1 = 0;
		int64_t sumL2 = 0;

		for (int i: range(n)) {
			if (likes[i] == 3) {
				both.push_back(c[i]);
			}
			else if (likes[i] == 2) {
				l2.push_back(c[i]);
				sumL2 += c[i];
			}
			else if (likes[i] == 1) {
				l1.push_back(c[i]);
				sumL1 += c[i];
			}
			else if (likes[i] == 0) {
				noone.insert((int64_t)c[i]);
			} else {
				assert(false);
			}
		}
		sort(l1);
		sort(l2);
		sort(both);

		int64_t sumBoth = 0;

		int64_t inf = 1000000000000000000LL;
		int64_t ans = inf;
		for (int cntBoth: inclusiveRange(0, m)) {
			if (cntBoth != 0) {
				if (cntBoth - 1 == both.size()) {
					break;
				}
				sumBoth += both[cntBoth - 1];
			}
			while (l1.size() > max(0, k - cntBoth)) {
				sumL1 -= l1.back();
				noone.insert(l1.back());
				l1.pop_back();
			}
			while (l2.size() > max(0, k - cntBoth)) {
				sumL2 -= l2.back();
				noone.insert(l2.back());
				l2.pop_back();
			}

			if (l1.size() !=  max(0, k - cntBoth)) {
				continue;
			}
			if (l2.size() !=  max(0, k - cntBoth)) {
				continue;
			}
			int needSize = m - cntBoth - max(0, k - cntBoth) * 2;
			if (needSize < 0) {
				continue;
			}
			if (noone.size() >= needSize) {
				int64_t sumNoOne = noone.sumFirst(needSize);
				updateMin(ans, sumNoOne + sumL1 + sumL2 + sumBoth);
			}

		}

		if (ans == inf) {
			out << -1;
		} else {
			out << ans;
		}
	}
};


int main() {
	std::ios_base::sync_with_stdio(false);
	TaskE solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	in.tie(0);
	out << std::fixed;
	out.precision(20);
	solver.solve(in, out);
	return 0;
}