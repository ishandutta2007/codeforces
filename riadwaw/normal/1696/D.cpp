/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author RiaD
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <cassert>
#include <vector>
#include <algorithm>





#include <iterator>


#include <string>
#include <stdexcept>

#ifndef SPCPPL_ASSERT
	#ifdef SPCPPL_DEBUG
		#define SPCPPL_ASSERT(condition) \
		if(!(condition)) { \
			throw std::runtime_error(std::string() + #condition + " in line " + std::to_string(__LINE__) + " in " + __PRETTY_FUNCTION__); \
		}
	#else
		#define SPCPPL_ASSERT(condition)
	#endif
#endif


/**
* Support decrementing and multi-passing, but not declared bidirectional(or even forward) because
* it's reference type is not a reference.
*
* It doesn't return reference because
* 1. Anyway it'll not satisfy requirement [forward.iterators]/6
*   If a and b are both dereferenceable, then a == b if and only if *a and
*   b are bound to the same object.
* 2. It'll not work with reverse_iterator that returns operator * of temporary which is temporary for this iterator
*
* Note, reverse_iterator is not guaranteed to work  now too since it works only with bidirectional iterators,
* but it's seems to work at least on my implementation.
*
* It's not really useful anywhere except iterating anyway.
*/
template <typename T>
class IntegerIterator {
public:
	using value_type = T;
	using difference_type = std::ptrdiff_t;
	using pointer = T*;
	using reference = T;
	using iterator_category = std::input_iterator_tag;

	explicit IntegerIterator(T value): value(value) {

	}

	IntegerIterator& operator++() {
		++value;
		return *this;
	}

	IntegerIterator operator++(int) {
		IntegerIterator copy = *this;
		++value;
		return copy;
	}

	IntegerIterator& operator--() {
		--value;
		return *this;
	}

	IntegerIterator operator--(int) {
		IntegerIterator copy = *this;
		--value;
		return copy;
	}

	T operator*() const {
		return value;
	}

	bool operator==(IntegerIterator rhs) const {
		return value == rhs.value;
	}

	bool operator!=(IntegerIterator rhs) const {
		return !(*this == rhs);
	}

private:
	T value;
};

template <typename T>
class IntegerRange {
public:
	IntegerRange(T begin, T end): begin_(begin), end_(end) {
		SPCPPL_ASSERT(begin <= end);
	}

	IntegerIterator<T> begin() const {
		return IntegerIterator<T>(begin_);
	}

	IntegerIterator<T> end() const {
		return IntegerIterator<T>(end_);
	}

private:
	T begin_;
	T end_;
};

template <typename T>
class ReversedIntegerRange {
	using IteratorType = std::reverse_iterator<IntegerIterator<T>>;
public:
	ReversedIntegerRange(T begin, T end): begin_(begin), end_(end) {
		SPCPPL_ASSERT(begin >= end);
	}

	IteratorType begin() const {
		return IteratorType(IntegerIterator<T>(begin_));
	}

	IteratorType end() const {
		return IteratorType(IntegerIterator<T>(end_));
	}

private:
	T begin_;
	T end_;
};

template <typename T>
IntegerRange<T> range(T to) {
	return IntegerRange<T>(0, to);
}

template <typename T>
IntegerRange<T> range(T from, T to) {
	return IntegerRange<T>(from, to);
}

template <typename T>
IntegerRange<T> inclusiveRange(T to) {
	return IntegerRange<T>(0, to + 1);
}

template <typename T>
IntegerRange<T> inclusiveRange(T from, T to) {
	return IntegerRange<T>(from, to + 1);
}

template <typename T>
ReversedIntegerRange<T> downrange(T from) {
	return ReversedIntegerRange<T>(from, 0);
}

template <typename T>
ReversedIntegerRange<T> downrange(T from, T to) {
	return ReversedIntegerRange<T>(from, to);
}

template <typename T>
ReversedIntegerRange<T> inclusiveDownrange(T from) {
	return ReversedIntegerRange<T>(from + 1, 0);
}

template <typename T>
ReversedIntegerRange<T> inclusiveDownrange(T from, T to) {
	return ReversedIntegerRange<T>(from + 1, to);
}



#include <cstddef>


template <typename T>
std::size_t leastSignificantBit(T number) {
	SPCPPL_ASSERT(number != 0);
	for (std::size_t i = 0; ; ++i) {
		if ((number >> i) & 1) {
			return i;
		}
	}
}

template <typename T>
bool isPowerOf2(T number) {
	return number != 0 && (number & (number - 1)) == 0;
}


template <typename T, typename Operation>
class SparseTable {
public:
	explicit SparseTable(std::vector<T> elements, const Operation& operation = Operation(), const T& neutralValue = T()):
			operation(operation), neutralValue(neutralValue) {
		std::size_t n = elements.size();
		logarithms.resize(n + 1);
		for (std::size_t i = 2; i < logarithms.size(); ++i) {
			logarithms[i] = logarithms[i - 1];
			if (isPowerOf2(i)) {
				++logarithms[i];
			}
		}

		table.push_back(std::move(elements));
		table.resize(logarithms[n] + 1, std::vector<T>(n));

		for (auto i: range(static_cast<std::size_t>(1), table.size())) {
			for (std::size_t j = 0; j + (1 << i) <= n; ++j) {
				table[i][j] = this->operation(table[i - 1][j], table[i - 1][j + (1 << (i - 1))]);
			}
		}
	}

	T getResult(std::size_t l, std::size_t r) const {
		SPCPPL_ASSERT(l <= r && r <= table[0].size());
		if (l == r) {
			return neutralValue;
		}
		auto log = logarithms[r - l];
		SPCPPL_ASSERT((1 << log) <= r - l);
		SPCPPL_ASSERT((1 << (log + 1)) >= r - l);
		return operation(table[log][l], table[log][r - (1 << log)]);
	}
private:
	std::vector<std::size_t> logarithms;
	std::vector<std::vector<T>> table;
	Operation operation;
	T neutralValue;
};





struct Min {
	template <typename T>
	T operator()(const T& l, const T& r) const {
		return std::min(l, r);
	}
};





struct Max {
	template <typename T>
	T operator()(const T& l, const T& r) const {
		return std::max(l, r);
	}
};

//#define PROBLEM "problem_name.h"
//#include PROBLEM
//#include <message.h>
//#include <spcppl/dgcj.h>

using namespace std;

class DPermutationGraph {
public:
	static constexpr int kStressCount = 0;
	static void generateTest(std::ostream& test) {
	}
	void solve(std::istream& in, std::ostream& out) {
		//static int testnumber = 0;
		//out << "Case #" << ++testnumber << ": ";
		//cerr << "test " << testnumber << endl;

		int n;
		in >> n;
		vector<pair<int, int>> a(n);

		for (int i: range(n)) {
			in >> a[i].first;
			a[i].second = i;
		}

		SparseTable<pair<int, int>, Min> min_table(a);
		SparseTable<pair<int, int>, Max> max_table(a);


//		cerr << "go" << endl;
		auto solve = [&](auto& solve, int l, int r) -> int {
			if (l + 1 == r) {
				return 0;
			}
			int mn_index = min_table.getResult(l, r).second;
			if (mn_index == l || mn_index == r - 1) {
				int mx_index = max_table.getResult(l, r).second;
				if (mx_index == l || mx_index == r - 1) {
//					cerr << l << ' ' << r << ' ' << mn_index << ' ' << mx_index << endl;
					return 1;
				}
				return solve(solve, l, mx_index + 1) + solve(solve, mx_index, r);
			}
			return solve(solve, l, mn_index + 1) + solve(solve, mn_index, r);
		};
		out << solve(solve, 0, n) << "\n";


//		int ans = 0;
//
//		auto sign = [&] (int x) {
//			if (x < 0) {
//				return -1;
//			} else {
//				return 1;
//			}
//		};
//		int cur = 0;
//		while (cur < n - 1) {
//			++ans;
//			int sgn = sign(a[cur + 1] - a[cur]);
//			int end = cur + 1;
//			while (end + 1 < n && sign(a[end + 1] - a[cur]) == sgn) {
//				++end;
//			}
//			cur = end;
//		}
//
//		out << ans << "\n";
	}
};


int main() {
	std::ios_base::sync_with_stdio(false);
	DPermutationGraph solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	in.tie(nullptr);
	out << std::fixed;
	out.precision(20);
	int n;
in >> n;
for(int i = 0; i < n; ++i) {
	solver.solve(in, out);
}

	return 0;
}