/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;
typedef pair<ld, ld> pld;
typedef pair<string, string> pss;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define file_io                     freopen("in.txt" , "r+" , stdin) ; freopen("out.txt" , "w+" , stdout);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

inline ll input() {
    ll n;
    cin >> n;
    return n;
}

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

set_random;

const ll MAXN = 1e6 + 10;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

vector<ll> ts , adj[MAXN] , g[MAXN];
ll n , m , v , u , ans , inDeg[MAXN] , dp[MAXN][26];
string s;

void topoSort(){
    queue<ll> Q;
    for(ll i = 1 ; i <= n ; i++){
        if(inDeg[i] == 0){
            Q.push(i);
        }
    }

    while(!Q.empty()){
        ll v = Q.front();
        Q.pop();
        ts.push_back(v);

        for(ll u : adj[v]){
            inDeg[u]--;
            if(inDeg[u] == 0){
                Q.push(u);
            }
        }
    }
}

int main() {
    fast_io;

    cin >> n >> m >> s;
    s = "." + s;
    for(ll i = 0 ; i < m ; i++){
        cin >> v >> u;
        adj[v].push_back(u);
        g[u].push_back(v);
        inDeg[u]++;
    }

    topoSort();
    if(ts.size() != n)  return cout << -1 << endl , 0;

    for(ll i : ts){
        dp[i][s[i] - 97] = 1;
        for(ll u : g[i]){
            for(ll j = 0 ; j < 26 ; j++){
                dp[i][j] = max(dp[i][j] , dp[u][j] + (s[i] - 97 == j));
            }
        }
    }

    for(ll i : ts){
        for(ll j = 0 ; j < 26 ; j++){
            ans = max(ans , dp[i][j]);
        }
    }
    cout << ans << endl;

    return 0;
}
/*
todo :
    1- set constants
    2- check TimeLimit and MemoryLimit
    3- check special test cases
    4- don't forget BS can help you that is good idea(use for loop for floats)
    5- don't forget printf and scanf can help you in your code speed
*/