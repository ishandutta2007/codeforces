/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author majk
 */

#ifndef MAJK_LIB
#define MAJK_LIB

#include <vector>
#include <stack>
#include <iostream>
#include <unordered_map>
#include <unordered_set>
#include <map>
#include <iomanip>
#include <set>
#include <functional>
#include <fstream>
#include <algorithm>
#include <cassert>
#include <cmath>
#include <string>
#include <sstream>
#include <queue>
#include <array>
#include <bitset>
using namespace std;

#define x first
#define y second
typedef std::pair<int,int> pii; typedef long long ll; typedef unsigned long long ull; typedef unsigned int ui; typedef pair<ui,ui> puu;

template <typename T, typename U> std::istream&operator>>(std::istream&i, pair<T,U>&p) {i >> p.x >> p.y; return i;}
template<typename T>std::istream&operator>>(std::istream&i,vector<T>&t) {for(auto&v:t){i>>v;}return i;}
template <typename T, typename U> std::ostream&operator<<(std::ostream&o, const pair<T,U>&p) {o << p.x << ' ' << p.y; return o;}
template<typename T>std::ostream&operator<<(std::ostream&o,const vector<T>&t) {if(t.empty())o<<'\n';for(size_t i=0;i<t.size();++i){o<<t[i]<<" \n"[i == t.size()-1];}return o;}
template<typename T> using minheap = priority_queue<T, vector<T>, greater<T>>;
template<typename T> using maxheap = priority_queue<T, vector<T>, less<T>>;
template <typename T> bool in(T a, T b, T c) { return a <= b && b < c; }
ui logceil(ll x) { return x?8*sizeof(ll)-__builtin_clzll(x):0; }

namespace std { template<typename T,typename U>struct hash<pair<T,U>>{hash<T>t;hash<U>u;size_t operator()(const pair<T,U>&p)const{return t(p.x)^(u(p.y)<<7);}}; }
template<typename T,typename F>T bsh(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){l=m+1;r=m;}else{h=m-1;}}return r;}
template<typename F> double bshd(double l,double h,const F&f,double p=1e-9){ui r=3+(ui)log2((h-l)/p);while(r--){double m=(l+h)/2;if(f(m)){l=m;}else{h=m;}}return (l+h)/2;}
template<typename T,typename F>T bsl(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){h=m-1;r=m;}else{l=m+1;}}return r;}
template<typename F> double bsld(double l,double h,const F&f,double p=1e-9){ui r=3+(ui)log2((h-l)/p);while(r--){double m=(l+h)/2;if(f(m)){h=m;}else{l=m;}}return (l+h)/2;}
template<typename T> T gcd(T a,T b) { if (a<b) swap(a,b); return b?gcd(b,a%b):a; }


template<typename T>class vector2:public vector<vector<T>>{public:vector2(){} vector2(size_t a,size_t b,T t=T()):vector<vector<T>>(a,vector<T>(b,t)){}};
template<typename T>class vector3:public vector<vector2<T>>{public:vector3(){} vector3(size_t a,size_t b,size_t c,T t=T()):vector<vector2<T>>(a,vector2<T>(b,c,t)){}};
template<typename T>class vector4:public vector<vector3<T>>{public:vector4(){} vector4(size_t a,size_t b,size_t c,size_t d,T t=T()):vector<vector3<T>>(a,vector3<T>(b,c,d,t)){}};
template<typename T>class vector5:public vector<vector4<T>>{public:vector5(){} vector5(size_t a,size_t b,size_t c,size_t d,size_t e,T t=T()):vector<vector4<T>>(a,vector4<T>(b,c,d,e,t)){}};


#endif
// #include "../l/mod.h"

class CColoradoPotatoBeetle {
public:
    vector<int> RG, CG;
    vector<vector<int>> S;

    void dfs(int x, int y) {
        if (x >= 0 && x < RG.size() && y >= 0 && y < CG.size() && !S[x][y]) {
            S[x][y] = 2;
            dfs(x+1, y);
            dfs(x-1, y);
            dfs(x, y+1);
            dfs(x, y-1);
        }
    }

    void solve(istream& cin, ostream& cout) {
        int N; cin >> N;
        int r = 0, c = 0;

        set<int> R, C;
        R.insert(-2e9);
        R.insert(2e9);
        C.insert(-2e9);
        C.insert(2e9);
        vector<pair<char,int>> T;
        for (int i = 0; i < N; ++i) {
            char d; int l;
            cin >> d >> l;
            T.push_back({d,l});
            R.insert(r-1);
            R.insert(r);
            R.insert(r+1);
            C.insert(c-1);
            C.insert(c);
            C.insert(c+1);
            switch (d) {
                case 'U':
                    r -= l;
                    break;
                case 'D':
                    r += l;
                    break;
                case 'R':
                    c += l;
                    break;
                case 'L':
                    c -= l;
                    break;
            }
            R.insert(r-1);
            R.insert(r);
            R.insert(r+1);
            C.insert(c-1);
            C.insert(c);
            C.insert(c+1);
        }

        RG = vector<int>(R.begin(),R.end());
        CG = vector<int>(C.begin(),C.end());
        map<int, int> RI, CI;
        for (int i = 0; i < RG.size(); ++i) RI[RG[i]] = i;
        for (int i = 0; i < CG.size(); ++i) CI[CG[i]] = i;
        S = vector2<int>(RG.size(), CG.size(), 0);

        r = c = 0;
        for (int i = 0; i < N; ++i) {
            char d = T[i].x; int l = T[i].y;
            switch (d) {
                case 'U':
                    for (int j = RI[r-l]; j <= RI[r]; ++j) S[j][CI[c]] = 1;
                    r -= l;
                    break;
                case 'D':
                    for (int j = RI[r]; j <= RI[r+l]; ++j) S[j][CI[c]] = 1;
                    r += l;
                    break;
                case 'R':
                    for (int j = CI[c]; j <= CI[c+l]; ++j) S[RI[r]][j] = 1;
                    c += l;
                    break;
                case 'L':
                    for (int j = CI[c-l]; j <= CI[c]; ++j) S[RI[r]][j] = 1;
                    c -= l;
                    break;
            }
        }

        dfs(0,0);

        ll ans = 0;
        for (int i = 0; i < RG.size(); ++i) {
            for (int j = 0; j < CG.size(); ++j) {
                if (S[i][j] != 2) {
                    ans += ll(RG[i+1] - RG[i]) * (CG[j+1] - CG[j]);
                }
            }
        }
        cout << ans << endl;
    }
};


int main() {
	ios_base::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr);
	CColoradoPotatoBeetle solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
    return 0;
}