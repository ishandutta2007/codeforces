/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

// Actual solution is at the bottom

#undef NDEBUG

#include <algorithm>
#include <array>
#include <bitset>
#include <cassert>
#include <climits>
#include <cstdint>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <memory>
#include <numeric>
#include <queue>
#include <random>
#include <set>
#include <stack>
#include <string>
#include <unordered_set>
#include <unordered_map>
#include <vector>
// AtCoder library from https://github.com/atcoder/ac-library
// #include "../atcoder/all"

#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()

using namespace std;

typedef int64_t int64;
typedef pair<int, int> ii;

class CSkritiePerestanovki {
 public:
  void solveOne() {
    int n;
    cin >> n;
    vector<int> p(n, -1);
    for (int i = 0; i < n; ++i) if (p[i] < 0) {
      vector<int> cycle;
      while (true) {
        cout << "? " << (i + 1) << "\n";
        cout.flush();
        int a;
        cin >> a;
        --a;
        if (!cycle.empty() && a == cycle[0]) break;
        cycle.push_back(a);
      }
      for (int k = 0; k < cycle.size(); ++k) {
        p[cycle[k]] = cycle[(k + 1) % cycle.size()];
      }
    }
    cout << "!";
    for (int x : p) cout << " " << x + 1;
    cout << "\n";
    cout.flush();
  }

  void solve() {
    int nt;
    cin >> nt;
    for (int it = 0; it < nt; ++it) {
      // cout << "Case #" << (it + 1) << ": ";
      solveOne();
    }
  }
};

// #define st_mtimespec st_mtim

int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(0);
    CSkritiePerestanovki solver;


    solver.solve();
    return 0;
}