/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n, cntT[MAXN], cntS[MAXN];
string s, t;

ll check(ll x) {
    ll cost = 0;
    for (ll i = 0; i < 26; i++) cost += max(0LL, cntT[i] * x - cntS[i]);
    return cost <= cntS[26];
}

void print(ll x) {
    ll l = 0;
    for (ll i = 0; i < 26; i++) {
        ll cnt = max(0LL, cntT[i] * x - cntS[i]);
        while (cnt != 0) {
            if (s[l] == '?') s[l] = 97 + i, cnt--;
            l++;
        }
    }
    for (ll i = 0; i < s.size(); i++) if (s[i] == '?') s[i] = 'a';
    cout << s << endl;
}

int main() {
    fast_io;

    cin >> s >> t;
    for (ll i = 0; i < s.size(); i++) {
        if (s[i] == '?') cntS[26]++;
        else cntS[s[i] - 97]++;
    }
    for (ll i = 0; i < t.size(); i++) cntT[t[i] - 97]++;

    ll l = 0, r = MAXN;
    while (r - l > 1) {
        ll mid = (l + r) / 2;
        if (check(mid)) l = mid;
        else r = mid;
    }
    print(l);

    return 0;
}
/*

*/