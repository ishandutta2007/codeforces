/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Azat Ismagilov
 */

#include <fstream>

#include <iostream>
#include <algorithm>
#include <vector>
#include <numeric>

#define int long long
#define fs first
#define sc second
#define pb push_back
#define ppb pop_back
#define pf push_front
#define ppf pop_front
#define mp make_pair
#define len(v) ((int)v.size())
#define vc vector
#define pr pair
#define all(v) v.begin(), v.end()
//#pragma GCC optimize("Ofast")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,tune=native")
//#pragma GCC optimize("unroll-loops")

using namespace std;

template<typename T, typename U>
inline ostream &operator<<(ostream &_out, const pair<T, U> &_p) {
    _out << _p.first << ' ' << _p.second;
    return _out;
}

template<typename T, typename U>
inline istream &operator>>(istream &_in, pair<T, U> &_p) {
    _in >> _p.first >> _p.second;
    return _in;
}

template<typename T>
inline ostream &operator<<(ostream &_out, const vector<T> &_v) {
    if (_v.empty()) { return _out; }
    _out << _v.front();
    for (auto _it = ++_v.begin(); _it != _v.end(); ++_it) { _out << ' ' << *_it; }
    return _out;
}

template<typename T>
inline istream &operator>>(istream &_in, vector<T> &_v) {
    for (auto &_i : _v) { _in >> _i; }
    return _in;
}

const int MAXN = 1e5;
const int INF = 1e9;
const int MOD = 1e6 + 3;
const int K = 11;

int sum(int a, int b) {
    if (a + b >= MOD) {
        return a + b - MOD;
    }
    return a + b;
}

int mul(int a, int b) {
    if (a * b >= MOD) {
        return (a * b) % MOD;
    }
    return a * b;
}

int sqr(int a) {
    return (a * a) % MOD;
}

int bin_pow(int a, int b) {
    if (b == 0) {
        return 1;
    }
    if (b % 2) {
        return mul(a, bin_pow(a, b - 1));
    }
    return sqr(bin_pow(a, b / 2));
}

class EUgadaiKoren {
public:
    void solve(std::istream &in, std::ostream &out) {
        vc<vc<int>> a(K + 1, vc<int>(K));
        vc<int> ans(K + 1);
        for (int i = 0; i <= K; i++) {
            out << "? " << i << endl;
            out.flush();
            int x;
            in >> x;
            if (x == 0) {
                out << "! " << i << '\n';
                out.flush();
                return;
            }
            if (x == -1) {
                exit(1);
            }
            int m = 1;
            for (int j = 0; j < K; j++) {
                a[i][j] = m;
                m = mul(m, i);
            }
            ans[i] = x;
        }
        for (int i = 0; i < K; i++) {
            int pos = -1;
            for (int j = i; j < K + 1; j++) {
                if (a[j][i] != 0) {
                    pos = j;
                    break;
                }
            }
            if (pos == -1) {
                continue;
            }
            swap(a[pos], a[i]);
            swap(ans[pos], ans[i]);
            int x = bin_pow(a[i][i], MOD - 2);
            for (int j = i; j < K; j++) {
                a[i][j] = mul(a[i][j], x);
            }
            ans[i] = mul(ans[i], x);
            for (int j = 0; j < K + 1; j++) {
                if (i != j && a[j][i] != 0) {
                    int x = a[j][i];
                    for (int k = 0; k < K; k++) {
                        a[j][k] = sum(a[j][k], MOD - mul(x, a[i][k]));
                    }
                    ans[j] = sum(ans[j], MOD - mul(x, ans[i]));
                }
            }
        }
        for (int i = 0; i < MOD; i++) {
            int anss = 0;
            int m = 1;
            for (int j = 0; j < K; j++) {
                anss += ans[j] * m;
                m = mul(m, i);
            }
            anss = anss % MOD;
            if (anss == 0) {
                out << "! " << i << '\n';
                out.flush();
                return;
            }
        }
        out << "! " << -1 << '\n';
        out.flush();
    }
};


main() {
    EUgadaiKoren solver;
    std::istream &in(std::cin);
    std::ostream &out(std::cout);
    solver.solve(in, out);
    return 0;
}