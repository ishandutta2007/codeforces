/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll LOG = 22;
const ll INF = 2e9;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n, k, mark[MAXN];

ll val(pair<pll, pll> A, ll i) {
    if (i == 0) return A.X.X;
    if (i == 1) return A.X.Y;
    if (i == 2) return A.Y.X;
    if (i == 3) return A.Y.Y;
}

pair<pll, pll> solve(ll l, ll r) {
    if (r - l == 2) {
        //cout << l << sep << r << sep << mark[l] << sep << mark[r] << endl;
        if (mark[l] && mark[l + 1])
            return {{1, 1},
                    {1, 1}};
        if (mark[l] || mark[l + 1])
            return {{1, 1},
                    {1, -INF}};
        return {{0, -INF},
                {-INF, -INF}};
    }
    ll mid = l + r >> 1;
    pair<pll, pll> A = solve(l, mid);
    pair<pll, pll> B = solve(mid, r);

    ll ans1 = A.X.X + B.X.X;
    ll ans2 = max({A.Y.X + B.X.X + 2, A.X.X + B.Y.X + 2, A.X.Y + B.X.X + 2, A.X.X + B.X.Y + 2});
    ll ans3 = max({A.Y.X + B.X.X + 1, A.X.X + B.Y.X + 1});
    ll ans4 = max({A.X.X + B.Y.Y + 3, A.X.Y + B.Y.X + 3, A.Y.X + B.X.Y + 3, A.Y.Y + B.X.X + 3, A.Y.X + B.Y.X + 2});
    ans2 = max(ans2, ans4);
    ans3 = max(ans3, ans4);
    ans1 = max({ans1, ans2, ans3});
    //cout << l << sep << r << sep << ans1 << sep << ans2 << sep << ans3 << sep << ans4 << endl;
    return {{ans1, ans2},
            {ans3, ans4}};
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    cin >> n >> k;
    for (ll i = 0; i < k; i++) {
        ll x;
        cin >> x;
        mark[x - 1] = 1;
    }
    pair<pll, pll> ans = solve(0, (1ll << n));
    cout << max({ans.X.X, ans.X.Y + 1, ans.Y.X + 1, ans.Y.Y + 1});

    return 0;
}
/*

*/