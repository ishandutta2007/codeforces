/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

string s[MAXN];

ll check(ll x, ll y, ll dx, ll dy) {
    for (ll i = 0; i < 5; i++) {
        ll nx = x + dx * i, ny = y + dy * i;
        if (s[nx][ny] != 'X') return 0;
    }
    return 1;
}

int main() {
    fast_io;

    for (ll i = 0; i < 10; i++) cin >> s[i], s[i] = "OOOOO" + s[i] + "OOOOO";
    for (ll i = 10; i < 15; i++) s[i] = string(20, 'O');

    for (ll i = 0; i < 10; i++) {
        for (ll j = 5; j < 15; j++) {
            ll t = 0;
            if (s[i][j] == '.') {
                s[i][j] = 'X';
                t = 1;
            }
            for (ll k = 0; k < 10; k++) {
                for (ll l = 5; l < 15; l++) {
                    if (check(k, l, 1, 0) || check(k, l, 0, 1) || check(k, l, 1, 1) || check(k, l, 1, -1)) {
                        return cout << "YES" << endl, 0;
                    }
                }
            }
            if (t) s[i][j] = '.';
        }
    }
    cout << "NO" << endl;

    return 0;
}
/*

*/