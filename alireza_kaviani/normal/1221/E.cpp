/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll q, n, a, b;
string s;

int main() {
    fast_io;

    cin >> q;
    while (q--) {
        cin >> a >> b >> s;
        n = s.size();
        s = s + "X";

        vector<ll> vec;
        ll cnt = 0;
        for (ll i = 0; i <= n; i++) {
            if (s[i] == 'X') {
                vec.push_back(cnt);
                cnt = 0;
            } else cnt++;
        }
        sort(all(vec), greater<ll>());
        while (vec.size() > 0 && vec.back() < b) vec.pop_back();
        if (vec.size() == 0) {
            cout << "NO" << endl;
            continue;
        }
        if (vec.back() < a) {
            cout << "NO" << endl;
            continue;
        }
        if (vec[0] < 2 * b) {
            if (vec.size() % 2 == 0) cout << "NO" << endl;
            else cout << "YES" << endl;
            continue;
        }
        if (vec.size() >= 2 && vec[1] >= 2 * b) {
            cout << "NO" << endl;
            continue;
        }
        if (vec[0] > a + 4 * b - 2) {
            cout << "NO" << endl;
            continue;
        }
        ll ok = 0;
        for (ll i = 0; i <= vec[0]; i++) {
            ll x = i, y = vec[0] - a - i;
            if (x < 0 || y < 0) continue;
            if (x >= 2 * b || y >= 2 * b) continue;
            if (x >= b && x < a || y >= b && y < a) continue;
            ll cnt = (x >= a) + (y >= a);
            if ((cnt + SZ(vec)) % 2 == 1) ok = 1;
        }
        if (ok) cout << "YES" << endl;
        else cout << "NO" << endl;
    }

    return 0;
}
/*

*/