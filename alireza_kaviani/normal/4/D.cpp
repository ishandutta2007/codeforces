/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;
typedef pair<ld, ld> pld;
typedef pair<string, string> pss;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define file_io                     freopen("in.txt" , "r+" , stdin) ; freopen("out.txt" , "w+" , stdout);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

inline ll input() {
    ll n;
    cin >> n;
    return n;
}

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

set_random;

const ll MAXN = 5e3 + 10;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n , w , h , prv[MAXN] , dp[MAXN];
vector<ll> ans;
pair<pll , ll> p[MAXN];

int main() {
    fast_io;
    fill(dp , dp + MAXN , -INF);

    cin >> n >> w >> h;
    for(ll i = 1 ; i <= n ; i++){
        cin >> p[i].X.X >> p[i].X.Y;
        p[i].Y = i;
    }

    sort(p + 1 , p + n + 1);
    dp[0] = 0;
    prv[0] = -1;
    p[0] = {{w , h} , 0};

    for(ll i = 1 ; i <= n ; i++){
        for(ll j = 0 ; j < i ; j++){
            if(p[i].X.X > p[j].X.X && p[i].X.Y > p[j].X.Y && dp[j] + 1 > dp[i]){
                dp[i] = dp[j] + 1;
                prv[i] = j;
            }
        }
    }

    ll ind = max_element(dp , dp + MAXN) - dp;
    while(prv[ind] != -1){
        ans.push_back(p[ind].Y);
        ind = prv[ind];
    }

    cout << ans.size() << endl;
    for(ll i = SZ(ans) - 1 ; i >= 0 ; i--)   cout << ans[i] << sep;

    return 0;
}
/*
todo :
    1- set constants
    2- check TimeLimit and MemoryLimit
    3- check special test cases
    4- don't forget BS can help you that is good idea(use for loop for floats)
    5- don't forget printf and scanf can help you in your code speed
*/