/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <algorithm>
#include <queue>
#include <vector>
#include <set>
#include <map>
#include <cassert>
#include <functional>
#include <sstream>
#include <cmath>

#include <cstring>
#include <cstdio>
#ifndef ATCODER_DSU_HPP
#define ATCODER_DSU_HPP 1





namespace atcoder {

// Implement (union by size) + (path compression)
// Reference:
// Zvi Galil and Giuseppe F. Italiano,
// Data structures and algorithms for disjoint set union problems
struct dsu {
  public:
    dsu() : _n(0) {}
    explicit dsu(int n) : _n(n), parent_or_size(n, -1) {}

    int merge(int a, int b) {
        assert(0 <= a && a < _n);
        assert(0 <= b && b < _n);
        int x = leader(a), y = leader(b);
        if (x == y) return x;
        if (-parent_or_size[x] < -parent_or_size[y]) std::swap(x, y);
        parent_or_size[x] += parent_or_size[y];
        parent_or_size[y] = x;
        return x;
    }

    bool same(int a, int b) {
        assert(0 <= a && a < _n);
        assert(0 <= b && b < _n);
        return leader(a) == leader(b);
    }

    int leader(int a) {
        assert(0 <= a && a < _n);
        if (parent_or_size[a] < 0) return a;
        return parent_or_size[a] = leader(parent_or_size[a]);
    }

    int size(int a) {
        assert(0 <= a && a < _n);
        return -parent_or_size[leader(a)];
    }

    std::vector<std::vector<int>> groups() {
        std::vector<int> leader_buf(_n), group_size(_n);
        for (int i = 0; i < _n; i++) {
            leader_buf[i] = leader(i);
            group_size[leader_buf[i]]++;
        }
        std::vector<std::vector<int>> result(_n);
        for (int i = 0; i < _n; i++) {
            result[i].reserve(group_size[i]);
        }
        for (int i = 0; i < _n; i++) {
            result[leader_buf[i]].push_back(i);
        }
        result.erase(
            std::remove_if(result.begin(), result.end(),
                           [&](const std::vector<int>& v) { return v.empty(); }),
            result.end());
        return result;
    }

  private:
    int _n;
    // root node: -1 * component size
    // otherwise: parent
    std::vector<int> parent_or_size;
};

}  // namespace atcoder

#endif  // ATCODER_DSU_HPP


using namespace std;

typedef pair<int, int> ii;
typedef long long int64;
typedef vector<int> vi;

#define pb push_back
#define mp make_pair
#define all(v) (v).begin(),(v).end()
#define sz(v) ((int)(v).size())

template<class T> T abs(T x) { return x >= 0 ? x : -x; }
template<class T> T sqr(T x) { return x * x; }

class TaskD {
public:
	void solve(std::istream& in, std::ostream& out) {
//	    for (int it = 0; it < 1000000; ++it) {
//	        int n = 13;
//            vector<ii> raw;
//            vi a;
//            for (int i = 0 ;i < n; ++i)
//                a.pb(i);
//            random_shuffle(all(a));
//            for (int i = 0; i < n; ++i) {
//                int x = i, y = n + a[i];
//                if (rand() % 2) swap(x, y);
//                raw.pb(ii(x, y));
//            }
//            int r1 = doSolve(raw, true);
//            int r2 = doSolve(raw, false);
//            assert(r1 == r2);
//            if (r1 != -1)
//                cerr << r1 << "\n";
//	    }
	    int n;
	    in >> n;
	    vector<ii> raw(n);
	    for (int i = 0; i < n; ++i) {
	        in >> raw[i].first >> raw[i].second;
	        --raw[i].first;
	        --raw[i].second;
	    }
	    int res = doSolve(raw, true);
        out << res << "\n";
	}

	int doSolve(vector<ii> raw, bool fast=true) {
	    int n = sz(raw);
        atcoder::dsu dsu(2 * n);
        vi a(2 * n, -1);
        vi b(2 * n, -1);
        int Mx = -1, my = 1000 * 1000 * 1000;
        for (auto e : raw) {
            int x = e.first, y = e.second;
            if (x > y) swap(x, y);
            a[x] = y;
            b[y] = x;
            Mx = max(Mx, x);
            my = min(my, y);
        }
        if (my < Mx) {
            return -1;
        }
        set<int> alive;
        for (int i = 0; i < 2 * n; ++i) if (a[i] != -1) {
                alive.insert(a[i]);
            }
        int lim = 2 * n - 1;
        for (int i = 0; i < 2 * n; ++i) if (a[i] != -1) {
                int y = a[i];
                if (fast) {
                    auto it = alive.lower_bound(y + 1);
                    while (it != alive.end()) {
                        int j = *it;
                        assert(b[j] != -1);
                        assert(b[j] > i);
                        dsu.merge(i, j);
                        dsu.merge(y, b[j]);
                        ++it;
                        if (j > lim) break;
                    }
                    int cl = dsu.leader(lim);
                    while (lim > 0) {
                        int prev = lim - 1;
                        if (!alive.count(prev)) {
                            --lim;
                            continue;
                        }
                        int cur = dsu.leader(prev);
                        if (cur != cl) break;
                        --lim;
                    }
                    alive.erase(a[i]);
            } else {
                for (int j = y + 1; j < 2 * n; ++j) {
                    if (b[j] != -1 && b[j] > i) {
                        dsu.merge(i, j);
                        dsu.merge(y, b[j]);
                    }
                }
            }
        }
        for (int i = 0; i < 2 * n; ++i) if (a[i] != -1) {
                if (dsu.same(i, a[i])) {
                    return -1;
                }
            }
        int res = 0;
        vi cnt1(2 * n, 0);
        vi cnt2(2 * n, 0);
        for (int i = 0; i < n; ++i) {
            cnt1[dsu.leader(raw[i].first)]++;
            cnt2[dsu.leader(raw[i].second)]++;
        }
        for (int i = 0; i < 2 * n; ++i) {
//            if (cnt1[i] + cnt2[i] > 0)
//                cerr << cnt1[i] << " " << cnt2[i] << "\n";
            res += min(cnt1[i], cnt2[i]);
        }
        res /= 2;
        return res;
	}
};


int main() {
	TaskD solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}