#include "bits/stdc++.h"
using namespace std;

typedef string::const_iterator State;
#define eps 1e-8L
#define MAX_MOD 1000000007LL
#define GYAKU 500000004LL
#define MOD 998244353LL
#define pb push_back
#define mp make_pair
typedef long long ll;
typedef long double ld;
#define REP(a, b) for (long long(a) = 0; (a) < (b); ++(a))
#define ALL(x) (x).begin(), (x).end()

#define int long long

vector<string> ans;
vector<vector<int>> inputs;
vector<pair<int, int>> target_move[300000];

void remove_illegal_input(int itr)
{
  while (inputs[itr].empty() == false)
  {
    if (ans[itr][inputs[itr].size() - 1] == '.')
      return;
    inputs[itr].pop_back();
  }
}

void remove_illegal_target(int itr)
{
  while (target_move[itr].empty() == false)
  {
    auto x = target_move[itr].back();
    if (ans[x.first][x.second] == '.')
      return;
    target_move[itr].pop_back();
  }
}

int already_visited[300000];

int dfs(int now)
{
  already_visited[now] = 1;
  while (true)
  {
    remove_illegal_input(now);
    if (inputs[now].size() == 0)
    {
      already_visited[now] = 0;
      return -1;
    }
    ans[now][inputs[now].size() - 1] = 'L';
    int next_go = inputs[now].back();
    inputs[now].pop_back();

    remove_illegal_target(next_go);
    if (target_move[next_go].size() == 0)
    {
      cout << "NO" << endl;
      exit(0);
    }
    auto x = target_move[next_go].back();
    target_move[next_go].pop_back();
    ans[x.first][x.second] = 'R';

    if (already_visited[x.first] == false)
    {
      int tmp = dfs(x.first);
      if (tmp == -1)
      {
        cout << "NO" << endl;
        exit(0);
      }
      if (tmp != now)
      {
        already_visited[now] = 0;
        return tmp;
      }
    }
    else
    {
      if (x.first != now)
      {
        already_visited[now] = 0;
        return x.first;
      }
    }
  }
}

void solve()
{
  int m;
  map<int, int> zipper;
  cin >> m;
  REP(i, m)
  {
    int a;
    cin >> a;
    inputs.push_back({});
    REP(q, a)
    {
      int c;
      cin >> c;
      inputs.back().push_back(c);
      zipper[c] = 1;
    }
    ans.push_back(string(a, '.'));
  }

  {
    int cnter = 0;
    for (auto &x : zipper)
    {
      x.second = cnter;
      cnter++;
    }
    REP(i, m)
    {
      for (auto &x : inputs[i])
      {
        x = zipper[x];
      }
    }
  }

  REP(i, m)
  {
    REP(q, inputs[i].size())
    {
      target_move[inputs[i][q]].push_back({i, q});
    }
  }
  REP(i, m)
  {
    dfs(i);
  }

  cout << "YES" << endl;
  REP(i, m)
  {
    cout << ans[i] << endl;
  }
}
#undef int

// generated by oj-template v4.7.2
// (https://github.com/online-judge-tools/template-generator)
int main()
{
  // Fasterize input/output script
  ios::sync_with_stdio(false);
  cin.tie(nullptr);
  cout << fixed << setprecision(100);
  // scanf/printf user should delete this fasterize input/output script

  int t = 1;
  // cin >> t; // comment out if solving multi testcase
  for (int testCase = 1; testCase <= t; ++testCase)
  {
    solve();
  }
  return 0;
}