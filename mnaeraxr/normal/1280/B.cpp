/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author marX
 */

#include <iostream>
#include <fstream>

#include <bits/stdc++.h>

using namespace std;

class BBeingawesomeism {
public:
    void solve(std::istream &in, std::ostream &out) {
        int t;
        in >> t;

        while (t--) {
            int n, m;
            in >> n >> m;

            vector<string> board(n);

            vector<int> A(n), B(m);

            for (int i = 0; i < n; ++i) {
                in >> board[i];

                for (int j = 0; j < m; ++j) {
                    A[i] += board[i][j] == 'A';
                    B[j] += board[i][j] == 'A';
                }
            }

            if (*max_element(A.begin(), A.end()) == 0) {
                out << "MORTAL" << endl;
            } else if (*min_element(A.begin(), A.end()) == m) {
                out << 0 << endl;
            } else if (A[0] == m || A.back() == m || B[0] == n || B.back() == n) {
                out << 1 << endl;
            } else if (board[0][0] == 'A' || board[n - 1][0] == 'A' ||
                       board[n - 1][m - 1] == 'A' || board[0][m - 1] == 'A' ||
                       *max_element(A.begin(), A.end()) == m ||
                       *max_element(B.begin(), B.end()) == n) {
                out << 2 << endl;
            } else if (A[0] > 0 || A.back() > 0 || B[0] > 0 || B.back() > 0) {
                out << 3 << endl;
            } else {
                out << 4 << endl;
            }
        }
    }
};


int main() {
    BBeingawesomeism solver;
    std::istream &in(std::cin);
    std::ostream &out(std::cout);
    solver.solve(in, out);
    return 0;
}