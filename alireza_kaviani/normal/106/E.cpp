/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n;
double X[MAXN], Y[MAXN], Z[MAXN];

double calc(double x, double y, double z) {
    double ans = 0;
    for (ll i = 0; i < n; i++) {
        ans = max(ans, (x - X[i]) * (x - X[i]) + (y - Y[i]) * (y - Y[i]) + (z - Z[i]) * (z - Z[i]));
    }
    return ans;
}

pdd calcZ(double x, double y) {
    double l = -1e4, r = 1e4;
    for (ll i = 0; i < 60; i++) {
        double m1 = (2 * l + r) / 3;
        double m2 = (l + 2 * r) / 3;
        if (calc(x, y, m1) >= calc(x, y, m2)) l = m1;
        else r = m2;
    }
    return {calc(x, y, l), l};
}

pdd calcY(double x) {
    double l = -1e4, r = 1e4;
    for (ll i = 0; i < 60; i++) {
        double m1 = (2 * l + r) / 3;
        double m2 = (l + 2 * r) / 3;
        if (calcZ(x, m1).X >= calcZ(x, m2).X) l = m1;
        else r = m2;
    }
    return {calcZ(x, l).X, l};
}

pdd calcX() {
    double l = -1e4, r = 1e4;
    for (ll i = 0; i < 60; i++) {
        double m1 = (2 * l + r) / 3;
        double m2 = (l + 2 * r) / 3;
        if (calcY(m1).X >= calcY(m2).X) l = m1;
        else r = m2;
    }
    return {calcY(l).X, l};
}

int main() {
    fast_io;

    cin >> n;
    for (ll i = 0; i < n; i++) cin >> X[i] >> Y[i] >> Z[i];

    double x = calcX().Y;
    double y = calcY(x).Y;
    double z = calcZ(x, y).Y;
    printf("%.10f %.10f %.10f\n", x, y, z);

    return 0;
}
/*

*/