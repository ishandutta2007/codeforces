/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n, m, p[MAXN];
vector<int> vec[MAXN], seg[MAXN << 2];

void build(int id = 1, int l = 0, int r = MAXN) {
    if (r - l == 1) {
        seg[id] = vec[l];
        Sort(seg[id]);
        return;
    }
    int mid = l + r >> 1;
    build(id << 1, l, mid);
    build(id << 1 | 1, mid, r);
    merge(all(seg[id << 1]), all(seg[id << 1 | 1]), back_inserter(seg[id]));
}

int get(int ql, int qr, int x, int id = 1, int l = 0, int r = MAXN) {
    if (qr <= l || r <= ql || qr <= ql) return 0;
    if (ql <= l && r <= qr) return lower_bound(all(seg[id]), x) - seg[id].begin();
    int mid = l + r >> 1;
    return get(ql, qr, x, id << 1, l, mid) + get(ql, qr, x, id << 1 | 1, mid, r);
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    cin >> n >> m;
    for (ll i = 1; i <= n; i++) {
        ll l, r;
        cin >> l >> r;
        vec[l].push_back(r);
    }
    build();

    while (m--) {
        ll cnt, ans = 0;
        cin >> cnt;
        for (ll i = 1; i <= cnt; i++) cin >> p[i];
        p[cnt + 1] = MAXN;
        for (ll i = 0; i <= cnt; i++) {
            ans += get(p[i] + 1, p[i + 1], p[i + 1]);
        }
        cout << n - ans << endl;
    }

    return 0;
}
/*

*/