/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author majk
 */

#ifndef MAJK_LIB
#define MAJK_LIB

#include <vector>
#include <stack>
#include <iostream>
#include <unordered_map>
#include <unordered_set>
#include <map>
#include <iomanip>
#include <set>
#include <functional>
#include <fstream>
#include <algorithm>
#include <cassert>
#include <cmath>
#include <string>
#include <sstream>
#include <queue>
#include <array>
#include <bitset>
using namespace std;

#define x first
#define y second
typedef std::pair<int,int> pii; typedef long long ll; typedef unsigned long long ull; typedef unsigned int ui; typedef pair<ui,ui> puu;

template <typename T, typename U> std::istream&operator>>(std::istream&i, pair<T,U>&p) {i >> p.x >> p.y; return i;}
template<typename T>std::istream&operator>>(std::istream&i,vector<T>&t) {for(auto&v:t){i>>v;}return i;}
template <typename T, typename U> std::ostream&operator<<(std::ostream&o, const pair<T,U>&p) {o << p.x << ' ' << p.y; return o;}
template<typename T>std::ostream&operator<<(std::ostream&o,const vector<T>&t) {if(t.empty())o<<'\n';for(size_t i=0;i<t.size();++i){o<<t[i]<<" \n"[i == t.size()-1];}return o;}
template<typename T> using minheap = priority_queue<T, vector<T>, greater<T>>;
template<typename T> using maxheap = priority_queue<T, vector<T>, less<T>>;
template <typename T> bool in(T a, T b, T c) { return a <= b && b < c; }
ui logceil(ll x) { return x?8*sizeof(ll)-__builtin_clzll(x):0; }

namespace std { template<typename T,typename U>struct hash<pair<T,U>>{hash<T>t;hash<U>u;size_t operator()(const pair<T,U>&p)const{return t(p.x)^(u(p.y)<<7);}}; }
template<typename T,typename F>T bsh(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){l=m+1;r=m;}else{h=m-1;}}return r;}
template<typename F> double bshd(double l,double h,const F&f,double p=1e-9){ui r=3+(ui)log2((h-l)/p);while(r--){double m=(l+h)/2;if(f(m)){l=m;}else{h=m;}}return (l+h)/2;}
template<typename T,typename F>T bsl(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){h=m-1;r=m;}else{l=m+1;}}return r;}
template<typename F> double bsld(double l,double h,const F&f,double p=1e-9){ui r=3+(ui)log2((h-l)/p);while(r--){double m=(l+h)/2;if(f(m)){h=m;}else{l=m;}}return (l+h)/2;}
template<typename T> T gcd(T a,T b) { if (a<b) swap(a,b); return b?gcd(b,a%b):a; }

template<typename T>class vector2:public vector<vector<T>>{public:vector2(){} vector2(size_t a,size_t b,T t=T()):vector<vector<T>>(a,vector<T>(b,t)){}};
template<typename T>class vector3:public vector<vector2<T>>{public:vector3(){} vector3(size_t a,size_t b,size_t c,T t=T()):vector<vector2<T>>(a,vector2<T>(b,c,t)){}};
template<typename T>class vector4:public vector<vector3<T>>{public:vector4(){} vector4(size_t a,size_t b,size_t c,size_t d,T t=T()):vector<vector3<T>>(a,vector3<T>(b,c,d,t)){}};
template<typename T>class vector5:public vector<vector4<T>>{public:vector5(){} vector5(size_t a,size_t b,size_t c,size_t d,size_t e,T t=T()):vector<vector4<T>>(a,vector4<T>(b,c,d,e,t)){}};


#endif

constexpr ll INF = 1e18;

class DProfessionalLayer {
public:

    ll K;
    int M;
    vector<ll> P;
    vector<vector<pii>> U;

    void gen(int i, int mask, ll factor, const vector<pii> & ways) {
        if (i == M) {
            for (pii x : ways) U[mask].push_back(x);
            if (U[mask].size() >= 2 * M) {
                sort(U[mask].begin(), U[mask].end());
                U[mask].resize(M);
            }
        } else {
            if (factor * P[i] <= K) gen(i+1, mask|(1<<i), factor * P[i], ways);
            gen(i+1, mask, factor, ways);
        }
    }

    void solve(istream& cin, ostream& cout) {
        int N; cin >> N;
        cin >> K;
        vector<ll> A(N); cin >> A;
        vector<int> E(N); cin >> E;

        ll g = A[0];
        for (ll a:A) g = gcd(g, a);

        if (g == 1) {
            cout << 0 << endl;
            return;
        }

        ll gg = g;
        vector<ll> F, S;
        for (ll x = 2; x*x <= g; ++x) {
            if (g%x == 0) {
                ll s = 1LL;
                while (g % x == 0) { g /= x; s *= x; }
                F.push_back(x);
                S.push_back(s);
            }
        }
        if (g != 1) { F.push_back(g); S.push_back(g); }
        M = F.size();

        map<ll, vector<pii>> H;
        for (int j = 0; j < N; ++j) {
            ll X = A[j]/gg;
            for (int k = 0; k < M; ++k) while (X % F[k] == 0) X /= F[k];
            auto &h = H[A[j]/X];
            h.emplace_back(E[j], j);
            if (h.size() >= 2*M) {
                sort(h.begin(),h.end());
                h.resize(M);
            }
        }

        U.resize(1<<M);
        P.resize(M);
        for (auto&h:H) {
            sort(h.y.begin(), h.y.end());
            if (h.y.size() > M) h.y.resize(M);
            copy(S.begin(),S.end(),P.begin());
            ll X = h.x/gg;
            for (int i = 0; i < M; ++i) while (X % F[i] == 0) { P[i] *= F[i]; X /= F[i]; }
            gen(0, 0, 1LL, h.y);
//            for (int i = 1; i < (1<<M); ++i) {
//                ll p = 1;
//                for (int k = 0; k < M; ++k) if (i&(1<<k)) p *= P[k];
//                if (p <= K) {
//                    for (pii hh : h.y) {
//                        U[i].push_back(hh);
//                        if (U[i].size() >= 2*M) {
//                            sort(U[i].begin(),U[i].end());
//                            U[i].resize(M);
//                        }
//                    }
//                }
//            }
        }


        map<int, vector<int>> G;
        for (int i = 1; i < (1<<M); ++i) {
            sort(U[i].begin(),U[i].end());
            if (U[i].size() > M) U[i].resize(M);
            for (pii u: U[i]) G[u.y].emplace_back(i);
        }

        vector2<ll> D(M+1, 1<<M, INF);
        D[0][0] = 0;
        for (auto &g: G) {
            for (int k = M-1; k >= 0; --k) {
                for (int i = 0; i < (1<<M); ++i) {
                    if (D[k][i] == INF) continue;

                    for (int j : g.y) {
                        if ((i & j) == 0) {
                            D[k+1][i|j] = min(D[k+1][i|j], D[k][i] + E[g.x]);
                        }
                    }
                }
            }
        }

        ll ans = INF;
        for (int i = 1; i <= M; ++i) ans = min(ans, D[i].back()* i);
        if (ans == INF) cout << "-1\n";
        else cout << ans << endl;
    }
};


int main() {
	ios_base::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr);
	DProfessionalLayer solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
    return 0;
}