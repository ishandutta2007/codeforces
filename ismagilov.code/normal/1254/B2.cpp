/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Azat Ismagilov
 */

#include <fstream>

#include <iostream>
#include <algorithm>
#include <vector>
#include <queue>
#include <numeric>
#include <set>
#include <map>

#define int long long
#define ld long double
#define fs first
#define sc second
#define pb push_back
#define ppb pop_back
#define pf push_front
#define ppf pop_front
#define mp make_pair
#define len(v) ((int)v.size())
#define vc vector
#define pr pair
#define all(v) v.begin(), v.end()
//#pragma GCC optimize("Ofast")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,tune=native")
//#pragma GCC optimize("unroll-loops")

using namespace std;

template<typename T, typename U>
inline ostream &operator<<(ostream &_out, const pair<T, U> &_p) {
    _out << _p.first << ' ' << _p.second;
    return _out;
}

template<typename T, typename U>
inline istream &operator>>(istream &_in, pair<T, U> &_p) {
    _in >> _p.first >> _p.second;
    return _in;
}

template<typename T>
inline ostream &operator<<(ostream &_out, const vector<T> &_v) {
    if (_v.empty()) { return _out; }
    _out << _v.front();
    for (auto _it = ++_v.begin(); _it != _v.end(); ++_it) { _out << ' ' << *_it; }
    return _out;
}

template<typename T>
inline istream &operator>>(istream &_in, vector<T> &_v) {
    for (auto &_i : _v) { _in >> _i; }
    return _in;
}

const int MAXN = 3e5;
const int INF = 1e18 + 10;
const int MOD = 1e9 + 7;

class B2OtpravteKorobkiAliseUslozhnennayaVersiya {
public:
    void solve(std::istream &in, std::ostream &out) {
        int n;
        in >> n;
        vc<int> a(n);
        in >> a;
        int x = 0;
        for (auto &v : a) {
            x += v;
        }
        set<int> prost;
        for (int i = 2; i * i <= x; i++) {
            if (x % i == 0) {
                while (x % i == 0) {
                    x /= i;
                }
                prost.insert(i);
            }
        }
        if (x > 1) {
            prost.insert(x);
        }
        int strans = INF;
        for (auto vs : prost) {
            vc<int> b = a;
            for (auto &v : b) {
                v %= vs;
            }
            int ans = 0;
            for (int j = 0; j < n; j++) {
                vc<pr<int, int>> pos;
                int m = 0;
                for (; j < n; j++) {
                    int x = min(b[j], vs - m);
                    pos.pb({j, x});
                    m += x;
                    b[j] -= x;
                    if (m >= vs) {
                        j--;
                        break;
                    }
                }
                int start = 0;
                int finish = len(pos) - 1;
                while (start <= finish) {
                    while (start <= finish) {
                        if (pos[start].sc == 0) {
                            start++;
                            continue;
                        }
                        if (pos[finish].sc == 0) {
                            finish--;
                            continue;
                        }
                        break;
                    }
                    if (start >= finish) {
                        break;
                    }
                    int m = min(pos[start].sc, pos[finish].sc);
                    ans += m * (pos[finish].fs - pos[start].fs);
                    if (ans > strans) {
                        break;
                    }
                    pos[start].sc -= m;
                    pos[finish].sc -= m;
                }
                if (ans > strans) {
                    break;
                }
            }
            strans = min(strans, ans);
        }
        if (strans == INF) {
            strans = -1;
        }
        out << strans;
    }
};


signed main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    B2OtpravteKorobkiAliseUslozhnennayaVersiya solver;
    std::istream &in(std::cin);
    std::ostream &out(std::cout);
    solver.solve(in, out);
    return 0;
}