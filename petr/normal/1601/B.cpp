/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

// Actual solution is at the bottom

#undef NDEBUG

#include <algorithm>
#include <array>
#include <bitset>
#include <cassert>
#include <climits>
#include <cstdint>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <memory>
#include <numeric>
#include <queue>
#include <random>
#include <set>
#include <stack>
#include <string>
#include <unordered_set>
#include <unordered_map>
#include <vector>
// AtCoder library from https://github.com/atcoder/ac-library
// #include "../atcoder/all"

#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()

using namespace std;

typedef int64_t int64;
typedef pair<int, int> ii;

class BLyagushkaPuteshestvennitsa {
 public:
  void solveOne() {
    int n;
    cin >> n;
    vector<int> a(n + 1), b(n + 1);
    for (int i = 1; i <= n; ++i) {
      cin >> a[i];
    }
    for (int i = 1; i <= n; ++i) {
      cin >> b[i];
    }
    vector<int> dist(n + 1, -1);
    vector<int> prev(n + 1, -1);
    dist[n] = 0;
    queue<int> q;
    q.push(n);
    set<int> togo;
    for (int i = 0; i < n; ++i) togo.insert(i);
    while (!q.empty()) {
      int at = q.front();
      q.pop();
      int sat = at;
      at += b[at];
      int left = at - a[at];
      while (true) {
        auto nit = togo.lower_bound(left);
        if (nit == togo.end()) break;
        int c = *nit;
        if (c > at) break;
        togo.erase(nit);
        dist[c] = dist[sat] + 1;
        prev[c] = sat;
        q.push(c);
      }
    }
    cout << dist[0] << "\n";
    if (dist[0] >= 0) {
      vector<int> seq;
      int at = 0;
      while (at < n) {
        seq.push_back(at);
        at = prev[at];
      }
      reverse(all(seq));
      for (int x : seq) cout << x << " ";
      cout << "\n";
    }
  }

  void solve() {
    int nt = 1;
    for (int it = 0; it < nt; ++it) {
      solveOne();
    }
  }
};


int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(0);
    BLyagushkaPuteshestvennitsa solver;


    solver.solve();
    return 0;
}