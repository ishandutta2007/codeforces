void sort(array(string) a, array(string) temp, int start, int end) {
    if (end - start <= 1) {
        return;
    }
    int m = (end + start) >> 1;
    sort(a, temp, start, m);
    sort(a, temp, m, end);
    for(int i = start, p = start, q = m; i < end; i++) {
        if (q >= end || p < m && a[p] <= a[q])
            temp[i] = a[p++];
        else
            temp[i] = a[q++];
    }
    for (int i = start; i < end; i++) {
        a[i] = temp[i];
    }
}

int main() {
    int n, m;
    string s = Stdio.stdin->gets();
    sscanf(s,"%d",n);
    mapping(string:int) albums = ([ ]);
    string album;
    int year;
    for (int i = 0; i < n; i++) {
        s = Stdio.stdin->gets();
        sscanf(s, "%s %d", album, year);
        if (zero_type(albums[album]) != 0) {
            albums[album] = year;
        } else {
            if (albums[album] < year) {
                albums[album] = year;
            }
        }
    }
    s = Stdio.stdin->gets();
    sscanf(s,"%d",m);
    array(string) candidates = allocate(m);
    for (int i = 0; i < m; i++) {
        candidates[i] = Stdio.stdin->gets();
    }
    array(string) temp = allocate(m);
    sort(candidates, temp, 0, m);
    for (int i = m - 1; i >= 0; --i) {
        if (albums[candidates[i]] == 0) {
            write(candidates[i]);
            return 0;
        }
    }
    int best = 5000;
    string res;
    for (int i = m - 1; i >= 0; --i) {
        int ok = albums[candidates[i]];
        if (ok < best) {
            best = ok;
            res = candidates[i];
        }
    }
    write(res);
    return 0;
}