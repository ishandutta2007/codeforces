/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author majk
 */

#ifndef MAJK_LIB
#define MAJK_LIB

#include <vector>
#include <stack>
#include <iostream>
#include <unordered_map>
#include <unordered_set>
#include <map>
#include <iomanip>
#include <set>
#include <functional>
#include <algorithm>
#include <numeric>
#include <cassert>
#include <cmath>
#include <string>
#include <queue>
#include <array>
#include <bitset>
using namespace std;

#define x first
#define y second
typedef std::pair<int,int> pii; typedef long long ll; typedef unsigned long long ull; typedef unsigned int ui; typedef pair<ui,ui> puu;

template <typename T, typename U> std::istream&operator>>(std::istream&i, pair<T,U>&p) {i >> p.x >> p.y; return i;}
template<typename T>std::istream&operator>>(std::istream&i,vector<T>&t) {for(auto&v:t){i>>v;}return i;}
template <typename T, typename U> std::ostream&operator<<(std::ostream&o, const pair<T,U>&p) {o << p.x << ' ' << p.y; return o;}
template<typename T>std::ostream&operator<<(std::ostream&o,const vector<T>&t) {if(t.empty())o<<'\n';for(size_t i=0;i<t.size();++i){o<<t[i]<<" \n"[i == t.size()-1];}return o;}
template<typename T> using minheap = priority_queue<T, vector<T>, greater<T>>;
template<typename T> using maxheap = priority_queue<T, vector<T>, less<T>>;
ui logceil(ll x) { return x?8*sizeof(ll)-__builtin_clzll(x):0; }

namespace std { template<typename T,typename U>struct hash<pair<T,U>>{hash<T>t;hash<U>u;size_t operator()(const pair<T,U>&p)const{return t(p.x)^(u(p.y)<<7);}}; }
template<typename T,typename F>T bsh(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){l=m+1;r=m;}else{h=m-1;}}return r;}
template<typename F> double bshd(double l,double h,const F&f,double p=1e-9){ui r=3+(ui)log2((h-l)/p);while(r--){double m=(l+h)/2;if(f(m)){l=m;}else{h=m;}}return (l+h)/2;}
template<typename T,typename F>T bsl(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){h=m-1;r=m;}else{l=m+1;}}return r;}
template<typename F> double bsld(double l,double h,const F&f,double p=1e-9){ui r=3+(ui)log2((h-l)/p);while(r--){double m=(l+h)/2;if(f(m)){h=m;}else{l=m;}}return (l+h)/2;}
template<typename T> T gcd(T a,T b) { if (a<b) swap(a,b); return b?gcd(b,a%b):a; }


template<typename T>class vector2:public vector<vector<T>>{public:vector2(){} vector2(size_t a,size_t b,T t=T()):vector<vector<T>>(a,vector<T>(b,t)){}};
template<typename T>class vector3:public vector<vector2<T>>{public:vector3(){} vector3(size_t a,size_t b,size_t c,T t=T()):vector<vector2<T>>(a,vector2<T>(b,c,t)){}};
template<typename T>class vector4:public vector<vector3<T>>{public:vector4(){} vector4(size_t a,size_t b,size_t c,size_t d,T t=T()):vector<vector3<T>>(a,vector3<T>(b,c,d,t)){}};
template<typename T>class vector5:public vector<vector4<T>>{public:vector5(){} vector5(size_t a,size_t b,size_t c,size_t d,size_t e,T t=T()):vector<vector4<T>>(a,vector4<T>(b,c,d,e,t)){}};


#endif

class HNumberOfComponents {
public:
    int N, Q;
    vector<int> A;

    void build(vector<pii>&block, int from, int to) {
        block.clear();
        for (int i = from; i < to; ++i) {
            pii c = {A[i],A[i]};
            while (!block.empty() && block.back().x < c.y) {
                c = {min(block.back().x, c.x), max(block.back().y, c.y)};
                block.pop_back();
            }
            block.push_back(c);
        }
    }

    vector<vector<pii>> Blocks;

    struct BlockGroup {
        int blockId;
        int from, to;
        int lo, hi;
    };

    void solve(istream& cin, ostream& cout) {
        cin >> N >> Q;
        A.resize(N);
        cin >> A;

        int S = 2048;
        int B = (N+S-1)/S;
        Blocks.resize(B);
        for (int i = 0; i < B; ++i) {
            build(Blocks[i], i*S, min(i*S+S, N));
        }
        vector<unordered_map<int, int>> CacheL(B);
        vector<unordered_map<int, int>> CacheR(B);
        for (int q = 0; q < Q; ++q) {
            int p, x; cin >> p >> x;
            --p;
            int b = p/S;
            A[p] = x;
            build(Blocks[b], b*S, min(N, b*S+S));
            CacheL[b].clear();
            CacheR[b].clear();

            vector<BlockGroup> Groups;
            for (int i = 0; i < B; ++i) {
                auto &block = Blocks[i];
                if (Groups.empty() || Groups.back().lo >= block[0].y) {
                    Groups.push_back(BlockGroup{i, 0, (int)block.size(), block.back().x, block[0].y});
                } else {
                    int j;
                    if (Groups.back().lo < block[(int)block.size()-1].y) {
                        j = (int)block.size()-1;
                    } else {
                        auto it = CacheR[i].find(Groups.back().lo);
                        if (it != CacheR[i].end()) j = it->y;
                        else j = CacheR[i][Groups.back().lo] = bsh(0, (int)block.size()-1, [&](int x) { return Groups.back().lo < block[x].y; });
                    }
                    BlockGroup BG{-1, 0, 1, block.back().x, block[0].y};
                    while (!Groups.empty() && Groups.back().lo < BG.hi) {
                        auto &last = Groups.back();
                        if (last.blockId == -1) {
                            BG.lo = min(BG.lo, last.lo);
                            BG.hi = max(BG.hi, last.hi);
                            Groups.pop_back();
                        } else {
                            auto &lastB = Blocks[last.blockId];
                            if (lastB[last.from].x < BG.hi) {
                                BG.lo = min(BG.lo, last.lo);
                                BG.hi = max(BG.hi, last.hi);
                                Groups.pop_back();
                            } else {
                                auto it = CacheL[last.blockId].find(BG.hi);
                                int s = (it != CacheL[last.blockId].find(BG.hi)) ? it->y : CacheL[last.blockId][BG.hi] = bsl(last.from, last.to - 1, [&](int x) { return lastB[x].x < BG.hi; });
                                BG.lo = min(BG.lo, lastB[last.to-1].x);
                                BG.hi = max(BG.hi, lastB[s].y);
                                last.lo = lastB[s-1].x;
                                last.hi = lastB[last.from].y;
                                last.to = s;
                            }
                        }
                    }
                    Groups.push_back(BG);
                    if (j+1 != (int)block.size()) {
                        Groups.push_back(BlockGroup{i, j+1, (int)block.size(), block.back().x, block[j+1].y});
                    }
                }
            }

            int ans = 0;
            for (BlockGroup&bg: Groups) ans += bg.to - bg.from;
            cout << ans << '\n';
        }
    }
};


int main() {
	ios_base::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr);
	HNumberOfComponents solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
    return 0;
}