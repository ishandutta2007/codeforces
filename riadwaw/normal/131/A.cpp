/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author RiaD
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <bits/stdc++.h>


#include <utility>

template <typename T>
class Range {
public:
	Range(T begin, T end) : begin_(std::move(begin)), end_(std::move(end)) {

	}

	T begin() {
		return begin_;
	}

	T end() {
		return end_;
	}

private:
	T begin_;
	T end_;
};


template <typename T>
Range<T> make_range(T begin, T end) {
	return Range<T>(begin, end);
}

using namespace std;

class TaskA {
public:
	void solve(std::istream& in, std::ostream& out) {
		string s;
		in >> s;
		bool all_caps = true;
		for (char c: make_range(s.begin() + 1, s.end())) {
			if (islower(c)) {
				all_caps = false;
				break;
			}
		}

		if (all_caps) {
			for (char c: s) {
				if (islower(c)) {
					out << (char) toupper(c);
				}
				else {
					out << (char) tolower(c);
				}
			}
		}
		else {
			out << s;
		}
	}
};


int main() {
	std::ios_base::sync_with_stdio(false);
	TaskA solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	in.tie(0);
	out << std::fixed;
	out.precision(20);
	solver.solve(in, out);
	return 0;
}