import java.util.InputMismatchException;
import java.math.BigInteger;
import java.io.*;

/**
 * Generated by Contest helper plug-in
 * Actual solution is at the bottom
 */
public class Main {
	public static void main(String[] args) {
		InputReader in = new StreamInputReader(System.in);
		PrintWriter out = new PrintWriter(System.out);
		run(in, out);
	}

	public static void run(InputReader in, PrintWriter out) {
		Solver solver = new TaskD();
		solver.solve(1, in, out);
		Exit.exit(in, out);
	}
}

abstract class InputReader {
	private boolean finished = false;

	public abstract int read();

	public int readInt() {
		int c = read();
		while (isSpaceChar(c))
			c = read();
		int sgn = 1;
		if (c == '-') {
			sgn = -1;
			c = read();
		}
		int res = 0;
		do {
			if (c < '0' || c > '9')
				throw new InputMismatchException();
			res *= 10;
			res += c - '0';
			c = read();
		} while (!isSpaceChar(c));
		return res * sgn;
	}

	public String readString() {
		int c = read();
		while (isSpaceChar(c))
			c = read();
		StringBuffer res = new StringBuffer();
		do {
			res.appendCodePoint(c);
			c = read();
		} while (!isSpaceChar(c));
		return res.toString();
	}

	private boolean isSpaceChar(int c) {
		return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
	}

	public void setFinished(boolean finished) {
		this.finished = finished;
	}

	public abstract void close();
}

class StreamInputReader extends InputReader {
	private InputStream stream;
	private byte[] buf = new byte[1024];
	private int curChar, numChars;

	public StreamInputReader(InputStream stream) {
		this.stream = stream;
	}

	public int read() {
		if (numChars == -1)
			throw new InputMismatchException();
		if (curChar >= numChars) {
			curChar = 0;
			try {
				numChars = stream.read(buf);
			} catch (IOException e) {
				throw new InputMismatchException();
			}
			if (numChars <= 0)
				return -1;
		}
		return buf[curChar++];
	}

	public void close() {
		try {
			stream.close();
		} catch (IOException ignored) {
		}
	}
}

class Exit {
	private Exit() {
	}

	public static void exit(InputReader in, PrintWriter out) {
		in.setFinished(true);
		in.close();
		out.close();
	}
}

interface Solver {
	public void solve(int testNumber, InputReader in, PrintWriter out);
}

class TaskD implements Solver {
	public void solve(int testNumber, InputReader in, PrintWriter out) {
		int x = in.readInt();
		int y = in.readInt();
		int z = in.readInt();
		int dx = in.readInt();
		int dy = in.readInt();
		int dz = in.readInt();
		int R = in.readInt();
		int mineCount = in.readInt();
		double answer = Double.POSITIVE_INFINITY;
		for (int i = 0; i < mineCount; i++) {
			int cx = in.readInt();
			int cy = in.readInt();
			int cz = in.readInt();
			int cr = in.readInt();
			answer = Math.min(answer, check(x - cx, y - cy, z - cz, dx, dy, dz, R + cr));
			int rayCount = in.readInt();
			for (int j = 0; j < rayCount; j++) {
				int px = in.readInt();
				int py = in.readInt();
				int pz = in.readInt();
				answer = Math.min(answer, check(x - cx - px, y - cy - py, z - cz - pz, dx, dy, dz, R));
			}
		}
		if (answer == Double.POSITIVE_INFINITY)
			out.println("-1");
		else
			out.printf("%.10f\n", answer);
	}

	private double check(long x, long y, long z, long dx, long dy, long dz, long r) {
		long a = dx * dx + dy * dy + dz * dz;
		long b = x * dx + y * dy + z * dz;
		long c = x * x + y * y + z * z - r * r;
		if (c <= 0)
			throw new RuntimeException();
		if (b * b < a * c || b > 0)
			return Double.POSITIVE_INFINITY;
		return (-b - Math.sqrt(b * b - a * c)) / a;
	}
}