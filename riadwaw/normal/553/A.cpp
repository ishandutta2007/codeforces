/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author RiaD
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <bits/stdc++.h>


#include <iterator>

#include <string>
#include <stdexcept>
#ifdef SPCPPL_DEBUG
	#define SPCPPL_ASSERT(condition) \
	if(!(condition)) { \
		throw std::runtime_error(std::string() + #condition + " in line " + std::to_string(__LINE__) + " in " + __PRETTY_FUNCTION__); \
	}
#else
	#define SPCPPL_ASSERT(condition)
#endif



/**
* Support decrementing and multi-passing, but not declared bidirectional(or even forward) because
* it's reference type is not a reference.
*
* It doesn't return reference because
* 1. Anyway it'll not satisfy requirement [forward.iterators]/6
*   If a and b are both dereferenceable, then a == b if and only if *a and
*   b are bound to the same object.
* 2. It'll not work with reverse_iterator that returns operator * of temporary which is temporary for this iterator
*
* Note, reverse_iterator is not guaranteed to work  now too since it works only with bidirectional iterators,
* but it's seems to work at least on my implementation.
*
* It's not really useful anywhere except iterating anyway.
*/
template <typename T>
class IntegerIterator : public std::iterator<std::input_iterator_tag, T, std::ptrdiff_t, T*, T> {
public:
	explicit IntegerIterator(int value): value(value) {

	}

	IntegerIterator& operator++ () {
		++value;
		return *this;
	}

	IntegerIterator operator++ (int) {
		IntegerIterator copy = *this;
		++value;
		return copy;
	}

	IntegerIterator& operator-- () {
		--value;
		return *this;
	}

	IntegerIterator operator-- (int) {
		IntegerIterator copy = *this;
		--value;
		return copy;
	}

	T operator * () const {
		return value;
	}

	bool operator == (IntegerIterator rhs) {
		return value == rhs.value;
	}

	bool operator != (IntegerIterator rhs) {
		return !(*this == rhs);
	}
private:
	T value;
};

template <typename T>
class IntegerRange {
public:
	IntegerRange(T begin, T end): begin_(begin), end_(end) {

	}

	IntegerIterator<T> begin() const {
		return IntegerIterator<T>(begin_);
	}

	IntegerIterator<T> end() const {
		return IntegerIterator<T>(end_);
	}

private:
	T begin_;
	T end_;
};

template <typename T>
class ReversedIntegerRange {
	typedef std::reverse_iterator<IntegerIterator<T>> IteratorType;
public:
	ReversedIntegerRange(T begin, T end): begin_(begin), end_(end) {

	}

	IteratorType begin() const {
		return IteratorType(IntegerIterator<T>(begin_));
	}

	IteratorType end() const {
		return IteratorType(IntegerIterator<T>(end_));
	}

private:
	T begin_;
	T end_;
};

template <typename T>
IntegerRange<T> range(T to) {
	SPCPPL_ASSERT(to >= 0);
	return IntegerRange<T>(0, to);
}

template <typename T>
IntegerRange<T> range(T from, T to) {
	SPCPPL_ASSERT(from <= to);
	return IntegerRange<T>(from, to);
}

template <typename T>
ReversedIntegerRange<T> downrange(T from) {
	SPCPPL_ASSERT(from >= 0);
	return ReversedIntegerRange<T>(from, 0);
}

template <typename T>
ReversedIntegerRange<T> downrange(T from, T to) {
	SPCPPL_ASSERT(from >= to);
	return ReversedIntegerRange<T>(from, to);
}



#include <assert.h>



#include <type_traits>

template <typename T>
T identity();

//FIXME: remove {} when CPP-1825 fixed.
template<typename T, typename Enable = std::true_type>
struct impl__IdentityHelper {
};

template <typename T>
struct impl__SampleIdentityHelper {
	static T identity(const T&) {
		return ::identity<T>();
	}
};

template<typename T>
struct impl__IdentityHelper<T, typename std::is_arithmetic<T>::type> {
	static T identity() {
		return 1;
	}
};

template<typename T>
T identity(const T& sample) {
	return impl__SampleIdentityHelper<T>::identity(sample);
}

template <typename T>
T identity() {
	return impl__IdentityHelper<T>::identity();
}



//FIXME: remove {} when CPP-1825 fixed.
template <bool normalize>
struct impl__Normalizator {

};

template <>
struct impl__Normalizator<true> {
	static void softUp(long long& value, long long mod) {
		if (value < 0) {
			value += mod;
		}
	}

	static void softDown(long long& value, long long mod) {
		if (value >= mod) {
			value -= mod;
		}
	}

	static void hardDown(long long& value, long long mod) {
		value %= mod;
	}

	static void hard(long long& value, long long mod) {
		value %= mod;
		softUp(value, mod);
	}
};

template <>
struct impl__Normalizator<false> {
	static void softUp(long long&, long long) {
	}

	static void softDown(long long&, long long) {
	}

	static void hardDown(long long&, long long) {
	}

	static void hard(long long&, long long) {
	}
};


/**
* ax + by = result
*/
template <typename T>
T extendedGcd(T a, T b, T& x, T& y) {
	if (a == 0) {
		x = 0;
		y = 1;
		return b;
	}
	T d = extendedGcd(b % a, a, y, x);
	x -= (b / a) * y;
	return d;
}

template <long long mod, bool autoNormalize = true>
class Zn {
	static_assert(mod > 0, "Mod has to be positive integer");
public:

	/**
	* Not to be used
	*/
	Zn(): value(0) {
	}

	/**
	* Instead of ctor, to allow not to notmalize in ctor
	*/
	static Zn valueOf(long long value) {
		impl__Normalizator<true>::hard(value, mod);
		return Zn(value);
	}

	Zn& operator += (const Zn& rhs) {
		value += rhs.value;
		impl__Normalizator<autoNormalize>::softDown(value, mod);
		return *this;
	}

	Zn& operator += (long long rhs) {
		return *this += Zn::valueOf(rhs);
	}

	Zn& operator -= (const Zn& rhs) {
		value -= rhs.value;
		impl__Normalizator<autoNormalize>::softUp(value, mod);
		return *this;
	}

	Zn& operator -= (long long rhs) {
		return *this -= Zn::valueOf(rhs);
	}

	Zn& operator *= (const Zn& rhs) {
		value *= rhs.value;
		impl__Normalizator<autoNormalize>::hardDown(value, mod);
		return *this;
	}

	Zn& operator *= (long long rhs) {
		return *this *= Zn::valueOf(rhs);
	}

	/**
	* Changes internal state, but doesn't change logical state
	*/
	void normalize() const {
		long long& value = const_cast<long long&>(this->value);
		impl__Normalizator<!autoNormalize>::hard(value, mod);
	}

	Zn operator - () const {
		Zn result(mod - value);
		impl__Normalizator<autoNormalize>::softDown(result.value, mod);
		return result;
	}

	Zn& operator /= (const Zn& rhs) {
		return *this *= rhs.inversed();
	}

	Zn& operator /= (long long rhs) {
		return *this /= Zn::valueOf(rhs);
	}

	bool operator == (const Zn& rhs) const {
		normalize();
		rhs.normalize();
		return value == rhs.value;
	}

	Zn inversed() const {
		SPCPPL_ASSERT(value != 0);
		normalize();

		long long x, y;
		long long gcd = extendedGcd(value, mod, x, y);
		(void)gcd;
		SPCPPL_ASSERT(gcd == 1);

		impl__Normalizator<autoNormalize>::softUp(x, mod);
		return Zn(x);
	}
	template <long long m, bool aF>
	friend std::ostream& operator << (std::ostream&, const Zn<m, aF>& zn);
	template <long long m, bool aF>
	friend std::istream& operator >> (std::istream&, Zn<m, aF>& zn);

	long long longValue() const {
		return value;
	}
private:

	/**
	* No normalization performed
	*/
	explicit Zn(long long value): value(value) {
	}

	long long value;
};

template <long long m, bool a>
bool operator == (const Zn<m, a>& lhs, long long rhs) {
	return lhs == Zn<m, a>::valueOf(rhs);
}

template <long long m, bool a>
bool operator == (long long lhs, const Zn<m, a>& rhs) {
	return rhs == lhs;
}

template <long long m, bool a>
bool operator != (const Zn<m, a>& lhs, const Zn<m, a>& rhs) {
	return !(lhs == rhs);
}

template <long long m, bool a>
bool operator != (const Zn<m, a>& lhs, long long rhs) {
	return !(lhs == rhs);
}

template <long long m, bool a>
bool operator != (long long lhs, const Zn<m, a>& rhs) {
	return !(lhs == rhs);
}

template <long long m, bool a>
Zn<m, a> operator + (const Zn<m, a>& lhs, const Zn<m, a>& rhs) {
	Zn<m, a> copy = lhs;
	return copy += rhs;
}

template <long long m, bool a>
Zn<m, a> operator + (const Zn<m, a>& lhs, long long rhs) {
	Zn<m, a> copy = lhs;
	return copy += rhs;
}

template <long long m, bool a>
Zn<m, a> operator + (long long lhs, const Zn<m, a>& rhs) {
	return rhs + lhs;
}

template <long long m, bool a>
Zn<m, a> operator - (const Zn<m, a>& lhs, const Zn<m, a>& rhs) {
	Zn<m, a> copy = lhs;
	return copy -= rhs;
}

template <long long m, bool a>
Zn<m, a> operator - (const Zn<m, a>& lhs, long long rhs) {
	Zn<m, a> copy = lhs;
	return copy -= rhs;
}

template <long long m, bool a>
Zn<m, a> operator - (long long lhs, const Zn<m, a>& rhs) {
	return Zn<m, a>::valueOf(lhs) - rhs;
}

template <long long m, bool a>
Zn<m, a> operator * (const Zn<m, a>& lhs, const Zn<m, a>& rhs) {
	Zn<m, a> copy = lhs;
	return copy *= rhs;
}

template <long long m, bool a>
Zn<m, a> operator * (const Zn<m, a>& lhs, long long rhs) {
	Zn<m, a> copy = lhs;
	return copy *= rhs;
}

template <long long m, bool a>
Zn<m, a> operator * (long long lhs, const Zn<m, a>& rhs) {
	return rhs * lhs;
}

template <long long m, bool a>
Zn<m, a> operator / (const Zn<m, a>& lhs, const Zn<m, a>& rhs) {
	Zn<m, a> copy = lhs;
	return copy /= rhs;
}

template <long long m, bool a>
Zn<m, a> operator / (const Zn<m, a>& lhs, long long rhs) {
	Zn<m, a> copy = lhs;
	return copy /= rhs;
}

template <long long m, bool a>
Zn<m, a> operator / (long long lhs, const Zn<m, a>& rhs) {
	return Zn<m, a>::valueOf(lhs) / rhs;
}

template <long long m, bool a>
std::ostream& operator <<(std::ostream& stream, const Zn<m, a>& zn) {
	zn.normalize();
	return stream << zn.value;
}

template <long long m, bool a>
std::istream& operator >>(std::istream& stream, Zn<m, a>& zn) {
	stream >> zn.value;
	impl__Normalizator<a>::hard(zn.value, m);
	return stream;
}

template <long long m, bool a>
struct impl__IdentityHelper<Zn<m, a>> {
	static Zn<m, a> identity() {
		return Zn<m, a>::valueOf(1);
	}
};





#include <vector>
#include <cstddef>


template <typename T>
std::vector<T> impl__factorials(std::size_t maxN, const T& one) {
	std::vector<T> res(maxN + 1);
	res[0] = one;
	for (std::size_t i = 1; i <= maxN; ++i) {
		res[i] = res[i - 1] * i;
	}
	return res;
}

template <typename T>
std::vector<T> factorials(std::size_t maxN) {
	return impl__factorials(maxN, identity<T>());
}

template <typename T>
std::vector<T> factorials(std::size_t maxN, const T& sample) {
	return impl__factorials(maxN, identity<T>(sample));
}


template <typename T>
std::vector<std::vector<T>> impl__binomials(std::size_t maxN, const T& one) {
	std::vector<std::vector<T>> res(maxN + 1, std::vector<T>(maxN + 1));
	for (std::size_t n = 0; n <= maxN; ++n) {
		res[n][0] = one;
		res[n][n] = one;
		for (std::size_t k = 1; k < n; ++k) {
			res[n][k] = res[n - 1][k - 1] + res[n - 1][k];
		}
	}

	return res;
}

template <typename T>
std::vector<std::vector<T>> binomials(std::size_t maxN) {
	return impl__binomials(maxN, identity<T>());
}

template <typename T>
std::vector<std::vector<T>> binomials(std::size_t maxN, const T& sample) {
	return impl__binomials(maxN, identity<T>(sample));
}


using namespace std;

class TaskA {
public:
	void solve(std::istream& in, std::ostream& out) {
		int n;
		in >> n;
		vector<int> a(n);
		for(int i: range(n)) {
			in >> a[i];
		}

		typedef Zn<1000000007> Z;
		auto c = binomials<Z>(1000);

		int sum = 0;
		Z ans = Z::valueOf(1);
		for (int i: range(n)) {
			ans *= c[sum + a[i] - 1][a[i] - 1];
			sum += a[i];
		}

		out << ans;
	}
};


int main() {
	std::ios_base::sync_with_stdio(false);
	TaskA solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	in.tie(0);
	out << std::fixed;
	out.precision(20);
	solver.solve(in, out);
	return 0;
}