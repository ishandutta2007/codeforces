/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <algorithm>
#include <queue>
#include <vector>
#include <set>
#include <map>
#include <cassert>
#include <functional>
#include <sstream>
#include <cmath>

#include <cstring>
#include <cstdio>

using namespace std;

typedef pair<int, int> ii;
typedef long long int64;
typedef vector<int> vi;

#define pb push_back
#define mp make_pair
#define all(v) (v).begin(),(v).end()
#define sz(v) ((int)(v).size())

template<class T> T abs(T x) { return x >= 0 ? x : -x; }
template<class T> T sqr(T x) { return x * x; }

class TaskC {
public:
    vi d;

	void solve(std::istream& in, std::ostream& out) {
	    d = vi(110, -1);
	    d[0] = 0;
	    d[1] = 1;
	    d[2] = -1;
	    for (int i = 3; i < d.size(); ++i) {
	        for (int j = 1; 2 * j - 1 <= i; ++j) {
	            int val = d[i - (2 * j - 1)];
                if (val == -1) continue;
                if (val >= j) continue;
                d[i] = j;
                break;
	        }
	        assert(d[i] > -1);
	        //cerr << i << " " << d[i] << "\n";
	    }

	    int n;
	    in >> n;
	    if (n == 2) {
	        out << "-1\n";
	        return;
	    }
	    auto res = doSolve(n);
	    out << sz(res) << "\n";
	    for (int i = 0; i < sz(res); ++i)
	        out << res[i] << "\n";
	}

	vector<string> doSolve(int n) {
	    int m = d[n];
        vector<string> res(m, string(m, '.'));
        int x = n, y = 0;
        while (x > 0) {
            int s = d[x];
            res[y][y] = 'o';
            for (int i = 1; i < s; ++i) {
                res[y + i][y] = 'o';
                res[y][y + i] = 'o';
            }
            x -= (2 * s - 1);
            ++y;
        }
        reverse(all(res));
        return res;
	}
};


int main() {
	TaskC solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}