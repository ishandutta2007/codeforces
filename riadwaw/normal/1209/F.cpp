/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author RiaD
 */
 
#include <iostream>
#include <functional>
#include <fstream>
 
#include <iostream>
#include <cassert>
#include <array>
#include <vector>
#include <set>
#include <algorithm>
#include <queue>
 
 
#include <iterator>
 
 
#include <string>
#include <stdexcept>
 
#ifndef SPCPPL_ASSERT
	#ifdef SPCPPL_DEBUG
		#define SPCPPL_ASSERT(condition) \
		if(!(condition)) { \
			throw std::runtime_error(std::string() + #condition + " in line " + std::to_string(__LINE__) + " in " + __PRETTY_FUNCTION__); \
		}
	#else
		#define SPCPPL_ASSERT(condition)
	#endif
#endif
 
 
/**
* Support decrementing and multi-passing, but not declared bidirectional(or even forward) because
* it's reference type is not a reference.
*
* It doesn't return reference because
* 1. Anyway it'll not satisfy requirement [forward.iterators]/6
*   If a and b are both dereferenceable, then a == b if and only if *a and
*   b are bound to the same object.
* 2. It'll not work with reverse_iterator that returns operator * of temporary which is temporary for this iterator
*
* Note, reverse_iterator is not guaranteed to work  now too since it works only with bidirectional iterators,
* but it's seems to work at least on my implementation.
*
* It's not really useful anywhere except iterating anyway.
*/
template <typename T>
class IntegerIterator {
public:
	using value_type = T;
	using difference_type = std::ptrdiff_t;
	using pointer = T*;
	using reference = T;
	using iterator_category = std::input_iterator_tag;
 
	explicit IntegerIterator(T value): value(value) {
 
	}
 
	IntegerIterator& operator++() {
		++value;
		return *this;
	}
 
	IntegerIterator operator++(int) {
		IntegerIterator copy = *this;
		++value;
		return copy;
	}
 
	IntegerIterator& operator--() {
		--value;
		return *this;
	}
 
	IntegerIterator operator--(int) {
		IntegerIterator copy = *this;
		--value;
		return copy;
	}
 
	T operator*() const {
		return value;
	}
 
	bool operator==(IntegerIterator rhs) const {
		return value == rhs.value;
	}
 
	bool operator!=(IntegerIterator rhs) const {
		return !(*this == rhs);
	}
 
private:
	T value;
};
 
template <typename T>
class IntegerRange {
public:
	IntegerRange(T begin, T end): begin_(begin), end_(end) {
		SPCPPL_ASSERT(begin <= end);
	}
 
	IntegerIterator<T> begin() const {
		return IntegerIterator<T>(begin_);
	}
 
	IntegerIterator<T> end() const {
		return IntegerIterator<T>(end_);
	}
 
private:
	T begin_;
	T end_;
};
 
template <typename T>
class ReversedIntegerRange {
	using IteratorType = std::reverse_iterator<IntegerIterator<T>>;
public:
	ReversedIntegerRange(T begin, T end): begin_(begin), end_(end) {
		SPCPPL_ASSERT(begin >= end);
	}
 
	IteratorType begin() const {
		return IteratorType(IntegerIterator<T>(begin_));
	}
 
	IteratorType end() const {
		return IteratorType(IntegerIterator<T>(end_));
	}
 
private:
	T begin_;
	T end_;
};
 
template <typename T>
IntegerRange<T> range(T to) {
	return IntegerRange<T>(0, to);
}
 
template <typename T>
IntegerRange<T> range(T from, T to) {
	return IntegerRange<T>(from, to);
}
 
template <typename T>
IntegerRange<T> inclusiveRange(T to) {
	return IntegerRange<T>(0, to + 1);
}
 
template <typename T>
IntegerRange<T> inclusiveRange(T from, T to) {
	return IntegerRange<T>(from, to + 1);
}
 
template <typename T>
ReversedIntegerRange<T> downrange(T from) {
	return ReversedIntegerRange<T>(from, 0);
}
 
template <typename T>
ReversedIntegerRange<T> downrange(T from, T to) {
	return ReversedIntegerRange<T>(from, to);
}
 
template <typename T>
ReversedIntegerRange<T> inclusiveDownrange(T from) {
	return ReversedIntegerRange<T>(from + 1, 0);
}
 
template <typename T>
ReversedIntegerRange<T> inclusiveDownrange(T from, T to) {
	return ReversedIntegerRange<T>(from + 1, to);
}
 
//#define PROBLEM "problem_name.h"
//#include PROBLEM
//#include <message.h>
//#include <spcppl/dgcj.h>
 
using namespace std;
 
struct Node {
	uint64_t hash;
	char value;
	int length;
	int mod;
	array<Node*, 17> parents;
};
 
Node* root_node() {
	auto node = new Node;
	node->hash = 0;
	node->value = 0;
	node->length = 0;
	node->mod = 0;
	node->parents.fill(node);
	return node;
}
 
auto get_node(Node* parent, int number) {
	auto result = parent;
	for (char c: to_string(number)) {
		auto cur = new Node;
		cur->value = c;
		cur->hash = result->hash * 37 + c - '0' + 1;
		cur->parents[0] = result;
		cur->length = result->length + 1;
		cur->mod = (result->mod * 10LL + c - '0') % 1000000007;
		for(int i: range(1, 17)) {
			cur->parents[i] = cur->parents[i - 1]->parents[i - 1];
		}
		result = cur;
	}
	return result;
}
 
bool my_less(Node* l, Node* r) {
	if (l->length != r->length) {
		return l->length < r->length;
	}
	for (int i: downrange(17)) {
		if (l->parents[i]->hash != r->parents[i]->hash) {
			l = l->parents[i];
			r = r->parents[i];
		}
	}
 
	return l->value < r->value;
}
class FKoalaIBloknot {
public:
	static constexpr int kStressCount = 0;
	static void generateTest(std::ostream& test) {
	}
	void solve(std::istream& in, std::ostream& out) {
		//static int testnumber = 0;
		//out << "Case #" << ++testnumber << ": ";
		//cerr << "test " << testnumber << endl;
 
		int n, m;
		in >> n >> m;
 
		vector<vector<pair<int, int>>> g(n);
 
		for (int i: range(m)) {
			int a, b;
			in >> a >> b;
			--a, --b;
			g[a].push_back({b, i + 1});
			g[b].push_back({a, i + 1});
		}
 
		vector<Node*> result(n);
 
		result[0] = root_node();
 
 
		auto cmp_set = [&](int a, int b) {
			if (result[a]->length != result[b]->length) {
				return result[a]->length < result[b]->length;
			}
			return a < b;
		};
		set<int, function<bool(int, int)>> queue(cmp_set);
		queue.insert(0);
 
		while (!queue.empty()) {
			int v = *queue.begin();
			queue.erase(queue.begin());
			for (auto [to, index]: g[v]) {
				auto new_node = get_node(result[v], index);
				if (result[to] == nullptr || my_less(new_node, result[to])) {
					if (result[to] != nullptr) {
						queue.erase(to);
					}
					result[to] = new_node;
					queue.insert(to);
				}
			}   
		}
 
		for (int i: range(1, n)) {
			assert(result[i] != nullptr);
			out << result[i]->mod << "\n";
		}
	}
};
 
 
int main() {
	std::ios_base::sync_with_stdio(false);
	FKoalaIBloknot solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	in.tie(nullptr);
	out << std::fixed;
	out.precision(20);
	solver.solve(in, out);
	return 0;
}