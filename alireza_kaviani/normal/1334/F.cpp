/* Generated by powerful Codeforces Tool
 * You can download the binary file in here https://github.com/xalanq/cf-tool (Windows, macOS, Linux)
 * Author: alireza_kaviani
 * Time: 2020-04-10 19:05:25
**/
#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 5e5 + 10;
const ll LOG = 22;
const ll INF = 1e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n , m , A[MAXN] , B[MAXN] , P[MAXN] , seg[MAXN << 2] , lz[MAXN << 2];

void shift(int id){
    lz[id << 1] += lz[id];
    lz[id << 1 | 1] += lz[id];
    seg[id << 1] += lz[id];
    seg[id << 1 | 1] += lz[id];
    lz[id] = 0;
}

void modify(int x , ll val , int id = 1 , int l = 0 , int r = MAXN){
    if(r - l == 1){
        seg[id] = min(seg[id] , (ll)val);
        return;
    }
    shift(id);
    int mid = l + r >> 1;
    if(x < mid) modify(x , val , id << 1 , l , mid);
    else    modify(x , val , id << 1 | 1 , mid , r);
    seg[id] = min(seg[id << 1] , seg[id << 1 | 1]);
}

void update(int ql , int qr , int x , int id = 1 , int l = 0 , int r = MAXN){
    if(r <= ql || qr <= l || qr <= ql)  return;
    if(ql <= l && r <= qr){
        lz[id] += x;
        seg[id] += x;
        return;
    }
    shift(id);
    int mid = l + r >> 1;
    update(ql , qr , x , id << 1 , l , mid);
    update(ql , qr , x , id << 1 | 1 , mid , r);
    seg[id] = min(seg[id << 1] , seg[id << 1 | 1]);
}

ll get(int x , int id = 1 , int l = 0 , int r = MAXN){
    if(r - l == 1)  return seg[id];
    shift(id);
    int mid = l + r >> 1;
    if(x < mid) return get(x , id << 1 , l , mid);
    return get(x , id << 1 | 1 , mid , r);
}

int main() {
    ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
    fill(seg , seg + MAXN * 4 , INF);

    cin >> n;
    for(ll i = 0 ; i < n ; i++) cin >> A[i];
    for(ll i = 0 ; i < n ; i++) cin >> P[i];
    cin >> m;
    for(ll i = 1 ; i <= m ; i++)    cin >> B[i];

    modify(0 , 0);
    for(ll i = 0 ; i < n ; i++){
        ll ind = lower_bound(B + 1 , B + m + 1 , A[i]) - B;
        if(P[i] < 0)    update(ind , m + 1 , P[i]);
        if(A[i] == B[ind])  modify(ind , get(ind - 1));
        update(0 , ind , P[i]);
        //for(ll j = 0 ; j <= m ; j++)    cout << get(j) << sep;
        //cout << endl;
    }
    ll x = get(m);
    if(x > ll(1e16))    return cout << "NO" << endl , 0;
    cout << "YES" << endl;
    cout << get(m) << endl;

    return 0;
}
/*

*/