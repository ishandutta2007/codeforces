/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author RiaD
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <vector>

typedef std::vector<int> vi;


vi merge(vi a, vi b) {
	vi res(60);
	for(int i = 0; i < 60; ++i) {
		res[i] = a[i] + b[(i + a[i]) % 60];
	}
	return res;
}
const int shift = 1 << 17;
std::vector<vi> tree(shift << 1, vi(60));


vi get(int l, int r) {
	if(l >= r)
		return vi(60, 0);
	if(l % 2) {
		return merge(tree[l], get(l + 1, r));
	}
	if(r % 2) {
		--r;
		return merge(get(l, r), tree[r]);
	}
	return get(l / 2, r / 2);
}
class A {
public:


	void solve(std::istream& in, std::ostream& out) {
		int n;

		in >> n;
		vi a(n);
		for(int i = 0; i < n; ++i) {
			in >> a[i];
		}



		for(int i = 0; i < n; ++i) {
			for(int j = 0; j < 60; ++j) {
				if(j % a[i] == 0)
					tree[i + shift][j] = 2;
				else
					tree[i + shift][j] = 1;
			}
		}
		for(int i = shift - 1; i; --i) {
			tree[i] = merge(tree[2 * i], tree[2 * i + 1]);
		}



		int m;
		in >> m;
		for(int it = 0; it < m; ++it) {
			char c;
			int x, y;
			in >> c >> x >> y;
			if(c == 'C') {
				--x;
				a[x] = y;
				int i = x;
				for(int j = 0; j < 60; ++j) {
					if(j % a[i] == 0)
						tree[i + shift][j] = 2;
					else
						tree[i + shift][j] = 1;
				}
				i += shift;
				i/=2;
				while(i) {
					tree[i] = merge(tree[2 * i], tree[2 * i + 1]);
					i/=2;
				}
			}
			else {
				--x, --y;
				out << get(x + shift, y + shift)[0] << "\n";
			}
		}
	}
};

int main() {
	std::cin.sync_with_stdio(false);
	std::cin.tie(0);
	std::cout << std::fixed;
	std::cout.precision(20);
	A solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}