/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <algorithm>
#include <queue>
#include <vector>
#include <set>
#include <map>
#include <cassert>
#include <functional>
#include <sstream>
#include <cmath>

#include <cstring>
#include <cstdio>

using namespace std;

typedef pair<int, int> ii;
typedef long long int64;
typedef vector<int> vi;

#define pb push_back
#define mp make_pair
#define all(v) (v).begin(),(v).end()
#define sz(v) ((int)(v).size())

template<class T> T abs(T x) { return x >= 0 ? x : -x; }
template<class T> T sqr(T x) { return x * x; }

class TaskD {
public:
    vi query(istream &in, ostream &out, int pos, int n) {
        vi res(n);
        out << "? " << (pos + 1) << "\n";
        out.flush();
        for (int i = 0; i < n; ++i)
            in >> res[i];
        return res;
    }

    void answer(istream &in, ostream &out, vector<ii> res) {
        out << "!\n";
        for (ii e : res)
            out << (e.first + 1) << " " << (e.second + 1) << "\n";
        out.flush();
    }

//    vector<vi> d;
//    set<ii> es;
//    vi query(istream &in, ostream &out, int pos, int n) {
//        return d[pos];
//    }
//
//    void answer(istream &in, ostream &out, vector<ii> res) {
//        assert(sz(res) == sz(es));
//        for (auto e : res) {
//            int x = e.first, y = e.second;
//            if (x > y) swap(x, y);
//            assert(es.count(ii(x, y)));
//        }
//    }

    void solve(std::istream& in, std::ostream& out) {
	    int n;
	    in >> n;
	    doSolve(in, out, n);
//        srand(57);
//        for (int it = 0; it < 1000; ++it) {
//            int n = rand() % 20 + 2;
//            cerr << "Test " << it << " " << n << "\n";
//            d = vector<vi>(n, vi(n, 1000000));
//            vi p(n, -1);
//            es.clear();
//            for (int i = 1; i < n; ++i) {
//                p[i] = rand() % i;
//                d[i][p[i]] = d[p[i]][i] = 1;
//                es.insert(ii(p[i], i));
//            }
//            for (int i = 0; i < n; ++i) d[i][i] = 0;
//            for (int i = 0; i < n; ++i)
//                for (int j = 0; j < n; ++j)
//                    for (int k = 0 ;k < n; ++k)
//                        d[j][k] = min(d[j][k], d[j][i] + d[i][k]);
//            doSolve(in, out, n);
//        }
    }

    void doSolve(istream &in, ostream &out, int n) {
        set<ii> res;
        int x = 0;
        vi d = query(in, out, x, n);
        for (int i = 0; i < n; ++i) if (d[i] == 1) {
            res.insert(ii(min(i, x), max(i, x)));
        }
        vi odd, even;
        for (int i = 1; i < n; ++i) {
            if (d[i] % 2 == 0)
                even.pb(i);
            else
                odd.pb(i);
        }
        vi v = sz(even) <= sz(odd) ? even : odd;
        for (int x : v) {
            d = query(in, out, x, n);
            for (int i = 0; i < n; ++i) if (d[i] == 1) {
                res.insert(ii(min(i, x), max(i, x)));
            }
        }
        assert(sz(res) == n - 1);
        vector<ii> vr(all(res));
        answer(in, out, vr);

//        vi alive(n, 1);
//        int rem = n;
//        while (rem > 2 && sz(res) < n - 1) {
//            int pos = 0;
//            for (int i = 0; i < n; ++i) if (alive[i]) {
//                if (!alive[pos] || d[pos] < d[i])
//                    pos = i;
//            }
//            d = query(in, out, pos, n);
//            int x = -1;
//            for (int i = 0; i < n; ++i) if (alive[i]) {
//                if (d[i] == 1) x = i;
//            }
//            res.pb(ii(pos, x));
//            for (int i = 0; i < n; ++i) if (alive[i]) {
//                if (d[i] == 2) {
//                    res.pb(ii(i, x));
//                }
//            }
//            alive[x] = 0;
//            alive[pos] = 0;
//            rem -= 2;
//        }
//        vi v;
//        for (int i = 0; i < n; ++i) if (alive[i]) {
//            v.pb(i);
//        }
//        if (sz(res) < n - 1 && sz(v) >= 2) {
//            res.pb(ii(v[0], v[1]));
//        }

    }
};


int main() {
	TaskD solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}