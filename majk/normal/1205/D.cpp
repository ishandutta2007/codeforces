/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author majk
 */

#ifndef MAJK_LIB
#define MAJK_LIB

#include <vector>
#include <stack>
#include <iostream>
#include <fstream>
#include <unordered_map>
#include <unordered_set>
#include <map>
#include <iomanip>
#include <set>
#include <functional>
#include <algorithm>
#include <numeric>
#include <cassert>
#include <cmath>
#include <string>
#include <queue>
#include <array>
#include <bitset>
using namespace std;

#define x first
#define y second
typedef std::pair<int,int> pii; typedef long long ll; typedef unsigned long long ull; typedef unsigned int ui; typedef pair<ui,ui> puu;

template <typename T, typename U> std::istream&operator>>(std::istream&i, pair<T,U>&p) {i >> p.x >> p.y; return i;}
template<typename T>std::istream&operator>>(std::istream&i,vector<T>&t) {for(auto&v:t){i>>v;}return i;}
template <typename T, typename U> std::ostream&operator<<(std::ostream&o, const pair<T,U>&p) {o << p.x << ' ' << p.y; return o;}
template<typename T>std::ostream&operator<<(std::ostream&o,const vector<T>&t) {if(t.empty())o<<'\n';for(size_t i=0;i<t.size();++i){o<<t[i]<<" \n"[i == t.size()-1];}return o;}
template<typename T> using minheap = priority_queue<T, vector<T>, greater<T>>;
template<typename T> using maxheap = priority_queue<T, vector<T>, less<T>>;
ui logceil(ll x) { return x?8*sizeof(ll)-__builtin_clzll(x):0; }

namespace std { template<typename T,typename U>struct hash<pair<T,U>>{hash<T>t;hash<U>u;size_t operator()(const pair<T,U>&p)const{return t(p.x)^(u(p.y)<<7);}}; }
template<typename T,typename F>T bsh(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){l=m+1;r=m;}else{h=m-1;}}return r;}
template<typename F> double bshd(double l,double h,const F&f,double p=1e-9){ui r=3+(ui)log2((h-l)/p);while(r--){double m=(l+h)/2;if(f(m)){l=m;}else{h=m;}}return (l+h)/2;}
template<typename T,typename F>T bsl(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){h=m-1;r=m;}else{l=m+1;}}return r;}
template<typename F> double bsld(double l,double h,const F&f,double p=1e-9){ui r=3+(ui)log2((h-l)/p);while(r--){double m=(l+h)/2;if(f(m)){h=m;}else{l=m;}}return (l+h)/2;}
template<typename T> T gcd(T a,T b) { if (a<b) swap(a,b); return b?gcd(b,a%b):a; }


template<typename T>class vector2:public vector<vector<T>>{public:vector2(){} vector2(size_t a,size_t b,T t=T()):vector<vector<T>>(a,vector<T>(b,t)){}};
template<typename T>class vector3:public vector<vector2<T>>{public:vector3(){} vector3(size_t a,size_t b,size_t c,T t=T()):vector<vector2<T>>(a,vector2<T>(b,c,t)){}};
template<typename T>class vector4:public vector<vector3<T>>{public:vector4(){} vector4(size_t a,size_t b,size_t c,size_t d,T t=T()):vector<vector3<T>>(a,vector3<T>(b,c,d,t)){}};
template<typename T>class vector5:public vector<vector4<T>>{public:vector5(){} vector5(size_t a,size_t b,size_t c,size_t d,size_t e,T t=T()):vector<vector4<T>>(a,vector4<T>(b,c,d,e,t)){}};


#endif

class DAlmostAll {
public:
    int N;
    vector<vector<int>> E;
    vector<int> S;
    vector<pair<pii, int>> Ans;

    int size(int u, int p) {
        S[u] = 1;
        for (int v : E[u]) if (v != p) S[u] += size(v, u);
        return S[u];
    }

    void fill(int u, int p, int&cnt, int par, ll mul) {
        int mine = cnt;
        ll val = (cnt - par) * mul;
        val = min(1000000LL, val);
        Ans.push_back({{u+1, p+1}, val});
        cnt++;
        for (int v: E[u]) if (v != p) {
            fill(v, u, cnt, mine, mul);
        }
    }

    int centroid(int u, int p) {
        int m = N - S[u];
        for (int v : E[u]) if (v != p) m = max(m, S[v]);
        if (2 * m <= N) return u;

        for (int v : E[u]) if (v != p && 2 * S[v] > N) return centroid(v, u);
        return -1;
    }

    void solve(istream& cin, ostream& cout) {
        cin >> N;
        E.resize(N);
        for (int i = 0; i < N - 1; ++i) {
            int u, v;
            cin >> u >> v;
            --u;
            --v;
            E[u].push_back(v);
            E[v].push_back(u);
        }
        S.assign(N, 0);
        size(0, -1);
        int ctr = centroid(0, -1);
        ll mul = 1;

        int M = E[ctr].size();
        size(ctr, -1);
        vector2<bool> B(M+1, N+1, false);
        B[0][0] = true;
        for (int i = 0; i < M; ++i) {
            for (int j = 0; j <= N; ++j) {
                if (B[i][j]) {
                    B[i+1][j] = true;
                    B[i+1][j+S[E[ctr][i]]] = true;
                }
            }
        }
//
//        for (int i = 0; i < M; ++i) {
//            cout << S[E[ctr][i]] << '\n';
//        }
//

        for (int i = 0; i <= N; ++i) {
            if (B[M][i] && (i+1)*(N-i-1)+i >= 2*N*N/9) {
                vector<bool> Left(M, false);
                int x = i;
                for (int j = M-1; j >= 0; --j) {
                    if (!B[j][x]) {
                        Left[j] = true;
                        x -= S[E[ctr][j]];
                    }
                }

//                cout << i << ' ' << Left << endl;
//                return;

                int c1 = 1, c2 = 1;
                for (int j = 0; j < M; ++j) {
                    if (Left[j]) {
                        fill(E[ctr][j], ctr, c1, 0, 1);
                    } else {
                        fill(E[ctr][j], ctr, c2, 0, i+1);
                    }
                }

                for (auto a: Ans) {
                    cout << a << '\n';
                }

                break;
            }
        }


    }
};


int main() {
	ios_base::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr);
	DAlmostAll solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
    return 0;
}