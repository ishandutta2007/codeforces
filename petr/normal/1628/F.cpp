/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

// Actual solution is at the bottom

#undef NDEBUG

#include <algorithm>
#include <array>
#include <bitset>
#include <cassert>
#include <climits>
#include <cstdint>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <memory>
#include <numeric>
#include <queue>
#include <random>
#include <set>
#include <stack>
#include <string>
#include <unordered_set>
#include <unordered_map>
#include <vector>
// AtCoder library from https://github.com/atcoder/ac-library
// #include "../atcoder/all"

#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()

using namespace std;

typedef int64_t int64;
typedef pair<int, int> ii;

struct Point {
  int64 x = 0;
  int64 y = 0;
};

Point operator-(Point a, Point b) {
  Point c;
  c.x = a.x - b.x;
  c.y = a.y - b.y;
  return c;
}

class FSpaceshipCrisisManagement {
 public:
  void solveOne() {
    int n;
    cin >> n;
    vector<Point> a(2 * n);
    for (int i = 0; i < n; ++i) {
      cin >> a[i].x >> a[i].y >> a[i + n].x >> a[i + n].y;
    }
    int q;
    cin >> q;
    a.resize(a.size() + q);
    for (int i = 0; i < q; ++i) {
      cin >> a[2 * n + i].x >> a[2 * n + i].y;
    }
    vector<bool> res(q);
    Point t;

    auto b = a;
    vector<tuple<int64, int, int>> events;
    vector<vector<int>> reach(b.size() + 1);
    vector<bool> got(b.size() + 1);

    int64 now = 0;

    auto cmp = [&](int u, int v) {
      int64 pu;
      int64 qu;
      int64 pv;
      int64 qv;
      if (u < 0) {
        Point g = b[-u - 1];
        Point h = b[-u - 1 + n];
        qu = h.y - g.y;
        pu = g.x * qu + (now - g.y) * (h.x - g.x);
        if (qu < 0) {
          qu = -qu;
          pu = -pu;
        }
      } else if (u == b.size()) {
        assert(now == 0);
        pu = 0;
        qu = 1;
      } else {
        assert(now == b[u].y);
        pu = b[u].x;
        qu = 1;
      }
      if (v < 0) {
        Point g = b[-v - 1];
        Point h = b[-v - 1 + n];
        qv = h.y - g.y;
        pv = g.x * qv + (now - g.y) * (h.x - g.x);
        if (qv < 0) {
          qv = -qv;
          pv = -pv;
        }
      } else if (v == b.size()) {
        assert(now == 0);
        pv = 0;
        qv = 1;
      } else {
        assert(now == b[v].y);
        pv = b[v].x;
        qv = 1;
      }
      return pu * qv < pv * qu;
    };

    auto visit = [&](auto self, int w) {
      if (got[w]) return;
      got[w] = true;
      if (w >= 2 * n && w < 2 * n + q) {
        res[w - 2 * n] = true;
      }
      for (int x : reach[w]) {
        self(self, x);
      }
    };

    for (Point d : a) {
      d = t - d;
      for (int i = 0; i < b.size(); ++i) {
        Point p = a[i];
        b[i].x = (p.x * d.x + p.y * d.y);
        b[i].y = (p.x * d.y - p.y * d.x);
      }

      events.clear();
      for (int i = 0; i < n; ++i) {
        Point u = b[i];
        Point v = b[i + n];
        if (u.y == v.y) continue;
        if (u.y > v.y) swap(u, v);
        events.emplace_back(u.y, 0, i);
        events.emplace_back(v.y, 2, i);
      }
      for (int i = 0; i < b.size(); ++i) {
        events.emplace_back(b[i].y, 1, i);
      }
      sort(all(events));

      set<int, decltype(cmp)> active(cmp);
      for (auto& rr : reach) rr.clear();

      bool targetIn = false;
      for (auto& e : events) {
        int kind;
        int idx;
        std::tie(now, kind, idx) = e;
        if (now == 0) {
          if (!targetIn) {
            targetIn = true;
            active.insert((int) b.size());
          }
        } else {
          if (targetIn) {
            targetIn = false;
            auto snow = now;
            now = 0;
            active.erase((int) b.size());
            now = snow;
          }
        }
        if (kind == 0) {
          active.insert(-idx - 1);
        } else if (kind == 2) {
          active.erase(-idx - 1);
        } else {
          auto it = active.lower_bound(idx);
          if (it != active.end()) {
            int i = *it;
            if (i < 0) {
              i = -i - 1;
              if (i == idx || i + n == idx) {
                ++it;
              }
            }
          }
          if (it != active.end()) {
            int i = *it;
            if (i == b.size()) {
              reach[i].push_back(idx);
            } else {
              assert(i < 0);
              i = -i - 1;
              Point u = b[i];
              Point v = b[i + n];
              if (abs(u.x - v.x) > abs(u.y - v.y)) {
                if (u.x > v.x) {
                  reach[i].push_back(idx);
                } else {
                  reach[i + n].push_back(idx);
                }
              }
            }
          }
        }
      }

      for (int i = 0; i < got.size(); ++i) got[i] = false;
      visit(visit, b.size());
    }

    for (int i = 0; i < q; ++i) {
      if (res[i]) {
        cout << "YES\n";
      } else {
        cout << "NO\n";
      }
    }
  }

  void solve() {
    int nt = 1;
    for (int it = 0; it < nt; ++it) {
      // cout << "Case #" << (it + 1) << ": ";
      solveOne();
    }
  }
};

// #define st_mtimespec st_mtim

int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(0);
    FSpaceshipCrisisManagement solver;


    solver.solve();
    return 0;
}