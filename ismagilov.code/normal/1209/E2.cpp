/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Azat Ismagilov
 */

#include <fstream>

#include <iostream>
#include <algorithm>
#include <vector>
#include <queue>
#include <numeric>
#include <set>
#include <map>

#define ld long double
#define fs first
#define sc second
#define pb push_back
#define ppb pop_back
#define pf push_front
#define ppf pop_front
#define mp make_pair
#define len(v) ((int)v.size())
#define vc vector
#define pr pair
#define all(v) v.begin(), v.end()
#pragma GCC optimize("Ofast")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,tune=native")
#pragma GCC optimize("unroll-loops")

using namespace std;

template<typename T, typename U>
inline ostream &operator<<(ostream &_out, const pair<T, U> &_p) {
    _out << _p.first << ' ' << _p.second;
    return _out;
}

template<typename T, typename U>
inline istream &operator>>(istream &_in, pair<T, U> &_p) {
    _in >> _p.first >> _p.second;
    return _in;
}

template<typename T>
inline ostream &operator<<(ostream &_out, const vector<T> &_v) {
    if (_v.empty()) { return _out; }
    _out << _v.front();
    for (auto _it = ++_v.begin(); _it != _v.end(); ++_it) { _out << ' ' << *_it; }
    return _out;
}

template<typename T>
inline istream &operator>>(istream &_in, vector<T> &_v) {
    for (auto &_i : _v) { _in >> _i; }
    return _in;
}

const int MAXN = 3e5;
const int INF = 1e9;
const int MOD = 1e9 + 7;

class E2VrashayaStolbciUslozhnennayaVersiya {
public:
    void solve(std::istream &in, std::ostream &out) {
        int n, m;
        in >> n >> m;
        vc<vc<int>> a(n, vc<int>(m));
        in >> a;
        vc<pr<int, int>> b(m);
        for (int i = 0; i < m; i++) {
            b[i] = {0, i};
            for (int j = 0; j < n; j++) {
                b[i].fs = max(b[i].fs, a[j][i]);
            }
        }
        sort(all(b));
        reverse(all(b));
        int ans[(1 << n)];
        int mem[n];
        int getmax[min(n, m)][(1 << n)];
        for (int i = 0; i < min(n, m); i++) {
            for (int d1 = 0; d1 < (1 << n); d1++) {
                int ii = b[i].sc;
                fill(mem, mem + n, 0);
                for (int jj = 0; jj < n; jj++) {
                    if ((d1 >> jj) & 1) {
                        for (int jj1 = jj, jj2 = 0; jj2 < n; jj1++, jj2++) {
                            if (jj1 >= n) {
                                jj1 -= n;
                            }
                            mem[jj2] += a[jj1][ii];
                        }
                    }
                }
                getmax[i][d1] = 0;
                for (int j = 0; j < n; j++) {
                    getmax[i][d1] = max(getmax[i][d1], mem[j]);
                }
            }

        }
        fill(ans, ans + (1 << n), 0);
        for (int i = 0; i < min(n, m); i++) {
            int ii = b[i].sc;
            for (int d = (1 << n) - 1; d >= 0; d--) {
                for (int d1 = d; d1 > 0; d1 = (d1 - 1) & d) {
                    ans[d] = max(ans[d], ans[d ^ d1] + getmax[i][d1]);
                }
            }
        }
        out << ans[(1 << n) - 1] << endl;
    }
};


signed main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    E2VrashayaStolbciUslozhnennayaVersiya solver;
    std::istream &in(std::cin);
    std::ostream &out(std::cout);
    int n;
    in >> n;
    for (int i = 0; i < n; ++i) {
        solver.solve(in, out);
    }

    return 0;
}