#include<bits/stdc++.h>
using namespace std;
const int N=15;
const int S=1<<14;
const int M=101;

int read()
{
	int s=0;
	char c=getchar(),lc='+';
	while (c<'0'||'9'<c) lc=c,c=getchar();
	while ('0'<=c&&c<='9') s=s*10+c-'0',c=getchar();
	return lc=='-'?-s:s;
}
void write(int x)
{
	if (x<0) putchar('-'),x=-x;
	if (x<10) putchar(x+'0');
	else write(x/10),putchar(x%10+'0');
}
void print(int x=-1,char c='\n')
{
	write(x);
	putchar(c);
}
void ckmn(int &x,int y){x=min(x,y);}
void ckmx(int &x,int y){x=max(x,y);}
struct node
{
	int t,x,y;
	bool operator <(const node &a)const
	{
		return t<a.t;
	}
}d[N],k[M];
int dis(node u,node v){return abs(u.x-v.x)+abs(u.y-v.y);}
int f[S][M],g[S][M],td[S][N],tk[S][M];

signed main(signed Goodbye,char *Wangang[])
{
	(void)Goodbye,(void)Wangang;
	int n=read(),m=read();
	for (int i=0;i<n;i++) d[i].x=read(),d[i].y=read();
	for (int i=0;i<m;i++) k[i].x=read(),k[i].y=read(),k[i].t=read();
	sort(k,k+m);
	memset(td,0x3f,sizeof(td));
	memset(tk,0x3f,sizeof(tk));
	for (int s=1;s<(1<<n);s++)
	{
		int j=log2(s&-s);
		for (int i=0;i<n;i++) td[s][i]=min(td[s^(1<<j)][i],dis(d[j],d[i]));
		for (int i=0;i<m;i++) tk[s][i]=min(tk[s^(1<<j)][i],dis(d[j],k[i]));
	}
	memset(f,0x3f,sizeof(f));
	memset(g,0xc0,sizeof(g));
	int inf=f[0][0];
	for (int i=0;i<n;i++) f[1<<i][0]=0;
	for (int i=0;i<m;i++) g[0][i]=1;
	for (int s=0;s<(1<<n);s++)
	{
		for (int i=0;i<=m;i++)
		if (f[s][i]<inf)
		{
//			printf("f[%d][%d]=%d\n",s,i,f[s][i]);
			for (int j=0;j<m;j++) if (f[s][i]+tk[s][j]<=k[j].t) ckmx(g[s][j],i+1),ckmn(f[s][i+1],k[j].t);
			for (int j=0;j<n;j++) if (!((s>>j)&1)) ckmn(f[s|(1<<j)][i],f[s][i]+td[s][j]);
		}
		for (int i=0;i<m;i++)
		if (g[s][i]>=0)
		{
//			printf("g[%d][%d]=%d\n",s,i,g[s][i]);
			for (int j=i+1;j<m;j++) if (k[i].t+min(dis(k[i],k[j]),tk[s][j])<=k[j].t) ckmx(g[s][j],g[s][i]+1);
			for (int j=0;j<n;j++) if (!((s>>j)&1)) ckmn(f[s|(1<<j)][g[s][i]],k[i].t+min(dis(k[i],d[j]),td[s][j]));
		}
	}
	int ans=0;
	for (int s=0;s<(1<<n);s++) for (int i=0;i<=m;i++) if (f[s][i]<inf) ckmx(ans,i);
	for (int s=0;s<(1<<n);s++) for (int i=0;i<m;i++) ckmx(ans,g[s][i]);
	print(ans);
	
	return 0;
}
//....................  ..                        .    . . ..   .                                          .........
//...................  ....,]]]]]]`.   . .         . .,@@@@@@`.. .                                          ........
//................... ,@@@@@@@@@@@@@@@@@@\].,]]]]]`,@@@@@@@@@@@. .                                          ........
//....................@^...[@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@`                                            .......
//...................,@`......\@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@`.                                          .......
//...................=@......../@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@`.                                         .......
//...................=@....../@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@.                                         .......
//...................=@....=@@@@@@/[[[[[@@@@@@@@@@@@@@@@@/`...[@@@@^                                         .......
//...................=@.../@@@/`...........\@@@@@@@@@@@`........,@@@.                                     . ........
//......,/@@@@@@@O\]`.@`.=@@@`...............\@@@@@@@@`...........@@^                                       ........
//....,@^........,/@@@@^,@@/..................,@@@@@@^............,@@.                                     .........
//....//......,/@[=OOOOO=@@....................,@@@@@...]O@@]......=@^                                     .........
//....@`....]@OO^.=OOO/@@@^.../@@@@@@@`.........=@@@@.=@@@@@@@@....=@^                                     .........
//...=@...,@OOO/.......=@@^.,@@@@@@@@@@@........=@@@@,@@@@@@@@@@...=@^                                    ..........
//...=@..=@`............\@^,@@@@@@@@@@@@@........@@@@=@@@@@@@@@@^..=@.                                 .............
//...=@.=@@OO@@]........@@@=@@@@@@@@@@@@@^......=@@@@O@@@@@@@@@@^..//.                                  ............
//...=@,@`.   .,\@`....=@\@@@@@@@@@@@@@@@^......O@@@@@@@@@@@@@@@..=@.  ......  .  . .......            .............
//...=@@/ ........\@`..=@.\@@@@@@@@@@@@@@^.....=@@@@@@@@@@@@@@@^./@`...,/@O[[...[[[O@@/.=/ .  ...... ...............
//....@@^   /@OOOO@@@\.=@  =@@@@@@@@@@@@@...../@@@@@@@@@@@@@@/]/@/...,@`...............[@@[[O@\`,[[@]...............
//....\@^  =@OOOOOOOO@\.@. OO@@@@@@@@@@/...,@@@@@@@@@@@@@@@@@@@@` .,@`.......,^...........,`...,\@`..,@.............
//....,@^ .=OOOOOOOOOO@\O^.\OOOO@@@@@@@@@@@@@@@@@@@@@@@@@@@@@/... ,@........=/..../@/[............\@...@`...........
//.....=@. =@OOOOOOOOOO@/@.,@OOOO@@@@@@@@@@@@@@@@@@@@@@@/[...    .@`...........,@`.................,@..=O...........
//......@\..\OOOOOOOOOO@^=@.,@OO@@@@@@@@@@@@@@@@@@@@@^         . .O......@O@^.,@....................=\..@*..........
//.......\@..\@OOOOOOOO@O.,@`..@@@@@@@@@@@@@@@@@@@@@@O    .     .,O......=@@`.=^.....................@..@@@]`.......
//........,@\..\@@OOOO@@^...\@@@@@@@@@@@@@@@@@@@@@@@@@.  ..,/@@@@@@..=@`......=O.........../^........@]@@O\*,O@`....
//..........,O@O]....,/@......@@@@@@@@@@@@@@@@@@@@@@@@^../@`*****=@@/@[....,[@`\@.......,@` .......,@/*********@\...
//..............,[\O@@@@@@@O@@@@@@@@@@@@@@@@@@@@@@@@@@@.=O*******[[[[O@@O]`]]]/@`@@@O@@O[[[***[[[\@@`*********,O@^..
//.................**O@...../@@@@@@@@@@@@@@@@@@@@@@@@@@@`*****************,\@*****[[`**************************=@...
//................****,@@@@@/*,@@@@@@@@@@@@@@@@@@@@@@@@O*******************************************************O/*..
//...................************[[\OO@@@@@@O/[[[[[[[*,@@\]**************************************************,@@*...
//..............................**********************.***[[@@O]]`***************************************]]@@[**....
//..........................................................*****,[[[OOOOOOOOOOOOOO@@@@@@@@@@@@O@OOOOO[[[****.......
//................................................................................******************................