/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <bits/stdc++.h>

#define pb push_back
#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()
#define mp make_pair

using namespace std;

typedef long long int64;
typedef vector<int> vi;
typedef pair<int, int> ii;

int half(const ii& a) {
  if (a.second > 0 || (a.second == 0 && a.first >= 0)) return 1; else return 2;
}

class TaskE {
 public:
  void solveOne(istream &in, ostream &out) {
    int n;
    in >> n;
    vector<ii> p(n);
    for (int i = 0; i < n; ++i) {
      in >> p[i].first >> p[i].second;
    }
    vector<ii> others;
    others.reserve(n - 1);
    int64 otherside = 0;
    for (int o = 0; o < n; ++o) {
      others.clear();
      for (int i = 0; i < n; ++i) if (i != o) {
        others.emplace_back(p[i].first - p[o].first, p[i].second - p[o].second);
      }
      sort(others.begin(), others.end(), [](const ii& a, const ii& b) {
        int ha = half(a);
        int hb = half(b);
        if (ha != hb) return ha < hb;
        return a.first * (int64) b.second - a.second * (int64) b.first > 0;
      });
      int j = 0;
      int cnt = 0;
      for (int i = 0; i < others.size(); ++i) {
        --cnt;
        if (j == i) {
          ++j;
          if (j >= others.size()) j = 0;
          ++cnt;
        }
        while (others[i].first * (int64) others[j].second - others[i].second * (int64) others[j].first > 0) {
          ++j;
          if (j >= others.size()) j = 0;
          ++cnt;
        }
        otherside += cnt * (int64) (others.size() - 1 - cnt);
      }
    }
    otherside /= 2;
    int64 sameside = n * (int64) (n - 1) * (n - 2) * (n - 3) / 4 - otherside;
    int64 convex = (sameside - otherside) / 2;
    int64 inside = n * (int64) (n - 1) * (n - 2) * (n - 3) / 24 - convex;
    int64 res = inside * (n - 4) / 2;
    out << res << "\n";
  }

  void solve(std::istream &in, std::ostream &out) {
    int nt = 1;
    for (int it = 0; it < nt; ++it) {
      solveOne(in, out);
    }
  }
};


int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  TaskE solver;
  std::istream& in(std::cin);
  std::ostream& out(std::cout);
  solver.solve(in, out);
  return 0;
}