/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#ifndef MAJK_LIB
#define MAJK_LIB

#include <vector>
#include <stack>
#include <iostream>
#include <unordered_map>
#include <map>
#include <iomanip>
#include <set>
#include <functional>
#include <fstream>
#include <algorithm>
#include <cassert>
#include <cmath>
#include <string>
#include <sstream>
#include <queue>
#include <bitset>
using namespace std;

#define x first
#define y second
typedef std::pair<int,int> pii; typedef long long ll; typedef unsigned long long ull; typedef unsigned int ui;

template <typename T, typename U> std::istream&operator>>(std::istream&i, pair<T,U>&p) {i >> p.x >> p.y; return i;}
template<typename T>std::istream&operator>>(std::istream&i,vector<T>&t) {for(auto&v:t){i>>v;}return i;}
template<typename T>std::ostream&operator<<(std::ostream&o,const vector<T>&t) {for(size_t i=0;i<t.size();++i){o<<t[i]<<" \n"[i == t.size()-1];}return o;}
template<typename T> using minheap = priority_queue<T, vector<T>, greater<T>>;
template<typename T> using maxheap = priority_queue<T, vector<T>, less<T>>;
auto fraclt = [](const pii&a,const pii&b) { return (ll)a.x * b.y < (ll)b.x * a.y; };
struct cmpfrac { bool operator()(const pii&a,const pii&b)const { return (ll)a.x * b.y < (ll)b.x * a.y; }};
template <typename T> bool in(T a, T b, T c) { return a <= b && b < c; }
ui logceil(ll x) {ui b=0;while(x){x>>=1;++b;}return b;}

namespace std {
    template<typename T,typename U>struct hash<pair<T,U>>{hash<T>t;hash<U>u;size_t operator()(const pair<T,U>&p)const{return t(p.x)^(u(p.y)<<7);}};
}
template<typename T,typename F>T bsh(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){l=m+1;r=m;}else{h=m-1;}}return r;}
template<typename F> double bsh(double l,double h,const F&f,double p=1e-9){ui r=3+(ui)log2((h-l)/p);while(r--){double m=(l+h)/2;if(f(m)){l=m;}else{h=m;}}return (l+h)/2;}
template<typename T,typename F>T bsl(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){h=m-1;r=m;}else{l=m+1;}}return r;}
template<typename F> double bsl(double l,double h,const F&f,double p=1e-9){ui r=3+(ui)log2((h-l)/p);while(r--){double m=(l+h)/2;if(f(m)){h=m;}else{l=m;}}return (l+h)/2;}
template<typename T> T gcd(T a,T b) { if (a<b) swap(a,b); return b?gcd(b,a%b):a; }

template<typename T>class vector2:public vector<vector<T>>{public:vector2(){} vector2(size_t a,size_t b,T t=T()):vector<vector<T>>(a,vector<T>(b,t)){}};
template<typename T>class vector3:public vector<vector2<T>>{public:vector3(){} vector3(size_t a,size_t b,size_t c,T t=T()):vector<vector2<T>>(a,vector2<T>(b,c,t)){}};
template<typename T>class vector4:public vector<vector3<T>>{public:vector4(){} vector4(size_t a,size_t b,size_t c,size_t d,T t=T()):vector<vector3<T>>(a,vector3<T>(b,c,d,t)){}};
template<typename T>class vector5:public vector<vector4<T>>{public:vector5(){} vector5(size_t a,size_t b,size_t c,size_t d,size_t e,T t=T()):vector<vector4<T>>(a,vector4<T>(b,c,d,e,t)){}};
template <typename T> struct bounded_priority_queue {
	inline bounded_priority_queue(ui X) : A(X), B(0) {}
	inline void push(ui L, T V) { B = max(B, L); A[L].push(V); }
	inline const T &top() const { return A[B].front(); }
	inline void pop() { A[B].pop(); while (B > 0 && A[B].empty()) --B; }
	inline bool empty() const { return A[B].empty(); }
	inline void clear() { B = 0; for (auto &a: A) a = queue<T>(); }
private:
	vector<queue<T>> A; ui B;
};


#endif
// #include "../l/mod.h"

class TaskC {
public:
    int N,M,seed,vmax;

    int rnd() {
        int ret = seed;
        seed = (seed * 7LL + 13) % 1000000007;
        return ret;
    }


    inline ui pow(ll a, ui p, ui y){ui r=1,e=a%y;while(p){if(p&1){r=((ull)r*e)%y;}e=((ull)e*e)%y;p>>=1;}return r;}


    void print(map<int,pair<int,ll>> &A) {
        for (auto it = A.begin(); it->x != N; ++it) {
            for (int j = 0; j < it->y.x; ++j) {
                cerr << it->y.y << " ;"[j==it->y.x-1];
            }
        }
        cerr << endl;
    }

    void solve(istream& cin, ostream& cout) {
        cin >> N >> M >> seed >> vmax;
        map<int,pair<int,ll>> A;
        for (int i = 0; i < N; ++i) {
            A[i] = {1, rnd() % vmax + 1};
        }
        A[N] = {0,0};
        // print(A);

        for (int i = 0; i < M; ++i) {
            int op = (rnd() % 4) + 1;
            int l = (rnd() % N);
            int r = (rnd() % N);
            if (l > r) swap(l, r);
            r++;

            int x = 1 + rnd() % (op == 3 ? (r - l) : vmax);
            int y = op == 4 ? (rnd() % vmax) + 1 : 0;
            // cerr << op << ':' << l+1 << '-' << r << '=' << x << ':' << y << endl;

            for (int z: {l,r}) {
                auto it = A.lower_bound(z);
                int over = it->x - z;
                if (over) {
                    auto it2 = prev(it);
                    ll val = it2->y.y;
                    it2->y.x -= over;
                    A.insert(it, {z, {over, val}});
                }
            }

            if (op == 1) {
                for (auto it = A.lower_bound(l); it->x != r; ++it) {
                    it->y.y += x;
                }
            } else if (op == 2) {
                for (auto it = A.lower_bound(l); it->x != r; ) {
                    it = A.erase(it);
                }
                A[l] = {r-l, x};
            } else if (op == 3) {
                vector<pair<ll,int>> Q;
                for (auto it = A.lower_bound(l); it->x != r; ++it) {
                    Q.emplace_back(it->y.y, it->y.x);
                }
                sort(Q.begin(),Q.end());
                int p = 0;
                for (auto q:Q) {
                    if (p < x && x <= p + q.y) {
                        cout << q.x << '\n';
                    }
                    p += q.y;
                }
            } else {
                ll ans = 0;
                for (auto it = A.lower_bound(l); it->x != r; ++it) {
                    ans += (ll)it->y.x * pow(it->y.y, x, y);
                }
                cout << ans % y << '\n';
            }
            // print(A);
        }

    }
};


int main() {
	ios_base::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr);
	TaskC solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
    return 0;
}