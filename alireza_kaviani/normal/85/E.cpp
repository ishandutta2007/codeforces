/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 5e3 + 10;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

int n, comps, bipartite, x[MAXN], y[MAXN], mark[MAXN], col[MAXN];
vector<int> adj[MAXN];
int dist[MAXN][MAXN];

void DFS(ll v, ll c) {
    col[v] = c;
    mark[v] = 1;
    for (ll u : adj[v]) {
        if (!mark[u]) {
            DFS(u, 3 - c);
        }
        if (col[v] == col[u]) bipartite = 0;
    }
}

ll check(ll mid) {
    for (ll i = 1; i <= n; i++) adj[i] = {};
    for (ll i = 1; i <= n; i++) {
        for (ll j = i + 1; j <= n; j++) {
            if (dist[i][j] > mid) {
                adj[i].push_back(j);
                adj[j].push_back(i);
            }
        }
    }

    fill(mark, mark + MAXN, 0);
    comps = 0;
    bipartite = 1;
    for (ll i = 1; i <= n; i++) {
        if (!mark[i]) {
            comps++;
            DFS(i, 1);
            if (bipartite == 0) return 0;
        }
    }
    return 1;
}

int main() {
    fast_io;

    cin >> n;
    for (ll i = 1; i <= n; i++) cin >> x[i] >> y[i];
    for (ll i = 1; i <= n; i++) {
        for (ll j = 1; j <= n; j++) {
            dist[i][j] = abs(x[i] - x[j]) + abs(y[i] - y[j]);
        }
    }

    ll l = -1, r = MAXN * 2;
    while (r - l > 1) {
        ll mid = (l + r) / 2;
        if (check(mid)) r = mid;
        else l = mid;
    }

    check(r);
    cout << r << endl << poww(2, comps, MOD) << endl;

    return 0;
}
/*

*/