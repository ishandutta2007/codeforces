/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll q , n , cnt;
string s;

ll check(ll l , ll r){
    for(ll i = l ; i <= r ; i++){
        if(s[i] != s[r - i + l])    return 0;
    }
    return 1;
}

int main() {
    ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);

    cin >> q;
    while(q--){
        cnt = 0;
        cin >> s;
        n = s.size();
        for(ll i = 0 ; i < n / 2 ; i++){
            if(s[i] == s[n - i - 1])    cnt++;
            else    break;
        }
        ll ans = 0 , mark = 0;
        for(ll i = 1 ; i <= n - 2 * cnt ; i++) {
            if (check(cnt, cnt + i - 1)) ans = i, mark = 0;
            if (check(n - cnt - i, n - cnt - 1)) ans = i, mark = 1;
        }
        if(mark)    cout << s.substr(0 , cnt) << s.substr(n - cnt - ans , cnt + ans) << endl;
        else    cout << s.substr(0 , cnt + ans) << s.substr(n - cnt , cnt) << endl;
    }

    return 0;
}
/*

*/