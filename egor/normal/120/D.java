import java.util.ArrayList;
import java.util.List;
import java.util.InputMismatchException;
import java.math.BigInteger;
import java.util.Iterator;
import java.io.*;
import java.util.Comparator;
import java.util.Arrays;
import java.util.Collection;

/**
 * Generated by Contest helper plug-in
 * Actual solution is at the bottom
 */
public class Main {
	public static void main(String[] args) {
		InputReader in;
		PrintWriter out;
		try {
			in = new StreamInputReader(new FileInputStream("input.txt"));
			out = new PrintWriter(new PrintStream(new FileOutputStream("output.txt")));
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
		run(in, out);
	}

	public static void run(InputReader in, PrintWriter out) {
		Solver solver = new TaskD();
		solver.solve(1, in, out);
		Exit.exit(in, out);
	}
}

abstract class InputReader {
	private boolean finished = false;

	public abstract int read();

	public int readInt() {
		int c = read();
		while (isSpaceChar(c))
			c = read();
		int sgn = 1;
		if (c == '-') {
			sgn = -1;
			c = read();
		}
		int res = 0;
		do {
			if (c < '0' || c > '9')
				throw new InputMismatchException();
			res *= 10;
			res += c - '0';
			c = read();
		} while (!isSpaceChar(c));
		return res * sgn;
	}

	public String readString() {
		int c = read();
		while (isSpaceChar(c))
			c = read();
		StringBuffer res = new StringBuffer();
		do {
			res.appendCodePoint(c);
			c = read();
		} while (!isSpaceChar(c));
		return res.toString();
	}

	private boolean isSpaceChar(int c) {
		return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
	}

	public void setFinished(boolean finished) {
		this.finished = finished;
	}

	public abstract void close();
}

class StreamInputReader extends InputReader {
	private InputStream stream;
	private byte[] buf = new byte[1024];
	private int curChar, numChars;

	public StreamInputReader(InputStream stream) {
		this.stream = stream;
	}

	public int read() {
		if (numChars == -1)
			throw new InputMismatchException();
		if (curChar >= numChars) {
			curChar = 0;
			try {
				numChars = stream.read(buf);
			} catch (IOException e) {
				throw new InputMismatchException();
			}
			if (numChars <= 0)
				return -1;
		}
		return buf[curChar++];
	}

	public void close() {
		try {
			stream.close();
		} catch (IOException ignored) {
		}
	}
}

class Exit {
	private Exit() {
	}

	public static void exit(InputReader in, PrintWriter out) {
		in.setFinished(true);
		in.close();
		out.close();
	}
}

interface Solver {
	public void solve(int testNumber, InputReader in, PrintWriter out);
}

class ArrayUtils {

	public static void fill(int[][] array, int value) {
		for (int[] row : array)
			Arrays.fill(row, value);
	}

	}

class IOUtils {

	public static int[] readIntArray(InputReader in, int size) {
		int[] array = new int[size];
		for (int i = 0; i < size; i++)
			array[i] = in.readInt();
		return array;
	}

	public static int[][] readIntTable(InputReader in, int rowCount, int columnCount) {
		int[][] table = new int[rowCount][];
		for (int i = 0; i < rowCount; i++)
			table[i] = readIntArray(in, columnCount);
		return table;
	}

	}

class TaskD implements Solver {
	public void solve(int testNumber, InputReader in, PrintWriter out) {
		int rowCount = in.readInt();
		int columnCount = in.readInt();
		int[][] field = IOUtils.readIntTable(in, rowCount, columnCount);
		int[] parts = IOUtils.readIntArray(in, 3);
		Arrays.sort(parts);
		int answer = 0;
		int[][] subFields = new int[3][4];
		subFields[0][3] = columnCount;
		subFields[1][3] = columnCount;
		subFields[2][3] = columnCount;
		subFields[2][1] = rowCount;
		for (int i = 1; i < rowCount; i++) {
			for (int j = i + 1; j < rowCount; j++) {
				subFields[0][1] = i;
				subFields[1][0] = i;
				subFields[1][1] = j;
				subFields[2][0] = j;
				if (Arrays.equals(parts, count(field, subFields)))
					answer++;
			}
		}
		ArrayUtils.fill(subFields, 0);
		subFields[0][1] = rowCount;
		subFields[1][1] = rowCount;
		subFields[2][1] = rowCount;
		subFields[2][3] = columnCount;
		for (int i = 1; i < columnCount; i++) {
			for (int j = i + 1; j < columnCount; j++) {
				subFields[0][3] = i;
				subFields[1][2] = i;
				subFields[1][3] = j;
				subFields[2][2] = j;
				if (Arrays.equals(parts, count(field, subFields)))
					answer++;
			}
		}
		out.println(answer);
	}

	private int[] count(int[][] field, int[][] subFields) {
		int[] result = new int[3];
		for (int i = 0; i < 3; i++)
			result[i] = count(field, subFields[i]);
		Arrays.sort(result);
		return result;
	}

	private int count(int[][] field, int[] subField) {
		int result = 0;
		for (int i = subField[0]; i < subField[1]; i++) {
			for (int j = subField[2]; j < subField[3]; j++)
				result += field[i][j];
		}
		return result;
	}
}