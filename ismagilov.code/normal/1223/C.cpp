/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Azat Ismagilov
 */

#include <fstream>

#include <iostream>
#include <algorithm>
#include <vector>
#include <queue>
#include <numeric>
#include <set>
#include <map>

#define int long long
#define ld long double
#define fs first
#define sc second
#define pb push_back
#define ppb pop_back
#define pf push_front
#define ppf pop_front
#define mp make_pair
#define len(v) ((int)v.size())
#define vc vector
#define pr pair
#define all(v) v.begin(), v.end()
//#pragma GCC optimize("Ofast")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,tune=native")
//#pragma GCC optimize("unroll-loops")

using namespace std;

template<typename T, typename U>
inline ostream &operator<<(ostream &_out, const pair<T, U> &_p) {
    _out << _p.first << ' ' << _p.second;
    return _out;
}

template<typename T, typename U>
inline istream &operator>>(istream &_in, pair<T, U> &_p) {
    _in >> _p.first >> _p.second;
    return _in;
}

template<typename T>
inline ostream &operator<<(ostream &_out, const vector<T> &_v) {
    if (_v.empty()) { return _out; }
    _out << _v.front();
    for (auto _it = ++_v.begin(); _it != _v.end(); ++_it) { _out << ' ' << *_it; }
    return _out;
}

template<typename T>
inline istream &operator>>(istream &_in, vector<T> &_v) {
    for (auto &_i : _v) { _in >> _i; }
    return _in;
}

const int MAXN = 3e5;
const int INF = 1e9;
const int MOD = 1e9 + 7;

int checks(vc<int> &s, int k, int x, int y, int a, int b, int c) {
    if (x < y) {
        swap(x, y);
        swap(a, b);
    }
    a = k / a;
    b = k / b;
    c = k / c;
    a -= c;
    b -= c;
    return s[c] / 100 * (x + y) + (s[a + c] - s[c]) / 100 * x + (s[a + b + c] - s[a + c]) / 100 * y;
}

class CSpasiPrirodu {
public:
    void solve(std::istream &in, std::ostream &out) {
        int n;
        in >> n;
        vc<int> p(n);
        in >> p;
        sort(all(p));
        reverse(all(p));
        vc<int> sums;
        sums.pb(0);
        for (auto v : p) {
            sums.pb(sums.back() + v);
        }
        int x, a, y, b;
        in >> x >> a >> y >> b;
        int c = a * b / __gcd(a, b);
        int k;
        in >> k;
        int l = 0;
        int r = n + 1;
        while (r - l > 1) {
            int mid = (l + r) / 2;
            if (checks(sums, mid, x, y, a, b, c) >= k) {
                r = mid;
            } else {
                l = mid;
            }
        }
        if (r == n + 1) {
            r = -1;
        }
        out << r << '\n';
    }
};


signed main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    CSpasiPrirodu solver;
    std::istream &in(std::cin);
    std::ostream &out(std::cout);
    int n;
    in >> n;
    for (int i = 0; i < n; ++i) {
        solver.solve(in, out);
    }

    return 0;
}