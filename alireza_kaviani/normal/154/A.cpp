/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e5 + 10;
const ll LOG = 22;
const ll INF = 2e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n , k , dp[MAXN][27] , bad[27][27];
string s;

int main() {
    ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);

    for(ll i = 0 ; i < MAXN ; i++)  for(ll j = 0 ; j < 27 ; j++)    dp[i][j] = INF;

    cin >> s >> k;
    n = s.size();
    s = "." + s;
    for(ll i = 1 ; i <= k ; i++){
        string t;
        cin >> t;
        bad[t[0] - 97][t[1] - 97] = bad[t[1] - 97][t[0] - 97] = 1;
    }

    dp[0][26] = 0;
    for(ll i = 1 ; i <= n ; i++){
        ll val = s[i] - 97;
        for(ll j = 0 ; j <= 26 ; j++)   dp[i][j] = dp[i - 1][j] + 1;
        for(ll j = 0 ; j <= 26 ; j++){
            dp[i][val] = min(dp[i][val] , dp[i - 1][j] + bad[val][j] * MAXN);
        }
    }
    cout << *min_element(dp[n] , dp[n] + 27);

    return 0;
}
/*

*/