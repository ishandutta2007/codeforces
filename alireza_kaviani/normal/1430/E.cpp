/* Generated by powerful Codeforces Tool
 * You can download the binary file in here https://github.com/xalanq/cf-tool (Windows, macOS, Linux)
 * Author: alireza_kaviani
 * Time: 2020-10-11 12:35:02
**/
#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<int, int> pii;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

int n , fen[MAXN];
ll res;
string s;
vector<int> pos[30];

void add(int x , int v){
	for( x += 2 ; x < MAXN ; x += x & -x){
		fen[x] += v;
	}
}

int get(int x){
	int ans = 0;
	for( x += 2 ; x ; x -= x & -x){
		ans += fen[x];
	}
	return ans;
}

int main() {
	ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);

	cin >> n >> s;
	for(int i = 0 ; i < n ; i++){
		pos[s[i] - 97].push_back(i);
	}
	//reverse(all(s));
	for(int i = 0 ; i < n ; i++){
		int c = s[i] - 97;
		int p = pos[c].back() - i + get(pos[c].back());
		int x = pos[c].back();
		pos[c].pop_back();
		//cout << c << sep << p << sep << x << endl;
		res += n - i - p - 1;
		add(0 , 1);
		add(x , -1);
	}
	cout << res << endl;

    return 0;
}
/*

*/