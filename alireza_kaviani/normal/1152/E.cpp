/* Generated by powerful Codeforces Tool
 * You can download the binary file in here https://github.com/xalanq/cf-tool (Windows, macOS, Linux)
 * Author: alireza_kaviani
 * Time: 2020-04-05 23:32:18
**/
#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n , cnt , mark[MAXN] , deg[MAXN] , A[MAXN] , B[MAXN];
vector<ll> compress , ans;
vector<pll> adj[MAXN];

void DFS(ll v){
    mark[v] = 1;
    cnt++;
    for(pll i : adj[v]) if(!mark[i.X])  DFS(i.X);
}

void tour(ll v){
    while(!adj[v].empty()){
        ll u = adj[v].back().X , ind = adj[v].back().Y;
        adj[v].pop_back();
        if(!mark[ind]){
            mark[ind] = 1;
            tour(u);
        }
    }
    ans.push_back(v);
}

int main() {
    ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);

    cin >> n;
    for(ll i = 1 ; i < n ; i++) cin >> A[i] , compress.push_back(A[i]);
    for(ll i = 1 ; i < n ; i++) cin >> B[i] , compress.push_back(B[i]);
    Sort(compress);
    compress.resize(unique(all(compress)) - compress.begin());
    for(ll i = 1 ; i < n ; i++){
        A[i] = lower_bound(all(compress) , A[i]) - compress.begin();
        B[i] = lower_bound(all(compress) , B[i]) - compress.begin();
        if(A[i] > B[i]) return cout << -1 << endl , 0;
        adj[A[i]].push_back({B[i] , i});
        adj[B[i]].push_back({A[i] , i});
        deg[A[i]]++;
        deg[B[i]]++;
    }
    DFS(0);
    if(cnt != SZ(compress)) return cout << -1 << endl , 0;
    fill(mark , mark + MAXN , 0) , cnt = 0;
    ll v = 0;
    for(ll i = 0 ; i < SZ(compress) ; i++)  if(deg[i] & 1) v = i , cnt++;
    if(cnt > 2) return cout << -1 << endl , 0;
    tour(v);
    for(ll i : ans) cout << compress[i] << sep;

    return 0;
}
/*

*/