/* Generated by powerful Codeforces Tool
 * You can download the binary file in here https://github.com/xalanq/cf-tool (Windows, macOS, Linux)
 * Author: alireza_kaviani
 * Time: 2020-12-19 13:05:02
**/
#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<int, int> pii;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e3 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

int q , n , m , A[MAXN][MAXN] , ans[MAXN][MAXN] , d[3] , p[3];

int get(int x){
	x = (x % n + n) % n;
	return (x == 0 ? n : x);
}

int main() {
    ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);

	cin >> q;
	while(q--){
		cin >> n >> m;
		d[0] = d[1] = d[2] = 0;
		p[0] = 0 , p[1] = 1 , p[2] = 2;
		for(int i = 1 ; i <= n ; i++){
			for(int j = 1 ; j <= n ; j++){
				cin >> A[i][j];
				ans[i][j] = -1;
			}
		}
		string s;
		cin >> s;
		for(int i = 0 ; i < m ; i++){
			if(s[i] == 'R'){
				d[p[2]]++;
			}
			if(s[i] == 'L'){
				d[p[2]]--;
			}
			if(s[i] == 'D'){
				d[p[1]]++;
			}
			if(s[i] == 'U'){
				d[p[1]]--;
			}
			if(s[i] == 'I'){
				swap(p[0] , p[2]);
			}
			if(s[i] == 'C'){
				swap(p[0] , p[1]);
			}
		}
		for(int i = 1 ; i <= n ; i++){
			for(int j = 1 ; j <= n ; j++){
				int v = A[i][j] , x = i , y = j;
				v = get(v + d[0]);
				x = get(x + d[1]);
				y = get(y + d[2]);
				int val[3] = {v , x , y};
				ans[val[p[1]]][val[p[2]]] = val[p[0]];
			}
		}
		for(int i = 1 ; i <= n ; i++){
			for(int j = 1 ; j <= n ; j++){
				cout << ans[i][j] << sep;
			}
			cout << endl;
		}
		cout << endl;
	}

    return 0;
}
/*

*/