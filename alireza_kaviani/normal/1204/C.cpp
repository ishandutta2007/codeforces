/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e2 + 10;
const ll MAXM = 1e6 + 10;
const ll INF = 1e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n , m , ind , p[MAXM] , ps[MAXM] , dist[MAXN][MAXN];

int main() {
    fast_io;

    cin >> n;
    for(ll i = 1 ; i <= n ; i++){
        string s;
        cin >> s;
        for(ll j = 1 ; j <= n ; j++){
            dist[i][j] = s[j - 1] - 48;
            if(dist[i][j] == 0) dist[i][j] = INF;
        }
    }

    cin >> m;
    for(ll i = 0 ; i < m ; i++) cin >> p[i];
    for(ll i = 1 ; i < m ; i++) ps[i] = ps[i - 1] + dist[p[i - 1]][p[i]];

    for (ll k = 1 ; k <= n ; k++) {
        for (ll i = 1 ; i <= n ; i++) {
            for (ll j = 1 ; j <= n ; j++) {
                if (dist[i][k] < INF && dist[k][j] < INF)
                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]);
            }
        }
    }

    vector<ll> vec;
    vec.push_back(p[0]);
    ind = 0;

    for(ll i = 1 ; i <= m ; i++){
        for(ll j = min(m - 1 , ind + 110) ; j > ind ; j--){
            if(ps[j] - ps[ind] == dist[p[ind]][p[j]] && p[j] != p[ind]){
                ind = j;
                vec.push_back(p[j]);
                break;
            }
        }
    }

    cout << vec.size() << endl;
    for(ll i : vec) cout << i << sep;

    return 0;
}
/*

*/