/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <algorithm>
#include <array>
#include <bitset>
#include <cassert>
#include <climits>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <functional>
#include <iostream>
#include <map>
#include <memory>
#include <numeric>
#include <queue>
#include <random>
#include <set>
#include <stack>
#include <string>
#include <unordered_set>
#include <unordered_map>
#include <vector>

#define pb push_back
#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()
#define mp make_pair

using namespace std;

typedef long long int64;
typedef long double ld;
typedef vector<int> vi;
typedef pair<int, int> ii;

class TaskC {
 public:
  void solveOne(istream &in, ostream &out) {
    int n;
    int len;
    in >> n >> len;
    vector<int> a(n);
    for (int& x : a) in >> x;
    a.insert(a.begin(), 0);
    a.push_back(len);
    int left = 0;
    int right = a.size() - 2;
    ld leftAt = 0.0;
    ld rightAt = 0.0;
    int leftSpeed = 1;
    int rightSpeed = 1;
    while (left < right) {
      ld nLeftAt = leftAt + (a[left + 1] - a[left]) / (double) leftSpeed;
      ld nRightAt = rightAt + (a[right + 1] - a[right]) / (double) rightSpeed;
      if (nLeftAt < nRightAt) {
        leftAt = nLeftAt;
        ++leftSpeed;
        ++left;
      } else {
        rightAt = nRightAt;
        ++rightSpeed;
        --right;
      }
    }
    ld base = max(leftAt, rightAt);
    ld dist = a[left + 1] - a[left];
    if (leftAt < rightAt) {
      dist -= leftSpeed * (rightAt - leftAt);
    } else {
      dist -= rightSpeed * (leftAt - rightAt);
    }
    base += dist / (leftSpeed + rightSpeed);
    out << base << "\n";
  }

  void solve(std::istream &in, std::ostream &out) {
    out.precision(20);
    int nt;
    in >> nt;
    for (int it = 0; it < nt; ++it) {
      solveOne(in, out);
    }
  }
};


int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  TaskC solver;
  std::istream& in(std::cin);
  std::ostream& out(std::cout);
  solver.solve(in, out);
  return 0;
}