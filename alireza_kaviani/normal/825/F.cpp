/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 8e3 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

int n, cnt, val[4] = {9, 99, 999, 9999}, hs[3][MAXN], pw[3][MAXN], inv[3][MAXN];
int base[5] = {31, 37, 41, 43, 47}, mod[3] = {ll(1e9 + 7), ll(1e9 + 9), 998244353LL}, b[3];
pair<int, int> dp[MAXN][MAXN], mn[MAXN];
string s;

ll hashit() {
    for (ll i = 0; i < 3; i++) {
        inv[i][0] = poww(b[i], mod[i] - 2, mod[i]);
        pw[i][0] = b[i];
        for (ll j = 1; j < MAXN; j++) inv[i][j] = 1ll * inv[i][0] * inv[i][j - 1] % mod[i];
        for (ll j = 1; j < MAXN; j++) pw[i][j] = 1ll * pw[i][0] * pw[i][j - 1] % mod[i];
        for (ll j = 1; j <= n; j++) {
            hs[i][j] = (hs[i][j - 1] + ll(s[j] - 96) * pw[i][j] % mod[i]) % mod[i];
        }
    }
}

pair<ll, pll> getHash(ll l, ll r) {
    return {1ll * (hs[0][r] - hs[0][l - 1] + mod[0]) * inv[0][l] % mod[0],
            {(1ll * hs[1][r] - hs[1][l - 1] + mod[1]) * inv[1][l] % mod[1],
             1ll * (hs[2][r] - hs[2][l - 1] + mod[2]) * inv[2][l] % mod[2]}};
}

int main() {
    fast_io;

    srand(time(0));
    for (ll i = 0; i < 3; i++) {
        b[i] = base[rand() % 5];
    }

    cin >> s;
    n = s.size();
    s = "." + s;
    hashit();

    dp[0][0] = {0, 0};
    mn[0] = {0, 0};
    for (ll i = 1; i <= n; i++) {
        mn[i] = {1e9, 1e9};
        for (ll j = 1; j <= i; j++) {
            pair<ll, pll> A = getHash(i - j + 1, i), B = {-1, {-1, -1}};
            if (i - j >= j) B = getHash(i - j * 2 + 1, i - j);
            dp[i][j] = {1e9, 1e9};
            if (A == B)
                dp[i][j] = {dp[i - j][j].X + (dp[i - j][j].Y == 9 || dp[i - j][j].Y == 99 || dp[i - j][j].Y == 999),
                            dp[i - j][j].Y + 1};
            dp[i][j] = min(dp[i][j], pair<int, int>(mn[i - j].X + j + 1, 1));
            mn[i] = min(mn[i], dp[i][j]);
        }
    }
    cout << mn[n].X << endl;

    return 0;
}
/*

*/