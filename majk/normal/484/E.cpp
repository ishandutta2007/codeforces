/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author majk
 */

#ifndef MAJK_LIB
#define MAJK_LIB

#include <vector>
#include <stack>
#include <iostream>
#include <unordered_map>
#include <unordered_set>
#include <map>
#include <iomanip>
#include <set>
#include <functional>
#include <fstream>
#include <algorithm>
#include <cassert>
#include <cmath>
#include <string>
#include <sstream>
#include <queue>
#include <bitset>
using namespace std;

#define x first
#define y second
typedef std::pair<int,int> pii; typedef long long ll; typedef unsigned long long ull; typedef unsigned int ui; typedef pair<ui,ui> puu;

template <typename T, typename U> std::istream&operator>>(std::istream&i, pair<T,U>&p) {i >> p.x >> p.y; return i;}
template<typename T>std::istream&operator>>(std::istream&i,vector<T>&t) {for(auto&v:t){i>>v;}return i;}
template <typename T, typename U> std::ostream&operator<<(std::ostream&o, const pair<T,U>&p) {o << p.x << ' ' << p.y; return o;}
template<typename T>std::ostream&operator<<(std::ostream&o,const vector<T>&t) {if(t.empty())o<<'\n';for(size_t i=0;i<t.size();++i){o<<t[i]<<" \n"[i == t.size()-1];}return o;}
template<typename T> using minheap = priority_queue<T, vector<T>, greater<T>>;
template<typename T> using maxheap = priority_queue<T, vector<T>, less<T>>;
template <typename T> bool in(T a, T b, T c) { return a <= b && b < c; }
ui logceil(int x) { return 8*sizeof(int)-__builtin_clz(x); }

namespace std { template<typename T,typename U>struct hash<pair<T,U>>{hash<T>t;hash<U>u;size_t operator()(const pair<T,U>&p)const{return t(p.x)^(u(p.y)<<7);}}; }
template<typename T,typename F>T bsh(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){l=m+1;r=m;}else{h=m-1;}}return r;}
template<typename F> double bshd(double l,double h,const F&f,double p=1e-9){ui r=3+(ui)log2((h-l)/p);while(r--){double m=(l+h)/2;if(f(m)){l=m;}else{h=m;}}return (l+h)/2;}
template<typename T,typename F>T bsl(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){h=m-1;r=m;}else{l=m+1;}}return r;}
template<typename F> double bsld(double l,double h,const F&f,double p=1e-9){ui r=3+(ui)log2((h-l)/p);while(r--){double m=(l+h)/2;if(f(m)){h=m;}else{l=m;}}return (l+h)/2;}
template<typename T> T gcd(T a,T b) { if (a<b) swap(a,b); return b?gcd(b,a%b):a; }

template<typename T>class vector2:public vector<vector<T>>{public:vector2(){} vector2(size_t a,size_t b,T t=T()):vector<vector<T>>(a,vector<T>(b,t)){}};
template<typename T>class vector3:public vector<vector2<T>>{public:vector3(){} vector3(size_t a,size_t b,size_t c,T t=T()):vector<vector2<T>>(a,vector2<T>(b,c,t)){}};
template<typename T>class vector4:public vector<vector3<T>>{public:vector4(){} vector4(size_t a,size_t b,size_t c,size_t d,T t=T()):vector<vector3<T>>(a,vector3<T>(b,c,d,t)){}};
template<typename T>class vector5:public vector<vector4<T>>{public:vector5(){} vector5(size_t a,size_t b,size_t c,size_t d,size_t e,T t=T()):vector<vector4<T>>(a,vector4<T>(b,c,d,e,t)){}};


#endif

class signonfence {
public:
    struct Node {
        int suf, pref, best, len; const Node *l, *r;

        Node(int x) : suf(x), pref(x), best(x), len(1), l(nullptr), r(nullptr) {}
        Node(const Node &L, const Node &R) {
            l = &L;
            r = &R;
            pref = l->pref == l->len ? l->len + r->pref : l->pref;
            suf = r->suf == r->len ? r->len + l->suf : r->suf;
            best = max(max(l->best, r->best), l->suf + r->pref);
            len = l->len + r->len;
        }
    };

    const Node *build(int s) {
        if (s == 1) return new Node(1);
        else return new Node(*build(s/2), *build(s/2));
    }

    const Node getInterval(const Node *n, int l, int r, int L, int R) {
        if (L <= l && R >= r) return *n;
        int m = (l+r)/2;
        if (R <= m) return getInterval(n->l, l, m, L, R);
        else if (L >= m) return getInterval(n->r, m, r, L, R);
        else return Node(getInterval(n->l, l, m, L, R), getInterval(n->r, m, r, L, R));
    }

    const Node *update(const Node *n, int l, int r, int i) {
        if (l+1 == r) {
            return new Node(0);
        } else {
            int m = (l+r)/2;
            const Node *L = i < m ? update(n->l, l, m, i) : n->l;
            const Node *R = i < m ? n->r : update(n->r, m, r, i);
            return new Node{*L, *R};
        }
    }

    void solve(istream& cin, ostream& cout) {
        int N; cin >> N;
        int NN = 1<<logceil(N);

        map<int, vector<int>> I;
        for (int i = 0; i < N; ++i) {
            int h; cin >> h;
            I[h].push_back(i);
        }

        const Node *root = build(NN);
        vector<pair<int,const Node*>> G;
        for (auto&i:I) {
            G.push_back({i.x,root});
            for (int j:i.y) root = update(root, 0, NN, j);
        }

        int M; cin >> M;
        for (int i = 0; i < M; ++i) {
            int w,l,r;
            cin >> l >> r >> w;
            cout << G[bsh(0, int(G.size())-1, [&](int i) { return w <= getInterval(G[i].y, 0, NN, l-1, r).best; })].x << '\n';
        }
    }
};


int main() {
	ios_base::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr);
	signonfence solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
    return 0;
}