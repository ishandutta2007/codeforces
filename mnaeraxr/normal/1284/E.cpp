/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author marX
 */

#include <iostream>
#include <fstream>

#include <bits/stdc++.h>

using namespace std;

typedef long long int64;
typedef complex<int64> point;

int64 cross(point a, point b) {
    return imag(conj(a) * b);
}

int quad(point a) {
    if (imag(a) >= 0 && real(a) > 0) return 0;
    if (imag(a) > 0 && real(a) <= 0) return 1;
    if (imag(a) <= 0 && real(a) < 0) return 2;
    return 3;
}

class ENewYearAndCastleConstruction {
public:
    void solve(std::istream &in, std::ostream &out) {
        int n;
        in >> n;

        vector<point> a(n);

        for (int i = 0; i < n; ++i) {
            int x, y;
            in >> x >> y;
            a[i] = point(x, y);
        }

        long long answer = 0;

        for (int i = 0; i < n; ++i) {
            auto p = a;
            auto c = p[i];
            for (auto &r : p)
                r -= c;

            sort(p.begin(), p.end(), [&](point &u, point &v) {
                if (u == point()) return false;
                if (v == point()) return true;
                if (quad(u) != quad(v)) return quad(u) < quad(v);
                return cross(u, v) > 0;
            });

            int beg = 0;

            bool semi = false;

            for (int j = 0; j + 1 < n; ++j) {
                while (cross(p[j], p[beg]) > 0) ++beg;

                if (cross(p[j], p[(j + 1) % (n - 1)]) < 0) {
                    semi = true;
                    break;
                }
            }

            if (semi) continue;

            long long bad = 0;

            for (int j = 0; j + 1 < n; ++j) {
                while (cross(p[j], p[beg % (n - 1)]) > 0) ++beg;
                int t = j + n - 1 - beg;
                bad += 1LL * t * (t - 1) / 2;
            }

            long long tot = 1LL * (n - 1) * (n - 2) * (n - 3) / 6;
            long long cur = tot - bad;

            answer += cur;
        }

        out << 1LL * answer * (n - 4) / 2 << endl;
    }
};


int main() {
    ENewYearAndCastleConstruction solver;
    std::istream &in(std::cin);
    std::ostream &out(std::cout);
    solver.solve(in, out);
    return 0;
}