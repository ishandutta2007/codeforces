import java.util.InputMismatchException;
import java.math.BigInteger;
import java.util.Collection;
import java.util.ArrayList;
import java.util.List;
import java.util.Comparator;
import java.io.*;
import java.util.Iterator;
import java.util.Arrays;

/**
 * Generated by Contest helper plug-in
 * Actual solution is at the bottom
 */
public class Main {
	public static void main(String[] args) {
		InputReader in = new StreamInputReader(System.in);
		PrintWriter out = new PrintWriter(System.out);
		run(in, out);
	}

	public static void run(InputReader in, PrintWriter out) {
		Solver solver = new TaskD();
		solver.solve(1, in, out);
		Exit.exit(in, out);
	}
}

abstract class InputReader {
	private boolean finished = false;

	public abstract int read();

	public int readInt() {
		int c = read();
		while (isSpaceChar(c))
			c = read();
		int sgn = 1;
		if (c == '-') {
			sgn = -1;
			c = read();
		}
		int res = 0;
		do {
			if (c < '0' || c > '9')
				throw new InputMismatchException();
			res *= 10;
			res += c - '0';
			c = read();
		} while (!isSpaceChar(c));
		return res * sgn;
	}

	public String readString() {
		int c = read();
		while (isSpaceChar(c))
			c = read();
		StringBuffer res = new StringBuffer();
		do {
			res.appendCodePoint(c);
			c = read();
		} while (!isSpaceChar(c));
		return res.toString();
	}

	private boolean isSpaceChar(int c) {
		return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
	}

	public void setFinished(boolean finished) {
		this.finished = finished;
	}

	public abstract void close();
}

class StreamInputReader extends InputReader {
	private InputStream stream;
	private byte[] buf = new byte[1024];
	private int curChar, numChars;

	public StreamInputReader(InputStream stream) {
		this.stream = stream;
	}

	public int read() {
		if (numChars == -1)
			throw new InputMismatchException();
		if (curChar >= numChars) {
			curChar = 0;
			try {
				numChars = stream.read(buf);
			} catch (IOException e) {
				throw new InputMismatchException();
			}
			if (numChars <= 0)
				return -1;
		}
		return buf[curChar++];
	}

	public void close() {
		try {
			stream.close();
		} catch (IOException ignored) {
		}
	}
}

class Exit {
	private Exit() {
	}

	public static void exit(InputReader in, PrintWriter out) {
		in.setFinished(true);
		in.close();
		out.close();
	}
}

interface Solver {
	public void solve(int testNumber, InputReader in, PrintWriter out);
}

class IntegerUtils {

	public static long power(long base, long exponent, long mod) {
		if (exponent == 0)
			return 1;
		long result = power(base, exponent >> 1, mod);
		result = result * result % mod;
		if ((exponent & 1) != 0)
			result = result * base % mod;
		return result;
	}
}

class TaskD implements Solver {
	private static final int MOD = 1000000007;

	public void solve(int testNumber, InputReader in, PrintWriter out) {
		int left = in.readInt();
		int right = in.readInt();
		int result = (count(left, right) + count(left / 2 + 1, (right + 1) / 2)) % MOD;
		result = (int) ((result * 500000004L) % MOD);
		out.println(result);
	}

	private int count(int left, int right) {
		if (left > right)
			return 0;
		long result = 0;
		if (left == 1) {
			result = 4;
			left++;
			if (left > right)
				return 4;
		}
		result += 2L * f(left, right) + 4L * f(left - 1, right - 1);
		return (int) (result % MOD);
	}

	private int f(int left, int right) {
		int result = f(right) - f(left - 1);
		if (result < 0)
			result += MOD;
		return result;
	}

	private int f(int n) {
		return (even(n / 2) + odd((n + 1) / 2)) % MOD;
	}

	private int even(int n) {
		return (2 * odd(n)) % MOD;
	}

	private int odd(int n) {
		long result = IntegerUtils.power(3, n, MOD) - 1;
		result = (result * 500000004) % MOD;
		return (int) result;
	}
}