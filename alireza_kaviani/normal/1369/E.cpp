/* Generated by powerful Codeforces Tool
 * You can download the binary file in here https://github.com/xalanq/cf-tool (Windows, macOS, Linux)
 * Author: alireza_kaviani
 * Time: 2020-06-23 18:35:01
**/
#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<int, int> pii;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n , m , w[MAXN] , val[MAXN];
vector<ll> adj[MAXN] , vec[MAXN];
set<pll , greater<pll>> st;

int main() {
    ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);

    cin >> n >> m;
    for(int i = 1 ; i <= n ; i++)   cin >> w[i];
    for(int i = 1 ; i <= m ; i++){
        int v , u; cin >> v >> u;
        adj[v].push_back(u);
        adj[u].push_back(v);
        vec[v].push_back(i);
        vec[u].push_back(i);
        w[v]--; w[u]--;
    }
    for(int i = 1 ; i <= n ; i++)   st.insert({w[i] , i});
    ll ind = n;
    while(SZ(st)){
        pll A = *st.begin(); st.erase(st.begin());
        if(A.X < 0) return cout << "DEAD" << endl , 0;
        ll v = A.Y; w[v] = INF;
        for(ll u : adj[v]){
            if(w[u] == INF) continue;
            st.erase({w[u] , u});
            w[u]++;
            st.insert({w[u] , u});
        }
        for(ll i : vec[v])  val[i] = max(val[i] , ind);
        ind--;
    }
    vector<pll> vec;
    for(int i = 1 ; i <= m ; i++)   vec.push_back({val[i] , i});
    sort(all(vec));
    cout << "ALIVE" << endl;
    for(pll i : vec)    cout << i.Y << sep;

    return 0;
}
/*

*/