/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n, m, ans, L[MAXN], R[MAXN], cnt[MAXN], LISL[MAXN], LISR[MAXN], DPL[MAXN], DPR[MAXN];

void LLIS() {
    fill(DPL + 1, DPL + MAXN, INF);
    for (ll i = 1; i <= m; i++) {
        LISL[i] = upper_bound(DPL, DPL + MAXN, cnt[i]) - DPL;
        DPL[LISL[i]] = cnt[i];
    }
}

void RLIS() {
    fill(DPR + 1, DPR + MAXN, INF);
    for (ll i = m; i >= 1; i--) {
        LISR[i] = upper_bound(DPR, DPR + MAXN, cnt[i]) - DPR;
        DPR[LISR[i]] = cnt[i];
    }
}

int main() {
    fast_io;

    cin >> n >> m;
    for (ll i = 1; i <= n; i++) {
        cin >> L[i] >> R[i];
        cnt[L[i]]++;
        cnt[R[i] + 1]--;
    }
    partial_sum(cnt, cnt + MAXN, cnt);

    LLIS();
    RLIS();
    for (ll i = 1; i <= m; i++) ans = max(ans, LISL[i] + LISR[i] - 1);
    cout << ans << endl;


    return 0;
}
/*

*/