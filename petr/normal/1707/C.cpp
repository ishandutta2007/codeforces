/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

// Actual solution is at the bottom

#undef NDEBUG

#include <algorithm>
#include <array>
#include <bitset>
#include <cassert>
#include <climits>
#include <cstdint>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <memory>
#include <numeric>
#include <queue>
#include <random>
#include <set>
#include <stack>
#include <string>
#include <unordered_set>
#include <unordered_map>
#include <vector>
// AtCoder library from https://github.com/atcoder/ac-library
#ifndef ATCODER_DSU_HPP
#define ATCODER_DSU_HPP 1





namespace atcoder {

// Implement (union by size) + (path compression)
// Reference:
// Zvi Galil and Giuseppe F. Italiano,
// Data structures and algorithms for disjoint set union problems
struct dsu {
  public:
    dsu() : _n(0) {}
    dsu(int n) : _n(n), parent_or_size(n, -1) {}

    int merge(int a, int b) {
        assert(0 <= a && a < _n);
        assert(0 <= b && b < _n);
        int x = leader(a), y = leader(b);
        if (x == y) return x;
        if (-parent_or_size[x] < -parent_or_size[y]) std::swap(x, y);
        parent_or_size[x] += parent_or_size[y];
        parent_or_size[y] = x;
        return x;
    }

    bool same(int a, int b) {
        assert(0 <= a && a < _n);
        assert(0 <= b && b < _n);
        return leader(a) == leader(b);
    }

    int leader(int a) {
        assert(0 <= a && a < _n);
        if (parent_or_size[a] < 0) return a;
        return parent_or_size[a] = leader(parent_or_size[a]);
    }

    int size(int a) {
        assert(0 <= a && a < _n);
        return -parent_or_size[leader(a)];
    }

    std::vector<std::vector<int>> groups() {
        std::vector<int> leader_buf(_n), group_size(_n);
        for (int i = 0; i < _n; i++) {
            leader_buf[i] = leader(i);
            group_size[leader_buf[i]]++;
        }
        std::vector<std::vector<int>> result(_n);
        for (int i = 0; i < _n; i++) {
            result[i].reserve(group_size[i]);
        }
        for (int i = 0; i < _n; i++) {
            result[leader_buf[i]].push_back(i);
        }
        result.erase(
            std::remove_if(result.begin(), result.end(),
                           [&](const std::vector<int>& v) { return v.empty(); }),
            result.end());
        return result;
    }

  private:
    int _n;
    // root node: -1 * component size
    // otherwise: parent
    std::vector<int> parent_or_size;
};

}  // namespace atcoder

#endif  // ATCODER_DSU_HPP



using namespace std;

// From https://e-maxx.ru/algo/lca_simpler

int n, l;
vector < vector<int> > g;
vector<int> tin, tout;
int timer;
vector < vector<int> > up;

void dfs (int v, int p = 0) {
  tin[v] = ++timer;
  up[v][0] = p;
  for (int i=1; i<=l; ++i)
    up[v][i] = up[up[v][i-1]][i-1];
  for (size_t i=0; i<g[v].size(); ++i) {
    int to = g[v][i];
    if (to != p)
      dfs (to, v);
  }
  tout[v] = ++timer;
}

bool upper (int a, int b) {
  return tin[a] <= tin[b] && tout[a] >= tout[b];
}

int almostlca (int a, int b) {
  for (int i=l; i>=0; --i)
    if (! upper (up[a][i], b))
      a = up[a][i];
  return a;
}

#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()

typedef int64_t int64;
typedef pair<int, int> ii;

class CDFSTrees {
 public:
  void solveOne() {
    int m;
    cin >> n >> m;
    vector<pair<int, int>> bad;
    atcoder::dsu dsu(n);
    g.assign(n, {});
    tin.assign (n, 0),  tout.assign (n, 0),  up.assign(n, {});
    l = 1;
    while ((1<<l) <= n)  ++l;
    for (int i=0; i<n; ++i)  up[i].resize (l+1);
    for (int i = 0; i < m; ++i) {
      int u, v;
      cin >> u >> v;
      --u; --v;
      if (dsu.leader(u) == dsu.leader(v)) {
        bad.emplace_back(u, v);
      } else {
        g[u].push_back(v);
        g[v].push_back(u);
        dsu.merge(u, v);
      }
    }
    timer = 0;
    dfs(0);
    vector<int> delta(n);
    for (const auto& [i, j] : bad) {
      if (upper(i, j)) {
        ++delta[almostlca(j, i)];
        --delta[j];
      } else if (upper(j, i)) {
        ++delta[almostlca(i, j)];
        --delta[i];
      } else {
        ++delta[0];
        --delta[i];
        --delta[j];
      }
    }

    string res(n, '?');
    auto dfs2 = [&](auto self, int at, int skip, int score) -> void {
      score += delta[at];
      if (score == 0) res[at] = '1'; else res[at] = '0';
      for (int x : g[at]) if (x != skip) {
        self(self, x, at, score);
      }
    };
    dfs2(dfs2, 0, -1, 0);

    cout << res << "\n";
  }

  void solve() {
    int nt = 1;
    for (int it = 0; it < nt; ++it) {
      // cout << "Case #" << (it + 1) << ": ";
      solveOne();
    }
  }
};

// #define st_mtimespec st_mtim

int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(0);
    CDFSTrees solver;


    solver.solve();
    return 0;
}