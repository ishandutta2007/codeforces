/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

// Actual solution is at the bottom

#undef NDEBUG

#include <algorithm>
#include <array>
#include <bitset>
#include <cassert>
#include <climits>
#include <cstdint>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <memory>
#include <numeric>
#include <queue>
#include <random>
#include <set>
#include <stack>
#include <string>
#include <unordered_set>
#include <unordered_map>
#include <vector>
// AtCoder library from https://github.com/atcoder/ac-library
// #include "../atcoder/all"

#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()

using namespace std;

typedef int64_t int64;
typedef pair<int, int> ii;

class IMashtaliVsAtCoder {
 public:
  void solveOne() {
    int n;
    cin >> n;
    vector<vector<int>> adj(n);
    for (int i = 0; i < n - 1; ++i) {
      int a, b;
      cin >> a >> b;
      --a; --b;
      adj[a].push_back(b);
      adj[b].push_back(a);
    }
    vector<bool> taken(n);
    taken[0] = true;
    vector<int> subtreeGrundy(n);
    vector<int> parent(n, -1);
    auto dfs1 = [&](auto self, int root, int skip) {
      if (root < 0) return;
      parent[root] = skip;
      for (int child : adj[root]) {
        if (child == skip) continue;
        self(self, child, root);
        subtreeGrundy[root] ^= 1 + subtreeGrundy[child];
      }
    };
    dfs1(dfs1, 0, -1);
    int totalGrundy = subtreeGrundy[0];
    int totalTaken = 1;
    cout << (totalGrundy == 0 ? '2' : '1');
    for (int i = 1; i < n; ++i) {
      int at = i;
      if (!taken[at]) {
        vector<int> newPath;
        while (!taken[at]) {
          taken[at] = true;
          ++totalTaken;
          newPath.push_back(at);
          at = parent[at];
        }
        reverse(all(newPath));
        for (int x : newPath) {
          if (parent[x] == at) totalGrundy ^= subtreeGrundy[parent[x]];
          subtreeGrundy[parent[x]] ^= 1 + subtreeGrundy[x];
          totalGrundy ^= subtreeGrundy[parent[x]];
        }
        totalGrundy ^= subtreeGrundy[i];
      }
      cout << (totalGrundy == (totalTaken - 1) % 2 ? '2' : '1');
    }
    cout << "\n";
  }

  void solve() {
    int nt = 1;
    for (int it = 0; it < nt; ++it) {
      solveOne();
    }
  }
};


int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(0);
    IMashtaliVsAtCoder solver;


    solver.solve();
    return 0;
}