/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll q, n, nxt[MAXN], inDeg[MAXN], mx[MAXN], ans[MAXN];
vector<ll> ts, adj[MAXN];

ll topoSort() {
    queue<ll> Q;
    for (ll i = 0; i <= n + 1; i++) {
        if (inDeg[i] == 0) {
            Q.push(i);
        }
    }

    while (!Q.empty()) {
        ll v = Q.front();
        ts.push_back(v);
        Q.pop();
        for (ll u : adj[v]) {
            inDeg[u]--;
            if (inDeg[u] == 0) Q.push(u);
        }
    }
    return (SZ(ts) == n + 2);
}

ll MAIN() {
    cin >> n;
    for (ll i = 1; i <= n; i++) cin >> nxt[i];
    adj[n + 1].push_back(0);
    inDeg[0]++;

    set<ll> st = {n + 1};
    for (ll i = 1; i <= n; i++) {
        if (nxt[i] != -1) {
            adj[nxt[i]].push_back(i);
            inDeg[i]++;
        }
        ll x = *st.upper_bound(i);
        adj[mx[x]].push_back(i);
        inDeg[i]++;
        if (nxt[i] != -1) mx[nxt[i]] = i, st.insert(nxt[i]);
    }
    if (!topoSort()) return cout << -1 << endl, 0;
    for (ll i = 0; i < SZ(ts); i++) ans[ts[i]] = i;
    for (ll i = 1; i <= n; i++) cout << n - ans[i] + 2 << sep;
    cout << endl;
}

void FILL() {
    fill(nxt, nxt + n + 10, 0);
    fill(inDeg, inDeg + n + 10, 0);
    fill(mx, mx + n + 10, 0);
    fill(ans, ans + n + 10, 0);
    fill(adj, adj + n + 10, vector<ll>());
    ts = {};
}

int main() {
    fast_io;

    cin >> q;
    while (q--) {
        MAIN();
        FILL();
    }

    return 0;
}
/*

*/