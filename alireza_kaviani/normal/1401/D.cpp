/* Generated by powerful Codeforces Tool
 * You can download the binary file in here https://github.com/xalanq/cf-tool (Windows, macOS, Linux)
 D* Author: alireza_kaviani
 * Time: 2020-08-21 19:05:02
**/
#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<int, int> pii;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll q , n , sz[MAXN] , m;
vector<ll> adj[MAXN] , vec , vec2;

void DFS(int v , int p = -1){
	sz[v] = 1;
	for(int u : adj[v]){
		if(u == p)	continue;
		DFS(u , v);
		sz[v] += sz[u];
	}
}

int main() {
	ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);

	cin >> q;
	while(q--){
		cin >> n;
		vec = vec2 = {};
		fill(adj , adj + n + 2 , vector<ll>());
		for(int i = 1 ; i < n ; i++){
			int v , u;
			cin >> v >> u;
			adj[v].push_back(u);
			adj[u].push_back(v);
		}
		DFS(1);
		for(int i = 2 ; i <= n ; i++)	vec2.push_back(sz[i] * (n - sz[i]));
		sort(all(vec2) , greater<ll>());
		cin >> m;
		for(int i = 0 ; i < m ; i++){
			ll p;
			cin >> p;
			vec.push_back(p);
		}
		sort(all(vec));
		while(SZ(vec) > n - 1){
			ll x = vec.back() ; vec.pop_back();
			vec[SZ(vec) - 1] = (vec.back()) * x % MOD;
		}
		reverse(all(vec));
		while(SZ(vec) < n - 1)	vec.push_back(1);
		ll ans = 0;
		for(int i = 0 ; i < n - 1 ; i++){
			ans = (ans + vec2[i] % MOD * vec[i] % MOD) % MOD;
		}
		cout << ans << endl;
	}

    return 0;
}
/*










*/