/* Generated by powerful Codeforces Tool
 * You can download the binary file in here https://github.com/xalanq/cf-tool (Windows, macOS, Linux)
 * Author: alireza_kaviani
 * Time: 2020-04-02 11:37:18
**/
#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e5 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n , m , q , timer , st[MAXN] , mn[MAXN] , bridge[MAXN] , H[MAXN] , D[MAXN] , mark[MAXN] , par[MAXN] , sz[MAXN] , P[LOG][MAXN];
vector<pll> E , adj[MAXN];
vector<ll> g[MAXN];

ll Find(ll v){
    return (par[v] == -1 ? v : par[v] = Find(par[v]));
}

void Union(ll v , ll u){
    v = Find(v) , u = Find(u);
    if(v == u)  return;
    if(sz[v] < sz[u])   swap(v , u);
    par[u] = v;
    sz[v] += sz[u];
}

void DFS(ll v , ll p = -1){
    st[v] = ++timer;
    mn[v] = INF;
    mark[v] = 1;
    for(pll i : adj[v]){
        ll u = i.X , ind = i.Y;
        if(!mark[u]){
            DFS(u , v);
            mn[v] = min(mn[v] , mn[u]);
            if(mn[u] > st[v])   bridge[ind] = 1;
        }
        else if(u != p) mn[v] = min(mn[v] , st[u]);
    }
}

void DFS2(ll v , ll p = 0){
    P[0][v] = p;
    H[v] = H[p] + 1;
    D[v] = D[p] + (sz[v] != 1);
    for(ll u : g[v])    if(u != p)  DFS2(u , v);
}

ll getPar(ll v , ll h){
    for(ll i = 0 ; i < LOG ; i++)   if(h & (1 << i))    v = P[i][v];
    return v;
}

ll LCA(ll v , ll u){
    if(H[v] > H[u]) swap(v , u);
    u = getPar(u , H[u] - H[v]);
    if(u == v)  return v;
    for(ll i = LOG - 1 ; i >= 0 ; i--)  if(P[i][v] != P[i][u])  v = P[i][v] , u = P[i][u];
    return P[0][v];
}

int main() {
    ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
    fill(par , par + MAXN , -1);
    fill(sz , sz + MAXN , 1);

    cin >> n >> m;
    for(ll i = 0 ; i < m ; i++){
        ll v , u;
        cin >> v >> u;
        E.push_back({v , u});
        adj[v].push_back({u , i});
        adj[u].push_back({v,  i});
    }
    DFS(1);
    for(ll i = 0 ; i < m ; i++) if(!bridge[i])  Union(E[i].X , E[i].Y);
    for(ll i = 0 ; i < m ; i++) if(bridge[i])   g[Find(E[i].X)].push_back(Find(E[i].Y)) , g[Find(E[i].Y)].push_back(Find(E[i].X));
    DFS2(Find(1));
    for(ll i = 1 ; i < LOG ; i++)   for(ll j = 0 ; j <= n ; j++)    P[i][j] = P[i - 1][P[i - 1][j]];

    cin >> q;
    while(q--){
        ll v , u;
        cin >> v >> u;
        v = Find(v) , u = Find(u);
        ll lca = LCA(v , u) , res = D[u] + D[v] - 2 * D[lca] + (sz[lca] != 1);
        cout << poww(2 , res , MOD) << endl;
    }

    return 0;
}
/*

*/