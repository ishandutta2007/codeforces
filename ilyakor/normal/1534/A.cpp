/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <algorithm>
#include <queue>
#include <vector>
#include <set>
#include <map>
#include <cassert>
#include <functional>
#include <sstream>
#include <cmath>

#include <cstring>
#include <cstdio>

using namespace std;

typedef pair<int, int> ii;
typedef long long int64;
typedef vector<int> vi;

#define pb push_back
#define mp make_pair
#define all(v) (v).begin(),(v).end()
#define sz(v) ((int)(v).size())

template<class T> T abs(T x) { return x >= 0 ? x : -x; }
template<class T> T sqr(T x) { return x * x; }

class TaskA {
public:
	void solve(std::istream& in, std::ostream& out) {
	    int n, m;
	    in >> n >> m;
	    vector<string> a(n);
	    int was0 = 0, was1 = 0;
	    for (int i = 0; i < n; ++i) {
	        in >> a[i];
	        for (int j = 0; j < m; ++j) {
	            char c = a[i][j];
	            if (c == '.') continue;
	            int val = (c == 'R' ? 0 : 1);
	            if ((i + j) % 2 == 0) {
	                was0 |= (1 << val);
	            } else {
                    was1 |= (1 << val);
	            }
	        }
	    }
	    if ((was0 & was1) || __builtin_popcount(was0) > 1 || __builtin_popcount(was1) > 1) {
	        out << "NO\n";
	        return;
	    }
        out << "YES\n";
	    int c0 = 0, c1 = 1;
	    for (int i = 0; i < 2; ++i) if ((was0 >> i) % 2) {
	        c0 = i;
	        c1 = 1 - i;
	    }
        for (int i = 0; i < 2; ++i) if ((was1 >> i) % 2) {
            c1 = i;
            c0 = 1 - i;
        }
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < m; ++j) {
                if ((i + j) % 2 == 0)
                    a[i][j] = "RW"[c0];
                else
                    a[i][j] = "RW"[c1];
            }
        }
        for (string s : a)
            out << s << "\n";
	}
};


int main() {
	TaskA solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	int n;
in >> n;
for(int i = 0; i < n; ++i) {
	solver.solve(in, out);
}

	return 0;
}