/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;
typedef pair<ld, ld> pld;
typedef pair<string, string> pss;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define tab                         '\t'
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define file_io                     freopen("in.txt" , "r+" , stdin) ; freopen("out.txt" , "w+" , stdout);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

inline ll input() {
    ll n;
    cin >> n;
    return n;
}

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

set_random;

const ll MAXN = 2e5 + 10;
const ll INF = 8e18;
const ll MOD1 = 998244353;
const ll MOD2 = 1e9 + 7;
const ll MOD3 = 1e9 + 9;
const ll MOD = MOD1;

ll n , ans , p[MAXN] , fact[MAXN] , invs[MAXN] , dp[MAXN];

void pre()
{
    fact[0] = 1;
    for(ll i = 1 ; i < MAXN ; i++)  fact[i] = fact[i - 1] * i % MOD;
    for(ll i = 0 ; i < MAXN ; i++)  invs[i] = poww(fact[i] , MOD - 2 , MOD);
}

ll c(ll n , ll k)
{
    if(n < 0 || k < 0 || n - k < 0) return 0;
    return fact[n] * invs[k] % MOD * invs[n - k] % MOD;
}

int main() {
    fast_io;
    pre();

    cin >> n;
    for(ll i = 0 ; i < n ; i++) cin >> p[i];

    for(ll i = n - 1 ; i >= 0 ; i--)
    {
        if(p[i] <= 0)   continue;
        for(ll j = i + 1 ; j <= n ; j++)
        {
            dp[i] += c(j - i - 1 , p[i]) * (j == n ? 1 : dp[j]);
            dp[i] %= MOD;
        }
    }

    for(ll i = 0 ; i < MAXN ; i++)  ans = (ans + dp[i]) % MOD;

    cout << ans << endl;


    return 0;
}
/*
todo :
    1- set constants
    2- check TimeLimit and MemoryLimit
    3- check special test cases
    4- don't forget BS can help you that is good idea(use for loop for floats)
    5- don't forget printf and scanf can help you in your code speed
*/