/* Generated by powerful Codeforces Tool
 * You can download the binary file in here https://github.com/xalanq/cf-tool (Windows, macOS, Linux)
 * Author: alireza_kaviani
 * Time: 2020-08-14 15:25:05
**/
#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<int, int> pii;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

int n , ptr = 0 , ans , cnt = 1;;
vector<int> vec;
string s , t;

int main() {
    ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);

	cin >> s; n = SZ(s);
	while(s[ptr] == s[0])	ptr++;
	t = s.substr(ptr) + s.substr(0 , ptr);
	for(int i = 1 ; i < n ; i++){
		if(t[i] != t[i - 1]){
			vec.push_back(cnt);
			cnt = 0;
		}
		cnt++;
	}
	vec.push_back(cnt);
	//for(int i : vec)	cout << i << sep;
	cnt = 0;
	vector<int> v;
	for(int i = 0 ; i < SZ(vec) ; i++){
		if(vec[i] > 1)	ans++;
		if(vec[i] == 1 && vec[(i + 1) % SZ(vec)] == 1){
			if(SZ(v) && v.back() == i - 1)	continue;
			ans++;
			v.push_back(i);
		}
	}
	cout << ans << endl;

    return 0;
}
/*

*/