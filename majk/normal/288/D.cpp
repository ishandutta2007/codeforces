/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author majk
 */

#ifndef MAJK_LIB
#define MAJK_LIB

#include <vector>
#include <stack>
#include <iostream>
#include <unordered_map>
#include <unordered_set>
#include <map>
#include <iomanip>
#include <set>
#include <functional>
#include <fstream>
#include <algorithm>
#include <cassert>
#include <cmath>
#include <string>
#include <sstream>
#include <queue>
#include <bitset>
using namespace std;

#define x first
#define y second
typedef std::pair<int,int> pii; typedef long long ll; typedef unsigned long long ull; typedef unsigned int ui; typedef pair<ui,ui> puu;

template <typename T, typename U> std::istream&operator>>(std::istream&i, pair<T,U>&p) {i >> p.x >> p.y; return i;}
template<typename T>std::istream&operator>>(std::istream&i,vector<T>&t) {for(auto&v:t){i>>v;}return i;}
template <typename T, typename U> std::ostream&operator<<(std::ostream&o, const pair<T,U>&p) {o << p.x << ' ' << p.y; return o;}
template<typename T>std::ostream&operator<<(std::ostream&o,const vector<T>&t) {if(t.empty())o<<'\n';for(size_t i=0;i<t.size();++i){o<<t[i]<<" \n"[i == t.size()-1];}return o;}
template<typename T> using minheap = priority_queue<T, vector<T>, greater<T>>;
template<typename T> using maxheap = priority_queue<T, vector<T>, less<T>>;
template <typename T> bool in(T a, T b, T c) { return a <= b && b < c; }
ui logceil(int x) { return 8*sizeof(int)-__builtin_clz(x); }

namespace std { template<typename T,typename U>struct hash<pair<T,U>>{hash<T>t;hash<U>u;size_t operator()(const pair<T,U>&p)const{return t(p.x)^(u(p.y)<<7);}}; }
template<typename T,typename F>T bsh(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){l=m+1;r=m;}else{h=m-1;}}return r;}
template<typename F> double bshd(double l,double h,const F&f,double p=1e-9){ui r=3+(ui)log2((h-l)/p);while(r--){double m=(l+h)/2;if(f(m)){l=m;}else{h=m;}}return (l+h)/2;}
template<typename T,typename F>T bsl(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){h=m-1;r=m;}else{l=m+1;}}return r;}
template<typename F> double bsld(double l,double h,const F&f,double p=1e-9){ui r=3+(ui)log2((h-l)/p);while(r--){double m=(l+h)/2;if(f(m)){h=m;}else{l=m;}}return (l+h)/2;}
template<typename T> T gcd(T a,T b) { if (a<b) swap(a,b); return b?gcd(b,a%b):a; }

template<typename T>class vector2:public vector<vector<T>>{public:vector2(){} vector2(size_t a,size_t b,T t=T()):vector<vector<T>>(a,vector<T>(b,t)){}};
template<typename T>class vector3:public vector<vector2<T>>{public:vector3(){} vector3(size_t a,size_t b,size_t c,T t=T()):vector<vector2<T>>(a,vector2<T>(b,c,t)){}};
template<typename T>class vector4:public vector<vector3<T>>{public:vector4(){} vector4(size_t a,size_t b,size_t c,size_t d,T t=T()):vector<vector3<T>>(a,vector3<T>(b,c,d,t)){}};
template<typename T>class vector5:public vector<vector4<T>>{public:vector5(){} vector5(size_t a,size_t b,size_t c,size_t d,size_t e,T t=T()):vector<vector4<T>>(a,vector4<T>(b,c,d,e,t)){}};


#endif
// #include "../l/mod.h"


class poloandtrees {
public:
    int N;
    vector<vector<int>> E;

    vector<int> S;

    int size(int u, int p) {
        int s = 1;
        for (int v:E[u]) if (v!=p) s += size(v,u);
        return S[u] = s;
    }

    ull solve(int u, int p) {
        ull tot1 = 0, tot11 = 0, tot111 = 0, tot1111 = 0;
        ull tot2 = 0, tot22 = 0, tot21 = 0, tot211 = 0;
        ull totFail = 0;

        ull ans = 0;
        ull tot = 0;
        for (int v:E[u]) {
            if (v!=p) {
                ull s = ull(S[v]);
                ull ss = ull(S[v]) * (S[v]-1)/2;
                tot211 += tot21 * s;
                tot211 += tot11 * ss;
                tot21 += tot1 * ss;
                tot21 += tot2 * s;
                tot1111 += tot111 * s;
                tot111 += tot11 * s;
                tot11 += tot1 * s;
                tot1 += s;
                tot22 += tot2 * ss;
                tot2 += ss;
                ans += solve(v,u);
            }
        }

        ull three = 0;
        three += 3*tot111; // 3 from dist children (select the free)
        three += 3*tot11; // 2 from dist children & 1 root (select the free)
        three += 2*tot2; // 2 from same child & 1 root (select the root match)
        three += 2*tot21; // 2 from same child & 1 from different (select the diff match)
        three *= N-S[u]; // select something from top
        three *= 2; // permute (a,b)  and (c,d)

        ull four = 0;
        four += 6*tot1111; // four different branches (+select a and b)
        four += 4*tot22; // two different branches (+select a and b)
        four += 4*tot211; // three different branches (+select a and b)
        four += 6*tot111; // three branches and root (+ select a and b)
        four += 4*tot21;  // two branches and root (+select a and b)

        return ans+three+four;
    }
//


    bool dfs(int u, int p, int w, vector<bool> &V) {
        V[u] = true;
        if (u==w) return true;

        for (int v:E[u]) {
            if (v != p) {
                if (dfs(v, u, w, V)) {
                    return true;
                }
            }

        }

        V[u] = false;
        return false;
    }

    void solve(istream& cin, ostream& cout) {
        cin >> N;
        E.resize(N);
        for (int i = 0; i < N - 1; ++i) {
            int u, v;
            cin >> u >> v;
            --u;
            --v;
            E[u].push_back(v);
            E[v].push_back(u);
        }

        S.resize(N);
        size(0, -1);

        ull ans = (ull(N)*ull(N-1)/2)*(ull(N-2)*ull(N-3)/2);
//        cout << ans << '\n';
        ans -= solve(0, -1);
        cout << ans << '\n';

//        cout << ans << endl;
//        bool calc;
//        do {
//            calc = false;
//
//            V = vector<bool>(N, false);
//            for (int i = 0; i < N; ++i) {
//                if (!V[i] && U[i]) {
//                    if (size(i, -1) > 1) {
//                        int ctr = centroid(i, -1, S[i]);
//                        U[ctr] = false;
//                        calc = true;
//
//                        ull w = run(ctr);
//                        cout << "V " << ctr << ' ' << w << endl;
//                        ans -= w;
//                    }
//                }
//            }
//        } while (calc);

//
//        int cnt = 0;
//        for (int a = 0; a < N; ++a) {
//            for (int b = a+1; b < N; ++b) {
//                vector<bool> AB(N, false);
//                dfs(a, -1, b, AB);
//                for (int c = 0; c < N; ++c) {
//                    for (int d = c+1; d < N; ++d) {
//                        vector<bool> CD(N, false);
//                        dfs(c, -1, d, CD);
//
//                        bool fail = false;
//                        for (int i = 0; i < N; ++i) fail |= AB[i] && CD[i];
//                        if (!fail) ++cnt;
//                    }
//                }
//            }
//        }
//        cout << cnt << endl;
    }
};


int main() {
	ios_base::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr);
	poloandtrees solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
    return 0;
}