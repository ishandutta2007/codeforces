/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Azat Ismagilov
 */

#include <fstream>

#include <iostream>
#include <algorithm>
#include <vector>
#include <queue>
#include <numeric>
#include <set>
#include <map>

#define int long long
#define ld long double
#define fs first
#define sc second
#define pb push_back
#define ppb pop_back
#define pf push_front
#define ppf pop_front
#define mp make_pair
#define len(v) ((int)v.size())
#define vc vector
#define pr pair
#define all(v) v.begin(), v.end()
//#pragma GCC optimize("Ofast")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,tune=native")
//#pragma GCC optimize("unroll-loops")

using namespace std;

template<typename T, typename U>
inline ostream &operator<<(ostream &_out, const pair<T, U> &_p) {
    _out << _p.first << ' ' << _p.second;
    return _out;
}

template<typename T, typename U>
inline istream &operator>>(istream &_in, pair<T, U> &_p) {
    _in >> _p.first >> _p.second;
    return _in;
}

template<typename T>
inline ostream &operator<<(ostream &_out, const vector<T> &_v) {
    if (_v.empty()) { return _out; }
    _out << _v.front();
    for (auto _it = ++_v.begin(); _it != _v.end(); ++_it) { _out << ' ' << *_it; }
    return _out;
}

template<typename T>
inline istream &operator>>(istream &_in, vector<T> &_v) {
    for (auto &_i : _v) { _in >> _i; }
    return _in;
}

const int MAXN = 3e5;
const int INF = 1e9;
const int MOD = 1e9 + 7;
const int K = 20;

int sum(int a, int b) {
    if (a + b >= MOD) {
        return a + b - MOD;
    }
    return a + b;
}

int mul(int a, int b) {
    if (a * b >= MOD) {
        return (a * b) % MOD;
    }
    return a * b;
}

int sqr(int a) {
    return (a * a) % MOD;
}

int bin_pow(int a, int b) {
    if (b == 0) {
        return 1;
    }
    if (b % 2) {
        return mul(a, bin_pow(a, b - 1));
    }
    return sqr(bin_pow(a, b / 2));
}

vc<int> g[MAXN];
int x[MAXN];
bool used[MAXN];
int glub[MAXN];
int changes[MAXN][K];
int versh[MAXN][K];
int ans = 0;

void dfs(int v, int p = -1) {
    used[v] = 1;
    changes[v][0] = x[v];
    versh[v][0] = p;
    for (int k = 1; k < K; k++) {
        if (versh[v][k - 1] == -1) {
            versh[v][k] = -1;
            changes[v][k] = -1;
        } else {
            changes[v][k] = __gcd(changes[v][k - 1], changes[versh[v][k - 1]][k - 1]);
            versh[v][k] = versh[versh[v][k - 1]][k - 1];
        }
    }
    int vv = v;
    int mems = 0;
    while (vv != -1) {
        mems = __gcd(mems, x[vv]);
        int counts = 1;
        vv = versh[vv][0];
        for (int k = K - 1; k >= 0 && vv != -1; k--) {
            if (glub[vv] >= (1 << k) && (changes[vv][k] == 0 || (mems != 0 && (changes[vv][k] % mems) == 0))) {
                counts += (1 << k);
                vv = versh[vv][k];
            }
        }
        ans = sum(ans, mul(mems, counts));
    }
    for (auto to : g[v]) {
        if (!used[to]) {
            glub[to] = glub[v] + 1;
            dfs(to, v);
        }
    }
}

class BKamilIProvedenieStrima {
public:
    void solve(std::istream &in, std::ostream &out) {
        int n;
        in >> n;
        for (int i = 0; i < n; i++) {
            in >> x[i];
        }
        for (int i = 0; i < n - 1; i++) {
            int a, b;
            in >> a >> b;
            a--, b--;
            g[a].pb(b);
            g[b].pb(a);
        }
        dfs(0);
        out << ans;
    }
};


signed main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    BKamilIProvedenieStrima solver;
    std::istream &in(std::cin);
    std::ostream &out(std::cout);
    solver.solve(in, out);
    return 0;
}