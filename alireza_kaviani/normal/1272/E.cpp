/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n, dist[MAXN], ans[MAXN], A[MAXN];
vector<ll> even, odd, adj[MAXN];

void BFS(vector<ll> vec) {
    fill(dist, dist + MAXN, INF);
    queue<ll> q;
    for (ll i : vec) {
        dist[i] = 0;
        q.push(i);
    }

    while (!q.empty()) {
        ll v = q.front();
        q.pop();
        for (ll u : adj[v]) {
            if (dist[u] == INF) {
                dist[u] = dist[v] + 1;
                q.push(u);
            }
        }
    }
}

int main() {
    fast_io;
    fill(ans, ans + MAXN, -1);

    cin >> n;
    for (ll i = 1; i <= n; i++) {
        cin >> A[i];
        if (i + A[i] <= n) adj[i + A[i]].push_back(i);
        if (i - A[i] >= 1) adj[i - A[i]].push_back(i);
        if (A[i] & 1) odd.push_back(i);
        else even.push_back(i);
    }

    BFS(even);
    for (ll i : odd) ans[i] = dist[i];
    BFS(odd);
    for (ll i : even) ans[i] = dist[i];
    for (ll i = 1; i <= n; i++) {
        cout << (ans[i] == INF ? -1 : ans[i]) << sep;
    }

    return 0;
}
/*

*/