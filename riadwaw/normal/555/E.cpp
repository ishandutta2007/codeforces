/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author RiaD
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <bits/stdc++.h>


#include <iterator>

#include <string>
#include <stdexcept>
#ifdef SPCPPL_DEBUG
	#define SPCPPL_ASSERT(condition) \
	if(!(condition)) { \
		throw std::runtime_error(std::string() + #condition + " in line " + std::to_string(__LINE__) + " in " + __PRETTY_FUNCTION__); \
	}
#else
	#define SPCPPL_ASSERT(condition)
#endif



/**
* Support decrementing and multi-passing, but not declared bidirectional(or even forward) because
* it's reference type is not a reference.
*
* It doesn't return reference because
* 1. Anyway it'll not satisfy requirement [forward.iterators]/6
*   If a and b are both dereferenceable, then a == b if and only if *a and
*   b are bound to the same object.
* 2. It'll not work with reverse_iterator that returns operator * of temporary which is temporary for this iterator
*
* Note, reverse_iterator is not guaranteed to work  now too since it works only with bidirectional iterators,
* but it's seems to work at least on my implementation.
*
* It's not really useful anywhere except iterating anyway.
*/
template <typename T>
class IntegerIterator : public std::iterator<std::input_iterator_tag, T, std::ptrdiff_t, T*, T> {
public:
	explicit IntegerIterator(int value): value(value) {

	}

	IntegerIterator& operator++ () {
		++value;
		return *this;
	}

	IntegerIterator operator++ (int) {
		IntegerIterator copy = *this;
		++value;
		return copy;
	}

	IntegerIterator& operator-- () {
		--value;
		return *this;
	}

	IntegerIterator operator-- (int) {
		IntegerIterator copy = *this;
		--value;
		return copy;
	}

	T operator * () const {
		return value;
	}

	bool operator == (IntegerIterator rhs) {
		return value == rhs.value;
	}

	bool operator != (IntegerIterator rhs) {
		return !(*this == rhs);
	}
private:
	T value;
};

template <typename T>
class IntegerRange {
public:
	IntegerRange(T begin, T end): begin_(begin), end_(end) {

	}

	IntegerIterator<T> begin() const {
		return IntegerIterator<T>(begin_);
	}

	IntegerIterator<T> end() const {
		return IntegerIterator<T>(end_);
	}

private:
	T begin_;
	T end_;
};

template <typename T>
class ReversedIntegerRange {
	typedef std::reverse_iterator<IntegerIterator<T>> IteratorType;
public:
	ReversedIntegerRange(T begin, T end): begin_(begin), end_(end) {

	}

	IteratorType begin() const {
		return IteratorType(IntegerIterator<T>(begin_));
	}

	IteratorType end() const {
		return IteratorType(IntegerIterator<T>(end_));
	}

private:
	T begin_;
	T end_;
};

template <typename T>
IntegerRange<T> range(T to) {
	SPCPPL_ASSERT(to >= 0);
	return IntegerRange<T>(0, to);
}

template <typename T>
IntegerRange<T> range(T from, T to) {
	SPCPPL_ASSERT(from <= to);
	return IntegerRange<T>(from, to);
}

template <typename T>
ReversedIntegerRange<T> downrange(T from) {
	SPCPPL_ASSERT(from >= 0);
	return ReversedIntegerRange<T>(from, 0);
}

template <typename T>
ReversedIntegerRange<T> downrange(T from, T to) {
	SPCPPL_ASSERT(from >= to);
	return ReversedIntegerRange<T>(from, to);
}


#include <algorithm>


template<typename R>
void sort(R &range) {
	std::sort(range.begin(), range.end());
}

template<typename R, typename Comp>
void sort(R &range, Comp comp) {
	std::sort(range.begin(), range.end(), comp);
}

template<typename R>
void reverse(R &range) {
	std::reverse(range.begin(), range.end());
}

template<typename R, typename T>
auto lower_bound(const R &range, const T &value) -> decltype(range.begin()) {
	return std::lower_bound(range.begin(), range.end(), value);
}

template<typename R, typename T, typename Comp>
auto lower_bound(const R &range, const T &value, Comp comp) -> decltype(range.begin()) {
	return std::lower_bound(range.begin(), range.end(), value, comp);
}

template<typename R, typename T>
auto upper_bound(const R &range, const T &value) -> decltype(range.begin()) {
	return std::upper_bound(range.begin(), range.end(), value);
}

template<typename R, typename T, typename Comp>
auto upper_bound(const R &range, const T &value, Comp comp) -> decltype(range.begin()) {
	return std::upper_bound(range.begin(), range.end(), value, comp);
}

template <typename R>
auto unique(R& range) -> decltype(range.begin()) {
	return std::unique(range.begin(), range.end());
}

template <typename R>
auto min_element(const R& range) -> decltype(range.begin()) {
	return std::min_element(range.begin(), range.end());
}

template <typename R>
auto max_element(const R& range) -> decltype(range.begin()) {
	return std::max_element(range.begin(), range.end());
}

template <typename R>
bool next_permutation(R& range) {
	return std::next_permutation(range.begin(), range.end());
}

template <typename T>
void unique(std::vector<T>& range) {
	range.erase(std::unique(range.begin(), range.end()), range.end());
}

template <typename R>
R sorted(R range) {
	sort(range);
	return range;
}

template <typename R, typename Comp>
R sorted(R range, Comp comp) {
	sort(range, comp);
	return range;
}

template <typename R>
R reversed(R range) {
	reverse(range);
	return range;
}


#include <vector>
#include <cstddef>


class DSU {
public:
	DSU(std::size_t n): dsu(n) {
		for (std::size_t i = 0; i < n; ++i) {
			dsu[i] = i;
		}
	}

	std::size_t getSet(std::size_t v) {
		SPCPPL_ASSERT(v < dsu.size());
		if (v == dsu[v]) {
			return v;
		}
		return dsu[v] = getSet(dsu[v]);
	}

	void unite(std::size_t u, std::size_t v) {
		SPCPPL_ASSERT(u < dsu.size());
		SPCPPL_ASSERT(v < dsu.size());
		u = getSet(u);
		v = getSet(v);
		dsu[v] = u;
	}
private:
	std::vector<std::size_t> dsu;
};


using namespace std;

class TaskE {
public:
	vector<vector<pair<int, int>>> g;

	vector<vector<int>> g2;

	vector<char> used;
	vector<int> tin, fup, comp, depth;
	int timer;

	set<int> bridges;

	vector<vector<int>> parents;
	void dfs (int v, int component, int p) {
		used[v] = true;
		comp[v] = component;
		tin[v] = fup[v] = timer++;
		for (auto pa: g[v]) {
			int to = pa.first;
			int edge = pa.second;
			if (p == edge)
				continue;
			if (used[to])
				fup[v] = min (fup[v], tin[to]);
			else {
				dfs (to, component, edge);
				fup[v] = min (fup[v], fup[to]);
				if (fup[to] > tin[v])
					bridges.insert(edge);
			}
		}
	}

	void dfsP(int v, int p, int d) {
		parents[0][v] = p;
		depth[v] = d;
		for(int to: g2[v]) {
			if(to == p)
				continue;
			dfsP(to, v, d + 1);
		}
	}

	int lca(int a, int b) {
		if(depth[a] > depth[b])
			swap(a, b);
		for(int i: downrange(18)) {
			if(depth[b] >= depth[a] + (1 << i)) {
				b = parents[i][b];
			}
		}
		if(a == b)
			return a;
		for(int i: downrange(18)) {
			int na = parents[i][a];
			int nb = parents[i][b];
			if(na != nb) {
				a = na;
				b = nb;
			}
		}
		return parents[0][a];
	}


	bool dfsDepth(int v, int p) {
		for(int to: g2[v]) {
			if(to == p) {
				continue;
			}
			if(!dfsDepth(to, v))
				return false;
			upDepth[v] = min(upDepth[v], upDepth[to]);
			downDepth[v] = min(downDepth[v], downDepth[to]);
		}


		return !(upDepth[v] < depth[v] && downDepth[v] < depth[v]);
	}


	vector<int> upDepth;
	vector<int> downDepth;


	void solve(std::istream& in, std::ostream& out) {
		int n, m, q;
		in >> n >> m >> q;

		g.resize(n);
		used.resize(n);
		tin.resize(n);
		fup.resize(n);
		comp.resize(n, -1);
		int comps = 0;

		for(int i : range(m)) {
			int a, b;
			in >> a >> b;
			--a, --b;
			g[a].push_back(make_pair(b, i));
			g[b].push_back(make_pair(a, i));
		}

		vector<pair<int, int>> queries(q);
		for(int i: range(q)) {
			in >> queries[i].first >> queries[i].second;
			--queries[i].first;
			--queries[i].second;
		}

		vector<int> roots;

		for(int i: range(n)) {
			if(comp[i] == -1) {
				dfs(i, comps++, -1);
				roots.push_back(i);
			}
		}

		for(auto query: queries) {
			if(comp[query.first] != comp[query.second]) {
				out << "No\n";
				return;
			}
		}
		DSU dsu(n);

		for(int v: range(n)) {
			for(auto p: g[v]) {
				if(!bridges.count(p.second)) {
					dsu.unite(v, p.first);
				}
			}
		}

		g2.resize(n);

		for(int i: range(n)) {
			size_t root = dsu.getSet(i);
			for(auto p: g[i]) {
				size_t to = dsu.getSet(p.first);
				if(root != to) {
					g2[root].push_back(to);
				}
			}
		}

		for (int i: range(n)) {
			sort(g2[i]);
			unique(g2[i]);
		}


		parents.assign(18, vector<int>(n));
		depth.resize(n);
		used.assign(n, 0);

		for(int root: roots) {
			dfsP(dsu.getSet(root), dsu.getSet(root), 0);
		}

		for(int i: range(1, 18)) {
			for(int x: range(n))
				parents[i][x] = parents[i - 1][parents[i - 1][x]];
		}

		upDepth = downDepth = depth;

		for(auto query: queries) {
			int s = query.first;
			int d = query.second;
			s = dsu.getSet(s);
			d = dsu.getSet(d);

			int lcaDepth = depth[lca(s, d)];

			upDepth[s] = min(upDepth[s], lcaDepth);
			downDepth[d] = min(downDepth[d], lcaDepth);
		}

		for(int root: roots) {
			if(!dfsDepth(dsu.getSet(root), -1)) {
				out << "No\n";
				return;
			}
		}

		out << "Yes\n";

	}
};


int main() {
	std::ios_base::sync_with_stdio(false);
	TaskE solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	in.tie(0);
	out << std::fixed;
	out.precision(20);
	solver.solve(in, out);
	return 0;
}