/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e5 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n, m, D[MAXN], H[MAXN], binPar[LOG][MAXN], par[MAXN], sz[MAXN], mark[MAXN];
vector<ll> adj[MAXN];

void DFS(ll v, ll p = 0) {
    H[v] = H[p] + 1;
    binPar[0][v] = p;
    for (ll u : adj[v]) if (u != p) DFS(u, v);
}

ll getPar(ll v, ll h) {
    for (ll i = 0; i < LOG; i++) if (h & (1ll << i)) v = binPar[i][v];
    return v;
}

ll dist(ll v, ll u) {
    ll A = v, B = u;
    if (H[v] > H[u]) swap(v, u);
    u = getPar(u, H[u] - H[v]);
    if (u == v) return H[A] + H[B] - 2 * H[v];
    for (ll i = LOG - 1; i >= 0; i--) if (binPar[i][v] != binPar[i][u]) v = binPar[i][v], u = binPar[i][u];
    return H[A] + H[B] - 2 * H[binPar[0][v]];
}

void DFSSize(ll v, ll p = 0) {
    sz[v] = 1;
    for (ll u : adj[v]) if (!mark[u] && u != p) DFSSize(u, v), sz[v] += sz[u];
}

ll centroid(ll v, ll p = 0, ll siz = 0) {
    for (ll u : adj[v]) {
        if (!mark[u] && u != p && sz[u] > siz / 2) return centroid(u, v, siz);
    }
    return v;
}

void decompose(ll v, ll p = 0) {
    DFSSize(v);
    ll cent = centroid(v, 0, sz[v]);
    //cout << v << sep << p << sep << cent << endl;
    par[cent] = p;
    mark[cent] = 1;
    for (ll u : adj[cent]) {
        if (!mark[u]) decompose(u, cent);
    }
}

void update(ll v) {
    ll x = v;
    while (x != 0) {
        D[x] = min(D[x], dist(v, x));
        x = par[x];
    }
}

ll query(ll v) {
    ll ans = INF, x = v;
    while (x != 0) {
        ans = min(ans, D[x] + dist(v, x));
        x = par[x];
    }
    return ans;
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    fill(D, D + MAXN, INF);

    cin >> n >> m;
    for (ll i = 1; i < n; i++) {
        ll v, u;
        cin >> v >> u;
        adj[v].push_back(u);
        adj[u].push_back(v);
    }
    DFS(1);
    decompose(1);
    //for(ll i = 1 ; i <= n ; i++)    cout << i << sep << H[i] << endl;
    for (ll i = 1; i < LOG; i++) for (ll j = 0; j <= n; j++) binPar[i][j] = binPar[i - 1][binPar[i - 1][j]];
    update(1);
    while (m--) {
        ll t, v;
        cin >> t >> v;
        if (t == 1) {
            update(v);
        } else cout << query(v) << endl;
    }

    return 0;
}
/*

*/