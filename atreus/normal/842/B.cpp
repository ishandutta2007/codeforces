/*
######################################################################
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
#@@@      @@@@@@   @@@@@@       @@@@@     @@@@@@     @@@@    @@@@  @@#
#@@   @@@@@@@@@  @  @@@@@  @@@@  @@@  @@@  @@@@  @@@  @@@  @  @@@  @@#
#@@@      @@@@  @@@  @@@@       @@@  @@@@@  @@  @@@@@  @@  @@  @@  @@#
#@@@@@@@   @@         @@@  @@@@  @@@  @@@  @@@@  @@@  @@@  @@@  @  @@#
#@@@      @@  @@@@@@@  @@        @@@@     @@@@@@     @@@@  @@@@    @@#
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
######################################################################
*/
#include <bits/stdc++.h>

using namespace std;

int radikal(int n){
    int h;

}
int main ()
{
    ios_base::sync_with_stdio(false);
    int r, d, ans = 0;
    cin >> r >> d;
    int n;
    cin >> n;
    int x[n + 10], y[n + 10], m[n + 10];
    for (int i = 0; i < n; i++)
        cin >> x[i] >> y[i] >> m[i];
    for (int i = 0; i < n; i++){
        double h;
        h = (x[i] * x[i]) + (y[i] * y[i]);
        h = sqrt(h);
        if (h + m[i] <= r && h + m[i] >= r - d && h - m[i] >= r - d)
            ans++;
    }
    cout << ans;
}