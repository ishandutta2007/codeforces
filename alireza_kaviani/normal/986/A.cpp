/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e5 + 10;
const ll MAXA = 110;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n, m, k, s, A[MAXN], dist[MAXN][MAXA];
vector<ll> adj[MAXN];

void BFS(ll val) {
    queue<ll> q;
    for (ll i = 0; i < MAXN; i++) {
        if (A[i] == val) {
            dist[i][val] = 0;
            q.push(i);
        }
    }

    while (!q.empty()) {
        ll v = q.front();
        q.pop();
        for (ll u : adj[v]) {
            if (dist[u][val] == INF) {
                dist[u][val] = dist[v][val] + 1;
                q.push(u);
            }
        }
    }
}

int main() {
    fast_io;

    for (ll i = 0; i < MAXN; i++) for (ll j = 0; j < MAXA; j++) dist[i][j] = INF;

    cin >> n >> m >> k >> s;
    for (ll i = 1; i <= n; i++) cin >> A[i];

    for (ll i = 0; i < m; i++) {
        ll v, u;
        cin >> v >> u;
        adj[v].push_back(u);
        adj[u].push_back(v);
    }

    for (ll i = 1; i <= k; i++) BFS(i);

    for (ll i = 1; i <= n; i++) {
        sort(dist[i] + 1, dist[i] + k + 1);
        ll ans = 0;
        for (ll j = 1; j <= s; j++) ans += dist[i][j];
        cout << ans << sep;
    }

    return 0;
}
/*

*/