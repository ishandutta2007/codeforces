/* Generated by powerful Codeforces Tool
 * You can download the binary file in here https://github.com/xalanq/cf-tool (Windows, macOS, Linux)
 * Author: alireza_kaviani
 * Time: 2020-04-06 19:16:24
**/
#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 200 + 10;
const ll MAXK = 1010;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n , k , A[MAXN] , dp[2][MAXN][MAXK];

int main() {
    ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);

    cin >> n >> k;
    for(ll i = 1 ; i <= n ; i++)    cin >> A[i];
    sort(A + 1 , A + n + 1);

    dp[0][0][0] = 1;
    for(ll i = 1 ; i <= n ; i++){
        memset(dp[i % 2] , 0 , sizeof(dp[i % 2]));
        ll diff = A[i] - A[i - 1] , x = i % 2 , y = (i + 1) % 2;
        for(ll j = 0 ; j < i ; j++){
            for(ll l = diff * j ; l <= k ; l++){
                dp[x][j][l] = (dp[x][j][l] + dp[y][j][l - diff * j] * (j + 1)) % MOD;
                dp[x][j + 1][l] = (dp[x][j + 1][l] + dp[y][j][l - diff * j]) % MOD;
                if(j)   dp[x][j - 1][l] = (dp[x][j - 1][l] + dp[y][j][l - diff * j] * j) % MOD;
            }
        }
    }
    ll ans = 0;
    for(ll i = 0 ; i <= k ; i++)    ans = (ans + dp[n % 2][0][i]) % MOD;
    cout << ans << endl;

    return 0;
}
/*

*/