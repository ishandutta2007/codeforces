/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author RiaD
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <vector>
#include <algorithm>


#include <iterator>


#include <string>
#include <stdexcept>

#ifndef SPCPPL_ASSERT
	#ifdef SPCPPL_DEBUG
		#define SPCPPL_ASSERT(condition) \
		if(!(condition)) { \
			throw std::runtime_error(std::string() + #condition + " in line " + std::to_string(__LINE__) + " in " + __PRETTY_FUNCTION__); \
		}
	#else
		#define SPCPPL_ASSERT(condition)
	#endif
#endif


/**
* Support decrementing and multi-passing, but not declared bidirectional(or even forward) because
* it's reference type is not a reference.
*
* It doesn't return reference because
* 1. Anyway it'll not satisfy requirement [forward.iterators]/6
*   If a and b are both dereferenceable, then a == b if and only if *a and
*   b are bound to the same object.
* 2. It'll not work with reverse_iterator that returns operator * of temporary which is temporary for this iterator
*
* Note, reverse_iterator is not guaranteed to work  now too since it works only with bidirectional iterators,
* but it's seems to work at least on my implementation.
*
* It's not really useful anywhere except iterating anyway.
*/
template <typename T>
class IntegerIterator: public std::iterator<std::input_iterator_tag, T, std::ptrdiff_t, T*, T> {
public:
	explicit IntegerIterator(T value): value(value) {

	}

	IntegerIterator& operator++() {
		++value;
		return *this;
	}

	IntegerIterator operator++(int) {
		IntegerIterator copy = *this;
		++value;
		return copy;
	}

	IntegerIterator& operator--() {
		--value;
		return *this;
	}

	IntegerIterator operator--(int) {
		IntegerIterator copy = *this;
		--value;
		return copy;
	}

	T operator*() const {
		return value;
	}

	bool operator==(IntegerIterator rhs) {
		return value == rhs.value;
	}

	bool operator!=(IntegerIterator rhs) {
		return !(*this == rhs);
	}

private:
	T value;
};

template <typename T>
class IntegerRange {
public:
	IntegerRange(T begin, T end): begin_(begin), end_(end) {
		SPCPPL_ASSERT(begin <= end);
	}

	IntegerIterator<T> begin() const {
		return IntegerIterator<T>(begin_);
	}

	IntegerIterator<T> end() const {
		return IntegerIterator<T>(end_);
	}

private:
	T begin_;
	T end_;
};

template <typename T>
class ReversedIntegerRange {
	typedef std::reverse_iterator<IntegerIterator<T>> IteratorType;
public:
	ReversedIntegerRange(T begin, T end): begin_(begin), end_(end) {
		SPCPPL_ASSERT(begin >= end);
	}

	IteratorType begin() const {
		return IteratorType(IntegerIterator<T>(begin_));
	}

	IteratorType end() const {
		return IteratorType(IntegerIterator<T>(end_));
	}

private:
	T begin_;
	T end_;
};

template <typename T>
IntegerRange<T> range(T to) {
	return IntegerRange<T>(0, to);
}

template <typename T>
IntegerRange<T> range(T from, T to) {
	return IntegerRange<T>(from, to);
}

template <typename T>
IntegerRange<T> inclusiveRange(T to) {
	return IntegerRange<T>(0, to + 1);
}

template <typename T>
IntegerRange<T> inclusiveRange(T from, T to) {
	return IntegerRange<T>(from, to + 1);
}

template <typename T>
ReversedIntegerRange<T> downrange(T from) {
	return ReversedIntegerRange<T>(from, 0);
}

template <typename T>
ReversedIntegerRange<T> downrange(T from, T to) {
	return ReversedIntegerRange<T>(from, to);
}

template <typename T>
ReversedIntegerRange<T> inclusiveDownrange(T from) {
	return ReversedIntegerRange<T>(from + 1, 0);
}

template <typename T>
ReversedIntegerRange<T> inclusiveDownrange(T from, T to) {
	return ReversedIntegerRange<T>(from + 1, to);
}







template <typename R>
void sort(R& range) {
	std::sort(range.begin(), range.end());
}

template <typename R, typename Comp>
void sort(R& range, Comp comp) {
	std::sort(range.begin(), range.end(), comp);
}

template <typename R>
void reverse(R& range) {
	std::reverse(range.begin(), range.end());
}

template <typename R, typename T>
auto lower_bound(const R& range, const T& value) -> decltype(range.begin()) {
	return std::lower_bound(range.begin(), range.end(), value);
}

template <typename R, typename T, typename Comp>
auto lower_bound(const R& range, const T& value, Comp comp) -> decltype(range.begin()) {
	return std::lower_bound(range.begin(), range.end(), value, comp);
}

template <typename R, typename T>
auto upper_bound(const R& range, const T& value) -> decltype(range.begin()) {
	return std::upper_bound(range.begin(), range.end(), value);
}

template <typename R, typename T, typename Comp>
auto upper_bound(const R& range, const T& value, Comp comp) -> decltype(range.begin()) {
	return std::upper_bound(range.begin(), range.end(), value, comp);
}

template <typename R>
auto min_element(const R& range) -> decltype(range.begin()) {
	return std::min_element(range.begin(), range.end());
}

template <typename R>
auto max_element(const R& range) -> decltype(range.begin()) {
	return std::max_element(range.begin(), range.end());
}

template <typename R>
bool next_permutation(R& range) {
	return std::next_permutation(range.begin(), range.end());
}

template <typename T>
void unique(std::vector<T>& range) {
	range.erase(std::unique(range.begin(), range.end()), range.end());
}

template <typename R>
R sorted(R range) {
	sort(range);
	return range;
}

template <typename R, typename Comp>
R sorted(R range, Comp comp) {
	sort(range, comp);
	return range;
}

template <typename R>
R reversed(R range) {
	reverse(range);
	return range;
}


using namespace std;

class TaskE {
public:
	void solve(std::istream& in, std::ostream& out) {
		int n, m, q;
		n = 1000;
		m = 200000;
		q = 200000;
		scanf("%d%d%d", &n, &m, &q);
		vector<pair<int, int>> edges(m);
		vector<vector<int>> res(n);
		for (int i: range(m)) {
			int a, b;
			//in >> a >> b;
			scanf("%d%d", &a, &b);
			--a, --b;
			//a = rand() % n;
			//b = rand() % n;
			edges[i] = {a, b};
			res[a].push_back(i);
			res[b].push_back(i);
		}
		//m *= 2;


		struct Query {
			int l, r, s, t, id;
		};
		vector<int> ans(q);
		vector<Query> queries(q);

		for (int i: range(q)) {
			//in >> queries[i].l;
			//in >> queries[i].r;
			//in >> queries[i].s;
			//in >> queries[i].t;
			scanf("%d", &queries[i].l);
			scanf("%d", &queries[i].r);
			scanf("%d", &queries[i].s);
			scanf("%d", &queries[i].t);
			--queries[i].l;
			--queries[i].r;
			--queries[i].s;
			--queries[i].t;
			//queries[i].l = rand() % 10000000;
			//queries[i].r = rand() % 10000000;
			//queries[i].s = rand() % n;
			//queries[i].t = rand() % n;

			queries[i].id = i;
		}


		sort(queries, [](const Query& l, const Query& r) {
			return l.t < r.t;
		});

		vector<int> ans_by_edge(m + 1);
		vector<int> next_edge(n);
		//vector<int> timer_next(n);
		ans_by_edge.back() = 1000000000;
		auto gosolve = [&](int end) {
			fill(next_edge.begin(), next_edge.end(), m);
			//fill(ans_by_edge.begin(), ans_by_edge.end(), 1000000000);
			for (int i: downrange(m)) {
				if (edges[i].second == end || edges[i].first == end) {
					ans_by_edge[i] = i;
				} else {
					ans_by_edge[i] = min(ans_by_edge[next_edge[edges[i].second]], ans_by_edge[next_edge[edges[i].first]]);
				}
				next_edge[edges[i].first] = i;
				next_edge[edges[i].second] = i;
			}
		};

		for (int i: range(q)) {
			if (i == 0 || queries[i].t != queries[i - 1].t) {
				gosolve(queries[i].t);
			}

			auto& col = res[queries[i].s];
			auto it = lower_bound(col.begin(), col.end(), queries[i].l);
			if (it != col.end()) {
				if (ans_by_edge[*it] <= queries[i].r) {
					ans[queries[i].id] = 1;
					continue;
				}
			}
		}

		for (int i: range(q)) {
			if (ans[i]) {
				puts("Yes");
			} else {
				puts("No");
			}
		}


	}
};


int main() {
	std::ios_base::sync_with_stdio(false);
	TaskE solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	in.tie(0);
	out << std::fixed;
	out.precision(20);
	solver.solve(in, out);
	return 0;
}