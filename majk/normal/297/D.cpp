/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author majk
 */

#ifndef MAJK_LIB
#define MAJK_LIB

#include <vector>
#include <stack>
#include <iostream>
#include <unordered_map>
#include <unordered_set>
#include <map>
#include <iomanip>
#include <set>
#include <functional>
#include <fstream>
#include <algorithm>
#include <cassert>
#include <cmath>
#include <string>
#include <sstream>
#include <queue>
#include <bitset>
using namespace std;

#define x first
#define y second
typedef std::pair<int,int> pii; typedef long long ll; typedef unsigned long long ull; typedef unsigned int ui; typedef pair<ui,ui> puu;

template <typename T, typename U> std::istream&operator>>(std::istream&i, pair<T,U>&p) {i >> p.x >> p.y; return i;}
template<typename T>std::istream&operator>>(std::istream&i,vector<T>&t) {for(auto&v:t){i>>v;}return i;}
template <typename T, typename U> std::ostream&operator<<(std::ostream&o, const pair<T,U>&p) {o << p.x << ' ' << p.y; return o;}
template<typename T>std::ostream&operator<<(std::ostream&o,const vector<T>&t) {if(t.empty())o<<'\n';for(size_t i=0;i<t.size();++i){o<<t[i]<<" \n"[i == t.size()-1];}return o;}
template<typename T> using minheap = priority_queue<T, vector<T>, greater<T>>;
template<typename T> using maxheap = priority_queue<T, vector<T>, less<T>>;
template <typename T> bool in(T a, T b, T c) { return a <= b && b < c; }
ui logceil(int x) { return 8*sizeof(int)-__builtin_clz(x); }

namespace std { template<typename T,typename U>struct hash<pair<T,U>>{hash<T>t;hash<U>u;size_t operator()(const pair<T,U>&p)const{return t(p.x)^(u(p.y)<<7);}}; }
template<typename T,typename F>T bsh(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){l=m+1;r=m;}else{h=m-1;}}return r;}
template<typename F> double bshd(double l,double h,const F&f,double p=1e-9){ui r=3+(ui)log2((h-l)/p);while(r--){double m=(l+h)/2;if(f(m)){l=m;}else{h=m;}}return (l+h)/2;}
template<typename T,typename F>T bsl(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){h=m-1;r=m;}else{l=m+1;}}return r;}
template<typename F> double bsld(double l,double h,const F&f,double p=1e-9){ui r=3+(ui)log2((h-l)/p);while(r--){double m=(l+h)/2;if(f(m)){h=m;}else{l=m;}}return (l+h)/2;}
template<typename T> T gcd(T a,T b) { if (a<b) swap(a,b); return b?gcd(b,a%b):a; }

template<typename T>class vector2:public vector<vector<T>>{public:vector2(){} vector2(size_t a,size_t b,T t=T()):vector<vector<T>>(a,vector<T>(b,t)){}};
template<typename T>class vector3:public vector<vector2<T>>{public:vector3(){} vector3(size_t a,size_t b,size_t c,T t=T()):vector<vector2<T>>(a,vector2<T>(b,c,t)){}};
template<typename T>class vector4:public vector<vector3<T>>{public:vector4(){} vector4(size_t a,size_t b,size_t c,size_t d,T t=T()):vector<vector3<T>>(a,vector3<T>(b,c,d,t)){}};
template<typename T>class vector5:public vector<vector4<T>>{public:vector5(){} vector5(size_t a,size_t b,size_t c,size_t d,size_t e,T t=T()):vector<vector4<T>>(a,vector4<T>(b,c,d,e,t)){}};


#endif
// #include "../l/mod.h"

class ColorTheCarpet {
public:
void solve(istream& cin, ostream& cout) {
    int H, W, K;
    cin >> H >> W >> K;
    vector<string> S(2*H-1); cin >> S;
    if (K == 1) {
        int e = 0, n = 0;
        for (string&s:S) for (char c:s) if (c == 'E') e++; else n++;
        if (n * 3 <= e) {
            cout << "YES\n";
            vector<int> Ans(W, 1);
            for (int i = 0; i < H; ++i) {
                cout << Ans;
            }
        } else {
            cout << "NO\n";
        }
        return;
    }

    cout << "YES\n";

    bool sw = false;
    if (H > W) {
        vector<string> T(2 * W - 1);
        for (int c = 0; c < W; ++c) {
            T[2 * c] = string(H - 1, ' ');
            for (int r = 0; r < H - 1; ++r) {
                T[2 * c][r] = S[2 * r + 1][c];
            }
            if (c != W - 1) {
                T[2 * c + 1] = string(H, ' ');
                for (int r = 0; r < H; ++r) {
                    T[2 * c + 1][r] = S[2 * r][c];
                }
            }
        }

        sw = true;
        swap(T,S);
        swap(H,W);
    }

    vector2<int> Ans(H,W,0);
    for (int r = 0; r < H; ++r) {
        Ans[r][0] = 0;
        for (int c = 1; c < W; ++c) {
            Ans[r][c] = Ans[r][c-1] ^ (S[2*r][c-1]=='N');
        }
        if (r != 0) {
            int a = 0;
            for (int c = 0; c < W; ++c) {
                a += Ans[r][c] == (Ans[r-1][c] ^ (S[2*r-1][c]=='N'));
            }
            if (a * 2 < W) {
                for (int c = 0; c < W; ++c) Ans[r][c] = !Ans[r][c];
            }
        }
    }

    if (sw) {
        vector2<int> Sw(W,H,0);
        for (int i = 0; i < W; ++i) {
            for (int j = 0; j < H; ++j) {
                Sw[i][j] = Ans[j][i];
            }
        }
        swap(Sw, Ans);
    }

    for (auto&ans:Ans) {
        for (auto&i:ans) i++;
        cout << ans;
    }
}
};


int main() {
	ios_base::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr);
	ColorTheCarpet solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
    return 0;
}