#include<bits/stdc++.h>
#define int long long
#define gmax(x,y) x=max(x,y)
#define gmin(x,y) x=min(x,y)
#define F first
#define S second
#define P pair
#define FOR(i,a,b) for(int i=a;i<=b;i++)
#define rep(i,a,b) for(int i=a;i<b;i++)
#define V vector
#define RE return
#define ALL(a) a.begin(),a.end()
#define MP make_pair
#define PB emplace_back
#define PF emplace_front
#define FILL(a,b) memset(a,b,sizeof(a))
#define lwb lower_bound
#define upb upper_bound
using namespace std;
int len=102;
P<int,int> p[105]={{0,0},{1,0},{3,1},{4,2},{5,1},{7,2},{9,0},{13,1},{15,2},{19,0},{27,1},{39,2},{40,0},{57,2},{58,1},{81,2},{85,0},{120,2},{121,1},{174,2},{179,0},{255,2},{260,1},{363,2},{382,0},{537,2},{544,1},{780,2},{805,0},{1146,2},{1169,1},{1632,2},{1718,0},{2415,2},{2447,1},{3507,2},{3622,0},{5154,2},{5260,1},{7341,2},{7730,0},{10866,2},{11011,1},{15780,2},{16298,0},{23190,2},{23669,1},{33033,2},{34784,0},{48894,2},{49549,1},{71007,2},{73340,0},{104352,2},{106510,1},{148647,2},{156527,0},{220020,2},{222970,1},{319530,2},{330029,0},{469581,2},{479294,1},{668910,2},{704371,0},{990087,2},{1003364,1},{1437882,2},{1485130,0},{2113113,2},{2156822,1},{3010092,2},{3169669,0},{4455390,2},{4515137,1},{6470466,2},{6683084,0},{9509007,2},{9705698,1},{13545411,2},{14263510,0},{20049252,2},{20318116,1},{29117094,2},{30073877,0},{42790530,2},{43675640,1},{60954348,2},{64185794,0},{90221631,2},{91431521,1},{131026920,2},{135332446,0},{192557382,2},{196540379,1},{274294563,2},{288836072,0},{405997338,2},{411441844,1},{589621137,2},{608996006,0},{866508216,2},{884431705,1},{1000000000,1}};
int dp[1005][4], mod=1e9+7,num;
void add(int &x,int y){
	x+=y;
	if(x>=mod)x-=mod; 
}
int get(int l,int r){
	RE (num+1)*(r-l+1)-(r+l)*(r-l+1)/2;
}
signed main(){
	ios::sync_with_stdio(0);
	cin.tie(0);
	int n;
	cin>>n>>num;num--;
	dp[0][0]=1;
	FOR(i,1,n){
		FOR(j,1,len){
			if(num<p[j].F)break;
			int now=get(p[j].F,min(p[j+1].F-1,num))%mod;
			rep(k,0,4){
				add(dp[i][k^p[j].S],dp[i-1][k]*now%mod);
			}
		}
	}
	cout<<(dp[n][1]+dp[n][2]+dp[n][3])%mod;
	RE 0;
}