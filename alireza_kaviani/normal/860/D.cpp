/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n, m, H[MAXN];
vector<ll> adj[MAXN];
map<pll, ll> used;
vector<pair<ll, pll>> ans;

void DFS(ll v, ll p = 0) {
    vector<ll> vec;
    H[v] = H[p] + 1;
    for (ll u : adj[v]) {
        if (!H[u]) DFS(u, v);
        if (H[u] > H[v] && !used[{v, u}]) vec.push_back(u);
    }
    if (vec.size() % 2 == 1 && p != 0) vec.push_back(p);

    for (ll i = 0; i + 1 < vec.size(); i += 2) {
        ll x = vec[i], y = vec[i + 1];
        used[{x, v}] = used[{v, x}] = used[{y, v}] = used[{v, y}] = 1;
        ans.push_back({x, {v, y}});
    }
}

int main() {
    fast_io;

    cin >> n >> m;
    for (ll i = 1; i <= m; i++) {
        ll v, u;
        cin >> v >> u;
        adj[v].push_back(u);
        adj[u].push_back(v);
    }

    for (ll i = 1; i <= n; i++) {
        if (H[i] == 0) {
            DFS(i);
        }
    }

    cout << ans.size() << endl;
    for (auto &i : ans) cout << i.X << sep << i.Y.X << sep << i.Y.Y << endl;

    return 0;
}
/*

*/