/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author majk
 */

#ifndef MAJK_LIB
#define MAJK_LIB

#include <vector>
#include <stack>
#include <iostream>
#include <unordered_map>
#include <unordered_set>
#include <map>
#include <iomanip>
#include <set>
#include <functional>
#include <fstream>
#include <algorithm>
#include <cassert>
#include <cmath>
#include <string>
#include <sstream>
#include <queue>
#include <bitset>
using namespace std;

#define x first
#define y second
typedef std::pair<int,int> pii; typedef long long ll; typedef unsigned long long ull; typedef unsigned int ui; typedef pair<ui,ui> puu;

template <typename T, typename U> std::istream&operator>>(std::istream&i, pair<T,U>&p) {i >> p.x >> p.y; return i;}
template<typename T>std::istream&operator>>(std::istream&i,vector<T>&t) {for(auto&v:t){i>>v;}return i;}
template <typename T, typename U> std::ostream&operator<<(std::ostream&o, const pair<T,U>&p) {o << p.x << ' ' << p.y; return o;}
template<typename T>std::ostream&operator<<(std::ostream&o,const vector<T>&t) {if(t.empty())o<<'\n';for(size_t i=0;i<t.size();++i){o<<t[i]<<" \n"[i == t.size()-1];}return o;}
template<typename T> using minheap = priority_queue<T, vector<T>, greater<T>>;
template<typename T> using maxheap = priority_queue<T, vector<T>, less<T>>;
template <typename T> bool in(T a, T b, T c) { return a <= b && b < c; }
ui logceil(int x) { return 8*sizeof(int)-__builtin_clz(x); }

namespace std { template<typename T,typename U>struct hash<pair<T,U>>{hash<T>t;hash<U>u;size_t operator()(const pair<T,U>&p)const{return t(p.x)^(u(p.y)<<7);}}; }
template<typename T,typename F>T bsh(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){l=m+1;r=m;}else{h=m-1;}}return r;}
template<typename F> double bshd(double l,double h,const F&f,double p=1e-9){ui r=3+(ui)log2((h-l)/p);while(r--){double m=(l+h)/2;if(f(m)){l=m;}else{h=m;}}return (l+h)/2;}
template<typename T,typename F>T bsl(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){h=m-1;r=m;}else{l=m+1;}}return r;}
template<typename F> double bsld(double l,double h,const F&f,double p=1e-9){ui r=3+(ui)log2((h-l)/p);while(r--){double m=(l+h)/2;if(f(m)){h=m;}else{l=m;}}return (l+h)/2;}
template<typename T> T gcd(T a,T b) { if (a<b) swap(a,b); return b?gcd(b,a%b):a; }

template<typename T>class vector2:public vector<vector<T>>{public:vector2(){} vector2(size_t a,size_t b,T t=T()):vector<vector<T>>(a,vector<T>(b,t)){}};
template<typename T>class vector3:public vector<vector2<T>>{public:vector3(){} vector3(size_t a,size_t b,size_t c,T t=T()):vector<vector2<T>>(a,vector2<T>(b,c,t)){}};
template<typename T>class vector4:public vector<vector3<T>>{public:vector4(){} vector4(size_t a,size_t b,size_t c,size_t d,T t=T()):vector<vector3<T>>(a,vector3<T>(b,c,d,t)){}};
template<typename T>class vector5:public vector<vector4<T>>{public:vector5(){} vector5(size_t a,size_t b,size_t c,size_t d,size_t e,T t=T()):vector<vector4<T>>(a,vector4<T>(b,c,d,e,t)){}};


#endif

#include <type_traits>

// ordinary suffix array with optional LCP and LCP RMQ. look elsewhere
template<typename Index, bool PrecomputeLCP = false, bool PrecomputeRMQ = false>
class SuffixArray {
public:
	static_assert(PrecomputeLCP || !PrecomputeRMQ, "Must have RMQ for LCP");

	template<typename T>
	explicit SuffixArray(T t):N(t.size()), S(N), I(N), LCP(PrecomputeLCP ? N : 0) {
		typedef typename std::remove_reference<decltype(t[0])>::type Item;
		vector<pair<Item, Index>> TR(N);
		for (Index i = 0; i < N; ++i) { TR[i] = {t[i], i}; }
		sort(TR.begin(), TR.end());
		vector<Index> R(N);
		Index r = R[TR[0].y] = S[TR[0].y] = 0;
		for (Index i = 1; i < N; ++i) {
			R[TR[i].y] = r += (TR[i - 1].x != TR[i].x);
			S[TR[i].y] = i;
		}
		vector<Index> RA(N), SA(N), C(N);
		for (Index k = 1; k < N; k <<= 1) {
			counting_sort(R, C, SA, k);
			counting_sort(R, C, SA, 0);
			RA[S[0]] = r = 0;
			for (Index i = 1; i < N; ++i) {
				RA[S[i]] = r += (R[S[i]] != R[S[i - 1]] || S[i] + k >= N || S[i - 1] + k >= N ||
								R[S[i] + k] != R[S[i - 1] + k]);
			}
			swap(RA, R);
			if (R[S[N - 1]] == N - 1)break;
		}
		for (Index i = 0; i < N; ++i) { I[S[i]] = i; }
		if (PrecomputeLCP) {
			Index k = 0;
			for (Index i = 0; i < N; ++i) {
				if (I[i] == N - 1) {
					LCP[I[i]] = k = 0;
					continue;
				}
				while (i + k < N && S[I[i] + 1] + k < N && t[i + k] == t[S[I[i] + 1] + k]) { ++k; }
				LCP[I[i]] = k;
				if (k > 0) { --k; }
			}
		}
		if (PrecomputeRMQ) {
			RMQ.push_back(LCP);
			for (int p = 0; (1 << p) < N; ++p) {
				RMQ.push_back(RMQ[p]);
				for (int i = 0; i < N - (1 << p); ++i) { RMQ[p + 1][i] = min(RMQ[p + 1][i], RMQ[p][i + (1 << p)]); }
			}
		}
	}

	Index next(Index i) { return (I[i] == N - 1) ? -1 : S[I[i] + 1]; }

	template<typename=std::enable_if<PrecomputeLCP>>
	Index lcp(Index i) const { return LCP[I[i]]; }

	template<typename=std::enable_if<PrecomputeRMQ>>
	Index lcp(Index i, Index j) const {
		i = I[i];
		j = I[j];
		if (i > j) { swap(i, j); }
		if (i == j - 1)return LCP[i];
		Index p = 0;
		while ((1 << p) < j - i) { ++p; }
		--p;
		return min(RMQ[p][i], RMQ[p][j - (1 << p)]);
	}

	inline void counting_sort(const vector<int> &R, vector<int> &C, vector<int> &SA, int k) {
		Index i;
		fill(C.begin(), C.end(), 0);
		for (i = 0; i < N; i++) { C[i + k < N ? R[i + k] : 0]++; }
		for (Index sum = i = 0; i < N; i++) { C[i] = (sum += C[i], sum - C[i]); }
		for (i = 0; i < N; i++) { SA[C[S[i] + k < N ? R[S[i] + k] : 0]++] = S[i]; }
		swap(SA, S);
	}

	Index N;
	vector<Index> S, I, LCP;
	vector<vector<Index>> RMQ;
};
/** Immutable tree for range queries on idempotent operations (i.e. min, max).
 * Memory O(n log n)
 * Build O(n log n)
 * Query O(1) */
template <typename T, typename Op> class ConstTree {
public:
    explicit ConstTree(const vector<T>&V) : D(logceil(V.size())), N(V.size()), A{V}, L(N,0) {
        for (ui b = 1; b < D; ++b) {
            A.emplace_back(N-(1<<b)+1);
            for (ui i = 0; i + (1<<b) <= N; ++i) {
                A[b][i] = op(A[b-1][i], A[b-1][i+(1<<(b-1))]);
            }
        }
        for (ui i = 2; i < N; ++i) L[i] = L[i-1] + ((1<<L[i-1]) == i/2);
    }

    T get(ui i, ui j) const { //i,j is inclusive
        return op(A[L[j-i]][i], A[L[j-i]][j+1-(1<<L[j-i])]);
    }
private:
    Op op;
    ui D,N;
    vector<vector<T>> A;
    vector<ui> L;
};

template <typename F> struct MinQOp { F operator()(F a, F b) const { return std::min(a,b); }};
template <typename F> struct MaxQOp { F operator()(F a, F b) const { return std::max(a,b); }};

class wattoandmechanism {
public:
    bool brute(const string&s, const string&t) {
        int d = 0;
        for (int i = 0; i < s.size(); ++i) {
            d += s[i] != t[i];
            if (d >= 2) return false;
        }
        return d==1;
    }

    void solve(istream& cin, ostream& cout) {
        int N,Q; cin >> N >> Q;
        vector<string> S(N), T(Q);
        cin >> S >> T;

        vector<vector<int>> SS(600001);
        vector<vector<int>> TT(600001);
        for (int i = 0; i < N; ++i) SS[S[i].size()].push_back(i);
        for (int i = 0; i < Q; ++i) TT[T[i].size()].push_back(i);
        vector<bool> Ans(Q,false);
        for (int len = 0; len <= 600000; ++len) {
            if (SS[len].empty() || TT[len].empty()) continue;
            if (SS[len].size() <= 10 || TT[len].size() <= 10) {
                for (int &t: TT[len]) {
                    for (int &s: SS[len]) {
                        if (brute(S[s],T[t])) {
                            Ans[t] = true;
                            break;
                        }
                    }
                }
                continue;
            }

            int L = 0;
            vector<int> W(TT[len].size() + SS[len].size(), -1);
            stringstream SSS;
            for (int z:SS[len]) {
                SSS << S[z] << S[z] << '$';
                L++;
            }

            for (int t:TT[len]) {
                SSS << T[t] << T[t] << '#';
                W[L] = t;
                L++;
            }
            SuffixArray<int, true> SA(SSS.str());
            SSS.clear();
            int H = 2*len+1;

            L *= H;
            ConstTree<int,MinQOp<int>> CT(SA.LCP);
            vector<set<int>> J(len);
            for (int i = 0; i < L; ++i) { if (W[SA.S[i]/H] == -1 && SA.S[i]%H < len) {
                    J[SA.S[i]%H].insert(i);
                }
            }

            for (int i = 0; i < L; ++i) {
                if (W[SA.S[i]/H] == -1 || SA.S[i]%H >= len) continue;
                if (Ans[W[SA.S[i]/H]]) continue;
                int l1 = (i == 0 || SA.LCP[i-1] < len) ? i : bsl(0, i-1, [&](int k) { return CT.get(k,i-1) >= len; });
                int h1 = SA.LCP[i] < len ? i : 1+bsh(i, L-1, [&](int k) { return CT.get(i, k) >= len; });

                int l2 = (l1 == 0 || SA.LCP[l1-1] < len-1) ? l1 : bsl(0, l1-1, [&](int k) { return CT.get(k,i-1) >= len-1; });
                int h2 = SA.LCP[h1] < len-1 ? h1 : 1+bsh(h1, L-1, [&](int k) { return CT.get(i, k) >= len-1; });
                int p = SA.S[i]%H;
                if ((l2 != l1 && J[p].lower_bound(l2) != J[p].lower_bound(l1))
                      || (h2 != h1 && J[p].upper_bound(h1) != J[p].upper_bound(h2))) {
                    Ans[W[SA.S[i]/H]] = true;
                }
            }
        }


        for (int i = 0; i < Q; ++i) {
            cout << (Ans[i]?"YES":"NO") << '\n';
        }
    }
};


int main() {
	ios_base::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr);
	wattoandmechanism solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
    return 0;
}