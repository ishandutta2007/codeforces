/* Generated by powerful Codeforces Tool
 * You can download the binary file in here https://github.com/xalanq/cf-tool (Windows, macOS, Linux)
 * Author: alireza_kaviani
 * Time: 2020-11-01 14:35:02
**/
#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<int, int> pii;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 3e5 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 998244353; // 1e9 + 9;

ll n , A[MAXN] , fact[MAXN] , inv[MAXN];

ll C(ll r , ll n){
	if(r > n || r < 0 || n < 0)	return 0;
	return fact[n] * inv[r] % MOD * inv[n - r] % MOD;
}

int main() {
	ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);

	fact[0] = inv[0] = 1;
	for(int i = 1 ; i < MAXN ; i++){
		fact[i] = fact[i - 1] * i % MOD;
		inv[i] = poww(fact[i] , MOD - 2 , MOD);
	}
	cin >> n;
	ll ans = 0;
	for(int i = 0 ; i < 2 * n ; i++){
		cin >> A[i];
	}
	sort(A , A + n + n);
	for(int i = 0 ; i < n + n ; i++){
		ll cur = A[i] * C(n - 1 , 2 * n - 1) % MOD;
		if(i < n)	ans -= cur;
		else	ans += cur;
	}
	cout << (ans % MOD + MOD) * 2 % MOD << endl;

    return 0;
}
/*

*/