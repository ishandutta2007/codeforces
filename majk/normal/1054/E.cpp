/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author majk
 */

#ifndef MAJK_LIB
#define MAJK_LIB

#include <vector>
#include <stack>
#include <iostream>
#include <unordered_map>
#include <unordered_set>
#include <map>
#include <iomanip>
#include <set>
#include <functional>
#include <fstream>
#include <algorithm>
#include <cassert>
#include <cmath>
#include <string>
#include <sstream>
#include <queue>
#include <bitset>
using namespace std;

#define x first
#define y second
typedef std::pair<int,int> pii; typedef long long ll; typedef unsigned long long ull; typedef unsigned int ui; typedef pair<ui,ui> puu;

template <typename T, typename U> std::istream&operator>>(std::istream&i, pair<T,U>&p) {i >> p.x >> p.y; return i;}
template<typename T>std::istream&operator>>(std::istream&i,vector<T>&t) {for(auto&v:t){i>>v;}return i;}
template <typename T, typename U> std::ostream&operator<<(std::ostream&o, const pair<T,U>&p) {o << p.x << ' ' << p.y; return o;}
template<typename T>std::ostream&operator<<(std::ostream&o,const vector<T>&t) {if(t.empty())o<<'\n';for(size_t i=0;i<t.size();++i){o<<t[i]<<" \n"[i == t.size()-1];}return o;}
template<typename T> using minheap = priority_queue<T, vector<T>, greater<T>>;
template<typename T> using maxheap = priority_queue<T, vector<T>, less<T>>;
template <typename T> bool in(T a, T b, T c) { return a <= b && b < c; }
ui logceil(int x) { return x?8*sizeof(int)-__builtin_clz(x):0; }

namespace std { template<typename T,typename U>struct hash<pair<T,U>>{hash<T>t;hash<U>u;size_t operator()(const pair<T,U>&p)const{return t(p.x)^(u(p.y)<<7);}}; }
template<typename T,typename F>T bsh(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){l=m+1;r=m;}else{h=m-1;}}return r;}
template<typename F> double bshd(double l,double h,const F&f,double p=1e-9){ui r=3+(ui)log2((h-l)/p);while(r--){double m=(l+h)/2;if(f(m)){l=m;}else{h=m;}}return (l+h)/2;}
template<typename T,typename F>T bsl(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){h=m-1;r=m;}else{l=m+1;}}return r;}
template<typename F> double bsld(double l,double h,const F&f,double p=1e-9){ui r=3+(ui)log2((h-l)/p);while(r--){double m=(l+h)/2;if(f(m)){h=m;}else{l=m;}}return (l+h)/2;}
template<typename T> T gcd(T a,T b) { if (a<b) swap(a,b); return b?gcd(b,a%b):a; }

template<typename T>class vector2:public vector<vector<T>>{public:vector2(){} vector2(size_t a,size_t b,T t=T()):vector<vector<T>>(a,vector<T>(b,t)){}};
template<typename T>class vector3:public vector<vector2<T>>{public:vector3(){} vector3(size_t a,size_t b,size_t c,T t=T()):vector<vector2<T>>(a,vector2<T>(b,c,t)){}};
template<typename T>class vector4:public vector<vector3<T>>{public:vector4(){} vector4(size_t a,size_t b,size_t c,size_t d,T t=T()):vector<vector3<T>>(a,vector3<T>(b,c,d,t)){}};
template<typename T>class vector5:public vector<vector4<T>>{public:vector5(){} vector5(size_t a,size_t b,size_t c,size_t d,size_t e,T t=T()):vector<vector4<T>>(a,vector4<T>(b,c,d,e,t)){}};


#endif
// #include "../l/mod.h"

class TaskE {
public:
void solve(istream& cin, ostream& cout) {
    int N, M; cin >> N >> M;
    vector2<string> S(N, M); cin >> S;
    vector2<string> T(N, M); cin >> T;
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < M; ++j) {
            reverse(S[i][j].begin(),S[i][j].end());
            reverse(T[i][j].begin(),T[i][j].end());
        }
    }

    vector<vector<pair<pii,pii>>> C(8);
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < M; ++j) {
            if (i == 0 && j == 0) continue;
            if (i == 1 && j == 1) continue;
            for (char c:S[i][j]) {
                int q = c-'0';
                if (i == q) {
                    C[0].push_back({{i,j},{q,q}});
                } else if (j == q) {
                    C[0].push_back({{i,j},{q,q}});
                } else {
                    C[0].push_back({{i,j},{i,q}});
                    C[1].push_back({{i,q},{q,q}});
                }
            }
        }
    }

    for (char c: S[0][0]) {
        int q = c-'0';
        C[2].push_back({{0,0},{1,0}});
        C[2].push_back({{1,0},{q,q}});
    }


    for (char c: S[1][1]) {
        int q = c-'0';
        C[2].push_back({{1,1},{1,0}});
        C[2].push_back({{1,0},{q,q}});
    }


    for (int i = 0; i < N; ++i) {
        for (int j = 2; j < M; ++j) {
            for (char c: T[i][j]) {
                int q = c-'0';
                if (i == q) {
                    C[3].push_back({{q,q},{i,j}});
                } else if (j == q) {
                    C[3].push_back({{q,q},{i,j}});
                } else {
                    C[3].push_back({{q,q},{i,q}});
                    C[3].push_back({{i,q},{i,j}});
                }
            }
        }
    }

    for (int i = 2; i < N; ++i) {
        for (int j = 0; j <= 1; ++j) {
            for (char c: T[i][j]) {
                int q = c-'0';
                if (i == q) {
                    C[4].push_back({{q,q},{i,j}});
                } else if (j == q) {
                    C[4].push_back({{q,q},{i,j}});
                } else {
                    C[4].push_back({{q,q},{q,j}});
                    C[4].push_back({{q,j},{i,j}});
                }
            }
        }
    }

    for (char c: T[0][0]) {
        int q = c-'0';
        C[5].push_back({{q,q},{1,0}});
        C[7].push_back({{1,0},{0,0}});
    }


    for (char c: T[1][1]) {
        int q = c-'0';
        C[5].push_back({{q,q},{0,1}});
        C[7].push_back({{0,1},{1,1}});
    }

    for (char c: T[1][0]) {
        int q = c-'0';
        C[6].push_back({{q,q},{1,0}});
    }

    for (char c: T[0][1]) {
        int q = c-'0';
        C[6].push_back({{q,q},{0,1}});
    }


    int ans = 0;
    for (int i = 0; i < C.size(); ++i) {
        ans += C[i].size();
    }
//
//    for (int i = 0; i < N; ++i) {
//        for (int j = 0; j < M; ++j) {
//            reverse(S[i][j].begin(),S[i][j].end());
//            reverse(T[i][j].begin(),T[i][j].end());
//        }
//    }


    cout << ans << endl;
    for (int i = 0; i < C.size(); ++i) {
        for (auto &c:C[i]) {
            cout << c.x.x+1 << ' ' << c.x.y+1 << ' ' << c.y.x+1 << ' ' << c.y.y+1 << '\n';

//            char d = S[c.x.x][c.x.y].back();
//            S[c.x.x][c.x.y].pop_back();
//            S[c.y.x][c.y.y] = string{d} + S[c.y.x][c.y.y];
        }
//
//
//        cout << endl;
//        for (int i = 0; i < N; ++i) {
//            for (int j = 0; j < M; ++j) {
//                cout << "\"" << S[i][j] << "\" ";
//            }
//            cout << endl;
//        }


//        for (int i = 0; i < N; ++i) {
//            for (int j = 0; j < M; ++j) {
//                cout << "\"" << T[i][j] << "\" ";
//            }
//            cout << endl;
//        }
    }

//    for (int i = 0; i < N; ++i) {
//        for (int j = 0; j < M; ++j) {
//            cout << "\"" << S[i][j] << "\" ";
//        }
//        cout << endl;
//    }
}

};


int main() {
	ios_base::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr);
	TaskE solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
    return 0;
}