/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author marX
 */

#include <iostream>
#include <fstream>

#include <bits/stdc++.h>

using namespace std;

const long long L = 1000000000000000000LL;

bool issqrt(long long a) {
    long long x = sqrt(a);
    return x * x == a;
}

class CSadPowers {
    vector<long long> good;

    void precalc() {
        for (long long i = 2; i <= 1000000; ++i) {
            long long r = i * i;

            while (r <= L) {
                if (r > L / i) break;
                if (r == L / i && L % i > 0) break;
                r *= i;
                if (!issqrt(r)) good.push_back(r);
            }
        }
        sort(good.begin(), good.end());
        good.erase(unique(good.begin(), good.end()), good.end());
    }

    long long calc(long long a) {
        if (a == 0) return 0;
        return upper_bound(good.begin(), good.end(), a) - good.begin() + (long long)sqrt(a);
    }


public:
    void solve(std::istream& in, std::ostream& out) {
        precalc();

        int q; in >> q;

        while (q-->0) {
            long long l, r;
            in >> l >> r;
            out << calc(r) - calc(l - 1) << '\n';
        }
    }
};


int main() {
	CSadPowers solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}