/* Generated by powerful Codeforces Tool
 * You can download the binary file in here https://github.com/xalanq/cf-tool (Windows, macOS, Linux)
 * Author: alireza_kaviani
 * Time: 2020-08-30 12:18:03
**/
#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<int, int> pii;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 5e5 + 10;
const ll MAXK = 110;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

int n , k , p , A[MAXN] , dp[MAXK * MAXK][MAXK] , nxt[MAXN][MAXK];

int main() {
	ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);

	cin >> n >> k >> p;
	for(int i = 1 ; i <= n ; i++){
		cin >> A[i];
		A[i] = (A[i - 1] + A[i]) % p;
	//	cout << i << sep << A[i] << endl;
	}
	fill(nxt[n + 1] , nxt[n + 1] + MAXK , n + 1);
	for(int i = n ; i >= 0 ; i--){
		for(int j = 0 ; j < MAXK ; j++)	nxt[i][j] = nxt[i + 1][j];
		if(i != n)	nxt[i][A[i + 1]] = i + 1;
	}
	for(int i = 0 ; i < MAXK * MAXK ; i++)	fill(dp[i] , dp[i] + MAXK , n + 1);
	dp[0][0] = 0;
	for(int i = 0 ; i + 100 < MAXK * MAXK ; i++){
		int val = i % p;
		for(int j = 0 ; j <= k ; j++){
			/*if(i < 10){
				cout << i << sep << j << sep << dp[i][j] << endl;
			}*/
			for(int l = 0 ; l < p ; l++){
				int cost = l - val + p;
				if(cost >= p)	cost -= p;
				dp[i + cost][j + 1] = min(dp[i + cost][j + 1] , nxt[dp[i][j]][l]);
				/*if(i < 10){
					cout << l << sep << val << sep << cost << sep << dp[i + cost][j + 1] << endl;
				}*/
			}
		}
	}
	//cout << A[n] % p << endl;
	for(int i = 0 ; i < MAXK * MAXK ; i++){
		if(i % p == A[n] % p && dp[i][k] <= n)	return cout << i << endl , 0;
	}

    return 0;
}
/*

*/