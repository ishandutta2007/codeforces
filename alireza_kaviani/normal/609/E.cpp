/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 2e5 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n, m, cost, v[MAXN], u[MAXN], w[MAXN], par[MAXN][LOG], mx[MAXN][LOG], H[MAXN], P[MAXN], sz[MAXN];
vector<pair<ll, pll>> E;
vector<pll> adj[MAXN];

ll Find(ll v) {
    return (P[v] == -1 ? v : P[v] = Find(P[v]));
}

ll Union(ll v, ll u) {
    v = Find(v), u = Find(u);
    if (u == v) return 0;
    if (sz[v] < sz[u]) swap(v, u);
    P[u] = v;
    sz[v] += sz[u];
    return 1;
}

void DFS(ll v, ll p = 0, ll W = 0) {
    H[v] = H[p] + 1;
    par[v][0] = p;
    mx[v][0] = W;
    for (pll i : adj[v]) {
        ll u = i.X, w = i.Y;
        if (u != p) DFS(u, v, w);
    }
}

pll getPar(ll v, ll h) {
    ll ans = 0;
    for (ll i = 0; i < LOG; i++) {
        if (h & (1 << i)) {
            ans = max(ans, mx[v][i]);
            v = par[v][i];
        }
    }
    return {v, ans};
}

ll LCA(ll v, ll u) {
    if (H[v] > H[u]) swap(v, u);
    u = getPar(u, H[u] - H[v]).X;
    if (u == v) return v;

    for (ll i = LOG - 1; i >= 0; i--) {
        if (par[v][i] != par[u][i]) {
            u = par[u][i];
            v = par[v][i];
        }
    }
    return par[v][0];
}

int main() {
    fast_io;
    fill(P, P + MAXN, -1);
    fill(sz, sz + MAXN, 1);

    cin >> n >> m;
    for (ll i = 0; i < m; i++) {
        cin >> v[i] >> u[i] >> w[i];
        E.push_back({w[i], {v[i], u[i]}});
    }
    Sort(E);

    for (pair<ll, pll> i : E) {
        ll v = i.Y.X, u = i.Y.Y, w = i.X;
        if (Union(v, u)) {
            cost += w;
            adj[v].push_back({u, w});
            adj[u].push_back({v, w});
        }
    }

    DFS(1);
    for (ll j = 1; j < LOG; j++) {
        for (ll i = 1; i <= n; i++)
            par[i][j] = par[par[i][j - 1]][j - 1], mx[i][j] = max(mx[i][j - 1], mx[par[i][j - 1]][j - 1]);
    }

    for (ll i = 0; i < m; i++) {
        ll lca = LCA(v[i], u[i]);
        ll mx = max(getPar(v[i], H[v[i]] - H[lca]).Y, getPar(u[i], H[u[i]] - H[lca]).Y);
        cout << cost - mx + w[i] << endl;
    }

    return 0;
}
/*

*/