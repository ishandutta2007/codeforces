/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 5e5 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n, q, sz[MAXN], ans[MAXN];
string s;
vector<ll> adj[MAXN], cnt[MAXN];
vector<pll> Q[MAXN];

void DFS(ll v, ll H = 1) {
    for (ll u : adj[v]) {
        DFS(u, H + 1);
        if (cnt[u].size() > cnt[v].size()) {
            cnt[v].swap(cnt[u]);
        }
        for (ll i = 0; i < cnt[u].size(); i++) cnt[v][SZ(cnt[v]) - SZ(cnt[u]) + i] ^= cnt[u][i];
        cnt[u] = {};
    }
    cnt[v].push_back(1ll << ll(s[v - 1] - 97));
    for (pll i : Q[v]) {
        if (i.X < H || SZ(cnt[v]) - 1 - i.X + H < 0) ans[i.Y] = 0;
        else {
            ans[i.Y] = cnt[v][SZ(cnt[v]) - 1 - i.X + H];
        }
    }
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    cin >> n >> q;
    for (ll i = 2; i <= n; i++) {
        ll p;
        cin >> p;
        adj[p].push_back(i);
    }
    cin >> s;
    for (ll i = 0; i < q; i++) {
        ll v, h;
        cin >> v >> h;
        Q[v].push_back({h, i});
    }
    DFS(1);

    for (ll i = 0; i < q; i++) {
        if (__builtin_popcountll(ans[i]) <= 1) cout << "Yes" << endl;
        else cout << "No" << endl;
    }

    return 0;
}
/*

*/