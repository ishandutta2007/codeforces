import java.util.ArrayList;
import java.util.List;
import java.util.InputMismatchException;
import java.math.BigInteger;
import java.util.Iterator;
import java.util.Comparator;
import java.io.*;
import java.util.Arrays;
import java.util.Collection;

/**
 * Generated by Contest helper plug-in
 * Actual solution is at the bottom
 */
public class Main {
	public static void main(String[] args) {
		InputReader in = new StreamInputReader(System.in);
		PrintWriter out = new PrintWriter(System.out);
		run(in, out);
	}

	public static void run(InputReader in, PrintWriter out) {
		Solver solver = new TaskD();
		solver.solve(1, in, out);
		Exit.exit(in, out);
	}
}

abstract class InputReader {
	private boolean finished = false;

	public abstract int read();

	public int readInt() {
		int c = read();
		while (isSpaceChar(c))
			c = read();
		int sgn = 1;
		if (c == '-') {
			sgn = -1;
			c = read();
		}
		int res = 0;
		do {
			if (c < '0' || c > '9')
				throw new InputMismatchException();
			res *= 10;
			res += c - '0';
			c = read();
		} while (!isSpaceChar(c));
		return res * sgn;
	}

	public String readString() {
		int c = read();
		while (isSpaceChar(c))
			c = read();
		StringBuffer res = new StringBuffer();
		do {
			res.appendCodePoint(c);
			c = read();
		} while (!isSpaceChar(c));
		return res.toString();
	}

	private boolean isSpaceChar(int c) {
		return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
	}

	public char readCharacter() {
		int c = read();
		while (isSpaceChar(c))
			c = read();
		return (char) c;
	}

	public void setFinished(boolean finished) {
		this.finished = finished;
	}

	public abstract void close();
}

class StreamInputReader extends InputReader {
	private InputStream stream;
	private byte[] buf = new byte[1024];
	private int curChar, numChars;

	public StreamInputReader(InputStream stream) {
		this.stream = stream;
	}

	public int read() {
		if (numChars == -1)
			throw new InputMismatchException();
		if (curChar >= numChars) {
			curChar = 0;
			try {
				numChars = stream.read(buf);
			} catch (IOException e) {
				throw new InputMismatchException();
			}
			if (numChars <= 0)
				return -1;
		}
		return buf[curChar++];
	}

	public void close() {
		try {
			stream.close();
		} catch (IOException ignored) {
		}
	}
}

class Exit {
	private Exit() {
	}

	public static void exit(InputReader in, PrintWriter out) {
		in.setFinished(true);
		in.close();
		out.close();
	}
}

interface Solver {
	public void solve(int testNumber, InputReader in, PrintWriter out);
}

class IOUtils {

	public static char[] readCharArray(InputReader in, int size) {
		char[] array = new char[size];
		for (int i = 0; i < size; i++)
			array[i] = in.readCharacter();
		return array;
	}

	public static char[][] readTable(InputReader in, int rowCount, int columnCount) {
		char[][] table = new char[rowCount][];
		for (int i = 0; i < rowCount; i++)
			table[i] = readCharArray(in, columnCount);
		return table;
	}

	}

class TaskD implements Solver {
	public void solve(int testNumber, InputReader in, PrintWriter out) {
		int rowCount = in.readInt();
		int columnCount = in.readInt();
		char[][] map = IOUtils.readTable(in, rowCount, columnCount);
		boolean[] valid = new boolean[26];
		int[] x = new int[26];
		int[] y = new int[26];
		for (int i = 0; i < rowCount; i++) {
			for (int j = 0; j < columnCount; j++) {
				if (Character.isLetter(map[i][j])) {
					valid[map[i][j] - 'A'] = true;
					x[map[i][j] - 'A'] = i;
					y[map[i][j] - 'A'] = j;
				}
			}
		}
		int[][] west = new int[rowCount][columnCount];
		int[][] east = new int[rowCount][columnCount];
		int[][] north = new int[rowCount][columnCount];
		int[][] south = new int[rowCount][columnCount];
		for (int i = 0; i < rowCount; i++) {
			for (int j = 0; j < columnCount; j++) {
				if (map[i][j] != '#')
					west[i][j] = 1 + (j == 0 ? 0 : west[i][j - 1]);
			}
		}
		for (int i = 0; i < rowCount; i++) {
			for (int j = columnCount - 1; j >= 0; j--) {
				if (map[i][j] != '#')
					east[i][j] = 1 + (j == columnCount - 1 ? 0 : east[i][j + 1]);
			}
		}
		for (int i = 0; i < rowCount; i++) {
			for (int j = 0; j < columnCount; j++) {
				if (map[i][j] != '#')
					north[i][j] = 1 + (i == 0 ? 0 : north[i - 1][j]);
			}
		}
		for (int i = rowCount - 1; i >= 0; i--) {
			for (int j = 0; j < columnCount; j++) {
				if (map[i][j] != '#')
					south[i][j] = 1 + (i == rowCount - 1 ? 0 : south[i + 1][j]);
			}
		}
		int commandCount = in.readInt();
		for (int i = 0; i < commandCount; i++) {
			char direction = in.readCharacter();
			int length = in.readInt();
			for (int j = 0; j < 26; j++) {
				if (valid[j]) {
					if (direction == 'N') {
						if (north[x[j]][y[j]] > length)
							x[j] -= length;
						else
							valid[j] = false;
					} else if (direction == 'S') {
						if (south[x[j]][y[j]] > length)
							x[j] += length;
						else
							valid[j] = false;
					} else if (direction == 'W') {
						if (west[x[j]][y[j]] > length)
							y[j] -= length;
						else
							valid[j] = false;
					} else if (direction == 'E') {
						if (east[x[j]][y[j]] > length)
							y[j] += length;
						else
							valid[j] = false;
					}
				}
			}
		}
		StringBuilder result = new StringBuilder(26);
		for (int i = 0; i < 26; i++) {
			if (valid[i])
				result.append((char)(i + 'A'));
		}
		if (result.length() == 0)
			out.println("no solution");
		else
			out.println(result);
	}
}