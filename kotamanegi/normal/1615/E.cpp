#include "bits/stdc++.h"
using namespace std;

typedef string::const_iterator State;
#define eps 1e-8L
#define MAX_MOD 1000000007LL
#define GYAKU 500000004LL
#define MOD 998244353LL
#define pb push_back
#define mp make_pair
typedef long long ll;
typedef long double ld;
#define REP(a, b) for (long long(a) = 0; (a) < (b); ++(a))
#define ALL(x) (x).begin(), (x).end()

#define int long long
vector<int> vertexs[300000];
int backs[300000];
int dist[300000];
int isValid[300000];

priority_queue<pair<int, int>> next_go;

void dfs(int now)
{
  int isFinal = true;
  for (auto x : vertexs[now])
  {
    if (x == backs[now])
      continue;
    isFinal = false;
    dist[x] = dist[now] + 1;
    backs[x] = now;
    dfs(x);
  }
  if (isFinal)
  {
    next_go.push({dist[now], now});
  }
}
void solve()
{
  int n, k;
  cin >> n >> k;
  REP(i, n - 1)
  {
    int a, b;
    cin >> a >> b;
    a--;
    b--;
    vertexs[a].push_back(b);
    vertexs[b].push_back(a);
  }
  REP(i, n)
  {
    isValid[i] = 1;
  }
  int cnt = 0;
  for (int i = 1; i < n; ++i)
  {
    if (vertexs[i].size() == 1)
      cnt++;
  }
  if (cnt <= k)
  {
    // Red can color everything well.
    int ans = 0;
    for (int i = cnt; i <= k; ++i)
    {
      ans = max(ans, i * (n - i));
    }
    cout << ans << endl;
    return;
  }

  dist[0] = 1;
  dfs(0);
  int remaining_blue = n;
  for (int i = 1; i <= k; ++i)
  {
    while (true)
    {
      pair<int, int> now = next_go.top();
      next_go.pop();
      if (!isValid[now.second])
        continue;
      if (dist[now.second] != now.first)
        continue;
      int traverse = now.second;
      while (isValid[traverse])
      {
        isValid[traverse] = 0;
        remaining_blue--;
        dist[traverse] = 0;
        for (auto x : vertexs[traverse])
        {
          if (x == backs[traverse])
            continue;
          if (isValid[x] == false)
            continue;
          dist[x] = 1;
          dfs(x);
        }
        traverse = backs[traverse];
      }
      break;
    }
  }
  int ans = 1e18;
  for (int q = 0; q <= remaining_blue; ++q)
  {
    ans = min(ans, (k - q) * (n - k - q));
  }
  cout << ans << endl;
}
#undef int

// generated by oj-template v4.7.2
// (https://github.com/online-judge-tools/template-generator)
int main()
{
  // Fasterize input/output script
  ios::sync_with_stdio(false);
  cin.tie(nullptr);
  cout << fixed << setprecision(100);
  // scanf/printf user should delete this fasterize input/output script

  int t = 1;
  // cin >> t; // comment out if solving multi testcase
  for (int testCase = 1; testCase <= t; ++testCase)
  {
    solve();
  }
  return 0;
}