/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Azat Ismagilov
 */

/**********.*****.**************************:-******-:*******************
**********......:*****************+@%@*+#@@@+.****.***********************
...------........-*+*********+%#####@@@##########*************************
********:........----------%@#####################@@-...............------
**********......:********@%#####@###################@#@=+***************::
*********.:****--******%##@#####@#######################@*+***************
********.*******:-**+@@####@#@@@#################@#########=**************
*******-*********:*@@@######@###############################=*************
*****--**********%%@##@########@#############################=:***********
****.************+##################@#@@#####################@************
***.*************%######################@@###################=***********-
*-:**************=##########@@%%%%=%@=%=%=%@################@@**********.*
.****************########%++***+++****+++=+===+++***+=%@######%*******:-**
****************+#######%+*::::::::::::***********:::::**@@###%******.:***
****************#######@%*:::::::::::::::*:*****:::::::::*@@##@*****.*****
****************######@%+*:::::::-::::::::::::::::::::::::=@##%****-******
.......-------:*######=::::::----------:::::::::::::::::::+###:**--*******
............:==:%####=:::::----:-:::::::::::::::::::::::::=@##:-.:********
************=@++*%##@::::*=%%%@@###@=***::::::::::::::::::=@#@*..*********
************=**+@+@#*:::**+++%@#@###%@%%+*::*+=======*::::*##-:**.********
*************:=%%:%*::::*+=%##%###=@@@%=*::*=%@@@%%@@#@%::+#@:****.*******
:**************==:=:::--::::*++++=%@@@%*:--*%#@####@#=+***@@%@*****.******
--**************:-*::--------::**+***:::---*+%%%%%%@@%+*::#*@%******.*****
*:-************---*::::-----------::--:---::::+++++**:::::%*%********-:***
**:.************++*:::::--------::**+------::::::::::::::*++**********--**
****.**************::::::-----::**==:-------+*:::::---:::**************:-*
*****.***********.*::::::::-:::***:*+@**::**=+*::::::::::****************-
******.*:*%@######+::::::::::::::::::++++=******::::::::******************
******:############*::::::::****::::::*+*:*:*:***::::::*******************
******#############***::*:*:*+==@@##=======:*+***:::*:********************
******#############:*+**********:*++**+**++=%=***:*::*********************
.....##############::*++**************+***:*********###+******************
***:##############@*:**+=***:::**++===++***********#####%.................
*:*###############******++=+*:::::::*:::::*::***#########=****************
**:################%*****++==++********::::*+++=##########+***************
*:%##################******++++==+=++++++++++++@############**************
######################@******+++++++++++++++++=%#############*************
########################+++++++++++++++++++++==@#############@***********.
#########################%+++++++++++++++++===%###############%********:-*
########################@=#=++++++++++++====%@##################******-**/

#include <bits/stdc++.h>

#define int long long
#define fs first
#define sc second
#define pb push_back
#define ppb pop_back
#define pf push_front
#define ppf pop_front
#define mp make_pair
#define len(v) ((int)v.size())
#define vc vector
#define pr pair
#define endd "\n"; return;
#define all(v) v.begin(), v.end()

using namespace std;

const int MAXN = 1e5;
const int INF = 1e18;
const int MOD = 1e9 + 7;

int n;
vc<pr<int, int>> points;

bool one_line(int x1, int y1, int x2, int y2, int x3, int y3) {
    return ((y1 - y2) * x3 + (x2 - x1) * y3) == ((y1 - y2) * x1 + (x2 - x1) * y1);
}

bool prov(int y, int z) {
    if (y == z) {
        return 0;
    }
    map<int, bool> used;
    for (int i = 0; i < n; i++) {
        if (one_line(points[y].fs, points[y].sc, points[z].fs, points[z].sc, points[i].fs, points[i].sc)) {
            used[i] = 1;
        }
    }
    vc<pr<int, int>> nott;
    for (int i = 0; i < n; i++) {
        if (!used[i]) {
            nott.pb(points[i]);
        }
    }
    if (len(nott) == 0) {
        return 0;
    }
    if (len(nott) == 1) {
        return 1;
    }
    for (int i = 2; i < len(nott); i++) {
        if (!one_line(nott[0].fs, nott[0].sc, nott[1].fs, nott[1].sc, nott[i].fs, nott[i].sc)) {
            return 0;
        }
    }
    return ((points[y].sc - points[z].sc) * (nott[0].fs - nott[1].fs)) ==
           ((points[y].fs - points[z].fs) * (nott[0].sc - nott[1].sc));
}

class TaskB {
public:
    void solve(std::istream &in, std::ostream &out) {
        points.clear();
        in >> n;
        for (int i = 0; i < n; i++) {
            int a, b;
            in >> b;
            points.pb(mp(i + 1, b));
        }
        if (n == 2) {
            out << "Yes" << endd;
        }
        for (int i = 0; i < n; i++) {
            if (prov(0, i)) {
                out << "Yes" << endd;
            }
        }
        for (int i = 0; i < n; i++) {
            if (prov(1, i)) {
                out << "Yes" << endd;
            }
        }
        out << "No";
    }
};


main() {
    TaskB solver;
    std::istream &in(std::cin);
    std::ostream &out(std::cout);
    solver.solve(in, out);
    return 0;
}