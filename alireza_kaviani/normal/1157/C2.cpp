/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;
typedef pair<ld, ld> pld;
typedef pair<string, string> pss;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define file_io                     freopen("in.txt" , "r+" , stdin) ; freopen("out.txt" , "w+" , stdout);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

inline ll input() {
    ll n;
    cin >> n;
    return n;
}

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

set_random;

const ll MAXN = 1e6 + 10;
const ll INF = 8e18;
const ll MOD = 1e9 + 7;
const ll MOD1 = 998244353;
const ll MOD2 = 1e9 + 7;
const ll MOD3 = 1e9 + 9;

ll n , mn = -INF , p[MAXN];
deque<ll> L , R;
vector<string> ans;

int main() {
    fast_io;

    cin >> n;
    for(ll i = 0 ; i < n ; i++) cin >> p[i];

    L.push_back(p[0]);
    for(ll i = 1 ; i < n ; i++)
    {
        if(L.back() < p[i])
        {
            L.push_back(p[i]);
        }
        else    break;
    }

    R.push_back(p[n - 1]);
    for(ll i = n - 2 ; i >= 0 ; i--)
    {
        if(R.back() < p[i])
        {
            R.push_back(p[i]);
        }
        else    break;
    }

    for(ll i = 0 ; i < n ; i++)
    {
        if(L.size() == 0 && R.size() == 0)  break;
        else if(L.size() == 0 && R.front() > mn)
        {
            mn = R.front();
            R.pop_front();
            ans.push_back("R");
        }
        else if(R.size() == 0 && L.front() > mn)
        {
            mn = L.front();
            L.pop_front();
            ans.push_back("L");
        }
        else if(L.front() < R.front() && L.front() > mn)
        {
            mn = L.front();
            L.pop_front();
            ans.push_back("L");
        }
        else if(R.front() < L.front() && R.front() > mn)
        {
            mn = R.front();
            R.pop_front();
            ans.push_back("R");
        }
        else if(L.front() == R.front() && L.front() > mn)
        {
            if(L.size() >= R.size() && L.front() > mn)
            {
                mn = L.front();
                L.pop_front();
                ans.push_back("L");
                R.clear();
            }
            else if(R.size() >= L.size() && R.front() > mn)
            {
                mn = R.front();
                R.pop_front();
                ans.push_back("R");
                L.clear();
            }
        }
        else
        {
            break;
        }
    }

    cout << ans.size() << endl;
    for(string c : ans) cout << c;

    return 0;
}
/*
todo :
    1- set constants
    2- check TimeLimit and MemoryLimit
    3- check special test cases
    4- don't forget BS can help you that is good idea(use for loop for floats)
    5- don't forget printf and scanf can help you in your code speed
*/