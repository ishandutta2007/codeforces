/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author RiaD
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <vector>

#include <algorithm>

using namespace std;

class TaskA {
public:
	vector<vector<int>> graph;
	vector<int> used;
	vector<int> res;
	void dfs(int v) {

		if(used[v])
			return;
		used[v] = true;
		for(int to: graph[v]) {
			dfs(to);
		}
		res.push_back(v);
	}
	void solve(std::istream& in, std::ostream& out) {
		int n;
		in >> n;
		graph.assign(26, vector<int>());
		used.assign(26, 0);
		vector<string> s(n);
		for(int i = 0; i < n; ++i) {
			in >> s[i];
		}

		for(int i = 0; i  + 1 < n; ++i) {
			for(int j = 0; ; ++j) {
				if(s[i].size() == j) {
					break;
				}
				if(s[i + 1].size() == j) {
					out << "Impossible";
					return;
				}
				if(s[i][j] != s[i + 1][j]) {
					graph[s[i + 1][j] - 'a'].push_back(s[i][j] - 'a');
					break;
				}
			}
		}


		for(int i = 0; i < 26; ++i) {
			dfs(i);
		}

		for(int i = 0; i < 26; ++i) {
			for(int j = i + 1; j < 26; ++j) {
				if(find(graph[res[i]].begin(), graph[res[i]].end(), res[j]) != graph[res[i]].end()) {
					out << "Impossible";
					return;
				}
			}
		}

		for(int i = 0; i < 26; ++i) {
			out << char(res[i] + 'a');
		}
	}
};


int main() {
	std::cin.sync_with_stdio(false);
	std::cin.tie(0);
	std::cout << std::fixed;
	std::cout.precision(20);
	TaskA solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}