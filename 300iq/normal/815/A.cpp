/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author gainullin.ildar
 */

#include <bits/stdc++.h>

#include <cmath>
#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <set>
#include <map>
#include <list>
#include <time.h>
#include <math.h>
#include <random>
#include <deque>
#include <queue>
#include <cassert>
#include <unordered_map>
#include <iomanip>

using namespace std;


typedef long long ll;
typedef unsigned long long ull;

const int N = 500 + 7;
int g[N][N];

class Main
{
public:
    void solve(std::istream &in, std::ostream &out)
    {
        int n, m;
        in >> n >> m;
        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < m; j++)
            {
                in >> g[i][j];
            }
        }
        int res = -1;
        vector<pair<int, pair<int, int> > > ans;
        for (int s = 0; s <= 500; s++)
        {
            vector<int> add(n), odd(m);
            vector<bool> used(n), usd(m);
            used[0] = 1;
            add[0] = s;
            bool good = true;
            for (int it = 0; it < 5; it++)
            {
                for (int i = 0; i < n; i++)
                {
                    if (used[i])
                    {
                        for (int j = 0; j < m; j++)
                        {
                            if (!usd[j])
                            {
                                int add_j = g[i][j] - add[i];
                                usd[j] = 1;
                                odd[j] = add_j;
                                if (add_j < 0)
                                {
                                    good = false;
                                    break;
                                }
                            }
                        }
                    }
                }
                for (int j = 0; j < m; j++)
                {
                    if (usd[j])
                    {
                        for (int i = 0; i < n; i++)
                        {
                            if (!used[i])
                            {
                                int add_i = g[i][j] - odd[j];
                                used[i] = 1;
                                add[i] = add_i;
                                if (add_i < 0)
                                {
                                    good = false;
                                    break;
                                }
                            }
                        }
                    }
                }
            }
            for (int i = 0; i < n; i++)
            {
                for (int j = 0; j < m; j++)
                {
                    good &= (add[i] + odd[j] == g[i][j]);
                }
            }
            if (!good)
            {
                continue;
            }
            vector<pair<int, pair<int, int> > > kek;
            for (int i = 0; i < n; i++)
            {
                while (add[i]--)
                {
                    kek.push_back({0, {i, 0}});
                }
            }
            for (int i = 0; i < m; i++)
            {
                while (odd[i]--)
                {
                    kek.push_back({1, {i, 0}});
                }
            }
            if (res == -1 || kek.size() < ans.size())
            {
                ans = kek;
                res = kek.size();
            }
        }
        out << res << '\n';
        for (auto i : ans)
        {
            if (i.first == 0)
            {
                out << "row " << i.second.first + 1 << '\n';
            }
            else
            {
                out << "col " << i.second.first + 1 << '\n';
            }
        }
    }
};


int main()
{
    ios::sync_with_stdio(0);
    Main solver;
    std::istream &in(std::cin);
    std::ostream &out(std::cout);
    solver.solve(in, out);
    return 0;
}