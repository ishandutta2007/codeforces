/* Generated by powerful Codeforces Tool
 * You can download the binary file in here https://github.com/xalanq/cf-tool (Windows, macOS, Linux)
 * Author: alireza_kaviani
 * Time: 2020-08-09 20:16:17
**/
#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<int, int> pii;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

int n , m , dp[MAXN][8] , val[MAXN];
string s[MAXN];

int main() {
    ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);

    cin >> n >> m;
    if(n > 3 && m > 3)  return cout << -1 << endl , 0;
    for(int i = 0 ; i < n ; i++){
        cin >> s[i];
        for(int j = 0 ; j < m ; j++){
            if(s[i][j] == '0')  continue;
            if(n > m)   val[i] ^= (1 << j);
            else    val[j] ^= (1 << i);
        }
    }
    if(n < m)   swap(n , m);
    if(m == 1)  return cout << 0 << endl , 0;
    for(int i = 0 ; i < 8 ; i++)    dp[0][i] = __builtin_popcount(val[0] ^ i);
    for(int i = 1 ; i < n ; i++){
        for(int j = 0 ; j < (1 << m) ; j++){
            int cost = __builtin_popcount(val[i] ^ j);
            if(m == 2)  dp[i][j] = min(dp[i - 1][j ^ 1] + cost , dp[i - 1][j ^ 2] + cost);
            if(m == 3)  dp[i][j] = min(dp[i - 1][j ^ 5] + cost , dp[i - 1][j ^ 2] + cost);
            //cout << i << sep << j << sep << dp[i][j] << endl;
        }
    }
    cout << *min_element(dp[n - 1] , dp[n - 1] + (1 << m)) << endl;

    return 0;
}
/*

*/