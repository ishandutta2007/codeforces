/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e5 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n, q, sz[MAXN], C[MAXN], ans[MAXN];
vector<ll> adj[MAXN];
vector<pll> Q[MAXN];
map<ll, ll> cnt[MAXN];
Tree<pll> tr[MAXN];

void DFS(ll v, ll p = -1) {
    sz[v] = 1;
    tr[v].insert({1, C[v]});
    cnt[v][C[v]] = 1;
    for (ll u : adj[v]) {
        if (u == p) continue;
        DFS(u, v);
        if (sz[v] < sz[u]) {
            tr[v].swap(tr[u]);
            cnt[v].swap(cnt[u]);
        }
        for (auto &i : tr[u]) {
            tr[v].erase({cnt[v][i.Y], i.Y});
            cnt[v][i.Y] += i.X;
            tr[v].insert({cnt[v][i.Y], i.Y});
        }
        tr[u] = Tree<pll>();
        cnt[u] = map<ll, ll>();
        sz[v] += sz[u];
    }
    for (pll i : Q[v]) ans[i.Y] = SZ(tr[v]) - ll(tr[v].order_of_key({i.X, -INF}));
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    cin >> n >> q;
    for (ll i = 1; i <= n; i++) cin >> C[i];
    for (ll i = 1; i < n; i++) {
        ll v, u;
        cin >> v >> u;
        adj[v].push_back(u);
        adj[u].push_back(v);
    }

    for (ll i = 1; i <= q; i++) {
        ll v, k;
        cin >> v >> k;
        Q[v].push_back({k, i});
    }

    DFS(1);
    for (ll i = 1; i <= q; i++) cout << ans[i] << endl;

    return 0;
}
/*

*/