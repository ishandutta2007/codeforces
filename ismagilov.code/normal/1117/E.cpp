/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Azat Ismagilov
 */

#include <fstream>

#include <iostream>
#include <algorithm>
#include <vector>
#include <numeric>

#define int long long
#define fs first
#define sc second
#define pb push_back
#define ppb pop_back
#define pf push_front
#define ppf pop_front
#define mp make_pair
#define len(v) ((int)v.size())
#define vc vector
#define pr pair
#define all(v) v.begin(), v.end()
//#pragma GCC optimize("Ofast")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,tune=native")
//#pragma GCC optimize("unroll-loops")

using namespace std;

template<typename T, typename U>
inline ostream &operator<<(ostream &_out, const pair<T, U> &_p) {
    _out << _p.first << ' ' << _p.second;
    return _out;
}

template<typename T, typename U>
inline istream &operator>>(istream &_in, pair<T, U> &_p) {
    _in >> _p.first >> _p.second;
    return _in;
}

template<typename T>
inline ostream &operator<<(ostream &_out, const vector<T> &_v) {
    if (_v.empty()) { return _out; }
    _out << _v.front();
    for (auto _it = ++_v.begin(); _it != _v.end(); ++_it) { _out << ' ' << *_it; }
    return _out;
}

template<typename T>
inline istream &operator>>(istream &_in, vector<T> &_v) {
    for (auto &_i : _v) { _in >> _i; }
    return _in;
}

const int MAXN = 1e5;
const int INF = 1e9;
const int MOD = 1e9 + 7;

class ERasshifruiStroku {
public:
    void solve(std::istream &in, std::ostream &out) {
        string t;
        in >> t;
        int x = 'z' - 'a' + 1;
        string s[3];
        string ges = "";
        for (int i = 0; i < len(t); i++) {
            ges.pb(i % x + 'a');
        }
        out << "? " << ges << endl;
        in >> s[0];
        ges = "";
        for (int i = 0; i < len(t); i++) {
            ges.pb((i / x) % x + 'a');
        }
        out << "? " << ges << endl;
        in >> s[1];
        ges = "";
        for (int i = 0; i < len(t); i++) {
            ges.pb(((i / x) / x) % x + 'a');
        }
        out << "? " << ges << endl;
        in >> s[2];
        vc<char> ans(len(t));
        for (int i = 0; i < len(t); i++) {
            int pos = (((s[2][i] - 'a') * x + (s[1][i] - 'a')) * x + (s[0][i] - 'a'));
            ans[pos] = t[i];
        }
        out << "! ";
        for (auto v : ans) {
            out << v;
        }
    }
};


main() {
    ERasshifruiStroku solver;
    std::istream &in(std::cin);
    std::ostream &out(std::cout);
    solver.solve(in, out);
    return 0;
}