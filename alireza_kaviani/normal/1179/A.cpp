/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

set_random;

const ll MAXN = 1e6 + 10;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

deque<ll> q;
ll n , m , x , mx = -INF , ind = 1 , p[MAXN];
pll ans[MAXN];

int main() {
    fast_io;

    cin >> n >> m;
    for(ll i = 1 ; i <= n ; i++){
        cin >> p[i];
        q.push_back(p[i]);
        mx = max(mx , p[i]);
    }

    while(q.front() != mx){
        ll A = q.front(); q.pop_front();
        ll B = q.front(); q.pop_front();
        q.push_front(max(A , B));
        q.push_back(min(A , B));
        ans[ind++] = {A , B};
    }

    while(m--){
        cin >> x;
        if(x < ind){
            cout << ans[x].X << sep << ans[x].Y << endl;
        }
        else{
            cout << mx << sep << q[(x - ind) % (n - 1) + 1] << endl;
        }
    }

    return 0;
}
/*

*/