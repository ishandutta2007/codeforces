/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e5 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n , m , mark[MAXN] , M[MAXN];
vector<ll> prime[MAXN];

int main() {
    ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
    fill(M , M + MAXN , -1);

    for(ll i = 2 ; i < MAXN ; i++){
        if(SZ(prime[i]) == 0){
            for(ll j = i ; j < MAXN ; j += i){
                prime[j].push_back(i);
            }
        }
    }

    cin >> n >> m;
    while(m--){
        string s;
        ll x;
        cin >> s >> x;
        if(s == "-"){
            if(!mark[x]){
                cout << "Already off" << endl;
            }
            else{
                cout << "Success" << endl;
                mark[x] = 0;
                for(ll i : prime[x])    M[i] = -1;
            }
        }
        else{
            if(mark[x]){
                cout << "Already on" << endl;
            }
            else{
                ll mx = -1;
                for(ll i : prime[x])    mx = max(mx , M[i]);
                if(mx == -1){
                    cout << "Success" << endl;
                    mark[x] = 1;
                    for(ll i : prime[x])    M[i] = x;
                }
                else{
                    cout << "Conflict with " << mx << endl;
                }
            }
        }
    }

    return 0;
}
/*

*/