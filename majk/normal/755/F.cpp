/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Majk
 */

#include <vector>
#include <iostream>
#include <unordered_map>
#include <map>
#include <iomanip>
#include <set>
#include <functional>
#include <fstream>
#include <algorithm>
#include <cassert>
#include <cmath>
#include <string>
#include <sstream>
#include <queue>
using namespace std;

#define x first
#define y second
constexpr int MOD = 1000000007;

typedef std::pair<int,int> pii;
typedef long long ll;
typedef unsigned int ui;

template<typename T>std::istream&operator>>(std::istream&i,vector<T>&t) {for(auto&v:t){i>>v;}return i;}
template<typename T>std::ostream&operator<<(std::ostream&o,const vector<T>&t) {for(size_t i=0;i<t.size();++i){o<<t[i]<<" \n"[i == t.size()-1];}return o;}

namespace std {
    template<typename T,typename U>struct hash<pair<T,U>>{hash<T>t;hash<U>u;size_t operator()(const pair<T,U>&p)const{return t(p.x)^(u(p.y)<<7);}};
}
template<typename T,typename F>T bsh(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){l=m+1;r=m;}else{h=m-1;}}return r;}
template<typename T,typename F>T bsl(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){h=m-1;r=m;}else{l=m+1;}}return r;}
template<typename T> T gcd(T a,T b) { if (a<b) swap(a,b); return b?gcd(b,a%b):a; }

// #include "../l/mod.h"

class TaskF {
public:
	void solve(istream& cin, ostream& cout) {
		int N, K; cin >> N >> K;
		if (K == 0) { cout << "0 0\n"; return; }
		if (K == N) { cout << N << ' ' << N << "\n"; return; }

		vector<int> X(N); cin >> X;
		vector<int> L; L.reserve(N);
		for (int i = 0; i < N; ++i) {
			if (X[i] != 0) {
				int j = i;
				int l = 0;
				while (X[j] != 0) {
					int k = X[j]-1;
					X[j] = 0;
					j = k;
					++l;
				}
				L.push_back(l);
			}
		}

		sort(L.begin(), L.end());
		int MIN = K+1, MAX = K;
		int kleft = K;
		for (int i = 0; i < L.size(); ++i) {
			int amount = min(kleft, L[i] / 2);
			kleft -= amount;
			MAX += amount;
		}
		MAX = min(MAX, N);

		K = min(K, N-K);

		vector<int> B(K+1, MOD);
		B[0] = 0;
		for (int i = 0; i < L.size() && L[i] <= K; ) {
			int c = 1; while (i+c < L.size() && L[i] == L[i+c]) ++c;
			for (int j = L[i]; j <= K; ++j) {
				B[j] = min(B[j-L[i]]+1, B[j]);
			}

			if (B[K] <= c) { --MIN; break; }

			for (int j = L[i]; j < K; ++j) {
				B[j] = B[j] <= c ? 0 : MOD;
			}

			i += c;
		}

		cout << MIN << ' ' << MAX << endl;
	}
};


int main() {
	ios_base::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr);
	TaskF solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}