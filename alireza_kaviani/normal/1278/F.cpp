/* Generated by powerful Codeforces Tool
 * You can download the binary file in here https://github.com/xalanq/cf-tool (Windows, macOS, Linux)
 * Author: alireza_kaviani
 * Time: 2020-04-19 18:50:31
**/
#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 5e3 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 998244353; // 1e9 + 9;

ll n , m , k , ans , fact[MAXN] , inv[MAXN] , C[MAXN] , pw[MAXN];

ll c(int r , int n){
    if(r > n || r < 0 || n < 0) return 0;
    return fact[n] * inv[r] % MOD * inv[n - r] % MOD;
}

int main() {
    ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
    
    fact[0] = inv[0] = 1;
    for(int i = 1 ; i < MAXN ; i++) fact[i] = fact[i - 1] * i % MOD , inv[i] = poww(fact[i] , MOD - 2 , MOD);

    cin >> n >> m >> k;
    C[0] = 1;
    for(int i = 1 ; i < MAXN ; i++) C[i] = C[i - 1] * (n - i + 1) % MOD * poww(i , MOD - 2 , MOD) % MOD;
    for(int i = 0 ; i < MAXN ; i++) pw[i] = poww(i , k , MOD);
    //for(int i = 0 ; i < 10 ; i++)   cout << C[i] << endl;
    for(int i = 1 ; i <= min(n , k) ; i++){
        ll cur = 0;
        for(int j = i ; j >= 1 ; j--){
            if(j % 2 == i % 2)  cur += c(j , i) * pw[j] % MOD;
            else    cur -= c(j , i) * pw[j] % MOD;
        }
        cur = (cur % MOD + MOD) % MOD;
        //if(k <= 10) cout << i << sep << C[i] << sep << cur << endl;
        ans = (ans + cur * C[i] % MOD * poww(m , n - i , MOD)) % MOD;
        //if(k <= 10) cout << ans << endl;
    }
    //cout << ans << sep << poww(m , MOD - 2 , MOD) << endl;
    cout << ans * poww(poww(m , n , MOD) , MOD - 2 , MOD) % MOD << endl;

    return 0;
}
/*

*/