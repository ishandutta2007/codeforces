/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n, dist[MAXN], par[MAXN], leafDist[MAXN], bad[MAXN];
vector<ll> adj[MAXN];

void DFS(ll v, ll p = -1, ll d = 0) {
    ll leaf = 1;
    dist[v] = d;
    par[v] = p;
    for (ll u : adj[v]) {
        if (u != p) {
            DFS(u, v, d + 1);
            leaf = 0;
            leafDist[v] = leafDist[u] + 1;
        }
    }
    if (leaf) {
        leafDist[v] = 0;
        return;
    }
    for (ll u : adj[v]) {
        if (u != p) {
            if (leafDist[u] + 1 != leafDist[v]) bad[v] = 1;
        }
    }
}

ll center() {
    DFS(1);
    ll v = max_element(dist, dist + MAXN) - dist;
    DFS(v);
    v = max_element(dist, dist + MAXN) - dist;

    ll d = dist[v] / 2;
    for (ll i = 0; i < d; i++) v = par[v];
    return v;
}

int main() {
    fast_io;

    cin >> n;
    for (ll i = 1; i < n; i++) {
        ll v, u;
        cin >> v >> u;
        adj[v].push_back(u);
        adj[u].push_back(v);
    }

    ll cent = center();
    fill(bad, bad + MAXN, 0);
    DFS(cent);
    set<ll> st;
    for (ll i = 1; i <= n; i++) {
        if (adj[i].size() == 1) st.insert(dist[i]);
    }
    bad[cent] = 0;
    if (st.size() > 2) return cout << -1 << endl, 0;
    if (*max_element(bad, bad + MAXN)) return cout << -1 << endl, 0;

    ll ans = 0;
    for (auto &i : st) ans += i;
    while (ans % 2 == 0) ans /= 2;
    cout << ans << endl;

    return 0;
}
/*

*/