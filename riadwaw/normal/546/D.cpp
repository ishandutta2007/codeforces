/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author RiaD
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <bits/stdc++.h>

using namespace std;

class TaskD {
	vector<long long> cnts;
	vector<int> lp;
	vector<long long> prsum;
public:
	TaskD() {
		int sz = 5000000;
		lp.resize(sz + 1);
		vector<int> pr;

		for (int i = 2; i <= sz; ++i) {
			if (lp[i] == 0) {
				lp[i] = i;
				pr.push_back (i);
			}
			for (int j=0; j<(int)pr.size() && pr[j]<=lp[i] && i*pr[j]<= sz; ++j)
				lp[i * pr[j]] = pr[j];
		}

		cnts.resize(sz + 1);

		for (int i = 2; i <= sz; ++i) {
			cnts[i] = 1 + cnts[i / lp[i]];
		}
		prsum.resize(sz + 1);
		std::partial_sum(cnts.begin(), cnts.end(), prsum.begin());
	}
	void solve(std::istream& in, std::ostream& out) {
		int a, b;
		in >> a >> b;
		out << prsum[a] - prsum[b] << '\n';
	}
};


int main() {
	std::cin.sync_with_stdio(false);
	std::cin.tie(0);
	std::cout << std::fixed;
	std::cout.precision(20);
	TaskD solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	int n;
in >> n;
for(int i = 0; i < n; ++i) {
	solver.solve(in, out);
}

	return 0;
}