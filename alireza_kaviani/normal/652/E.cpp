/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

template<ll SIZE>
struct DSU {
    ll par[SIZE], sz[SIZE], val[SIZE];

    DSU() {
        fill(par, par + SIZE, -1);
        fill(sz, sz + SIZE, 1);
        fill(val, val + SIZE, 0);
    }

    ll Find(ll v) {
        return (par[v] == -1 ? v : par[v] = Find(par[v]));
    }

    ll Union(ll v, ll u, ll w) {
        ll pv = Find(v), pu = Find(u);
        if (pv == pu) {
            val[pv] |= w;
            return 0;
        }
        if (sz[pv] < sz[pu]) swap(pv, pu); // union by rank
        par[pu] = pv;
        sz[pv] += sz[pu];
        val[pv] |= val[pu];
        val[pv] |= w;
        return 1;
    }

    ll getSize(ll v) {
        return sz[Find(v)];
    }
};

ll n, m, H[MAXN], mark[MAXN], mn[MAXN], val[MAXN], dist[MAXN];
vector<pll> adj[MAXN], g[MAXN];
vector<pair<pll, ll> > E;
DSU<MAXN> dsu;

void DFS(ll v, ll p = 0) {
    mark[v] = 1;
    H[v] = H[p] + 1;
    for (pll i : adj[v]) {
        ll u = i.X, w = i.Y;
        if (!mark[u]) {
            DFS(u, v);
            if (mn[u] <= H[v]) dsu.Union(v, u, w);
            else E.push_back({{v, u}, w});
            mn[v] = min(mn[v], mn[u]);
        } else if (u != p) mn[v] = min(mn[v], H[u]), dsu.Union(v, u, w);
    }
}

void DFS2(ll v, ll V, ll p = -1) {
    dist[v] = V;
    for (pll i : g[v]) {
        ll u = i.X, w = i.Y;
        if (u == p) continue;
        DFS2(u, V | val[u] | w, v);
    }
}

int main() {
    fast_io;
    fill(mn, mn + MAXN, INF);

    cin >> n >> m;
    for (ll i = 0; i < m; i++) {
        ll v, u, w;
        cin >> v >> u >> w;
        adj[v].push_back({u, w});
        adj[u].push_back({v, w});
    }

    DFS(1);
    for (pair<pll, ll> i : E) {
        ll v = i.X.X, u = i.X.Y, w = i.Y;
        v = dsu.Find(v);
        u = dsu.Find(u);
        g[v].push_back({u, w});
        g[u].push_back({v, w});
    }
    for (ll i = 1; i <= n; i++) val[i] = dsu.val[i];

    ll v, u;
    cin >> v >> u;
    DFS2(dsu.Find(v), val[dsu.Find(v)]);
    if (dist[dsu.Find(u)]) cout << "YES" << endl;
    else cout << "NO" << endl;

    return 0;
}
/*

*/