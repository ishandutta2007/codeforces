import java.util.ArrayList;
import java.util.InputMismatchException;
import java.math.BigInteger;
import java.io.*;
import java.util.List;

/**
 * Generated by Contest helper plug-in
 * Actual solution is at the bottom
 */
public class Main {
	public static void main(String[] args) {
		InputReader in;
		PrintWriter out;
		try {
			in = new StreamInputReader(new FileInputStream("input.txt"));
			out = new PrintWriter(new PrintStream(new FileOutputStream("output.txt")));
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
		run(in, out);
	}

	public static void run(InputReader in, PrintWriter out) {
		Solver solver = new TaskG();
		solver.solve(1, in, out);
		Exit.exit(in, out);
	}
}

abstract class InputReader {
	private boolean finished = false;

	public abstract int read();

	public int readInt() {
		int c = read();
		while (isSpaceChar(c))
			c = read();
		int sgn = 1;
		if (c == '-') {
			sgn = -1;
			c = read();
		}
		int res = 0;
		do {
			if (c < '0' || c > '9')
				throw new InputMismatchException();
			res *= 10;
			res += c - '0';
			c = read();
		} while (!isSpaceChar(c));
		return res * sgn;
	}

	public String readString() {
		int c = read();
		while (isSpaceChar(c))
			c = read();
		StringBuffer res = new StringBuffer();
		do {
			res.appendCodePoint(c);
			c = read();
		} while (!isSpaceChar(c));
		return res.toString();
	}

	private boolean isSpaceChar(int c) {
		return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
	}

	public void setFinished(boolean finished) {
		this.finished = finished;
	}

	public abstract void close();
}

class StreamInputReader extends InputReader {
	private InputStream stream;
	private byte[] buf = new byte[1024];
	private int curChar, numChars;

	public StreamInputReader(InputStream stream) {
		this.stream = stream;
	}

	public int read() {
		if (numChars == -1)
			throw new InputMismatchException();
		if (curChar >= numChars) {
			curChar = 0;
			try {
				numChars = stream.read(buf);
			} catch (IOException e) {
				throw new InputMismatchException();
			}
			if (numChars <= 0)
				return -1;
		}
		return buf[curChar++];
	}

	public void close() {
		try {
			stream.close();
		} catch (IOException ignored) {
		}
	}
}

class Exit {
	private Exit() {
	}

	public static void exit(InputReader in, PrintWriter out) {
		in.setFinished(true);
		in.close();
		out.close();
	}
}

interface Solver {
	public void solve(int testNumber, InputReader in, PrintWriter out);
}

class TaskG implements Solver {
	public void solve(int testNumber, InputReader in, PrintWriter out) {
		int count = in.readInt();
		int length = in.readInt();
		int[] skill = new int[2 * count];
		for (int i = 0; i < count; i++) {
			int firstExplanation = in.readInt();
			int firstUnderstanding = in.readInt();
			int secondExplanation = in.readInt();
			int secondUnderstanding = in.readInt();
			skill[i] = firstExplanation + secondUnderstanding;
			skill[i + count] = firstUnderstanding + secondExplanation;
		}
		int cardCount = in.readInt();
		String[] word = new String[cardCount];
		int[] hardness = new int[cardCount];
		for (int i = 0; i < cardCount; i++) {
			word[i] = in.readString();
			hardness[i] = in.readInt();
		}
		@SuppressWarnings({"unchecked"})
		List<String>[] points = new List[count];
		for (int i = 0; i < count; i++)
			points[i] = new ArrayList<String>();
		boolean[] explained = new boolean[cardCount];
		int[][] timeSpent = new int[count][cardCount];
		int cardIndex = 0;
		int notExplained = cardCount;
		for (int i = 0; notExplained != 0; i++) {
			int teamIndex = i % count;
			int playerIndex = i % (2 * count);
			int time = length;
			while (time != 0 && notExplained != 0) {
				while (explained[cardIndex]) {
					if (++cardIndex == cardCount)
						cardIndex = 0;
				}
				int timeRequired = Math.max(1, hardness[cardIndex] - skill[playerIndex] -
					timeSpent[teamIndex][cardIndex]);
				if (timeRequired > time) {
					timeSpent[teamIndex][cardIndex] += time;
					time = 0;
				} else {
					points[teamIndex].add(word[cardIndex]);
					explained[cardIndex] = true;
					time -= timeRequired;
					notExplained--;
				}
				cardIndex++;
				if (cardIndex == cardCount)
					cardIndex = 0;
			}
		}
		for (List<String> team : points) {
			out.print(team.size());
			for (String s : team)
				out.print(" " + s);
			out.println();
		}
	}
}