/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <algorithm>
#include <array>
#include <bitset>
#include <cassert>
#include <climits>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <functional>
#include <iostream>
#include <map>
#include <memory>
#include <numeric>
#include <queue>
#include <random>
#include <set>
#include <stack>
#include <string>
#include <unordered_set>
#include <unordered_map>
#include <vector>

#define pb push_back
#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()
#define mp make_pair

using namespace std;

typedef long long int64;
typedef vector<int> vi;
typedef pair<int, int> ii;

class TaskD {
 public:
  vector<int> transform(vector<int> c, vector<int> d) {
    int pos = c.size();
    vector<int> r;
    reverse(all(d));
    for (int x : d) {
      for (int i = pos - x; i < pos; ++i) {
        r.push_back(c[i]);
      }
      pos -= x;
    }
    return r;
  }

  void solveOne(istream &in, ostream &out) {
    int n;
    in >> n;
    vector<int> c(n);
    for (int i = 0; i < n; ++i) {
      in >> c[i];
      --c[i];
    }
    vector<vector<int>> res;
    for (int v = 0; v < n; ++v) {
      int at = -1;
      for (int i = 0; i < n; ++i) if (c[i] == v) {
        at = i;
        break;
      }
      assert(at >= 0);
      if (v % 2 == 0) {
        res.emplace_back();
        if (at > 0) res.back().push_back(at);
        res.back().push_back(n - at - v);
        for (int i = 0; i < v; ++i) {
          res.back().push_back(1);
        }
        if (res.back().size() <= 1) {
          res.pop_back();
        } else {
          c = transform(c, res.back());
        }
      } else {
        if (v + 1 == n) {
          assert(at == n - 1);
        } else {
          res.emplace_back();
          for (int i = 0; i < v; ++i) {
            res.back().push_back(1);
          }
          res.back().push_back(at + 1 - v);
          if (at + 1 < n) {
            res.back().push_back(n - at - 1);
          }
          if (res.back().size() <= 1) {
            res.pop_back();
          } else {
            c = transform(c, res.back());
          }
        }
      }
    }
    for (int i = 0; i < n; ++i) assert(c[i] == i);
    out << res.size() << "\n";
    for (auto v : res) {
      out << v.size();
      for (auto x : v) {
        out << " " << x;
      }
      out << "\n";
    }
  }

  void solve(std::istream &in, std::ostream &out) {
    int nt = 1;
    for (int it = 0; it < nt; ++it) {
      solveOne(in, out);
    }
  }
};


int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  TaskD solver;
  std::istream& in(std::cin);
  std::ostream& out(std::cout);
  solver.solve(in, out);
  return 0;
}