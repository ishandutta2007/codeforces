/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Parsa Bahrami
 */

#pragma GCC optimize("O2")

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

typedef long long int ll;
typedef long double ld;
typedef pair<ll, ll> pll;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

#define sz(x)                       (ll) x.size()
#define all(x)                      (x).begin(),(x).end()
#define F                           first
#define S                           second

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll INF = 8e18;
const ll MOD = 1e9 + 7;
ll k, n, ans = 0;
string s;

int main() {
    cin >> s;
    scanf("%lld", &k);
    for (ll i = 0; i < k; i++) {
        string x;
        ll cnt1 = 0, cnt2 = 0;
        cin >> x;
        for (char c : s) {
            if (c == x[0]) cnt1++;
            else if (c == x[1]) cnt2++;
            else {
                ans += min(cnt1, cnt2), cnt1 = 0, cnt2 = 0;
            }
        }
        ans += min(cnt1, cnt2);
    }
    printf("%lld\n", ans);
    return 0;
}