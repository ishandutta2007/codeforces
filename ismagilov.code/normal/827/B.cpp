/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Azat Ismagilov
 */

/**********.*****.**************************:-******-:*******************
**********......:*****************+@%@*+#@@@+.****.***********************
...------........-*+*********+%#####@@@##########*************************
********:........----------%@#####################@@-...............------
**********......:********@%#####@###################@#@=+***************::
*********.:****--******%##@#####@#######################@*+***************
********.*******:-**+@@####@#@@@#################@#########=**************
*******-*********:*@@@######@###############################=*************
*****--**********%%@##@########@#############################=:***********
****.************+##################@#@@#####################@************
***.*************%######################@@###################=***********-
*-:**************=##########@@%%%%=%@=%=%=%@################@@**********.*
.****************########%++***+++****+++=+===+++***+=%@######%*******:-**
****************+#######%+*::::::::::::***********:::::**@@###%******.:***
****************#######@%*:::::::::::::::*:*****:::::::::*@@##@*****.*****
****************######@%+*:::::::-::::::::::::::::::::::::=@##%****-******
.......-------:*######=::::::----------:::::::::::::::::::+###:**--*******
............:==:%####=:::::----:-:::::::::::::::::::::::::=@##:-.:********
************=@++*%##@::::*=%%%@@###@=***::::::::::::::::::=@#@*..*********
************=**+@+@#*:::**+++%@#@###%@%%+*::*+=======*::::*##-:**.********
*************:=%%:%*::::*+=%##%###=@@@%=*::*=%@@@%%@@#@%::+#@:****.*******
:**************==:=:::--::::*++++=%@@@%*:--*%#@####@#=+***@@%@*****.******
--**************:-*::--------::**+***:::---*+%%%%%%@@%+*::#*@%******.*****
*:-************---*::::-----------::--:---::::+++++**:::::%*%********-:***
**:.************++*:::::--------::**+------::::::::::::::*++**********--**
****.**************::::::-----::**==:-------+*:::::---:::**************:-*
*****.***********.*::::::::-:::***:*+@**::**=+*::::::::::****************-
******.*:*%@######+::::::::::::::::::++++=******::::::::******************
******:############*::::::::****::::::*+*:*:*:***::::::*******************
******#############***::*:*:*+==@@##=======:*+***:::*:********************
******#############:*+**********:*++**+**++=%=***:*::*********************
.....##############::*++**************+***:*********###+******************
***:##############@*:**+=***:::**++===++***********#####%.................
*:*###############******++=+*:::::::*:::::*::***#########=****************
**:################%*****++==++********::::*+++=##########+***************
*:%##################******++++==+=++++++++++++@############**************
######################@******+++++++++++++++++=%#############*************
########################+++++++++++++++++++++==@#############@***********.
#########################%+++++++++++++++++===%###############%********:-*
########################@=#=++++++++++++====%@##################******-**/


#include <bits/stdc++.h>

#define int long long
#define fs first
#define sc second
#define pb push_back
#define ppb pop_back
#define pf push_front
#define ppf pop_front
#define mp make_pair
#define len(v) ((int)v.size())
#define vc vector
#define pr pair
#define endd "\n"; return 0;
#define all(v) v.begin(), v.end()

using namespace std;

const int MAXN = 1e5;
const int INF = 1e18;
const int MOD = 1e9 + 7;

class TaskB {
public:
    void solve(std::istream &in, std::ostream &out) {
        int n, k;
        in >> n >> k;
        int tek = n - k;
        if (tek == 1) {
            out << 2 << endl;
            for (int i = 0; i < k; i++) {
                out << 1 << ' ' << i + 2 << endl;
            }
            return;
        }
        if (tek == 2) {
            out << 3 << endl;
            out << 1 << ' ' << 2 << endl;
            for (int i = 0; i < k / 2; i++) {
                out << 1 << ' ' << i + 3 << endl;
            }
            for (int i = k / 2; i < k; i++) {
                out << 2 << ' ' << i + 3 << endl;
            }
            return;
        }
        if (tek >= 3 && k >= tek - 1) {
            out << 4 << endl;
            for (int i = 0; i < tek - 1; i++) {
                out << 1 << ' ' << i + 2 << endl;
            }
            for (int i = 0; i < tek - 1; i++) {
                out << i + 2 << ' ' << i + tek + 1 << endl;
            }
            for (int i = tek - 1; i < k; i++) {
                out << 1 << ' ' << i + tek + 1 << endl;
            }
        } else {
            int rost = (tek - 1 + k - 1) / k;
            out << 2 * rost + 1 + ((tek - 2) % k != 0) << endl;
            int preflay[k];
            int tekk = 2;
            for (int i = 0; i < k; i++) {
                out << 1 << ' ' << tekk++ << endl;
                preflay[i] = tekk - 1;
            }
            while (tekk <= tek) {
                int d = tekk - tek;
                for (int i = 0; i < k && tekk <= tek; i++) {
                    out << preflay[i] << ' ' << tekk++ << endl;
                    preflay[i] = tekk - 1;
                }
            }
            for (int i = 0; i < k; i++) {
                out << preflay[i] << ' ' << tekk++ << endl;
            }
        }

    }
};


main() {
    TaskB solver;
    std::istream &in(std::cin);
    std::ostream &out(std::cout);
    solver.solve(in, out);
    return 0;
}