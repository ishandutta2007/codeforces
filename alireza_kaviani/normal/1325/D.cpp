/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll A , B , diff;

int main() {
    ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);

    cin >> A >> B;
    if(A % 2 != B % 2 || A > B) return cout << -1 << endl , 0;
    if(B == 0)  return cout << 0 << endl , 0;
    if(A == B)  return cout << 1 << endl << A << endl , 0;
    diff = (B - A) / 2;
    if((A & diff) == 0)   return cout << 2 << endl << A + diff << sep << diff << endl , 0;
    cout << 3 << endl << A << sep << diff << sep << diff << endl;

    return 0;
}
/*

*/