/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;
typedef pair<ld, ld> pld;
typedef pair<string, string> pss;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define file_io                     freopen("in.txt" , "r" , stdin) ; freopen("out.txt" , "w" , stdout);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

inline ll input() {
    ll n;
    cin >> n;
    return n;
}

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

set_random;

const ll MAXN = 1e6 + 10;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n , m , Scnt[26][MAXN] , Tcnt[26];
string s , t;

ll check(ll ind){
    for(ll i = 0 ; i < 26 ; i++){
        if(Tcnt[i] > Scnt[i][ind])  return 0;
    }
    return 1;
}

int main() {
    fast_io;

    cin >> n >> s >> m;
    for(ll i = 0 ; i < n ; i++){
        Scnt[s[i] - 97][i] = 1;
    }
    for(ll i = 0 ; i < 26 ; i++)    partial_sum(Scnt[i] , Scnt[i] + MAXN , Scnt[i]);

    while(m--){
        fill(Tcnt , Tcnt + 26 , 0);
        cin >> t;
        for(ll i = 0 ; i < t.size() ; i++)  Tcnt[t[i] - 97]++;

        ll l = -1 , r = n + 1;
        while(r - l > 1){
            ll mid = (l + r) >> 1;
            if(check(mid))  r = mid;
            else    l = mid;
        }
        cout << r + 1 << endl;
    }

    return 0;
}
/*

*/