/* Generated by powerful Codeforces Tool
 * Author: calabash_boy_love_15 
 * Time: 2019-10-10 11:49:59
 * Personal Code Template: https://github.com/4thcalabash/ACM-Code-Library
**/
#pragma GCC optimize(3)
#include <bits/stdc++.h>
using namespace std;
#ifdef __LOCAL_DEBUG__
# define _debug(fmt, ...) fprintf(stderr, "\033[91m[%s %3d]: " fmt "\n\033[0m", \
  __func__,__LINE__, ##__VA_ARGS__)
#else
# define _debug(...) (void(0))
#endif
#define PB(x) push_back(x)
#define rep(i,l,r) for (int i = l,_ = r;i< _;i++)
#define REP(i,l,r) for (int i=l,_=r;i<=_;i++)
#define leave(x) do {cout<<#x<<endl;fflush(stdout);return 0;}while (0);
#define untie do{ios::sync_with_stdio(false);cin.tie(nullptr);cout.tie(nullptr);}while (0)
#define range(x) x.begin(),x.end()
typedef long long LL;
typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef long double db;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;
const int inf = 0x3f3f3f3f;
const ll inf_ll = 0x3f3f3f3f3f3f3f3fLL;
/************* header ******************/

const int maxn = 1e5+100;
int first[maxn],nxt[maxn*2],from[maxn*2],des[maxn*2],isBrige[maxn*2],tot;
int dfn[maxn],low[maxn],dfs_clock;
inline void addEdge(int x,int y){
    tot++;
    des[tot] =y;from[tot] =x;
    nxt[tot] = first[x];first[x] = tot;
}
void dfs(int u,int fa){
    dfn[u] = low[u] = ++dfs_clock;
    for (int t = first[u];t;t=nxt[t]){
        int v = des[t];if (v==fa)continue;
        if (!dfn[v]){
            dfs(v,u);
            low[u] = min(low[v],low[u]);
            if (dfn[u]<low[v]){
                isBrige[t] = true;
                if (t&1){isBrige[t+1] = true;}
                else{isBrige[t-1] = true;}
            }
        }else if (dfn[v]<dfn[u]){low[u] = min(low[u],dfn[v]);}
    }
}
vector<int> E[maxn];
int ID[maxn];
int cnt[maxn];
void flood_fill(int u,int id){
    ID[u] = id;
    cnt[id] ++;
    dfn[u] = 1;
    for (int t = first[u];t;t=nxt[t]){
        if (isBrige[t])continue;
        int v = des[t];
        if (dfn[v])continue;
        flood_fill(v,id);
    }
}
int dis[maxn];
void dfs(int x){
    for (int v : E[x]){
        if (dis[v] == INT_MAX){
            dis[v] = dis[x] + 1;
            dfs(v);
        }
    }
}
int work(const vector<int> &nodes){
    int ans = 0;
    for (int x : nodes){
        if (!dfn[x])dfs(x,-1);
    }
    for (int x : nodes)dfn[x] = 0;
    int id = 0;
    for (int x : nodes){
        if (!dfn[x]){
            id ++;
            cnt[id] = 0;
            flood_fill(x,id);
//            for (int u : nodes){
//                if (ID[u] == id)
//                cerr<<u<<" ";
//            }
//            cerr<<"---"<<endl;
            ans += cnt[id] - 1;
        }
    }
    for (int i=1;i<=id;i++)E[i].clear();
    for (int x : nodes){
        for (int t = first[x];t;t=nxt[t]){
            int v = des[t];
            if (isBrige[t]){
                E[ID[x]].push_back(ID[v]);
            }
        }
    }
    int leaf = 0;
    for (int i=1;i<=id;i++)leaf += E[i].size() == 1;
    for (int i=1;i<=id;i++)dis[i] = INT_MAX;
    dis[1] = 0;
    dfs(1);
    int st = 1;
    for (int i=1;i<=id;i++){
        if (dis[i] > dis[st])st = i;
    }
    for (int i=1;i<=id;i++)dis[i] = INT_MAX;
    dis[st] = 0;
    dfs(st);
    int ed = 0;
    for (int i=1;i<=id;i++){
        if (dis[i] > dis[ed])ed = i;
    }
    int radius = dis[ed] + 1;
    if (id == 1) radius += 2;
    return ans + id - (radius - 2 + leaf);
}
bool used[maxn];
void dfs(int u,vector<int> & res){
    used[u] = 1;
    res.push_back(u);
    for(int t = first[u];t;t=nxt[t]){
        int v = des[t];
        if (used[v])continue;
        dfs(v,res);
    }
}
int n,m;
int main(){
    cin>>n>>m;
    for (int i=0;i<m;i++){
        int u,v;
        cin>>u>>v;
        addEdge(u,v);
        addEdge(v,u);
    }
    int comp = 0;
    int ans = 0;
    for (int i=1;i<=n;i++){
        if (!used[i]){
            vector<int> nodes(0);
            comp ++;
            dfs(i,nodes);
            ans += work(nodes);
        }
    }
    ans += comp - 1;
    cout<<ans<<endl;
    return 0;
}