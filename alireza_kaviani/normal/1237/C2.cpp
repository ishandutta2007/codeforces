/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n, A[MAXN][3], mark[MAXN];
pair<ll, pll> p[MAXN];
set<pair<ll, pll>> st;
map<ll, set<pair<ll, pll>>> mp;
map<pll, set<pair<ll, pll>>> mp2;
map<pair<ll, pll>, ll> ind;

int main() {
    fast_io;

    cin >> n;
    for (ll i = 1; i <= n; i++) {
        cin >> A[i][0] >> A[i][1] >> A[i][2];
        p[i] = {A[i][0], {A[i][1], A[i][2]}};
        ind[p[i]] = i;
        st.insert(p[i]);
        mp[A[i][0]].insert(p[i]);
        mp2[{A[i][0], A[i][1]}].insert(p[i]);
    }

    for (ll i = 1; i <= n; i++) {
        if (mark[i]) continue;
        mark[i] = 1;
        st.erase(p[i]);
        mp[A[i][0]].erase(p[i]);
        mp2[{A[i][0], A[i][1]}].erase(p[i]);

        auto it = st.lower_bound({A[i][0], {-INF, -INF}});
        if (it == st.end()) it = prev(it);
        ll x = (*it).X;
        auto it2 = mp[x].lower_bound({x, {A[i][1], -INF}});
        if (it2 == mp[x].end()) it2 = prev(it2);
        ll y = (*it2).Y.X;
        auto it3 = mp2[{x, y}].lower_bound({x, {y, A[i][2]}});
        if (it3 == mp2[{x, y}].end()) it3 = prev(it3);
        pair<ll, pll> z = *it3;

        mark[ind[z]] = 1;
        st.erase(p[ind[z]]);
        mp[A[ind[z]][0]].erase(p[ind[z]]);
        mp2[{A[ind[z]][0], A[ind[z]][1]}].erase(p[ind[z]]);
        cout << i << sep << ind[z] << endl;
    }

    return 0;
}
/*

*/