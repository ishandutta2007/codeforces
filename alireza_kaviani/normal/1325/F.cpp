/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n , m , SQ , mark[MAXN] , H[MAXN] , used[MAXN] , par[MAXN];
vector<ll> adj[MAXN] , ans;

void print(ll v , ll u){
    cout << 2 << endl;
    cout << H[v] - H[u] + 1 << endl;
    while(u != v){
        cout << v << sep;
        v = par[v];
    }
    cout << u << endl;
    exit(0);
}

void DFS(ll v , ll p = 0){
    mark[v] = 1;
    H[v] = H[p] + 1;
    par[v] = p;
    for(ll u : adj[v]){
        if(!mark[u]){
            DFS(u , v);
        }
        else{
            if(H[u] > H[v]) continue;
            if(H[v] - H[u] + 1 >= SQ)   print(v , u);
        }
    }
    if(!used[v]){
        ans.push_back(v);
        for(ll u : adj[v])  used[u] = 1;
    }
}

int main() {
    ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);

    cin >> n >> m;
    while(SQ * SQ < n)  SQ++;
    for(ll i = 0 ; i < m ; i++){
        ll v , u;
        cin >> v >> u;
        adj[v].push_back(u);
        adj[u].push_back(v);
    }
    DFS(1);

    cout << 1 << endl;
    for(ll i = 0 ; i < SQ ; i++)    cout << ans[i] << sep;

    return 0;
}
/*

*/