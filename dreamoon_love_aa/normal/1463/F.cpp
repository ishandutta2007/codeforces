/*{{{*/
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<cmath>
#include<algorithm>
#include<string>
#include<iostream>
#include<sstream>
#include<set>
#include<map>
#include<queue>
#include<bitset>
#include<vector>
#include<limits.h>
#include<assert.h>
#define SZ(X) ((int)(X).size())
#define ALL(X) (X).begin(), (X).end()
#define REP(I, N) for (int I = 0; I < (N); ++I)
#define REPP(I, A, B) for (int I = (A); I < (B); ++I)
#define FOR(I, A, B) for (int I = (A); I <= (B); ++I)
#define FORS(I, S) for (int I = 0; S[I]; ++I)
#define RS(X) scanf("%s", (X))
#define SORT_UNIQUE(c) (sort(c.begin(),c.end()), c.resize(distance(c.begin(),unique(c.begin(),c.end()))))
#define GET_POS(c,x) (lower_bound(c.begin(),c.end(),x)-c.begin())
#define CASET int ___T; scanf("%d", &___T); for(int cs=1;cs<=___T;cs++)
#define MP make_pair
#define PB emplace_back
#define MS0(X) memset((X), 0, sizeof((X)))
#define MS1(X) memset((X), -1, sizeof((X)))
#define LEN(X) strlen(X)
#define F first
#define S second
using namespace std;
typedef long long LL;
typedef unsigned long long ULL;
typedef long double LD;
typedef pair<int,int> PII;
typedef vector<int> VI;
typedef vector<LL> VL;
typedef vector<PII> VPII;
typedef pair<LL,LL> PLL;
typedef vector<PLL> VPLL;
template<class T> void _R(T &x) { cin >> x; }
void _R(int &x) { scanf("%d", &x); }
void _R(int64_t &x) { scanf("%lld", &x); }
void _R(double &x) { scanf("%lf", &x); }
void _R(char &x) { scanf(" %c", &x); }
void _R(char *x) { scanf("%s", x); }
void R() {}
template<class T, class... U> void R(T &head, U &... tail) { _R(head); R(tail...); }
template<class T> void _W(const T &x) { cout << x; }
void _W(const int &x) { printf("%d", x); }
void _W(const int64_t &x) { printf("%lld", x); }
void _W(const double &x) { printf("%.16f", x); }
void _W(const char &x) { putchar(x); }
void _W(const char *x) { printf("%s", x); }
template<class T,class U> void _W(const pair<T,U> &x) {_W(x.F); putchar(' '); _W(x.S);}
template<class T> void _W(const vector<T> &x) { for (auto i = x.begin(); i != x.end(); _W(*i++)) if (i != x.cbegin()) putchar(' '); }
void W() {}
template<class T, class... U> void W(const T &head, const U &... tail) { _W(head); putchar(sizeof...(tail) ? ' ' : '\n'); W(tail...); }
#ifdef HOME
 #define DEBUG(...) {printf("[DEBUG] ");W(__VA_ARGS__);}
#else
 #define DEBUG(...)
#endif
int MOD = 1e9+7;
void ADD(LL& x,LL v){x=(x+v)%MOD;if(x<0)x+=MOD;}
/*}}}*/
const int SIZE = 1<<22;
const int BB = 440;
int an_21_19[701];
int an[BB*2+1];
short dp[2][SIZE];
int AA;
void init() {
an_21_19[1]=1;
an_21_19[2]=2;
an_21_19[3]=3;
an_21_19[4]=4;
an_21_19[5]=5;
an_21_19[6]=6;
an_21_19[7]=7;
an_21_19[8]=8;
an_21_19[9]=9;
an_21_19[10]=10;
an_21_19[11]=11;
an_21_19[12]=12;
an_21_19[13]=13;
an_21_19[14]=14;
an_21_19[15]=15;
an_21_19[16]=16;
an_21_19[17]=17;
an_21_19[18]=18;
an_21_19[19]=19;
an_21_19[20]=19;
an_21_19[21]=19;
an_21_19[22]=19;
an_21_19[23]=19;
an_21_19[24]=19;
an_21_19[25]=19;
an_21_19[26]=19;
an_21_19[27]=19;
an_21_19[28]=19;
an_21_19[29]=19;
an_21_19[30]=19;
an_21_19[31]=19;
an_21_19[32]=19;
an_21_19[33]=19;
an_21_19[34]=19;
an_21_19[35]=19;
an_21_19[36]=19;
an_21_19[37]=19;
an_21_19[38]=19;
an_21_19[39]=20;
an_21_19[40]=20;
an_21_19[41]=21;
an_21_19[42]=21;
an_21_19[43]=22;
an_21_19[44]=23;
an_21_19[45]=24;
an_21_19[46]=25;
an_21_19[47]=26;
an_21_19[48]=27;
an_21_19[49]=28;
an_21_19[50]=29;
an_21_19[51]=30;
an_21_19[52]=31;
an_21_19[53]=32;
an_21_19[54]=33;
an_21_19[55]=34;
an_21_19[56]=35;
an_21_19[57]=36;
an_21_19[58]=37;
an_21_19[59]=38;
an_21_19[60]=38;
an_21_19[61]=38;
an_21_19[62]=38;
an_21_19[63]=38;
an_21_19[64]=38;
an_21_19[65]=38;
an_21_19[66]=38;
an_21_19[67]=38;
an_21_19[68]=38;
an_21_19[69]=38;
an_21_19[70]=38;
an_21_19[71]=38;
an_21_19[72]=38;
an_21_19[73]=38;
an_21_19[74]=38;
an_21_19[75]=38;
an_21_19[76]=38;
an_21_19[77]=39;
an_21_19[78]=39;
an_21_19[79]=40;
an_21_19[80]=40;
an_21_19[81]=41;
an_21_19[82]=41;
an_21_19[83]=42;
an_21_19[84]=42;
an_21_19[85]=43;
an_21_19[86]=44;
an_21_19[87]=45;
an_21_19[88]=46;
an_21_19[89]=47;
an_21_19[90]=48;
an_21_19[91]=49;
an_21_19[92]=50;
an_21_19[93]=51;
an_21_19[94]=52;
an_21_19[95]=53;
an_21_19[96]=54;
an_21_19[97]=55;
an_21_19[98]=56;
an_21_19[99]=57;
an_21_19[100]=57;
an_21_19[101]=57;
an_21_19[102]=57;
an_21_19[103]=57;
an_21_19[104]=57;
an_21_19[105]=57;
an_21_19[106]=57;
an_21_19[107]=57;
an_21_19[108]=57;
an_21_19[109]=57;
an_21_19[110]=57;
an_21_19[111]=57;
an_21_19[112]=57;
an_21_19[113]=57;
an_21_19[114]=57;
an_21_19[115]=58;
an_21_19[116]=58;
an_21_19[117]=59;
an_21_19[118]=59;
an_21_19[119]=60;
an_21_19[120]=60;
an_21_19[121]=61;
an_21_19[122]=61;
an_21_19[123]=62;
an_21_19[124]=62;
an_21_19[125]=63;
an_21_19[126]=63;
an_21_19[127]=64;
an_21_19[128]=65;
an_21_19[129]=66;
an_21_19[130]=67;
an_21_19[131]=68;
an_21_19[132]=69;
an_21_19[133]=70;
an_21_19[134]=71;
an_21_19[135]=72;
an_21_19[136]=73;
an_21_19[137]=74;
an_21_19[138]=75;
an_21_19[139]=76;
an_21_19[140]=76;
an_21_19[141]=76;
an_21_19[142]=76;
an_21_19[143]=76;
an_21_19[144]=76;
an_21_19[145]=76;
an_21_19[146]=76;
an_21_19[147]=76;
an_21_19[148]=76;
an_21_19[149]=76;
an_21_19[150]=76;
an_21_19[151]=76;
an_21_19[152]=76;
an_21_19[153]=77;
an_21_19[154]=77;
an_21_19[155]=78;
an_21_19[156]=78;
an_21_19[157]=79;
an_21_19[158]=79;
an_21_19[159]=80;
an_21_19[160]=80;
an_21_19[161]=81;
an_21_19[162]=81;
an_21_19[163]=82;
an_21_19[164]=82;
an_21_19[165]=83;
an_21_19[166]=83;
an_21_19[167]=84;
an_21_19[168]=84;
an_21_19[169]=85;
an_21_19[170]=86;
an_21_19[171]=87;
an_21_19[172]=88;
an_21_19[173]=89;
an_21_19[174]=90;
an_21_19[175]=91;
an_21_19[176]=92;
an_21_19[177]=93;
an_21_19[178]=94;
an_21_19[179]=95;
an_21_19[180]=95;
an_21_19[181]=95;
an_21_19[182]=95;
an_21_19[183]=95;
an_21_19[184]=95;
an_21_19[185]=95;
an_21_19[186]=95;
an_21_19[187]=95;
an_21_19[188]=95;
an_21_19[189]=95;
an_21_19[190]=95;
an_21_19[191]=96;
an_21_19[192]=96;
an_21_19[193]=97;
an_21_19[194]=97;
an_21_19[195]=98;
an_21_19[196]=98;
an_21_19[197]=99;
an_21_19[198]=99;
an_21_19[199]=100;
an_21_19[200]=100;
an_21_19[201]=101;
an_21_19[202]=101;
an_21_19[203]=102;
an_21_19[204]=102;
an_21_19[205]=103;
an_21_19[206]=103;
an_21_19[207]=104;
an_21_19[208]=104;
an_21_19[209]=105;
an_21_19[210]=105;
an_21_19[211]=106;
an_21_19[212]=107;
an_21_19[213]=108;
an_21_19[214]=109;
an_21_19[215]=110;
an_21_19[216]=111;
an_21_19[217]=112;
an_21_19[218]=113;
an_21_19[219]=114;
an_21_19[220]=114;
an_21_19[221]=114;
an_21_19[222]=114;
an_21_19[223]=114;
an_21_19[224]=114;
an_21_19[225]=114;
an_21_19[226]=114;
an_21_19[227]=114;
an_21_19[228]=114;
an_21_19[229]=115;
an_21_19[230]=115;
an_21_19[231]=116;
an_21_19[232]=116;
an_21_19[233]=117;
an_21_19[234]=117;
an_21_19[235]=118;
an_21_19[236]=118;
an_21_19[237]=119;
an_21_19[238]=119;
an_21_19[239]=120;
an_21_19[240]=120;
an_21_19[241]=121;
an_21_19[242]=121;
an_21_19[243]=122;
an_21_19[244]=122;
an_21_19[245]=123;
an_21_19[246]=123;
an_21_19[247]=124;
an_21_19[248]=124;
an_21_19[249]=125;
an_21_19[250]=125;
an_21_19[251]=126;
an_21_19[252]=126;
an_21_19[253]=127;
an_21_19[254]=128;
an_21_19[255]=129;
an_21_19[256]=130;
an_21_19[257]=131;
an_21_19[258]=132;
an_21_19[259]=133;
an_21_19[260]=133;
an_21_19[261]=133;
an_21_19[262]=133;
an_21_19[263]=133;
an_21_19[264]=133;
an_21_19[265]=133;
an_21_19[266]=133;
an_21_19[267]=134;
an_21_19[268]=134;
an_21_19[269]=135;
an_21_19[270]=135;
an_21_19[271]=136;
an_21_19[272]=136;
an_21_19[273]=137;
an_21_19[274]=137;
an_21_19[275]=138;
an_21_19[276]=138;
an_21_19[277]=139;
an_21_19[278]=139;
an_21_19[279]=140;
an_21_19[280]=140;
an_21_19[281]=141;
an_21_19[282]=141;
an_21_19[283]=142;
an_21_19[284]=142;
an_21_19[285]=143;
an_21_19[286]=143;
an_21_19[287]=144;
an_21_19[288]=144;
an_21_19[289]=145;
an_21_19[290]=145;
an_21_19[291]=146;
an_21_19[292]=146;
an_21_19[293]=147;
an_21_19[294]=147;
an_21_19[295]=148;
an_21_19[296]=149;
an_21_19[297]=150;
an_21_19[298]=151;
an_21_19[299]=152;
an_21_19[300]=152;
an_21_19[301]=152;
an_21_19[302]=152;
an_21_19[303]=152;
an_21_19[304]=152;
an_21_19[305]=153;
an_21_19[306]=153;
an_21_19[307]=154;
an_21_19[308]=154;
an_21_19[309]=155;
an_21_19[310]=155;
an_21_19[311]=156;
an_21_19[312]=156;
an_21_19[313]=157;
an_21_19[314]=157;
an_21_19[315]=158;
an_21_19[316]=158;
an_21_19[317]=159;
an_21_19[318]=159;
an_21_19[319]=160;
an_21_19[320]=160;
an_21_19[321]=161;
an_21_19[322]=161;
an_21_19[323]=162;
an_21_19[324]=162;
an_21_19[325]=163;
an_21_19[326]=163;
an_21_19[327]=164;
an_21_19[328]=164;
an_21_19[329]=165;
an_21_19[330]=165;
an_21_19[331]=166;
an_21_19[332]=166;
an_21_19[333]=167;
an_21_19[334]=167;
an_21_19[335]=168;
an_21_19[336]=168;
an_21_19[337]=169;
an_21_19[338]=170;
an_21_19[339]=171;
an_21_19[340]=171;
an_21_19[341]=171;
an_21_19[342]=171;
an_21_19[343]=172;
an_21_19[344]=172;
an_21_19[345]=173;
an_21_19[346]=173;
an_21_19[347]=174;
an_21_19[348]=174;
an_21_19[349]=175;
an_21_19[350]=175;
an_21_19[351]=176;
an_21_19[352]=176;
an_21_19[353]=177;
an_21_19[354]=177;
an_21_19[355]=178;
an_21_19[356]=178;
an_21_19[357]=179;
an_21_19[358]=179;
an_21_19[359]=180;
an_21_19[360]=180;
an_21_19[361]=181;
an_21_19[362]=181;
an_21_19[363]=182;
an_21_19[364]=182;
an_21_19[365]=183;
an_21_19[366]=183;
an_21_19[367]=184;
an_21_19[368]=184;
an_21_19[369]=185;
an_21_19[370]=185;
an_21_19[371]=186;
an_21_19[372]=186;
an_21_19[373]=187;
an_21_19[374]=187;
an_21_19[375]=188;
an_21_19[376]=188;
an_21_19[377]=189;
an_21_19[378]=189;
an_21_19[379]=190;
an_21_19[380]=190;
an_21_19[381]=191;
an_21_19[382]=191;
an_21_19[383]=192;
an_21_19[384]=192;
an_21_19[385]=193;
an_21_19[386]=193;
an_21_19[387]=194;
an_21_19[388]=194;
an_21_19[389]=195;
an_21_19[390]=195;
an_21_19[391]=196;
an_21_19[392]=196;
an_21_19[393]=197;
an_21_19[394]=197;
an_21_19[395]=198;
an_21_19[396]=198;
an_21_19[397]=199;
an_21_19[398]=199;
an_21_19[399]=200;
an_21_19[400]=200;
an_21_19[401]=201;
an_21_19[402]=201;
an_21_19[403]=202;
an_21_19[404]=202;
an_21_19[405]=203;
an_21_19[406]=203;
an_21_19[407]=204;
an_21_19[408]=204;
an_21_19[409]=205;
an_21_19[410]=205;
an_21_19[411]=206;
an_21_19[412]=206;
an_21_19[413]=207;
an_21_19[414]=207;
an_21_19[415]=208;
an_21_19[416]=208;
an_21_19[417]=209;
an_21_19[418]=209;
an_21_19[419]=210;
an_21_19[420]=210;
an_21_19[421]=211;
an_21_19[422]=211;
an_21_19[423]=212;
an_21_19[424]=212;
an_21_19[425]=213;
an_21_19[426]=213;
an_21_19[427]=214;
an_21_19[428]=214;
an_21_19[429]=215;
an_21_19[430]=215;
an_21_19[431]=216;
an_21_19[432]=216;
an_21_19[433]=217;
an_21_19[434]=217;
an_21_19[435]=218;
an_21_19[436]=218;
an_21_19[437]=219;
an_21_19[438]=219;
an_21_19[439]=220;
an_21_19[440]=220;
an_21_19[441]=221;
an_21_19[442]=221;
an_21_19[443]=222;
an_21_19[444]=222;
an_21_19[445]=223;
an_21_19[446]=223;
an_21_19[447]=224;
an_21_19[448]=224;
an_21_19[449]=225;
an_21_19[450]=225;
an_21_19[451]=226;
an_21_19[452]=226;
an_21_19[453]=227;
an_21_19[454]=227;
an_21_19[455]=228;
an_21_19[456]=228;
an_21_19[457]=229;
an_21_19[458]=229;
an_21_19[459]=230;
an_21_19[460]=230;
an_21_19[461]=231;
an_21_19[462]=231;
an_21_19[463]=232;
an_21_19[464]=232;
an_21_19[465]=233;
an_21_19[466]=233;
an_21_19[467]=234;
an_21_19[468]=234;
an_21_19[469]=235;
an_21_19[470]=235;
an_21_19[471]=236;
an_21_19[472]=236;
an_21_19[473]=237;
an_21_19[474]=237;
an_21_19[475]=238;
an_21_19[476]=238;
an_21_19[477]=239;
an_21_19[478]=239;
an_21_19[479]=240;
an_21_19[480]=240;
an_21_19[481]=241;
an_21_19[482]=241;
an_21_19[483]=242;
an_21_19[484]=242;
an_21_19[485]=243;
an_21_19[486]=243;
an_21_19[487]=244;
an_21_19[488]=244;
an_21_19[489]=245;
an_21_19[490]=245;
an_21_19[491]=246;
an_21_19[492]=246;
an_21_19[493]=247;
an_21_19[494]=247;
an_21_19[495]=248;
an_21_19[496]=248;
an_21_19[497]=249;
an_21_19[498]=249;
an_21_19[499]=250;
an_21_19[500]=250;
an_21_19[501]=251;
an_21_19[502]=251;
an_21_19[503]=252;
an_21_19[504]=252;
an_21_19[505]=253;
an_21_19[506]=253;
an_21_19[507]=254;
an_21_19[508]=254;
an_21_19[509]=255;
an_21_19[510]=255;
an_21_19[511]=256;
an_21_19[512]=256;
an_21_19[513]=257;
an_21_19[514]=257;
an_21_19[515]=258;
an_21_19[516]=258;
an_21_19[517]=259;
an_21_19[518]=259;
an_21_19[519]=260;
an_21_19[520]=260;
an_21_19[521]=261;
an_21_19[522]=261;
an_21_19[523]=262;
an_21_19[524]=262;
an_21_19[525]=263;
an_21_19[526]=263;
an_21_19[527]=264;
an_21_19[528]=264;
an_21_19[529]=265;
an_21_19[530]=265;
an_21_19[531]=266;
an_21_19[532]=266;
an_21_19[533]=267;
an_21_19[534]=267;
an_21_19[535]=268;
an_21_19[536]=268;
an_21_19[537]=269;
an_21_19[538]=269;
an_21_19[539]=270;
an_21_19[540]=270;
an_21_19[541]=271;
an_21_19[542]=271;
an_21_19[543]=272;
an_21_19[544]=272;
an_21_19[545]=273;
an_21_19[546]=273;
an_21_19[547]=274;
an_21_19[548]=274;
an_21_19[549]=275;
an_21_19[550]=275;
an_21_19[551]=276;
an_21_19[552]=276;
an_21_19[553]=277;
an_21_19[554]=277;
an_21_19[555]=278;
an_21_19[556]=278;
an_21_19[557]=279;
an_21_19[558]=279;
an_21_19[559]=280;
an_21_19[560]=280;
an_21_19[561]=281;
an_21_19[562]=281;
an_21_19[563]=282;
an_21_19[564]=282;
an_21_19[565]=283;
an_21_19[566]=283;
an_21_19[567]=284;
an_21_19[568]=284;
an_21_19[569]=285;
an_21_19[570]=285;
an_21_19[571]=286;
an_21_19[572]=286;
an_21_19[573]=287;
an_21_19[574]=287;
an_21_19[575]=288;
an_21_19[576]=288;
an_21_19[577]=289;
an_21_19[578]=289;
an_21_19[579]=290;
an_21_19[580]=290;
an_21_19[581]=291;
an_21_19[582]=291;
an_21_19[583]=292;
an_21_19[584]=292;
an_21_19[585]=293;
an_21_19[586]=293;
an_21_19[587]=294;
an_21_19[588]=294;
an_21_19[589]=295;
an_21_19[590]=295;
an_21_19[591]=296;
an_21_19[592]=296;
an_21_19[593]=297;
an_21_19[594]=297;
an_21_19[595]=298;
an_21_19[596]=298;
an_21_19[597]=299;
an_21_19[598]=299;
an_21_19[599]=300;
an_21_19[600]=300;
an_21_19[601]=301;
an_21_19[602]=301;
an_21_19[603]=302;
an_21_19[604]=302;
an_21_19[605]=303;
an_21_19[606]=303;
an_21_19[607]=304;
an_21_19[608]=304;
an_21_19[609]=305;
an_21_19[610]=305;
an_21_19[611]=306;
an_21_19[612]=306;
an_21_19[613]=307;
an_21_19[614]=307;
an_21_19[615]=308;
an_21_19[616]=308;
an_21_19[617]=309;
an_21_19[618]=309;
an_21_19[619]=310;
an_21_19[620]=310;
an_21_19[621]=311;
an_21_19[622]=311;
an_21_19[623]=312;
an_21_19[624]=312;
an_21_19[625]=313;
an_21_19[626]=313;
an_21_19[627]=314;
an_21_19[628]=314;
an_21_19[629]=315;
an_21_19[630]=315;
an_21_19[631]=316;
an_21_19[632]=316;
an_21_19[633]=317;
an_21_19[634]=317;
an_21_19[635]=318;
an_21_19[636]=318;
an_21_19[637]=319;
an_21_19[638]=319;
an_21_19[639]=320;
an_21_19[640]=320;
an_21_19[641]=321;
an_21_19[642]=321;
an_21_19[643]=322;
an_21_19[644]=322;
an_21_19[645]=323;
an_21_19[646]=323;
an_21_19[647]=324;
an_21_19[648]=324;
an_21_19[649]=325;
an_21_19[650]=325;
an_21_19[651]=326;
an_21_19[652]=326;
an_21_19[653]=327;
an_21_19[654]=327;
an_21_19[655]=328;
an_21_19[656]=328;
an_21_19[657]=329;
an_21_19[658]=329;
an_21_19[659]=330;
an_21_19[660]=330;
an_21_19[661]=331;
an_21_19[662]=331;
an_21_19[663]=332;
an_21_19[664]=332;
an_21_19[665]=333;
an_21_19[666]=333;
an_21_19[667]=334;
an_21_19[668]=334;
an_21_19[669]=335;
an_21_19[670]=335;
an_21_19[671]=336;
an_21_19[672]=336;
an_21_19[673]=337;
an_21_19[674]=337;
an_21_19[675]=338;
an_21_19[676]=338;
an_21_19[677]=339;
an_21_19[678]=339;
an_21_19[679]=340;
an_21_19[680]=340;
an_21_19[681]=341;
an_21_19[682]=341;
an_21_19[683]=342;
an_21_19[684]=342;
an_21_19[685]=343;
an_21_19[686]=343;
an_21_19[687]=344;
an_21_19[688]=344;
an_21_19[689]=345;
an_21_19[690]=345;
an_21_19[691]=346;
an_21_19[692]=346;
an_21_19[693]=347;
an_21_19[694]=347;
an_21_19[695]=348;
an_21_19[696]=348;
an_21_19[697]=349;
an_21_19[698]=349;
an_21_19[699]=350;
an_21_19[700]=350;    
}
bool check(int cn) {
    for(int i = AA; i > AA-100; i--) {
        if(an[i]!=an[i-cn]+an[AA]-an[AA-cn])return 0;
    }
    return 1;
}
int get_bit(int x,int v){return (x>>v)&1;}
void solve(int n, int x,int y) {
    if(x>y)swap(x,y);
    int now=0,nxt=1;
    if(x==19&&y==21){
        FOR(i,1,700)an[i]=an_21_19[i];
        AA=700;
    }
    else{
        MS1(dp[now]);
        dp[now][0]=0;
        int ma=max(x,y);
        x=ma-x;
        y=ma-y;
        int add_bit=1<<(ma-1);
        auto maa = [](auto& x,auto y){if(x<y)x=y;};
        int gg=(1<<x)|(1<<y);
        FOR(i,1,BB){
            MS1(dp[nxt]);
            REP(j,1<<ma){
                if(dp[now][j]==-1)continue;
                if(!(j&gg)){
                    maa(dp[nxt][(j>>1)|add_bit],dp[now][j]+1);
                }
                maa(dp[nxt][j>>1],dp[now][j]);
            }
            swap(now, nxt);
            an[i]=*max_element(dp[now],dp[now]+(1<<ma));
        }
        AA=BB;
    }
    /*
       FOR(i,1,BB){
       printf("%d:%d ", i,an[i]);
       if(i%10==0)W("");
       }
       */
    if(n<=AA) {
        W(an[n]);
    }
    else{
        int cn = 10;
        while(1) {
            if(!check(cn))cn++;
            else break;
        }
        int v=n%cn;
        while(v + cn <= AA) {
            v+=cn;
        }
        W(an[v]+(n-v)/cn*(an[AA]-an[AA-cn]));
    }

}
int main(){
    init();
    int x,y,z;
    R(x,y,z);
    solve(x,y,z);
    return 0;
    return 0;
}