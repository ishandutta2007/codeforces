/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author RiaD
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <cassert>
#include <vector>
#include <set>
#include <algorithm>


#include <iterator>


#include <string>
#include <stdexcept>

#ifndef SPCPPL_ASSERT
	#ifdef SPCPPL_DEBUG
		#define SPCPPL_ASSERT(condition) \
		if(!(condition)) { \
			throw std::runtime_error(std::string() + #condition + " in line " + std::to_string(__LINE__) + " in " + __PRETTY_FUNCTION__); \
		}
	#else
		#define SPCPPL_ASSERT(condition)
	#endif
#endif


/**
* Support decrementing and multi-passing, but not declared bidirectional(or even forward) because
* it's reference type is not a reference.
*
* It doesn't return reference because
* 1. Anyway it'll not satisfy requirement [forward.iterators]/6
*   If a and b are both dereferenceable, then a == b if and only if *a and
*   b are bound to the same object.
* 2. It'll not work with reverse_iterator that returns operator * of temporary which is temporary for this iterator
*
* Note, reverse_iterator is not guaranteed to work  now too since it works only with bidirectional iterators,
* but it's seems to work at least on my implementation.
*
* It's not really useful anywhere except iterating anyway.
*/
template <typename T>
class IntegerIterator {
public:
	using value_type = T;
	using difference_type = std::ptrdiff_t;
	using pointer = T*;
	using reference = T;
	using iterator_category = std::input_iterator_tag;

	explicit IntegerIterator(T value): value(value) {

	}

	IntegerIterator& operator++() {
		++value;
		return *this;
	}

	IntegerIterator operator++(int) {
		IntegerIterator copy = *this;
		++value;
		return copy;
	}

	IntegerIterator& operator--() {
		--value;
		return *this;
	}

	IntegerIterator operator--(int) {
		IntegerIterator copy = *this;
		--value;
		return copy;
	}

	T operator*() const {
		return value;
	}

	bool operator==(IntegerIterator rhs) const {
		return value == rhs.value;
	}

	bool operator!=(IntegerIterator rhs) const {
		return !(*this == rhs);
	}

private:
	T value;
};

template <typename T>
class IntegerRange {
public:
	IntegerRange(T begin, T end): begin_(begin), end_(end) {
		SPCPPL_ASSERT(begin <= end);
	}

	IntegerIterator<T> begin() const {
		return IntegerIterator<T>(begin_);
	}

	IntegerIterator<T> end() const {
		return IntegerIterator<T>(end_);
	}

private:
	T begin_;
	T end_;
};

template <typename T>
class ReversedIntegerRange {
	using IteratorType = std::reverse_iterator<IntegerIterator<T>>;
public:
	ReversedIntegerRange(T begin, T end): begin_(begin), end_(end) {
		SPCPPL_ASSERT(begin >= end);
	}

	IteratorType begin() const {
		return IteratorType(IntegerIterator<T>(begin_));
	}

	IteratorType end() const {
		return IteratorType(IntegerIterator<T>(end_));
	}

private:
	T begin_;
	T end_;
};

template <typename T>
IntegerRange<T> range(T to) {
	return IntegerRange<T>(0, to);
}

template <typename T>
IntegerRange<T> range(T from, T to) {
	return IntegerRange<T>(from, to);
}

template <typename T>
IntegerRange<T> inclusiveRange(T to) {
	return IntegerRange<T>(0, to + 1);
}

template <typename T>
IntegerRange<T> inclusiveRange(T from, T to) {
	return IntegerRange<T>(from, to + 1);
}

template <typename T>
ReversedIntegerRange<T> downrange(T from) {
	return ReversedIntegerRange<T>(from, 0);
}

template <typename T>
ReversedIntegerRange<T> downrange(T from, T to) {
	return ReversedIntegerRange<T>(from, to);
}

template <typename T>
ReversedIntegerRange<T> inclusiveDownrange(T from) {
	return ReversedIntegerRange<T>(from + 1, 0);
}

template <typename T>
ReversedIntegerRange<T> inclusiveDownrange(T from, T to) {
	return ReversedIntegerRange<T>(from + 1, to);
}




#include <cstddef>





template <typename T>
T divideCeil(T a, T b) {
	SPCPPL_ASSERT(b != 0);
	if (b < 0) {
		a = -a;
		b = -b;
	}
	return a / b + (a % b > 0);
}

template <typename T>
T divideFloor(T a, T b) {
	SPCPPL_ASSERT(b != 0);
	if (b < 0) {
		a = -a;
		b = -b;
	}
	return a / b - (a % b < 0);
}

template <typename T>
T divideTowardsZero(T a, T b) {
	SPCPPL_ASSERT(b != 0);
	return a / b;
}

template <typename T>
T divideAwayFromZero(T a, T b) {
	SPCPPL_ASSERT(b != 0);
	bool changeSign = false;
	if (a < 0) {
		changeSign = !changeSign;
		a = -a;
	}
	if (b < 0) {
		changeSign = !changeSign;
		b = -b;
	}
	T res = (a + b - 1) / b;
	if (changeSign) {
		res *= -1;
	}
	return res;
}





struct Bool {
	Bool() = default;

	/* implicit */ Bool(bool value): value(value) {

	}

	operator bool() const {
		return value;
	}

private:
	bool value;
};


inline bool isPrime(int n) {
	for (int i = 2; i * i <= n; ++i) {
		if (n % i == 0) {
			return false;
		}
	}
	return n >= 2;
}

inline bool isPrime(int64_t n) {
	for (int64_t i = 2; i * i <= n; ++i) {
		if (n % i == 0) {
			return false;
		}
	}
	return n >= 2;
}

inline std::vector<Bool> primeMap(std::size_t maxN) {
	std::vector<Bool> prime(maxN + 1, true);

	prime[0] = false;
	prime[1] = false;

	for (std::size_t i = 2; i * i <= maxN; ++i) {
		if (prime[i]) {
			if (i * 1ULL * i <= maxN) {
				for (std::size_t j = i * i; j <= maxN; j += i) {
					prime[j] = false;
				}
			}
		}
	}
	return prime;
}

inline std::vector<int> allPrimes(int maxN) {
	std::vector<int> result;
	result.reserve(maxN);
	std::vector<Bool> map = primeMap(maxN);
	for (int i: range(maxN + 1)) {
		if (map[i]) {
			result.push_back(i);
		}
	}
	return result;
}

inline int nextPrime(int n) {
	while (!isPrime(n)) {
		++n;
	}
	return n;
}

inline int64_t nextPrime(int64_t n) {
	while (!isPrime(n)) {
		++n;
	}
	return n;
}

/*
 * It needs primes up to sqrt(r - 1)
 */
template <typename T>
std::vector<Bool> primeMapOnRange(T l, T r, const std::vector<int>& primes) {
	SPCPPL_ASSERT(l > 0);
	std::vector<Bool> prime(static_cast<std::size_t>(r - l), true);
	if (l == 1) {
		prime[0] = false;
	}
	for (int p: primes) {
		if (static_cast<int64_t>(p) * p > r) {
			break;
		}
		T start_idx = divideCeil(l, static_cast<T>(p));
		if (start_idx < 2) {
			start_idx = 2;
		}
		for (auto j = static_cast<size_t>(start_idx * p - l); j < prime.size(); j += p) {
			prime[j] = false;
		}
	}
	return prime;
}

template <typename T>
std::vector<T> primesOnRange(T l, T r, const std::vector<int>& primes) {
	auto primeMap = primeMapOnRange(l, r, primes);
	std::vector<T> result;
	for (std::size_t i = 0; i < primeMap.size(); ++i) {
		if (primeMap[i]) {
			result.push_back(static_cast<T>(i + l));
		}
	}
	return result;
}

//#define PROBLEM "problem_name.h"
//#include PROBLEM
//#include <message.h>
//#include <spcppl/dgcj.h>

using namespace std;

class CTonyaIBuryonka179 {
public:
	static constexpr int kStressCount = 0;

	static void generateTest(std::ostream &test) {

	}

	CTonyaIBuryonka179() {
		primes = allPrimes(200010);
	}

	vector<int> primes;

	void solve(std::istream &in, std::ostream &out) {
		//static int testnumber = 0;
		//out << "Case #" << ++testnumber << ": ";
		//cerr << "test " << testnumber << endl;

		int n, q;
		in >> n >> q;
		vector<int> a(n);

		multiset <int64_t> possible_answers;

		for (int i: range(n)) {
			in >> a[i];
		}

		multiset <int64_t> curValues;
		vector<vector<int64_t>> values(n);

		vector<int> curP;
		curP.reserve(n);
		for (int p: primes) {
			if (n % p == 0) {
				curP.push_back(p);
				int step = n / p;
				values[step].resize(step, 0);
				for (int s: range(step)) {
					int64_t curSum = 0;
					for (int i = s; i < n; i += step) {
						curSum += a[i];
					}
					values[step][s] = curSum;
					curValues.insert(curSum * step);
				}
			}
		}
		out << *curValues.rbegin() << endl;

		for (int i: range(q)) {
			int j, x;
			in >> j >> x;
			--j;
			int oldVal = a[j];
			a[j] = x;
			for (int p: curP) {
				int step = n / p;
				auto it = curValues.extract(curValues.find(step * values[step][j % step]));
				values[step][j % step] += x - oldVal;
				it.value() = step * values[step][j % step];
				curValues.insert(move(it));
			}
			out << *curValues.rbegin() << endl;
		}
	}
};


int main() {
	std::ios_base::sync_with_stdio(false);
	CTonyaIBuryonka179 solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	in.tie(nullptr);
	out << std::fixed;
	out.precision(20);
	int n;
in >> n;
for(int i = 0; i < n; ++i) {
	solver.solve(in, out);
}

	return 0;
}