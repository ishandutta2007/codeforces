/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <algorithm>
#include <queue>
#include <vector>
#include <set>
#include <map>
#include <cassert>
#include <functional>
#include <sstream>
#include <cmath>

#include <cstring>
#include <cstdio>

using namespace std;

typedef pair<int, int> ii;
typedef long long int64;
typedef vector<int> vi;

#define pb push_back
#define mp make_pair
#define all(v) (v).begin(),(v).end()
#define sz(v) ((int)(v).size())

template<class T> T abs(T x) { return x >= 0 ? x : -x; }
template<class T> T sqr(T x) { return x * x; }

class TaskB {
public:
	void solve(std::istream& in, std::ostream& out) {
	    int n;
	    in >> n;
	    vi a(n + 2, 0);
	    for (int i = 0; i < n; ++i)
	        in >> a[i + 1];
	    int64 res = 0;
	    for (int i = 1; i + 1 < sz(a); ++i) {
	        int x = min(a[i] - a[i - 1], a[i] - a[i + 1]);
	        if (x > 0) {
	            res += x;
	            a[i] -= x;
	        }
	    }
        for (int i = 0; i + 1 < sz(a); ++i) {
            res += abs(a[i] - a[i + 1]);
        }
        out << res << "\n";
	}
};


int main() {
	TaskB solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	int n;
in >> n;
for(int i = 0; i < n; ++i) {
	solver.solve(in, out);
}

	return 0;
}