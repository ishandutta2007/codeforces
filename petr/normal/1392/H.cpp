/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <algorithm>
#include <array>
#include <bitset>
#include <cassert>
#include <climits>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <functional>
#include <iostream>
#include <map>
#include <memory>
#include <numeric>
#include <queue>
#include <random>
#include <set>
#include <stack>
#include <string>
#include <unordered_set>
#include <unordered_map>
#include <vector>

#define pb push_back
#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()
#define mp make_pair

using namespace std;

typedef long long int64;
typedef vector<int> vi;
typedef pair<int, int> ii;

constexpr int64 MODULO = 998244353;

int64 pw(int64 a, int64 k) {
  int64 r = 1;
  while (k) {
    if (k & 1) {
      r = r * a % MODULO;
    }
    a = a * a % MODULO;
    k >>= 1;
  }
  return r;
}

int64 inv(int64 a) {
  return pw(a, MODULO - 2);
}

class TaskH {
 public:
  void solveOne(istream &in, ostream &out) {
    int n, m;
    in >> n >> m;
    vector<int64> e(n + 1);
    vector<int64> f(n + 1);
    for (int i = n; i > 0; --i) {
      int64 denom = inv(i + m);
      int64 down = i * denom % MODULO;
      int64 same = m * denom % MODULO;
      int64 places = inv(i + m + 1);
      // Case 1: direct down
      f[i - 1] = (f[i - 1] + f[i] * down) % MODULO;
      e[i - 1] = (e[i - 1] + down * (e[i] + 1 + f[i])) % MODULO;
      // Case 2: at least one rep
      int64 reps = inv(down);
      f[i - 1] = (f[i - 1] + same * ((n - i) * places % MODULO)) % MODULO;
      e[i - 1] = (e[i - 1] + same * (e[i] + 1 + f[i] + reps * (1 + (n - i) * places % MODULO) % MODULO)) % MODULO;
    }
    int64 res = (e[0] + 1 + f[0]) % MODULO;
    out << res << "\n";
  }

  void solve(std::istream &in, std::ostream &out) {
    int nt = 1;
    for (int it = 0; it < nt; ++it) {
      solveOne(in, out);
    }
  }
};


int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  TaskH solver;
  std::istream& in(std::cin);
  std::ostream& out(std::cout);
  solver.solve(in, out);
  return 0;
}