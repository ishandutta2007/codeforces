/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 5e2 + 10;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n, xs, ys, A[MAXN][MAXN], mark[MAXN][MAXN];
set<ll> X[MAXN], Y[MAXN];
string ans;

void DFS(ll x, ll y) {
    if (mark[x][y]) return;
    if (A[x][y] == 0) {
        X[x].insert(y);
        Y[y].insert(x);
        ans.push_back('1');
    }
    A[x][y] = 1;
    mark[x][y] = 1;
    if (Y[y].upper_bound(x) != Y[y].end()) {
        ans.push_back('D');
        DFS(x + 1, y);
        ans.push_back('U');
    }
    if (Y[y].lower_bound(x) != Y[y].begin()) {
        ans.push_back('U');
        DFS(x - 1, y);
        ans.push_back('D');
    }
    if (X[x].upper_bound(y) != X[x].end()) {
        ans.push_back('R');
        DFS(x, y + 1);
        ans.push_back('L');
    }
    if (X[x].lower_bound(y) != X[x].begin()) {
        ans.push_back('L');
        DFS(x, y - 1);
        ans.push_back('R');
    }
    X[x].erase(y);
    Y[y].erase(x);
    A[x][y] = 0;
    ans.push_back('2');
}

int main() {
    fast_io;

    cin >> n >> xs >> ys;
    for (ll i = 1; i <= n; i++) {
        for (ll j = 1; j <= n; j++) {
            cin >> A[i][j];
            if (A[i][j]) {
                X[i].insert(j);
                Y[j].insert(i);
            }
        }
    }

    DFS(xs, ys);
    for (ll i = 1; i <= n; i++) {
        for (ll j = 1; j <= n; j++) {
            if (A[i][j]) return cout << "NO" << endl, 0;
        }
    }
    cout << "YES" << endl;
    cout << ans << endl;

    return 0;
}
/*

*/