/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author majk
 */

#ifndef MAJK_LIB
#define MAJK_LIB

#include <vector>
#include <stack>
#include <iostream>
#include <unordered_map>
#include <unordered_set>
#include <map>
#include <iomanip>
#include <set>
#include <functional>
#include <fstream>
#include <algorithm>
#include <cassert>
#include <cmath>
#include <string>
#include <sstream>
#include <queue>
#include <bitset>
using namespace std;

#define x first
#define y second
typedef std::pair<int,int> pii; typedef long long ll; typedef unsigned long long ull; typedef unsigned int ui; typedef pair<ui,ui> puu;

template <typename T, typename U> std::istream&operator>>(std::istream&i, pair<T,U>&p) {i >> p.x >> p.y; return i;}
template<typename T>std::istream&operator>>(std::istream&i,vector<T>&t) {for(auto&v:t){i>>v;}return i;}
template <typename T, typename U> std::ostream&operator<<(std::ostream&o, const pair<T,U>&p) {o << p.x << ' ' << p.y; return o;}
template<typename T>std::ostream&operator<<(std::ostream&o,const vector<T>&t) {if(t.empty())o<<'\n';for(size_t i=0;i<t.size();++i){o<<t[i]<<" \n"[i == t.size()-1];}return o;}
template<typename T> using minheap = priority_queue<T, vector<T>, greater<T>>;
template<typename T> using maxheap = priority_queue<T, vector<T>, less<T>>;
template <typename T> bool in(T a, T b, T c) { return a <= b && b < c; }
ui logceil(int x) { return 8*sizeof(int)-__builtin_clz(x); }

namespace std { template<typename T,typename U>struct hash<pair<T,U>>{hash<T>t;hash<U>u;size_t operator()(const pair<T,U>&p)const{return t(p.x)^(u(p.y)<<7);}}; }
template<typename T,typename F>T bsh(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){l=m+1;r=m;}else{h=m-1;}}return r;}
template<typename F> double bshd(double l,double h,const F&f,double p=1e-9){ui r=3+(ui)log2((h-l)/p);while(r--){double m=(l+h)/2;if(f(m)){l=m;}else{h=m;}}return (l+h)/2;}
template<typename T,typename F>T bsl(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){h=m-1;r=m;}else{l=m+1;}}return r;}
template<typename F> double bsld(double l,double h,const F&f,double p=1e-9){ui r=3+(ui)log2((h-l)/p);while(r--){double m=(l+h)/2;if(f(m)){h=m;}else{l=m;}}return (l+h)/2;}
template<typename T> T gcd(T a,T b) { if (a<b) swap(a,b); return b?gcd(b,a%b):a; }

template<typename T>class vector2:public vector<vector<T>>{public:vector2(){} vector2(size_t a,size_t b,T t=T()):vector<vector<T>>(a,vector<T>(b,t)){}};
template<typename T>class vector3:public vector<vector2<T>>{public:vector3(){} vector3(size_t a,size_t b,size_t c,T t=T()):vector<vector2<T>>(a,vector2<T>(b,c,t)){}};
template<typename T>class vector4:public vector<vector3<T>>{public:vector4(){} vector4(size_t a,size_t b,size_t c,size_t d,T t=T()):vector<vector3<T>>(a,vector3<T>(b,c,d,t)){}};
template<typename T>class vector5:public vector<vector4<T>>{public:vector5(){} vector5(size_t a,size_t b,size_t c,size_t d,size_t e,T t=T()):vector<vector4<T>>(a,vector4<T>(b,c,d,e,t)){}};


#endif
#include <numeric>
#ifndef MAJK_RANDOM_H
#define MAJK_RANDOM_H

#include <random>
#include <chrono>
//seed_seq seed{(ll)std::random_device{}(), std::chrono::duration_cast<std::chrono::nanoseconds>(std::chrono::high_resolution_clock::now().time_since_epoch()).count()};
 seed_seq seed{12};
std::mt19937 rng{seed};
using random_int = std::uniform_int_distribution<int>;
using random_ll = std::uniform_int_distribution<ll>;

#endif //MAJK_RANDOM_H


class TaskC {
public:
    vector<vector<int>> E;
    vector<bool> V;

    void dfs(int u, vector<int> &Q) {
        if (V[u]) return;
        V[u] = true;
        Q.push_back(u);
        for (int v:E[u]) dfs(v, Q);
    }

void solve(istream& cin, ostream& cout) {
    int N, M; cin >> N >> M;
    E.resize(N);
    for (int i = 0; i < M; ++i) {
        int u, v;
        cin >> u >> v;
        --u;
        --v;
        E[u].push_back(v);
        E[v].push_back(u);
    }

    if (N <= 10) {
        vector<int> I(N);
        iota(I.begin(),I.end(),0);
        do {
            bool ok = true;
            for (int k = 0; k < M; ++k) {
                int u = I[k];
                int v = I[(k+1)%N];
                for (int w:E[u]) ok &= w != v;
            }

            if (ok) {
                for (int k = 0; k < M; ++k) {
                    int u = I[k];
                    int v = I[(k + 1) % N];
                    cout << u + 1 << ' ' << v + 1 << '\n';
                }
                return;
            }
        } while (next_permutation(I.begin(),I.end()));

        cout << "-1\n";
    } else {
        V = vector<bool>(N, false);
        vector<vector<int>> Q;
        for (int i = 0; i < N; ++i) {
            if (!V[i] && E[i].size() == 1) {
                Q.push_back({});
                dfs(i, Q.back());
            }
        }

        for (int i = 0; i < N; ++i) {
            if (!V[i] && E[i].size() == 2) {
                Q.push_back({});
                dfs(i, Q.back());
            }
        }

        sort(Q.begin(),Q.end(),[&](const vector<int>&v, const vector<int>&w) {
            return v.size() == 3 && w.size() != 3;
        });

        vector<vector<int>> A(3);
        int h = 0;
        for (auto &q : Q) {
            if (q.size() == 2) {
                A[h%3].push_back(q[0]);
                h++;
                A[h%3].push_back(q[1]);
            } else if (q.size() == 3) {
                A[0].push_back(q[0]);
                A[1].push_back(q[1]);
                A[2].push_back(q[2]);
            } else if (q.size() == 4) {
                A[0].push_back(q[1]);
                A[0].push_back(q[3]);
                A[1].push_back(q[0]);
                A[2].push_back(q[2]);
            } else if (q.size() == 5) {
                A[0].push_back(q[0]);
                A[0].push_back(q[3]);
                A[1].push_back(q[1]);
                A[1].push_back(q[4]);
                A[2].push_back(q[2]);
            } else if (q.size() == 6) {
                A[0].push_back(q[1]);
                A[0].push_back(q[4]);
                A[1].push_back(q[2]);
                A[1].push_back(q[0]);
                A[2].push_back(q[3]);
                A[2].push_back(q[5]);
            } else {
                for (int i = 0; i < q.size(); i += 3) {
                    A[0].push_back(q[i]);
                }
                for (int i = 1; i < q.size(); i += 3) {
                    A[1].push_back(q[i]);
                }

                for (int i = 2; i < q.size(); i += 3) {
                    A[2].push_back(q[i]);
                }

                int z = A[2].size();
                swap(A[2][z-2], A[2][z-1]);
            }
        }

        int j = 0;
        for (int i = 0; i < N; ++i) {
            if (E[i].empty()) {
                A[j%3].push_back(i);
                j++;
            }
        }

        vector<int> B;

        for (auto&a:A) for (int aa:a) B.push_back(aa);
        if (B.size() < N) {
            cout << B.size() << ' ' << N << endl;
            return;
        }

//        do {
            bool ok = true;
            for (int k = 0; k < M && ok; ++k) {
                int u = B[k];
                int v = B[(k + 1) % N];
                for (int w:E[u]) ok &= w != v;
            }

            if (ok) {
                for (int k = 0; k < M; ++k) {
                    int u = B[k];
                    int v = B[(k + 1) % N];
                    cout << u + 1 << ' ' << v + 1 << '\n';
                }
                return;
            }

//            shuffle(B.begin(),B.end(),rng);
//        } while (true);
    }

}
};


int main() {
	ios_base::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr);
	TaskC solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
    return 0;
}