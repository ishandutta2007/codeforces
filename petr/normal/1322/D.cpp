/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <bits/stdc++.h>

#define pb push_back
#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()
#define mp make_pair

using namespace std;

typedef long long int64;
typedef vector<int> vi;
typedef pair<int, int> ii;

const int INF = (int) 1e9;

class TaskD {
 public:
  void solveOne(istream &in, ostream &out) {
    int n;
    int m;
    in >> n >> m;
    vector<int> l(n);
    for (int i = 0; i < n; ++i) {
      in >> l[i];
      --l[i];
    }
    vector<int> s(n);
    for (int i =0 ; i < n; ++i) {
      in >> s[i];
    }
    vector<int> c(n + m);
    for (int i =0 ; i < n + m; ++i) {
      in >> c[i];
    }
    vector<vector<int>> best(n + m, vector<int>(n, -INF));
    best[n + m - 1][0] = 0;
    vector<int> best2(n + m, 0);
    for (int i = 0; i < n; ++i) {
      int x = l[i];
      for (int more = 0; more < n; ++more) {
        int extra = c[x] - s[i];
        int remaining = more + 1;
        for (int p = x; p < n + m; ++p) {
          if (remaining == 0) {
            best[x][more] = max(best[x][more], best2[p] + extra);
            break;
          }
          if (remaining < n) {
            int old = best[p][remaining];
            if (old > -INF) {
              best[x][more] = max(best[x][more], old + extra);
            }
          }
          remaining /= 2;
          extra += remaining * c[p + 1];
        }
      }
      for (int i = best.size() - 1; i >= 0; --i) {
        best2[i] = max(best2[i], best[i][0]);
        if (i > 0) {
          best2[i - 1] = max(best2[i - 1], best2[i]);
        }
      }
    }
    out << best2[0] << "\n";
  }

  void solve(std::istream &in, std::ostream &out) {
    int nt;
    nt = 1;
    for (int it = 0; it < nt; ++it) {
      solveOne(in, out);
    }
  }
};


int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  TaskD solver;
  std::istream& in(std::cin);
  std::ostream& out(std::cout);
  solver.solve(in, out);
  return 0;
}