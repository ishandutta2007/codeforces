/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 998244353; // 1e9 + 9;

ll n, dp[MAXN][2];
vector<ll> adj[MAXN];

void DFS(ll v) {
    dp[v][0] = 1;
    dp[v][1] = 1;
    ll x = (adj[v].size() == 0 ? 0 : 1);
    for (ll u : adj[v]) {
        DFS(u);
        dp[v][0] = dp[v][0] * (dp[u][0] + dp[u][1]) % MOD;
        dp[v][1] = dp[v][1] * (dp[u][0] + dp[u][1]) % MOD;
        x = (x * dp[u][0]) % MOD;
    }
    dp[v][1] = (dp[v][1] - x + MOD) % MOD;
    for (ll u : adj[v]) {
        dp[v][0] = (dp[v][0] - x * dp[u][1] % MOD * poww(dp[u][0] % MOD, MOD - 2, MOD) % MOD + MOD) % MOD;
    }
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    cin >> n;
    for (ll i = 2; i <= n; i++) {
        ll p;
        cin >> p;
        adj[p].push_back(i);
    }
    DFS(1);
    cout << dp[1][0];

    return 0;
}
/*

*/