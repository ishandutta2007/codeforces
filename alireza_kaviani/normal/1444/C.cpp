/* Generated by powerful Codeforces Tool
 * You can download the binary file in here https://github.com/xalanq/cf-tool (Windows, macOS, Linux)
 * Author: alireza_kaviani
 * Time: 2020-11-01 14:35:02
**/
#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<int, int> pii;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 5e5 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

int n , m , k , c[MAXN] , valid[MAXN] , par[MAXN] , sz[MAXN] , col[MAXN];
ll cnt , ans;
vector<pii> Edge[MAXN];
vector<pair<pii , pii>> E;
vector<pii> vec;

int getCol(int v){
	return (par[v] == -1 ? 0 : getCol(par[v]) ^ col[v]);
}

int Find(int v){
	return (par[v] == -1 ? v : Find(par[v]));
}

int Union(int v , int u){
	int cv = getCol(v) , cu = getCol(u);
	// cout << v << sep << u << sep << cv << sep << cu << endl;
	v = Find(v); u = Find(u);
	// cout << v << sep << u << endl;
	if(v == u){
		if(cv == cu)	return 0;
		return 1;
	}
	if(sz[v] < sz[u])	swap(v , u);
	par[u] = v;
	sz[v] += sz[u];
	if(cu == cv)	col[u] = 1;
	vec.push_back({u , v});
	return 1;
}

void undo(){
	pii A = vec.back();
	vec.pop_back();
	int u = A.X , v = A.Y;
	par[u] = -1;
	sz[v] -= sz[u];
	col[u] = 0;
}

int main() {
	ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
	fill(par , par + MAXN , -1);
	fill(sz , sz + MAXN , 1);
	fill(valid , valid + MAXN , 1);

	cin >> n >> m >> k;
	for(int i = 1 ; i <= n ; i++){
		cin >> c[i];
	}
	for(int i = 0 ; i < m ; i++){
		int v , u;
		cin >> v >> u;
		if(c[v] > c[u])	swap(v , u);
		if(c[v] == c[u]){
			Edge[c[v]].push_back({v , u});
		}
		else{
			E.push_back({{c[v] , c[u]} , {v , u}});
		}
	}
	sort(all(E));
	for(int i = 1 ; i <= k ; i++){
		for(pii j : Edge[i]){
//			cout << j.X << sep << j.Y << endl;
			valid[i] &= Union(j.X , j.Y);
//			for(int k = 1 ; k <= n ; k++){
//				cout << k << sep << getCol(k) << endl; 
//			}
		}
		if(valid[i])	cnt++;
	}
	ans = cnt * (cnt - 1) / 2;
	int flag = 1;
	pii prv = {-1 , -1};
	vec = {};
	for(pair<pii , pii> i : E){
		pii A = i.X;
		if(valid[A.X] == 0 || valid[A.Y] == 0)	continue;
		int v = i.Y.X , u = i.Y.Y;
		if(A != prv){
			while(SZ(vec)){
				undo();
			}
			prv = A;
			flag = 1;
		}
		int xx = Union(v , u);
//		cout << v << sep << u << endl;
//		for(int j = 1 ; j <= n ; j++){
//			cout << j << sep << getCol(j) << endl; 
//		}
//		cout << xx << endl;
		if(flag == 1 && xx == 0){
			flag = 0;
			ans--;
		}
	}
	cout << ans << endl;

    return 0;
}
/*

*/