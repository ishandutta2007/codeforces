/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e5 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n, q, H[MAXN], par[LOG][MAXN];
vector<ll> adj[MAXN];

void DFS(ll v, ll p = 0) {
    par[0][v] = p;
    H[v] = H[p] + 1;
    for (ll u : adj[v]) if (u != p) DFS(u, v);
}

ll getPar(ll v, ll h) {
    for (ll i = 0; i < LOG; i++) if (h & (1ll << i)) v = par[i][v];
    return v;
}

ll LCA(ll v, ll u) {
    if (H[v] > H[u]) swap(u, v);
    u = getPar(u, H[u] - H[v]);
    if (u == v) return v;
    for (ll i = LOG - 1; i >= 0; i--) {
        if (par[i][v] != par[i][u]) {
            v = par[i][v];
            u = par[i][u];
        }
    }
    return par[0][v];
}

ll dist(ll v, ll u) {
    ll lca = LCA(v, u);
    return H[v] + H[u] - 2 * H[lca];
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    cin >> n;
    for (ll i = 1; i < n; i++) {
        ll v, u;
        cin >> v >> u;
        adj[v].push_back(u);
        adj[u].push_back(v);
    }
    DFS(1);

    for (ll i = 1; i < LOG; i++) {
        for (ll j = 0; j <= n; j++) par[i][j] = par[i - 1][par[i - 1][j]];
    }

    cin >> q;
    while (q--) {
        ll v, u, x, y, k;
        cin >> x >> y >> v >> u >> k;
        vector<ll> vec;
        vec.push_back(dist(v, u));
        vec.push_back(dist(v, x) + dist(u, y) + 1);
        vec.push_back(dist(v, y) + dist(u, x) + 1);
        string ans = "NO";
        for (ll i : vec) {
            if (i <= k && i % 2 == k % 2) ans = "YES";
        }
        cout << ans << endl;
    }

    return 0;
}
/*

*/