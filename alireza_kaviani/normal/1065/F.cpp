/* Generated by powerful Codeforces Tool
 * You can download the binary file in here https://github.com/xalanq/cf-tool (Windows, macOS, Linux)
 * Author: alireza_kaviani
 * Time: 2020-03-25 19:14:39
**/
#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll LOG = 22;
const ll INF = 1e9;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

int n , k , cnt , dp[MAXN] , mark[MAXN] , par[LOG][MAXN] , leaf[MAXN] , comp[MAXN] , val[MAXN];
vector<int> ts , vec , adj[MAXN] , radj[MAXN];

ll getPar(ll v , ll h){
    for(ll i = 0 ; i < LOG ; i++)   if(h & (1 << i))    v = par[i][v];
    return max(1ll , v);
}

void DFS(ll v){
    mark[v] = 1;
    for(ll u : adj[v])  if(!mark[u])    DFS(u);
    ts.push_back(v);
}

void DFS2(ll v , ll c){
    mark[v] = 1;
    comp[v] = c;
    val[c] += leaf[v];
    vec.push_back(v);
    for(ll u : radj[v]) if(!mark[u])    DFS2(u , c);
}

void SCC(){
    for(ll i = 1 ; i <= n ; i++)    if(!mark[i]){
        DFS(i);
        //cout << "DFS TopoSort " << i << endl;
    }
    reverse(all(ts));
    fill(mark , mark + MAXN , 0);
    for(ll i : ts){
        //cout << "DFS SCC " << i << endl;
        if(!mark[i]){
            vec = {};
            DFS2(i , ++cnt);
            dp[cnt] = -INF;
            for(ll v : vec){
                //cout << v << sep;
                if(v == 1)  dp[cnt] = val[cnt];
                for (ll u : radj[v])    if(comp[u] != cnt)  dp[cnt] = max(dp[cnt] , dp[comp[u]] + val[cnt]);
            }
            //cout << endl;
            //cout << cnt << sep << dp[cnt] << endl;
            //cout << "==========\n";
        }
    }
}

int main() {
    ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
    fill(leaf , leaf + MAXN , 1);

    cin >> n >> k;
    for(ll i = 2 ; i <= n ; i++){
        cin >> par[0][i];
        leaf[par[0][i]] = 0;
        adj[par[0][i]].push_back(i);
        radj[i].push_back(par[0][i]);
        //cout << par[0][i] << sep << i << endl;
    }
    
    for(ll i = 1 ; i < LOG ; i++)   for(ll j = 1 ; j <= n ; j++)    par[i][j] = par[i - 1][par[i - 1][j]];
    for(ll i = 1 ; i <= n ; i++){
        if(leaf[i]){
            ll P = getPar(i , k);
      //      cout << i << sep << P << endl;
            adj[i].push_back(P);
            radj[P].push_back(i);
        }
    }

    //cout << "=========\n";
    SCC();
    cout << *max_element(dp , dp + MAXN) << endl;
    

    return 0;
}
/*

*/