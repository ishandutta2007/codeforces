/* Generated by powerful Codeforces Tool
 * You can download the binary file in here https://github.com/xalanq/cf-tool (Windows, macOS, Linux)
 * Author: alireza_kaviani
 * Time: 2020-03-27 18:32:13
**/
#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 5e3 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n , ans[MAXN * 10] , A[MAXN * 10] , mul[MAXN * 10] , inv[MAXN * 10] , dp[2][MAXN * 2];

int main() {
    ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);

    cin >> n;
    mul[0] = 1;
    for(ll i = 1 ; i < n ; i++)     cin >> A[i] , mul[i] = mul[i - 1] * A[i] % MOD;
    for(ll i = 0 ; i <= n ; i++)    inv[i] = poww(mul[i] , MOD - 2 , MOD);

    for(ll i = n ; i >= 1 ; i--){
        dp[i % 2][0] = 1;
        dp[i % 2][1] = A[i] * 2;
        ans[1] += mul[i - 1] * A[i] * 2 % MOD;
        for(ll j = 2 ; j <= 2 * n - 2 * i ; j++){
            dp[i % 2][j] = (dp[(i + 1) % 2][j - 2] * A[i] % MOD * A[i] + 2 * mul[i + j - 1] * inv[i - 1]) % MOD;
            ans[j] += (dp[(i + 1) % 2][j - 2] * A[i] % MOD * (A[i] - 1) + 2 * mul[i + j - 1] * inv[i - 1]) % MOD * mul[i - 1] % MOD;
        }
    }
    for(ll i = 1 ; i <= 2 * n - 2 ; i++)    cout << ans[i] % MOD * (MOD + 1) / 2 % MOD << sep;

    return 0;
}
/*

*/