/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n, ans, mx, dp[MAXN], A[MAXN];
vector<ll> adj[MAXN];

void DFS(ll v, ll p = -1) {
    dp[v] = A[v];
    for (ll u : adj[v]) {
        if (u == p) continue;
        DFS(u, v);
        dp[v] += (dp[u] > 0) * dp[u];
    }
}

void DFS2(ll v, ll p = -1) {
    dp[v] = A[v];
    for (ll u : adj[v]) {
        if (u == p) continue;
        DFS2(u, v);
        dp[v] += (dp[u] > 0) * dp[u];
    }
    if (dp[v] == mx) {
        dp[v] = 0;
        ans++;
    }
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    cin >> n;
    for (ll i = 1; i <= n; i++) cin >> A[i];
    for (ll i = 1; i < n; i++) {
        ll v, u;
        cin >> v >> u;
        adj[v].push_back(u);
        adj[u].push_back(v);
    }
    DFS(1);
    mx = *max_element(dp + 1, dp + n + 1);
    fill(dp, dp + MAXN, 0);
    DFS2(1);
    cout << mx * ans << sep << ans << endl;

    return 0;
}
/*

*/