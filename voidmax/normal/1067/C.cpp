// 
// 
// 
// 
// 
// 
// 
// 
// 
// 
// 
// 
// 
// 
// 
// 
// 
// 
// 
// 
// 
// 
// 
// 
// 
// 
// 
#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,tune=native")
#pragma GCC optimize("unroll-loops")    
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <cstdio>
#include <numeric>
#include <cstring>
#include <complex>
#include <ctime>
#include <cstdlib>
#include <set>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <list>
#include <cmath>
#include <bitset>
#include <cassert>
#include <queue>
#include <deque>
#include <cassert>
#include <iomanip> 
#include <chrono>
#define pb push_back
#define x first
#define y second
#define mp make_pair
#define files(FILENAME) read(FILENAME); write(FILENAME)
#define read(FILENAME) freopen((string(FILENAME) + ".in").c_str(), "r", stdin)
#define write(FILENAME) freopen((string(FILENAME) + ".out").c_str(), "w", stdout)
using namespace std;
        
template<typename T1, typename T2>inline void chkmin(T1 &x, T2 y) { if (x > y) x = y; }
template<typename T1, typename T2>inline void chkmax(T1 &x, T2 y) { if (x < y) x = y; } 
template<typename T, typename U> inline ostream &operator<< (ostream &_out, const pair<T, U> &_p) { _out << _p.first << ' ' << _p.second; return _out; }
template<typename T, typename U> inline istream &operator>> (istream &_in, pair<T, U> &_p) { _in >> _p.first >> _p.second; return _in; }
template<typename T> inline ostream &operator<< (ostream &_out, const vector<T> &_v) { if (_v.empty()) { return _out; } _out << _v.front(); for (auto _it = ++_v.begin(); _it != _v.end(); ++_it) { _out << ' ' << *_it; } return _out; }
template<typename T> inline istream &operator>> (istream &_in, vector<T> &_v) { for (auto &_i : _v) { _in >> _i; } return _in; }
template<typename T> inline ostream &operator<< (ostream &_out, const set<T> &_s) { if (_s.empty()) { return _out; } _out << *_s.begin(); for (auto _it = ++_s.begin(); _it != _s.end(); ++_it) { _out << ' ' << *_it; } return _out; }
template<typename T> inline ostream &operator<< (ostream &_out, const multiset<T> &_s) { if (_s.empty()) { return _out; } _out << *_s.begin(); for (auto _it = ++_s.begin(); _it != _s.end(); ++_it) { _out << ' ' << *_it; } return _out; }
template<typename T> inline ostream &operator<< (ostream &_out, const unordered_set<T> &_s) { if (_s.empty()) { return _out; } _out << *_s.begin(); for (auto _it = ++_s.begin(); _it != _s.end(); ++_it) { _out << ' ' << *_it; } return _out; }
template<typename T> inline ostream &operator<< (ostream &_out, const unordered_multiset<T> &_s) { if (_s.empty()) { return _out; } _out << *_s.begin(); for (auto _it = ++_s.begin(); _it != _s.end(); ++_it) { _out << ' ' << *_it; } return _out; }
template<typename T, typename U> inline ostream &operator<< (ostream &_out, const map<T, U> &_m) { if (_m.empty()) { return _out; } _out << '(' << _m.begin()->first << ": " << _m.begin()->second << ')'; for (auto _it = ++_m.begin(); _it != _m.end(); ++_it) { _out << ", (" << _it->first << ": " << _it->second << ')'; } return _out; }
template<typename T, typename U> inline ostream &operator<< (ostream &_out, const unordered_map<T, U> &_m) { if (_m.empty()) { return _out; } _out << '(' << _m.begin()->first << ": " << _m.begin()->second << ')'; for (auto _it = ++_m.begin(); _it != _m.end(); ++_it) { _out << ", (" << _it->first << ": " << _it->second << ')'; } return _out; }
        
typedef long long base;       
typedef complex<double> comp;
typedef pair<int, int> point;

int n;
vector<pair<int, int>> a = {{501,501},{497,499},{497,501},{498,502},{497,503},{498,504},{499,505},{494,500},{493,501},{493,499},{495,505},{496,506},{493,500},{490,500},{493,497},{493,505},{494,501},{499,499},{496,498},{496,504},{502,501},{502,498},{501,497},{502,500},{503,504},{503,497},{505,502},{505,503},{503,506},{507,500},{502,508},{503,495},{507,501},{500,493},{503,508},{508,501},{500,510},{500,494},{509,503},{500,491},{510,499},{511,500},{498,510},{500,490},{500,512},{500,492},{510,504},{490,501},{500,489},{500,513},{501,512},{512,501},{513,502},{489,501},{500,488},{488,501},{500,487},{513,504},{515,502},{487,501},{498,514},{502,515},{500,486},{501,515},{514,498},{486,501},{500,485},{501,516},{485,501},{500,484},{516,498},{517,502},{484,501},{499,518},{500,483},{500,519},{503,518},{517,504},{519,502},{483,501},{500,482},{499,519},{520,502},{482,501},{500,481},{521,502},{481,501},{500,480},{500,522},{503,521},{522,502},{480,501},{499,522},{500,479},{523,502},{479,501},{500,478},{502,524},{524,502},{478,501},{500,477},{501,524},{525,502},{477,501},{500,476},{501,525},{526,502},{476,501},{499,526},{500,475},{527,502},{475,501},{500,474},{503,527},{502,528},{528,502},{474,501},{498,527},{500,473},{529,502},{473,501},{500,472},{500,530},{501,529},{530,502},{472,501},{500,471},{531,502},{471,501},{498,530},{500,470},{500,532},{532,502},{470,501},{500,469},{500,533},{501,532},{533,502},{469,501},{500,468},{534,502},{468,501},{500,467},{535,502},{467,501},{498,534},{502,535},{500,466},{501,535},{536,502},{466,501},{500,465},{501,536},{537,502},{465,501},{500,464},{538,502},{464,501},{499,538},{500,463},{500,539},{503,538},{539,502},{463,501},{500,462},{499,539},{540,502},{462,501},{500,461},{541,502},{461,501},{500,460},{500,542},{503,541},{542,502},{460,501},{499,542},{500,459},{543,502},{459,501},{500,458},{502,544},{544,502},{458,501},{500,457},{501,544},{545,502},{457,501},{500,456},{501,545},{546,502},{456,501},{499,546},{500,455},{547,502},{455,501},{500,454},{503,547},{502,548},{548,502},{454,501},{498,547},{500,453},{549,502},{453,501},{500,452},{500,550},{501,549},{550,502},{452,501},{500,451},{551,502},{451,501},{498,550},{500,450},{500,552},{552,502},{450,501},{500,449},{500,553},{501,552},{553,502},{449,501},{500,448},{554,502},{448,501},{500,447},{555,502},{447,501},{498,554},{502,555},{500,446},{501,555},{556,502},{446,501},{500,445},{501,556},{557,502},{445,501},{500,444},{558,502},{444,501},{499,558},{500,443},{500,559},{503,558},{559,502},{443,501},{500,442},{499,559},{560,502},{442,501},{500,441},{561,502},{441,501},{500,440},{500,562},{503,561},{562,502},{440,501},{499,562},{500,439},{563,502},{439,501},{500,438},{502,564},{564,502},{438,501},{500,437},{501,564},{565,502},{437,501},{500,436},{501,565},{566,502},{436,501},{499,566},{500,435},{567,502},{435,501},{500,434},{503,567},{502,568},{568,502},{434,501},{498,567},{500,433},{569,502},{433,501},{500,432},{500,570},{501,569},{570,502},{432,501},{500,431},{571,502},{431,501},{498,570},{500,430},{500,572},{572,502},{430,501},{500,429},{500,573},{501,572},{573,502},{429,501},{500,428},{574,502},{428,501},{500,427},{575,502},{427,501},{498,574},{502,575},{500,426},{501,575},{576,502},{426,501},{500,425},{501,576},{577,502},{425,501},{500,424},{578,502},{424,501},{499,578},{500,423},{500,579},{503,578},{579,502},{423,501},{500,422},{499,579},{580,502},{422,501},{500,421},{581,502},{421,501},{500,420},{500,582},{503,581},{582,502},{420,501},{499,582},{500,419},{583,502},{419,501},{500,418},{502,584},{584,502},{418,501},{500,417},{501,584},{585,502},{417,501},{500,416},{501,585},{586,502},{416,501},{499,586},{500,415},{587,502},{415,501},{500,414},{503,587},{502,588},{588,502},{414,501},{498,587},{500,413},{589,502},{413,501},{500,412},{500,590},{501,589},{590,502},{412,501},{500,411},{591,502},{411,501},{498,590},{500,410},{500,592},{592,502},{410,501},{500,409},{500,593},{501,592},{593,502},{409,501},{500,408},{594,502},{408,501},{500,407},{595,502},{407,501},{498,594},{502,595},{500,406},{501,595},{596,502},{406,501},{500,405},{501,596},{597,502},{405,501},{500,404},{598,502},{404,501},{499,598},{500,403},{500,599},{503,598},{599,502},{403,501},{500,402},{499,599},{600,502},{402,501},{500,401},{601,502},{401,501},{500,400},{500,602},{503,601},{602,502},{400,501},{499,602},{500,399},{603,502},{399,501},{500,398},{502,604},{604,502},{398,501},{500,397},{501,604},{605,502},{397,501},{500,396},{501,605},{606,502},{396,501},{499,606},{500,395},{607,502},{395,501},{500,394},{503,607},{502,608},{608,502},{394,501},{498,607},{500,393},{609,502},{393,501},{500,392},{500,610},{501,609},{610,502},{392,501},{500,391},{611,502},{391,501},{498,610},{500,390},{500,612},{612,502},{390,501},{500,389},{500,613},{501,612},{613,502},{389,501},{500,388},{614,502},{388,501},{500,387},{615,502},{387,501},{498,614},{502,615},{500,386},{501,615},{616,502},{386,501},{500,385},{501,616},{617,502},{385,501},{500,384},{618,502},{384,501},{499,618},{500,383},{500,619},{503,618},{619,502},{383,501},{500,382},{499,619},{620,502},{382,501},{500,381},{621,502},{381,501},{500,380},{500,622},{503,621},{622,502},{380,501},{499,622},{500,379},{623,502},{379,501},{500,378},{502,624},{624,502},{378,501},{500,377},{501,624},{625,502},{377,501},{500,376},{501,625},{626,502},{376,501},{499,626},{500,375},{627,502},{375,501},{500,374},{503,627},{502,628},{628,502},{374,501},{498,627},{500,373},{629,502},{373,501},{500,372},{500,630},{501,629},{630,502},{372,501},{500,371},{631,502},{371,501},{498,630},{500,370},{500,632},{632,502},{370,501},{500,369},{500,633},{501,632},{633,502},{369,501},{500,368},{634,502},{368,501},{500,367},{635,502},{367,501},{498,634},{502,635},{500,366},{501,635},{636,502},{366,501},{500,365},{501,636},{637,502},{365,501},{500,364},{638,502},{364,501},{499,638},{500,363},{500,639},{503,638},{639,502},{363,501},{500,362},{499,639},{640,502},{362,501},{500,361},{641,502},{361,501},{500,360},{500,642},{503,641},{642,502},{360,501},{499,642},{500,359},{643,502},{359,501},{500,358},{502,644},{644,502},{358,501},{500,357},{501,644},{645,502},{357,501},{500,356},{501,645},{646,502},{356,501},{499,646},{500,355},{647,502},{355,501},{500,354},{503,647},{502,648},{648,502},{354,501},{498,647},{500,353},{649,502},{353,501},{500,352},{500,650},{501,649},{650,502},{352,501},{500,351},{651,502},{351,501},{498,650},{500,350},{500,652},{652,502},{350,501},{500,349},{500,653},{501,652},{653,502},{349,501},{500,348},{654,502},{348,501},{500,347},{655,502},{347,501},{498,654},{502,655},{500,346},{501,655},{656,502},{346,501},{500,345},{501,656},{657,502},{345,501},{500,344},{658,502},{344,501},{499,658},{500,343},{500,659},{503,658},{659,502},{343,501},{500,342},{499,659},{660,502},{342,501},{500,341},{661,502},{341,501},{500,340},{500,662},{503,661},{662,502},{340,501},{499,662},{500,339},{663,502},{339,501},{500,338},{502,664},{664,502},{338,501},{500,337},{501,664},{665,502},{337,501},{500,336},{501,665},{666,502},{336,501},{499,666},{500,335},{667,502},{335,501},{500,334},{503,667},{502,668},{668,502},{334,501},{498,667},{500,333},{669,502},{333,501},{500,332},{500,670},{501,669},{670,502},{332,501},{500,331},{671,502},{331,501},{498,670},{500,330},{500,672},{672,502},{330,501},{500,329},{500,673},{501,672},{673,502},{329,501},{500,328},{674,502},{328,501},{500,327},{675,502},{327,501},{498,674},{502,675},{500,326},{501,675},{676,502},{326,501},{500,325},{501,676},{677,502},{325,501},{500,324},{678,502},{324,501},{499,678},{500,323},{500,679},{503,678},{679,502},{323,501},{500,322},{499,679},{680,502},{322,501},{500,321},{681,502},{321,501},{500,320},{500,682},{503,681},{682,502},{320,501},{499,682},{500,319},{683,502},{319,501},{500,318},{502,684},{684,502},{318,501},{500,317},{501,684},{685,502},{317,501},{500,316},{501,685},{686,502},{316,501},{499,686},{500,315},{687,502},{315,501},{500,314},{503,687},{502,688},{688,502},{314,501},{498,687},{500,313},{689,502},{313,501},{500,312},{500,690},{501,689},{690,502},{312,501},{500,311},{691,502},{311,501},{498,690},{500,310},{500,692},{692,502},{310,501},{500,309},{500,693},{501,692},{693,502},{309,501},{500,308},{694,502},{308,501},{500,307},{695,502},{307,501},{498,694},{502,695},{500,306},{501,695},{696,502},{306,501},{500,305},{501,696},{697,502},{305,501},{500,304},{698,502},{304,501},{499,698},{500,303},{500,699},{503,698},{699,502},{303,501},{500,302},{499,699},{700,502},{302,501},{500,301},{701,502},{301,501},{500,300},{500,702},{503,701},{702,502},{300,501},{499,702},{500,299},{703,502},{299,501},{500,298},{502,704},{704,502},{298,501},{500,297},{501,704},{705,502},{297,501},{500,296},{501,705},{706,502},{296,501},{499,706},{500,295},{707,502},{295,501},{500,294},{503,707},{502,708},{708,502},{294,501},{498,707},{500,293},{709,502},{293,501},{500,292},{500,710},{501,709},{710,502},{292,501},{500,291},{711,502},{291,501},{498,710},{500,290},{500,712},{712,502},{290,501},{500,289},{500,713},{501,712},{713,502},{289,501},{500,288},{714,502},{288,501},{500,287},{715,502},{287,501},{498,714},{502,715},{500,286},{501,715},{716,502},{286,501},{500,285},{501,716},{717,502},{285,501},{500,284},{718,502},{284,501},{499,718},{500,283},{500,719},{503,718},{719,502},{283,501},{500,282},{499,719},{720,502},{282,501},{500,281},{721,502},{281,501},{500,280},{500,722},{503,721},{722,502},{280,501},{499,722},{500,279},{723,502},{279,501},{500,278},{502,724},{724,502},{278,501},{500,277},{501,724},{725,502},{277,501},{500,276},{501,725},{726,502},{276,501},{499,726},{500,275},{727,502},{275,501},{500,274},{503,727},{502,728},{728,502},{274,501},{498,727},{500,273},{729,502},{273,501},{500,272},{500,730},{501,729},{730,502},{272,501},{500,271},{731,502},{271,501},{498,730},{500,270},{500,732},{732,502},{270,501},{500,269},{500,733},{501,732},{733,502},{269,501},{500,268},{734,502},{268,501},{500,267},{735,502},{267,501},{498,734},{502,735},{500,266},{501,735},{736,502},{266,501},{500,265},{501,736},{737,502},{265,501},{500,264},{738,502},{264,501},{499,738},{500,263}};

int main() {
    ios::sync_with_stdio(0);
    srand(time(0));
    cin >> n;
    for (int i = 0; i < n; ++i) {
        cout << a[i] << '\n';
    }
}