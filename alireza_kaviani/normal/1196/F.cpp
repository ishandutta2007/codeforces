/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<int , int> pii;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

set_random;

const ll MAXN = 1e6 + 10;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

vector<pll> adj[MAXN];
ll n , m , k , v , u , w;
set<pair<ll , pll>> st;
map<ll , ll> dis[MAXN];

ll dijkstra(){
    while(st.size() != 0){
        pair<ll , pii> p = *st.begin();
        st.erase(st.begin());
        ll dist = p.X , root = p.Y.X , v = p.Y.Y;

        k--;
        if(k == 0)  return dist;

        for(pll i : adj[v]){
            ll u = i.Y , w = i.X;
            if((dis[root][u] == 0 || dis[root][u] > dist + w) && u != root){
                if(st.size() == k && dist + w > (*prev(st.end())).X) continue;
                st.erase({dis[root][u] , {root , u}});
                dis[root][u] = dist + w;
                st.insert({dis[root][u] , {root , u}});
                if(st.size() > k)   st.erase(prev(st.end()));
            }
        }
    }
    return -1;
}

int main() {
    fast_io;

    cin >> n >> m >> k;
    k *= 2;

    for(ll i = 0 ; i < m ; i++){
        cin >> v >> u >> w;
        adj[v].push_back({w , u});
        adj[u].push_back({w , v});
        st.insert({w , {v , u}});
        st.insert({w , {u , v}});
        dis[v][u] = dis[u][v] = w;
        while(st.size() > k)   st.erase(prev(st.end()));
    }

    for(ll i = 1 ; i <= n ; i++){
        Sort(adj[i]);
        adj[i].resize(min(SZ(adj[i]) , k));
    }

    cout << dijkstra() << endl;

    return 0;
}
/*

*/