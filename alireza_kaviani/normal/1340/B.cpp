/* Generated by powerful Codeforces Tool
 * You can download the binary file in here https://github.com/xalanq/cf-tool (Windows, macOS, Linux)
 * Author: alireza_kaviani
 * Time: 2020-04-23 19:15:03
**/
#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 2e3 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n , k;
string s[MAXN];
bitset<MAXN> dp[MAXN];
vector<pll> num[MAXN];
vector<string> vec = {"1110111", "0010010", "1011101", "1011011", "0111010", "1101011", "1101111", "1010010", "1111111", "1111011"};

int main() {
    ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);

    cin >> n >> k;
    for(ll i = 1 ; i <= n ; i++)    cin >> s[i];
    
    dp[n + 1][0] = 1;
    for(ll i = n ; i >= 1 ; i--){
        for(ll j = 0 ; j < 10 ; j++){
            ll cnt = 0;
            for(ll l = 0 ; l < 7 ; l++){
                if(s[i][l] == '0' && vec[j][l] == '1')  cnt++;
                if(s[i][l] == '1' && vec[j][l] == '0')  cnt += MOD;
            }
            //cout << j << sep << cnt << endl;
            if(cnt >= MAXN) continue;
            num[i].push_back({j , cnt});
            dp[i] |= (dp[i + 1] << cnt);
            //reverse(all(num[i]));
            //cout << "num" << j;
        }
        reverse(all(num[i]));
        //for(ll j = 0 ; j < 20 ; j++)    if(dp[i][j])    cout << j << sep;
        //cout << endl;
    }

    vector<ll> ans;
    if(dp[1][k] == 0)   return cout << -1 << endl , 0;
    for(ll i = 1 ; i <= n ; i++){
        for(pll j : num[i]){
            if(k >= j.Y && dp[i + 1][k - j.Y]){
                ans.push_back(j.X);
                k -= j.Y;
                break;
            }
        }
    }

    for(ll i : ans) cout << i;

    return 0;
}
/*

*/