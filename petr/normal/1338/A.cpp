/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <vector>
#include <utility>
#include <iostream>
#include <cmath>
#include <algorithm>

#define pb push_back
#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()
#define mp make_pair

using namespace std;

typedef long long int64;
typedef vector<int> vi;
typedef pair<int, int> ii;

class TaskA {
 public:
  void solveOne(istream &in, ostream &out) {
    int n;
    in >> n;
    vector<int> a(n);
    for (auto& x : a) in >> x;
    int64 mx = a[0];
    int64 maxdelta = 0;
    for (int x : a) {
      if (x > mx) {
        mx = x;
      } else {
        maxdelta = max(mx - x, maxdelta);
      }
    }
    int res = 0;
    while ((int64(1) << res) <= maxdelta) ++res;
    out << res << "\n";
  }

  void solve(std::istream &in, std::ostream &out) {
    int nt;
    in >> nt;
    for (int it = 0; it < nt; ++it) {
      solveOne(in, out);
    }
  }
};


int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  TaskA solver;
  std::istream& in(std::cin);
  std::ostream& out(std::cout);
  solver.solve(in, out);
  return 0;
}