/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author majk
 */

#ifndef MAJK_LIB
#define MAJK_LIB

#include <vector>
#include <stack>
#include <iostream>
#include <unordered_map>
#include <unordered_set>
#include <map>
#include <iomanip>
#include <set>
#include <functional>
#include <fstream>
#include <algorithm>
#include <cassert>
#include <cmath>
#include <string>
#include <sstream>
#include <queue>
#include <array>
#include <bitset>
using namespace std;

#define x first
#define y second
typedef std::pair<int,int> pii; typedef long long ll; typedef unsigned long long ull; typedef unsigned int ui; typedef pair<ui,ui> puu;

template <typename T, typename U> std::istream&operator>>(std::istream&i, pair<T,U>&p) {i >> p.x >> p.y; return i;}
template<typename T>std::istream&operator>>(std::istream&i,vector<T>&t) {for(auto&v:t){i>>v;}return i;}
template <typename T, typename U> std::ostream&operator<<(std::ostream&o, const pair<T,U>&p) {o << p.x << ' ' << p.y; return o;}
template<typename T>std::ostream&operator<<(std::ostream&o,const vector<T>&t) {if(t.empty())o<<'\n';for(size_t i=0;i<t.size();++i){o<<t[i]<<" \n"[i == t.size()-1];}return o;}
template<typename T> using minheap = priority_queue<T, vector<T>, greater<T>>;
template<typename T> using maxheap = priority_queue<T, vector<T>, less<T>>;
template <typename T> bool in(T a, T b, T c) { return a <= b && b < c; }
ui logceil(ll x) { return x?8*sizeof(ll)-__builtin_clzll(x):0; }

namespace std { template<typename T,typename U>struct hash<pair<T,U>>{hash<T>t;hash<U>u;size_t operator()(const pair<T,U>&p)const{return t(p.x)^(u(p.y)<<7);}}; }
template<typename T,typename F>T bsh(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){l=m+1;r=m;}else{h=m-1;}}return r;}
template<typename F> double bshd(double l,double h,const F&f,double p=1e-9){ui r=3+(ui)log2((h-l)/p);while(r--){double m=(l+h)/2;if(f(m)){l=m;}else{h=m;}}return (l+h)/2;}
template<typename T,typename F>T bsl(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){h=m-1;r=m;}else{l=m+1;}}return r;}
template<typename F> double bsld(double l,double h,const F&f,double p=1e-9){ui r=3+(ui)log2((h-l)/p);while(r--){double m=(l+h)/2;if(f(m)){h=m;}else{l=m;}}return (l+h)/2;}
template<typename T> T gcd(T a,T b) { if (a<b) swap(a,b); return b?gcd(b,a%b):a; }


template<typename T>class vector2:public vector<vector<T>>{public:vector2(){} vector2(size_t a,size_t b,T t=T()):vector<vector<T>>(a,vector<T>(b,t)){}};
template<typename T>class vector3:public vector<vector2<T>>{public:vector3(){} vector3(size_t a,size_t b,size_t c,T t=T()):vector<vector2<T>>(a,vector2<T>(b,c,t)){}};
template<typename T>class vector4:public vector<vector3<T>>{public:vector4(){} vector4(size_t a,size_t b,size_t c,size_t d,T t=T()):vector<vector3<T>>(a,vector3<T>(b,c,d,t)){}};
template<typename T>class vector5:public vector<vector4<T>>{public:vector5(){} vector5(size_t a,size_t b,size_t c,size_t d,size_t e,T t=T()):vector<vector4<T>>(a,vector4<T>(b,c,d,e,t)){}};


#endif
#ifndef MAJK_ENVELOPE_H
#define MAJK_ENVELOPE_H

#ifndef MAJK_INT128_H
#define MAJK_INT128_H


/** Product of two 64-bit numbers modulo another. */
ull mulull(ull a, ull z, ull mod) {
#ifdef __SIZEOF_INT128__
    __int128 result = ((__int128) a * (__int128) z) % (__int128) mod;
    return (ull) result;
#else
    // schrage method
	ull q = mod / a, r = mod % a;
	ull rzq = (r < q) ? r * (z/q) : mulull(r, z/q, mod);
	ull azq = a * (z % q);
	if (azq >= rzq) return azq-rzq; else return azq-rzq+mod;
#endif
}

/** Multiply two 64-bit unsigned integers to get a 128-bit unsigned integer (as a pair of ull) */
pair<ull,ull> mulull(ull a, ull b) {
#ifdef __SIZEOF_INT128__
    __int128 result = (__int128) a * (__int128) b;
    return {(ull) (result >> 64), (ull) result};
#else
    ull c = (ui)a, d = a>>32, e = (ui)b, f = b>>32, g = d*f, h = d*e, i = f*c, j = c*e, k = (j>>32)+(ui)h+(ui)i, left = g+(h>>32)+(i>>32)+(k>>32);
	return {left, ((h+i) << 32) + j};
#endif
}


bool fractionGreaterOrEqual(ll a, ll b, ll c, ll d) {
    if (b < 0) { b = -b; a = -a; }
    if (d < 0) { d = -d; c = -c; }
    return a < 0 && c < 0 ? mulull(-a, d) <= mulull(-c, b) : (a >= 0) && (c < 0 || mulull(a, d) >= mulull(c, b));
}

bool fractionGreaterOrEqual(pair<ll, ll> a, pair<ll, ll> b) {
    return fractionGreaterOrEqual(a.x, a.y, b.x, b.y);
}


bool fractionGreaterOrEqual(double a, double b, double c, double d) {
    return a/b >= c/d;
}

// this is based on modulus, but it's 2-3 times slower than the former
//bool fractionGreaterOrEqual(ll a, ll b, ll c, ll d) {
//	if (a<0 && c<0) return greaterOrEqual(-c,d,-a,b);
//	if (a<0) return false;
//	if (c<0) return true;
//	if (b==0) return true;
//	if (d==0) return false;
//	ll ab = a/b, cd = c/d;
//	if (ab > cd) return true;
//	if (ab < cd) return false;
//	return !greaterOrEqual(b, a%b, d, c%d);
//}

#endif //MAJK_INT128_H


/** Computing lower and upper envelope. Useful for "convex hull trick". */
namespace Envelope {
    template<typename T>
    struct Line {
        T m, b; int id;
        mutable function<const Line<T> *()> succ;

        bool operator<(const Line &rhs) const {
            if (rhs.b != numeric_limits<T>::min()) return m < rhs.m;
            const Line *s = succ();
            if (!s) return 0;
            return b - s->b < (s->m - m) * rhs.m;
        }
    };

    template<typename T>
    struct Upper : public multiset<Envelope::Line<T>> {
        using parent = multiset<Line<T>>;

        bool bad(typename parent::iterator y) {
            auto z = next(y);
            if (y == parent::begin()) {
                return z != parent::end() && y->m == z->m && y->b <= z->b;
            } else {
                auto x = prev(y);
                if (z == parent::end()) {
                    return y->m == x->m && y->b <= x->b;
                } else {
                    return fractionGreaterOrEqual(x->b - y->b, y->m - x->m, y->b - z->b, z->m - y->m);
                }
            }
        }

        void insert_line(T m, T b, int i = 0) {
            auto y = parent::insert({m, b, i});
            y->succ = [=] { return next(y) == parent::end() ? 0 : &*next(y); };
            if (bad(y)) { parent::erase(y); return; }
            while (next(y) != parent::end() && bad(next(y))) parent::erase(next(y));
            while (y != parent::begin() && bad(prev(y))) parent::erase(prev(y));
        }

        T operator[](T x) const {
            auto l = parent::lower_bound({x, numeric_limits<T>::min()});
            return l == parent::end() ? numeric_limits<T>::min() : l->m * x + l->b;
        }

        int best(T x) const {
            auto l = parent::lower_bound({x, numeric_limits<T>::min()});
            return l == parent::end() ? -1 : l->id;
        }
    };

    // Lower envelope. WARNING: the internal representation changes m & b.
    template<typename T>
    struct Lower : public Upper<T> {
        void insert_line(T m, T b, int i = 0) { Upper<T>::insert_line(-m, -b, i); }
        T operator[](T x) const { return -Upper<T>::operator[](x); }
    };
}

/* UpperEnvelope that with O(N) build and amortized O(1) query.
 * The updates need be sorted by (m,b), the queries need to be sorted by x, and
 * updates need to come before queries. */
namespace LinearEnvelope {
    template<typename T> struct Line { T m, b; int id; };

    template <typename T>
    struct Upper : public vector<Line<T>> {
        using parent = vector<Line<T>>;
        using parent::at; using parent::back; using parent::size;

        T t; int i;

        Upper() : t(0), i(0) {}

        void clear() {
            parent::clear();
            i = 0;
            t = 0;
        }

        void insert_line(T m, T b, int i = 0) {
            assert(t == 0);
            if (size() > 0 && back().m == m && back().b >= b) return;
            while (size() > 0 && ((back().b < b) || (back().b == b && back().m < m))) parent::pop_back();
            while (size() >= 2 && fractionGreaterOrEqual(at(size()-2).b - back().b, back().m - at(size()-2).m, back().b - b, m - back().m)) parent::pop_back();
            parent::push_back({m,b,i});
        }

        pair<T,int> advance(T x) {
            assert(x >= 0);
            t += x;
            while (i+1 < size() && at(i).m * t + at(i).b < at(i+1).m * t + at(i+1).b) ++i;
            return {at(i).m * t + at(i).b, at(i).id};
        }
    };};


#endif //MAJK_ENVELOPE_H


class DFedorRunsForPresident {
public:
    ll N;
    vector<vector<int>> E;
    vector<ll> S;
    ll ans;


    ll size(int u, int p) {
        S[u] = 1;
        for (int v : E[u]) if (v != p) S[u] += size(v, u);
        return S[u];
    }

    ll solve(int u, int p) {
        ll up = S[u] * (S[u] - 1) / 2;
        ll here = S[u] * (S[u] - 1) / 2 + (N-S[u]) * (N-S[u]+1)/2;
        vector<pair<ll,ll>> Q;
        for (int v : E[u]) {
            if (v != p) {
                ll x = solve(v, u);
                Q.push_back({x + (S[v] - (2*N-1)) * S[v] / 2, S[v]});
                up = min(up, x + (S[u] - S[v])*(S[u]-S[v]-1)/2);
                here = min(here, x + (S[u] - S[v])*(S[u]-S[v]-1)/2 + (N-S[u]) * (N-S[u]+1)/2);
            }
        }

        ans = min(ans, here);

//        cerr << Q;
        int M = Q.size();
//        for (int i = 0; i < M; ++i) {
//            ll cur = 10000;
//            for (int j = 0; j < i; ++j) {
//                ll c = N * (N-1)/2 + Q[i].x + Q[j].x + Q[i].y * Q[j].y;
//                cur = min(cur, c);
//            }
//            cerr << cur << endl;
//        }

        Envelope::Lower<ll> Env;
        for (int i = 0; i < M; ++i) {
            if (!Env.empty()) {
//                cerr << "best " << Q[i].y << ' ' << Env[Q[i].y] + Q[i].x << endl;
                ans = min(ans, Env[Q[i].y] + Q[i].x);
            }

//            cerr << "add line " << Q[i].x << ' ' << N * (N-1)/2 + Q[i].x << endl;
            Env.insert_line(Q[i].y, N * (N-1)/2 + Q[i].x);
//            for (int j = i+1; j < M; ++j) {
//                ll c = N * (N-1)/2 + Q[i].x + Q[j].x + Q[i].y * Q[j].y;
//                ans = min(ans, c);
//            }
        }

        return up;
    }

    void solve(istream& cin, ostream& cout) {
        cin >> N;
        ans = N*(N-1)/2;

        E.resize(N);
        S.resize(N);
        for (int i = 0; i < N - 1; ++i) {
            int u, v;
            cin >> u >> v;
            --u;
            --v;
            E[u].push_back(v);
            E[v].push_back(u);
        }
        size(0, -1);
        solve(0, -1);

        cout << N*(N-1) - ans << '\n';
    }
};


int main() {
	ios_base::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr);
	DFedorRunsForPresident solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
    return 0;
}