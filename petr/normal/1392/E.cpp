/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <algorithm>
#include <array>
#include <bitset>
#include <cassert>
#include <climits>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <functional>
#include <iostream>
#include <map>
#include <memory>
#include <numeric>
#include <queue>
#include <random>
#include <set>
#include <stack>
#include <string>
#include <unordered_set>
#include <unordered_map>
#include <vector>

#define pb push_back
#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()
#define mp make_pair

using namespace std;

typedef long long int64;
typedef vector<int> vi;
typedef pair<int, int> ii;

class TaskE {
 public:
  void solveOne(istream &in, ostream &out) {
    int n;
    in >> n;
    for (int i = 0; i < n; ++i) {
      for (int j = 0; j < n; ++j) {
        if (j % 2 == 0) {
          out << 0 << " ";
        } else {
          out << (int64(1) << (i + j)) << " ";
        }
      }
      out << "\n";
    }
    out.flush();
    int q;
    in >> q;
    for (int it = 0; it < q; ++it) {
      int i = 0;
      int j = 0;
      int64 val;
      in >> val;
      out << (i + 1) << " " << (j + 1) << "\n";
      for (int step = 0; step < 2 * n - 2; ++step) {
        if (val & (int64(1) << (step + 1))) {
          if (j % 2 == 0) {
            ++j;
          } else {
            ++i;
          }
        } else {
          if (j % 2 == 0) {
            ++i;
          } else {
            ++j;
          }
        }
        out << (i + 1) << " " << (j + 1) << "\n";
      }
      out.flush();
    }
  }

  void solve(std::istream &in, std::ostream &out) {
    int nt = 1;
    for (int it = 0; it < nt; ++it) {
      solveOne(in, out);
    }
  }
};


int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  TaskE solver;
  std::istream& in(std::cin);
  std::ostream& out(std::cout);
  solver.solve(in, out);
  return 0;
}