/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 2e5 + 10;
const ll LOG = 20;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n, q, t, H[MAXN], par[MAXN][LOG], ind[MAXN], sz[MAXN];
vector<ll> adj[MAXN], vec[MAXN];

void DFS(ll v, ll p = 0) {
    par[v][0] = p;
    for (ll i = 1; i < LOG; i++) par[v][i] = par[par[v][i - 1]][i - 1];
    ind[v] = ++t;
    sz[v] = 1;
    H[v] = H[p] + 1;
    vec[H[v]].push_back(ind[v]);
    for (ll u : adj[v]) {
        DFS(u, v);
        sz[v] += sz[u];
    }
}

ll lift(ll v, ll h) {
    for (ll i = 0; i < LOG; i++) {
        if (h & (1LL << i)) v = par[v][i];
    }
    return v;
}

int main() {
    fast_io;

    cin >> n;
    for (ll i = 1; i <= n; i++) {
        ll p;
        cin >> p;
        adj[p].push_back(i);
    }
    DFS(0);
    ind[0] = INF;

    cin >> q;
    while (q--) {
        ll v, p;
        cin >> v >> p;
        ll u = lift(v, p);
        ll ans = ll(upper_bound(all(vec[H[v]]), ind[u] + sz[u] - 1) - lower_bound(all(vec[H[v]]), ind[u])) - 1;
        cout << max(0LL, ans) << sep;
    }

    return 0;
}
/*

*/