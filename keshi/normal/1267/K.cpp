/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll t, k, cnt[MAXN], fact[21];

ll C(ll n, ll r) {
    if (r < 0 || r > n) return 0;
    return fact[n] / fact[r] / fact[n - r];
}

int main() {
    fast_io;

    fact[0] = 1;
    for (ll i = 1; i < 21; i++) fact[i] = fact[i - 1] * i;

    cin >> t;
    while (t--) {
        fill(cnt, cnt + 100, 0);
        cin >> k;
        ll mx = 0;
        for (ll i = 2; k != 0; i++) {
            cnt[k % i]++;
            k /= i;
            mx = i;
        }

        ll ans = 0;
        for (ll i = 1; i < mx; i++) {
            if (cnt[i] == 0) continue;
            cnt[i]--;
            ll t = 0, cur = 1;
            for (ll j = mx - 1; j >= 1; j--) {
                cur *= C(t, cnt[j]);
                t -= cnt[j];
                t++;
            }
            cnt[i]++;
            ans += cur;
        }
        cout << ans - 1 << endl;
    }

    return 0;
}
/*

*/