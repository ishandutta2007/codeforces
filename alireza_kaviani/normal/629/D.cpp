/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */


#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e5 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;
const ld PI = acos(-1);

ll n, R[MAXN], H[MAXN], V[MAXN], v[MAXN], seg[MAXN << 2];
vector<ll> compress;

void modify(int x, ll val, int id = 1, int l = 0, int r = MAXN) {
    if (r <= x || x < l) return;
    if (r - l == 1) {
        seg[id] = max(seg[id], ll(val));
        return;
    }
    int mid = l + r >> 1;
    modify(x, val, id << 1, l, mid);
    modify(x, val, id << 1 | 1, mid, r);
    seg[id] = max(seg[id << 1], seg[id << 1 | 1]);
}

ll get(int ql, int qr, int id = 1, int l = 0, int r = MAXN) {
    if (r <= ql || qr <= l || r <= l || qr <= ql) return 0;
    if (ql <= l && r <= qr) return seg[id];
    int mid = l + r >> 1;
    return max(get(ql, qr, id << 1, l, mid), get(ql, qr, id << 1 | 1, mid, r));
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    cin >> n;
    for (ll i = 1; i <= n; i++) {
        cin >> R[i] >> H[i];
        V[i] = R[i] * R[i] * H[i];
        compress.push_back(V[i]);
    }
    Sort(compress);

    for (ll i = 1; i <= n; i++) v[i] = lower_bound(all(compress), V[i]) - compress.begin();

    for (ll i = 1; i <= n; i++) {
        modify(v[i], get(0, v[i]) + V[i]);
    }
    cout << fixed << setprecision(20) << seg[1] * PI << endl;

    return 0;
}
/*

*/