/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

// Actual solution is at the bottom

#include <algorithm>
#include <array>
#include <bitset>
#include <cassert>
#include <climits>
#include <cstdint>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <memory>
#include <numeric>
#include <queue>
#include <random>
#include <set>
#include <stack>
#include <string>
#include <unordered_set>
#include <unordered_map>
#include <vector>
//#include "../atcoder/all"

#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()

using namespace std;

typedef int64_t int64;
typedef pair<int, int> ii;

class CSimmetrichniiAmfiteatr {
 public:
  void solveOne() {
    int n;
    cin >> n;
    for (int m = 1; m <= n; ++m) {
      for (int diag = 1; diag <= m; ++diag) {
        int min = diag * diag;
        int max = m * m - (m - diag) * (m - diag);
        if (min <= n && n <= max && (n - min) % 2 == 0) {
          vector<vector<char>> field(m, vector<char>(m, '.'));
          for (int r = 0; r < diag; ++r) {
            for (int c = 0; c < diag; ++c) {
              field[r][c] = 'o';
              --n;
            }
          }
          for (int s = 0; s < 2 * m; ++s) {
            for (int r = 0; r < m; ++r) {
              int c = s - r;
              if (c < m && c >= 0 && (r < diag || c < diag) && field[r][c] == '.') {
                int size = 2;
                if (size <= n) {
                  n -= size;
                  field[r][c] = 'o';
                  field[c][r] = 'o';
                }
              }
            }
          }
          assert(n == 0);
          cout << m << "\n";
          for (int r = m - 1; r >= 0; --r) {
            cout << string(all(field[r])) << "\n";
          }
          return;
        }
      }
    }
    cout << -1 << "\n";
  }

  void solve() {
    int nt = 1;
    for (int it = 0; it < nt; ++it) {
      solveOne();
    }
  }
};


int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(0);
    CSimmetrichniiAmfiteatr solver;


    solver.solve();
    return 0;
}