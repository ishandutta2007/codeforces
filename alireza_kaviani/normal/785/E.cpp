/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;
typedef pair<ld, ld> pld;
typedef pair<string, string> pss;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define file_io                     freopen("in.txt" , "r" , stdin) ; freopen("out.txt" , "w" , stdout);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

inline ll input() {
    ll n;
    cin >> n;
    return n;
}

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

set_random;

const ll MAXN = 2e5 + 10;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

template<ll N>
struct SegTree {
    Tree<ll> seg[4 * N];

    void Insert(ll id , ll l , ll r , ll x , ll val){
        if(x < l || r < x)  return;
        seg[id].insert(val);
        if(l == r)  return;

        ll mid = (l + r) >> 1;
        Insert(id * 2 , l , mid , x , val);
        Insert(id * 2 | 1 , mid + 1 , r , x , val);
    }

    void Remove(ll id, ll l, ll r, ll x, ll val) {
        if (x < l || r < x) return;
        seg[id].erase(val);
        if(l == r)  return;

        ll mid = (l + r) >> 1;
        Remove(id * 2, l, mid, x, val);
        Remove(id * 2 | 1, mid + 1, r, x, val);
    }

    ll Get(ll id, ll l, ll r, ll ql, ll qr , ll x) {
        if (qr < l || r < ql || l > r)  return 0;
        if (ql <= l && r <= qr){
            return seg[id].order_of_key(x);
        }

        ll mid = (l + r) >> 1;
        return Get(id * 2, l, mid, ql, qr , x) + Get(id * 2 | 1, mid + 1, r, ql, qr , x);
    }

    void insert(ll x, ll val){
        Insert(1 , 0 , N - 1 , x , val);
    }
    void remove(ll x, ll val) {
        Remove(1, 0, N - 1, x, val);
    }
    ll get(ll ql, ll qr , ll x) {
        return Get(1, 0, N - 1, ql, qr , x);
    }
};

ll n , q , l , r , ans , val[MAXN];
SegTree<MAXN> seg;

int main() {
    fast_io;

    cin >> n >> q;
    for(ll i = 1 ; i <= n ; i++){
        seg.insert(i , i);
        val[i] = i;
    }

    while(q--){
        cin >> l >> r;
        if(l > r)   swap(l , r);
        if(val[r] > val[l]) ans++;
        if(val[r] < val[l]) ans--;
        ans -= seg.get(l + 1 , r - 1 , val[l]);
        ans -= (r - 1 - (l + 1) + 1) - seg.get(l + 1 , r - 1 , val[r]);
        ans += (r - 1 - (l + 1) + 1) - seg.get(l + 1 , r - 1 , val[l]);
        ans += seg.get(l + 1 , r - 1 , val[r]);
        seg.remove(l , val[l]);
        seg.remove(r , val[r]);
        seg.insert(r , val[l]);
        seg.insert(l , val[r]);
        swap(val[l] , val[r]);
        cout << ans << endl;
    }

    return 0;
}
/*
todo :
    1- set constants
    2- check TimeLimit and MemoryLimit
    3- check special test cases
    4- don't forget BS can help you that is good idea(use for loop for floats)
    5- don't forget printf and scanf can help you in your code speed
*/