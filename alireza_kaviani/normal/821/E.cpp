/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll LOG = 60;
const ll MAXC = 20;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n, k, A[MAXN], B[MAXN], C[MAXN], DP[MAXC][LOG][MAXC][MAXC], dp[MAXN][MAXC];

int main() {
    fast_io;

    for (ll i = 0; i < MAXC; i++) {
        for (ll j = 0; j <= i; j++) {
            DP[i][0][j][min(i, j + 1)] = DP[i][0][j][j] = DP[i][0][j][max(0LL, j - 1)] = 1;
        }
        for (ll j = 1; j < LOG; j++) {
            for (ll k = 0; k <= i; k++) {
                for (ll l = 0; l <= i; l++) {
                    for (ll m = 0; m <= i; m++) {
                        DP[i][j][k][l] = (DP[i][j][k][l] + DP[i][j - 1][k][m] * DP[i][j - 1][m][l]) % MOD;
                    }
                }
            }
        }
    }

    cin >> n >> k;
    for (ll i = 0; i < LOG; i++) dp[i][0] = 1;
    for (ll i = 1; i <= n; i++) {
        cin >> A[i] >> B[i] >> C[i];
        B[i] = min(B[i], k);
        for (ll j = 0; j < LOG; j++) {
            if ((B[i] - A[i]) & (1LL << j)) {
                for (ll k = 0; k <= C[i]; k++) {
                    for (ll l = 0; l <= C[i]; l++) {
                        dp[i * LOG + j][k] = (dp[i * LOG + j][k] + dp[i * LOG + j - 1][l] * DP[C[i]][j][l][k]) % MOD;
                    }
                }
            } else {
                for (ll k = 0; k < MAXC; k++) dp[i * LOG + j][k] = dp[i * LOG + j - 1][k];
            }
        }
    }
    cout << dp[n * LOG + LOG - 1][0] << endl;

    return 0;
}
/*

*/