/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author RiaD
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <algorithm>


template <typename T>
T gcd(T a, T b) {
	while (b) {
		T tmp = a % b;
		a = b;
		b = tmp;
	}
	return a;
}

using namespace std;

class TaskA {
public:
	void solve(std::istream& in, std::ostream& out) {
		int64_t p, q, b;
		//in >> p >> q >> b;
		scanf("%lld %lld %lld", &p, &q, &b);
		int64_t g = gcd(p, q);
		q /= g;

		for (int x: {2,3,5, 7, 11}) {
			if (b % x == 0) {
				while (q % x == 0) {
					q /= x;
				}
			}
		}
		while (true) {
			auto g = gcd(q, b);
			if (g == 1) {
				break;
			}
			q /= g;
			b = g;
		}

		if (q == 1) {
			//out << "Finite\n";
			puts("Finite");
		} else {
			puts("Infinite");
			//out << "Infinite\n";
		};

	}
};


int main() {
	std::ios_base::sync_with_stdio(false);
	TaskA solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	in.tie(0);
	out << std::fixed;
	out.precision(20);
	int n;
//in >> n;
	scanf("%d", &n);
for(int i = 0; i < n; ++i) {
	solver.solve(in, out);
}

	return 0;
}