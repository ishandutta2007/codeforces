/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author majk
 */

#ifndef MAJK_LIB
#define MAJK_LIB

#include <vector>
#include <stack>
#include <iostream>
#include <unordered_map>
#include <unordered_set>
#include <map>
#include <iomanip>
#include <set>
#include <functional>
#include <fstream>
#include <algorithm>
#include <cassert>
#include <cmath>
#include <string>
#include <sstream>
#include <queue>
#include <array>
#include <bitset>
using namespace std;

#define x first
#define y second
typedef std::pair<int,int> pii; typedef long long ll; typedef unsigned long long ull; typedef unsigned int ui; typedef pair<ui,ui> puu;

template <typename T, typename U> std::istream&operator>>(std::istream&i, pair<T,U>&p) {i >> p.x >> p.y; return i;}
template<typename T>std::istream&operator>>(std::istream&i,vector<T>&t) {for(auto&v:t){i>>v;}return i;}
template <typename T, typename U> std::ostream&operator<<(std::ostream&o, const pair<T,U>&p) {o << p.x << ' ' << p.y; return o;}
template<typename T>std::ostream&operator<<(std::ostream&o,const vector<T>&t) {if(t.empty())o<<'\n';for(size_t i=0;i<t.size();++i){o<<t[i]<<" \n"[i == t.size()-1];}return o;}
template<typename T> using minheap = priority_queue<T, vector<T>, greater<T>>;
template<typename T> using maxheap = priority_queue<T, vector<T>, less<T>>;
template <typename T> bool in(T a, T b, T c) { return a <= b && b < c; }
ui logceil(ll x) { return x?8*sizeof(ll)-__builtin_clzll(x):0; }

namespace std { template<typename T,typename U>struct hash<pair<T,U>>{hash<T>t;hash<U>u;size_t operator()(const pair<T,U>&p)const{return t(p.x)^(u(p.y)<<7);}}; }
template<typename T,typename F>T bsh(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){l=m+1;r=m;}else{h=m-1;}}return r;}
template<typename F> double bshd(double l,double h,const F&f,double p=1e-9){ui r=3+(ui)log2((h-l)/p);while(r--){double m=(l+h)/2;if(f(m)){l=m;}else{h=m;}}return (l+h)/2;}
template<typename T,typename F>T bsl(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){h=m-1;r=m;}else{l=m+1;}}return r;}
template<typename F> double bsld(double l,double h,const F&f,double p=1e-9){ui r=3+(ui)log2((h-l)/p);while(r--){double m=(l+h)/2;if(f(m)){h=m;}else{l=m;}}return (l+h)/2;}
template<typename T> T gcd(T a,T b) { if (a<b) swap(a,b); return b?gcd(b,a%b):a; }


template<typename T>class vector2:public vector<vector<T>>{public:vector2(){} vector2(size_t a,size_t b,T t=T()):vector<vector<T>>(a,vector<T>(b,t)){}};
template<typename T>class vector3:public vector<vector2<T>>{public:vector3(){} vector3(size_t a,size_t b,size_t c,T t=T()):vector<vector2<T>>(a,vector2<T>(b,c,t)){}};
template<typename T>class vector4:public vector<vector3<T>>{public:vector4(){} vector4(size_t a,size_t b,size_t c,size_t d,T t=T()):vector<vector3<T>>(a,vector3<T>(b,c,d,t)){}};
template<typename T>class vector5:public vector<vector4<T>>{public:vector5(){} vector5(size_t a,size_t b,size_t c,size_t d,size_t e,T t=T()):vector<vector4<T>>(a,vector4<T>(b,c,d,e,t)){}};


#endif
#ifndef MAJK_RANDOM_H
#define MAJK_RANDOM_H

#include <random>
#include <chrono>
auto seed = chrono::high_resolution_clock::now().time_since_epoch().count();
std::mt19937 rng(seed);
using random_int = std::uniform_int_distribution<int>;
using random_ll = std::uniform_int_distribution<ll>;
struct TimeLimit {
    TimeLimit(double seconds) : s(seconds-0.2), last(clock()), mx(0) {}
    operator bool() const { clock_t cur = clock(); mx = max(mx, cur-last); last = cur; return clock() < s * CLOCKS_PER_SEC - 1.5 * mx; }
    double s; mutable clock_t last, mx;
};

#endif //MAJK_RANDOM_H


constexpr int LOG = 17;
ui P[LOG][100000][31];

class DForeigner {
public:
    void set(ui *A, int idx, int v) {
        int x = idx>>2;
        int y = idx%4*8;
        A[x] &= ~(255ULL<<y);
        A[x] |= ull(v)<<y;
    }

    int get(ui *A, int idx) {
        int x = idx>>2;
        int y = idx%4*8;
        return (A[x]>>y)&255;
    }


    void solve(istream& cin, ostream& cout) {
        vector2<int> X(11, 11);
        for (int i = 0; i < 11; ++i) {
            for (int j = 0; j < 11; ++j) {
                int inbetween = 0;
                for (int k = i+1; k != j; k=(k+1)%11) {
                    inbetween += k;
                }
                X[i][j] = inbetween;
            }
        }

        vector<int> In(100, -1);
        int c = 9;
        for (int i = 1; i <= 9; ++i) In[i] = i;
        for (int i = 10; i < 100; ++i) {
            int x = i/10;
            if (In[x] != -1 && In[x] - i % 10 > 0) {
                int j = ++c;
                In[i] = j%11;
            }
        }

        int off = 255;

        string S; cin >> S;
        int N = S.size();
//        int N = 10000;
//        string S;
//        random_int RR(0, 9);
//        for (int i = 0; i < N; ++i) {
//            S += char('0' + RR(rng));
//        }
        for (int i = 1; i < N; ++i) {
            for (int j = 0; j < 11; ++j) {
                for (int k = 0; k < 11; ++k) {
                    if (S[i]-'0' < k) {
                        set(P[0][i], j*11+k, k*11 + (11 + X[j][k] + j + k - (S[i - 1] - '0') + (S[i] - '0')) % 11);
                    } else {
                        set(P[0][i], j*11+k, off);
                    }
                }
            }
        }

        for (int l = 0; l < LOG-1; ++l) {
            for (int i = 0; i < N; ++i) {
                for (int j = 0; j < 11; ++j) {
                    for (int k = 0; k < 11; ++k) {
                        int w = i+(1<<l);
                        if (w >= N) set(P[l+1][i], j*11+k, off);
                        else {
                            auto a = get(P[l][i], j*11+k);
                            if (a == off) {
                                set(P[l+1][i], j*11+k, off);
                            } else {
                                set(P[l+1][i], j*11+k, get(P[l][w], a));
                            }
                        }
                    }
                }
            }
        }


        ll ans = 0;
        for (int i = 0; i < N; ++i) {
            if (S[i] == '0') {}
            else if (i == N-1) ans++;
            else {
                int a = (S[i]-'0');
                int d = a*10 + (S[i+1]-'0');
                int b = In[d];
                int q = a*11 + b;
                if (b == -1) ans++;
                else {
                    int r = i+2;
                    for (int l = LOG-1; l >= 0 && r < N; --l) {
                        auto x = get(P[l][r], q);
                        if (x != off) {
                            q = x;
                            r += 1<<l;
                        }
                    }
                    ans += min(r,N)-i;
                }
            }
        }
        cout << ans << '\n';


////
//        map<int, int> Inn;
//        for (int i = 1; i <= 9; ++i) In[i] = i;
//        for (int i = 10; i < 1000; ++i) {
//            int x = i/10;
//            auto it = Inn.find(x);
//
//            if (it != Inn.end() && it->y - i % 10 > 0) {
//
//                int j = Inn.size() + 1;
//                Inn[i] = j%11;
//
//                if (x >= 10) {
//                    int p = it->y;
//                    int gp = In[x/10];
//                    int k = (X[gp][p] + gp + p - x%10 + i%10) % 11;
//                    if (k != j%11) cout << "Fail\n";
//                }
//
//            }
//        }

//        cout << P[0][2][4][5] << endl;
//
//        cout << Inn[402] << endl;
//
//        vector<int> G;
//        for (auto in: In) G.push_back(in.x);
//        cout << G;
    }
};


int main() {
	ios_base::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr);
	DForeigner solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
    return 0;
}