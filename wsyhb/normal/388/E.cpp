#include<bits/stdc++.h>
using namespace std;
namespace IO
{
    const int buffer_size=1e5+5;
    char buf[buffer_size],*S,*T;
    bool flag_EOF;
    inline char read_char()
    {
        if(S==T)
            T=(S=buf)+fread(buf,1,buffer_size,stdin);
        return S!=T?*(S++):EOF;
    }
    inline int read_int()
    {
        int flag=1;
        char c=read_char();
        while(c<'0'||c>'9')
        {
            if(c==EOF)
            {
                flag_EOF=true;
                return 0;
            }
            flag=(c=='-'?-1:1);
            c=read_char();
        }
        int x=0;
        while(c>='0'&&c<='9')
        {
            x=x*10+(c^48);
            c=read_char();
        }
        return x*flag;
    }
}
const int max_n=2e3+5;
struct Node
{
	double x,y,vx,vy;
}node[max_n];
double T[max_n];
struct Vector
{
	double x,y;
}v[max_n];
const double eps=1e-7;
inline bool equal(double x,double y)
{
	return fabs(x-y)<eps;
}
inline bool operator < (const Vector &a,const Vector &b)
{
	return equal(a.x*b.y,a.y*b.x)?(equal(a.x,b.x)?a.y<b.y:a.x<b.x):a.x*b.y<a.y*b.x;
//	return equal(atan2(a.x,a.y),atan2(b.x,b.y))?(equal(a.x,b.x)?a.y<b.y:a.x<b.x):atan2(a.x,a.y)<atan2(b.x,b.y);
}
int main()
{
	int n=IO::read_int();
	for(int i=1;i<=n;++i)
	{
		int t1=IO::read_int(),X1=IO::read_int(),Y1=IO::read_int(),t2=IO::read_int(),X2=IO::read_int(),Y2=IO::read_int();
		node[i].vx=1.0*(X1-X2)/(t1-t2),node[i].vy=1.0*(Y1-Y2)/(t1-t2);
		node[i].x=X1-t1*node[i].vx,node[i].y=Y1-t1*node[i].vy;
	}
	int ans=0;
	for(int i=1;i<=n;++i)
	{
		int cnt=0;
		for(int j=1;j<=n;++j)
		{
			if(i^j)
			{
				double x=node[j].x-node[i].x,y=node[j].y-node[i].y,vx=node[j].vx-node[i].vx,vy=node[j].vy-node[i].vy,t=vx?x/vx:y/vy;
				if(equal(vx*t,x)&&equal(vy*t,y))
					T[++cnt]=t,v[cnt].x=vx,v[cnt].y=vy;	
			}
		}
		sort(T+1,T+cnt+1);
		for(int j=1;j<=cnt;++j)
		{
			int k=j+1;
			while(k<=cnt&&equal(T[k],T[j]))
				++k;
			ans=max(ans,k-j);
			j=k-1;
		}
		sort(v+1,v+cnt+1);
		for(int j=1;j<=cnt;++j)
		{
			int k=j+1,c=0;
			while(k<=cnt&&equal(v[j].x*v[k].y,v[j].y*v[k].x))
			{
				if(equal(v[k-1].x,v[k].x)&&equal(v[k-1].y,v[k].y))
					++c;
				++k;
			}
			ans=max(ans,k-j-c);
			j=k-1;
		}
	}
	printf("%d\n",ans+1);
    return 0;
}
/*
79
665956 -445425 931886 760718 -771465 859152
-334490 932526 496368 -330190 -136362 -373504
377844 -626110 891906 897500 -980600 137872
787371 -955002 -776608 -578440 -360508 -170431
353552 139608 548662 173197 531976 -389144
996119 26161 -125408 -213290 -872753 91348
-1710 -903272 389874 986760 745740 897615
-180390 296444 -180438 -928251 -162582 -506364
-8417 -396840 646109 -722912 -388642 -644144
65453 -838920 -908739 -846414 297300 -479856
759795 132004 -511982 -357904 -197912 -276344
-853292 822810 -561120 -200340 -19319 833545
-44952 -1904 -724000 -694432 -635680 -145548
991920 452080 -882680 645914 634688 -148789
-151052 -396080 434208 -773850 -832810 -891453
-185339 -356694 -872856 383358 -410000 39832
-134090 -650730 -612404 -188640 464335 951404
-397440 -777822 972318 165561 -931600 536778
521925 333685 -729704 -414514 32278 -407360
-573800 -805656 858925 603136 787100 -595459
302 -364993 143111 -427 -1083058 382223
-927090 972148 382920 -938274 -82890 151639
387704 -191676 -310500 543000 145806 -238988
-274296 788406 804310 -692700 -196000 -419884
-587941 331904 776376 -3520 -344160 -439636
630054 -744947 -954853 545172 -316968 -62645
341728 -571846 -519720 166872 806860 -489420
-22948 -32605 705298 88540 242896 91120
-915388 -843670 100760 811448 884528 641631
606556 279770 674292 653000 -79450 -374415
798250 -498415 989600 537856 878716 -680182
-897432 775308 781004 608392 -618805 -135900
363 -304908 211303 -491 -1146098 252295
884520 39389 948688 -630596 71552 723904
279394 660608 -32500 236936 40148 -772072
640550 395035 614629 -337640 404996 -297740
-910570 600580 887250 -995650 -966432 808293
-392784 -512480 901410 -746190 -363018 -908585
893892 -568848 -532192 508364 -518792 543606
539856 -660825 786674 910032 875980 -15772
-941476 -661830 -593440 -575200 -115332 -366828
-205062 526701 813060 -615107 792368 633561
-427329 -41186 -301850 916744 671240 871596
-302161 -764127 -770422 607785 -164585 -985680
-998756 -600632 525886 656150 -185103 -755800
990232 397820 -714600 -113200 -395201 -855114
962224 109448 875085 -755328 945037 -365460
721655 726592 -711940 -586578 -709815 517925
-70747 -648912 -70960 -865700 -239936 -963828
253 -413258 -23937 -850 -1499713 955527
-874500 969980 -963096 951667 -100352 407322
776934 -585752 -467700 -819730 182641 -480256
311660 560158 -713690 257352 -124368 98536
-237172 -194688 621950 -439574 -290232 265124
236768 -107660 464497 302688 -718353 707500
550340 -970550 -628119 177287 873148 -648336
196856 -36179 156792 960876 -823240 345362
748080 -220246 479804 -986665 -63232 926080
227840 -791434 345524 -974854 -812820 -800708
-508302 -547288 -716692 560350 -173456 -739440
849340 195529 -643100 -223395 827040 -825376
-135195 -178256 -472264 -496156 -328352 227230
591958 -958939 -5988 843367 831790 777784
755986 -559851 848755 88154 413730 -250444
-51540 -73581 -300565 670704 520855 -943088
-154310 -244951 -23514 817378 -820552 875010
-454581 -565614 868317 -107506 849772 -732960
275530 431197 412460 75542 -981012 551671
-630504 -860456 228005 -945776 118487 171400
-875930 -311990 115720 650000 -898212 974300
734645 -450127 703570 892084 85736 -884569
-348780 -480100 224580 638050 922286 -296624
330941 366500 544283 -730968 905296 -600437
671300 297117 -373750 909230 370800 -233282
107666 482575 57405 -426084 497800 -546608
469646 164880 -796595 544878 -867644 833110
-674044 -294352 547426 57696 40930 -153632
502409 -517423 -993544 823438 318518 -847800
131237 125300 408764 962189 -60161 529532
---
3
*/