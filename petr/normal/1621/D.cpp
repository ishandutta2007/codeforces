/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

// Actual solution is at the bottom

#undef NDEBUG

#include <algorithm>
#include <array>
#include <bitset>
#include <cassert>
#include <climits>
#include <cstdint>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <memory>
#include <numeric>
#include <queue>
#include <random>
#include <set>
#include <stack>
#include <string>
#include <unordered_set>
#include <unordered_map>
#include <vector>
// AtCoder library from https://github.com/atcoder/ac-library
// #include "../atcoder/all"

#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()

using namespace std;

typedef int64_t int64;
typedef pair<int, int> ii;

class DZimniiPokhod {
 public:
  void solveOne() {
    int n;
    cin >> n;
    vector<vector<int64>> c(2 * n, vector<int64>(2 * n));
    for (auto& x : c) for (auto& y : x) cin >> y;
    int64 res = 0;
    for (int i = n; i < 2 * n; ++i) {
      for (int j = n; j < 2 * n; ++j) {
        res += c[i][j];
      }
    }
    vector<int64> u;
    u.push_back(c[n][0]);
    u.push_back(c[n][n - 1]);
    u.push_back(c[2 * n - 1][0]);
    u.push_back(c[2 * n - 1][n - 1]);
    u.push_back(c[0][n]);
    u.push_back(c[n - 1][n]);
    u.push_back(c[0][2 * n - 1]);
    u.push_back(c[n - 1][2 * n - 1]);
    int64 b = u[0];
    for (auto x : u) b = min(b, x);
    res += b;
    cout << res << "\n";
  }

  void solve() {
    int nt;
    cin >> nt;
    for (int it = 0; it < nt; ++it) {
      // cout << "Case #" << (it + 1) << ": ";
      solveOne();
    }
  }
};

// #define st_mtimespec st_mtim

int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(0);
    DZimniiPokhod solver;


    solver.solve();
    return 0;
}