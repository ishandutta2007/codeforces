/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Azat Ismagilov
 */

/**********.*****.**************************:-******-:*******************
**********......:*****************+@%@*+#@@@+.****.***********************
...------........-*+*********+%#####@@@##########*************************
********:........----------%@#####################@@-...............------
**********......:********@%#####@###################@#@=+***************::
*********.:****--******%##@#####@#######################@*+***************
********.*******:-**+@@####@#@@@#################@#########=**************
*******-*********:*@@@######@###############################=*************
*****--**********%%@##@########@#############################=:***********
****.************+##################@#@@#####################@************
***.*************%######################@@###################=***********-
*-:**************=##########@@%%%%=%@=%=%=%@################@@**********.*
.****************########%++***+++****+++=+===+++***+=%@######%*******:-**
****************+#######%+*::::::::::::***********:::::**@@###%******.:***
****************#######@%*:::::::::::::::*:*****:::::::::*@@##@*****.*****
****************######@%+*:::::::-::::::::::::::::::::::::=@##%****-******
.......-------:*######=::::::----------:::::::::::::::::::+###:**--*******
............:==:%####=:::::----:-:::::::::::::::::::::::::=@##:-.:********
************=@++*%##@::::*=%%%@@###@=***::::::::::::::::::=@#@*..*********
************=**+@+@#*:::**+++%@#@###%@%%+*::*+=======*::::*##-:**.********
*************:=%%:%*::::*+=%##%###=@@@%=*::*=%@@@%%@@#@%::+#@:****.*******
:**************==:=:::--::::*++++=%@@@%*:--*%#@####@#=+***@@%@*****.******
--**************:-*::--------::**+***:::---*+%%%%%%@@%+*::#*@%******.*****
*:-************---*::::-----------::--:---::::+++++**:::::%*%********-:***
**:.************++*:::::--------::**+------::::::::::::::*++**********--**
****.**************::::::-----::**==:-------+*:::::---:::**************:-*
*****.***********.*::::::::-:::***:*+@**::**=+*::::::::::****************-
******.*:*%@######+::::::::::::::::::++++=******::::::::******************
******:############*::::::::****::::::*+*:*:*:***::::::*******************
******#############***::*:*:*+==@@##=======:*+***:::*:********************
******#############:*+**********:*++**+**++=%=***:*::*********************
.....##############::*++**************+***:*********###+******************
***:##############@*:**+=***:::**++===++***********#####%.................
*:*###############******++=+*:::::::*:::::*::***#########=****************
**:################%*****++==++********::::*+++=##########+***************
*:%##################******++++==+=++++++++++++@############**************
######################@******+++++++++++++++++=%#############*************
########################+++++++++++++++++++++==@#############@***********.
#########################%+++++++++++++++++===%###############%********:-*
########################@=#=++++++++++++====%@##################******-**/

#include <bits/stdc++.h>

#define int long long
#define fs first
#define sc second
#define pb push_back
#define ppb pop_back
#define pf push_front
#define ppf pop_front
#define mp make_pair
#define len(v) ((int)v.size())
#define vc vector
#define pr pair
#define endd "\n"; return 0;
#define all(v) v.begin(), v.end()

using namespace std;

const int MAXN = 2e6;
const int INF = 1e18;
const int MOD = 1e9 + 7;

class TaskD {
public:
    void solve(std::istream &in, std::ostream &out) {
        int n, m, k;
        in >> n >> m >> k;
        vc<pr<int, pr<int, int>>> kek;
        vc<pr<int, pr<int, int>>> kek1;
        kek.clear();
        kek1.clear();
        for (int i = 0; i < m; i++) {
            int a, b, c, d;
            in >> d >> a >> b >> c;
            if (a == 0) {
                kek1.pb(mp(d - 1, mp(b - 1, c)));
            } else {
                kek.pb(mp(d - 1, mp(a - 1, c)));
            }
        }
        sort(all(kek));
        sort(all(kek1));
        reverse(all(kek1));
        int everyplan[n];
        for (int i = 0; i < n; i++) {
            everyplan[i] = INF;
        }
        int count_not_used = n;
        int sumday[MAXN];
        int sumday1[MAXN];
        int sumnow = 0;
        int tek = 0;
        for (int i = 0; i < MAXN; i++) {
            while (tek < len(kek) && kek[tek].fs <= i) {
                if (everyplan[kek[tek].sc.fs] == INF) {
                    count_not_used--;
                    sumnow += kek[tek].sc.sc;
                    everyplan[kek[tek].sc.fs] = kek[tek].sc.sc;
                } else {
                    if (everyplan[kek[tek].sc.fs] > kek[tek].sc.sc) {
                        sumnow -= everyplan[kek[tek].sc.fs];
                        sumnow += kek[tek].sc.sc;
                        everyplan[kek[tek].sc.fs] = kek[tek].sc.sc;
                    }
                }
                tek++;
            }
            if (count_not_used > 0) {
                sumday[i] = -1;
            } else {
                sumday[i] = sumnow;
            }
        }
        for (int i = 0; i < n; i++) {
            everyplan[i] = INF;
        }
        count_not_used = n;
        sumnow = 0;
        tek = 0;
        for (int i = MAXN - 1; i >= 0; i--) {
            while (tek < len(kek1) && kek1[tek].fs >= i) {
                if (everyplan[kek1[tek].sc.fs] == INF) {
                    count_not_used--;
                    sumnow += kek1[tek].sc.sc;
                    everyplan[kek1[tek].sc.fs] = kek1[tek].sc.sc;
                } else {
                    if (everyplan[kek1[tek].sc.fs] > kek1[tek].sc.sc) {
                        sumnow -= everyplan[kek1[tek].sc.fs];
                        sumnow += kek1[tek].sc.sc;
                        everyplan[kek1[tek].sc.fs] = kek1[tek].sc.sc;
                    }
                }
                tek++;
            }
            if (count_not_used > 0) {
                sumday1[i] = -1;
            } else {
                sumday1[i] = sumnow;
            }
        }
        int ans = INF;
        for (int i = 0; i < MAXN; i++) {
            if (i + k + 1 < MAXN) {
                if (sumday[i] != -1 && sumday1[i + k + 1] != -1) {
                    ans = min(ans, sumday[i] + sumday1[i + k + 1]);
                }
            }
        }
        if (ans == INF) {
            out << -1;
        } else {
            out << ans;
        }
    }
};


main() {
    ios_base::sync_with_stdio(0);
    TaskD solver;
    std::istream &in(std::cin);
    std::ostream &out(std::cout);
    solver.solve(in, out);
    return 0;
}