/* Generated by powerful Codeforces Tool
 * You can download the binary file in here https://github.com/xalanq/cf-tool (Windows, macOS, Linux)
 * Author: AmShZ6
 * Time: 2020-05-31 19:05:01
**/
#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<int, int> pii;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
//#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll q , n , k , mx , mark[MAXN];
vector<ll> vec[MAXN];

ll ask(ll l , ll r){
    vector<ll> Q;
    for(int i = 1 ; i <= n ; i++)   if(mark[i] == 0)    Q.push_back(i);
    for(int i = l ; i <= r ; i++)   for(int j : vec[i]) Q.push_back(j);
    cout << "? " << SZ(Q) << sep;
    for(int i : Q)  cout << i << sep;
    cout << endl;
    ll x;
    cin >> x;
    return x;
}

ll solve(ll l , ll r){
    if(l == r)  return l;
    ll mid = (l + r) / 2;
    if(ask(l , mid) == mx)  return solve(l , mid);
    return solve(mid + 1 , r);
}

int main() {
    ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);

    cin >> q;
    while(q--){
        cin >> n >> k; mx = 0;
        fill(mark , mark + n + 10 , 0);
        fill(vec , vec + n + 10 , vector<ll>());
        for(int i = 1 ; i <= k ; i++){
            ll cnt; cin >> cnt;
            for(int j = 0 , x ; j < cnt ; j++)  cin >> x , mark[x] = i , vec[i].push_back(x);
        }
        mx = ask(1 , k);
        ll mxInd = solve(1 , k);
        vector<ll> ans;
        for(int i = 1 ; i <= k ; i++){
            if(i != mxInd)  ans.push_back(mx);
            else{
                vector<ll> Q;
                for(int j = 1 ; j <= n ; j++)   if(mark[j] != i)    Q.push_back(j);
                cout << "? " << SZ(Q) << sep;
                for(int j : Q)  cout << j << sep;
                cout << endl;
                ll x;
                cin >> x;
                ans.push_back(x);
            }
        }
        cout << "! ";
        for(int i : ans)    cout << i << sep;
        cout << endl;
        string s;
        cin >> s;
    }

    return 0;
}
/*

*/