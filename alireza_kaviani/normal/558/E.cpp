/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

set_random;

const ll MAXN = 1e5 + 10;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

struct Node{
    int cnt[27];
    int lazy = 0;

    friend Node merge(const Node &x , const Node &y){
        Node ans;
        for(int i = 0 ; i < 27 ; i++)    ans.cnt[i] = x.cnt[i] + y.cnt[i];
        return ans;
    }
};

template<class T , int N>
struct LazySegTree {
    T seg[4 * N];

    void Build(int id, int l, int r, const string &s) {
        if (l == r) {
            if(l >= s.size())
                return;
            seg[id].cnt[s[l] - 96] = 1;
            return;
        }
        int mid = (l + r) >> 1;
        Build((id << 1), l, mid, s);
        Build((id << 1) | 1, mid + 1, r, s);
        seg[id] = merge(seg[(id << 1)], seg[(id << 1) | 1]);
    }

    void Shift(int id, int l, int r) {
        if(seg[id].lazy == 0)   return;
        fill(seg[id].cnt , seg[id].cnt + 27 , 0);
        seg[id].cnt[seg[id].lazy] = (r - l + 1);
        if (l != r) {
            seg[(id << 1)].lazy = seg[id].lazy;
            seg[(id << 1) | 1].lazy = seg[id].lazy;
        }
        seg[id].lazy = 0;
    }

    void Update(int id, int l, int r, int ql, int qr, int val) {
        Shift(id, l, r);
        if (qr < l || r < ql || l > r)  return;
        if (ql <= l && r <= qr) {
            seg[id].lazy = val;
            Shift(id, l, r);
            return;
        }

        int mid = (l + r) >> 1;
        Update((id << 1), l, mid, ql, qr, val);
        Update((id << 1) | 1, mid + 1, r, ql, qr, val);
        seg[id] = merge(seg[(id << 1)], seg[(id << 1) | 1]);
    }

    Node Get(int id, int l, int r, int ql, int qr) {
        Shift(id, l, r);
        if (qr < l || r < ql || l > r)  return Node();
        if (ql <= l && r <= qr) return seg[id];

        int mid = (l + r) >> 1;
        return merge(Get((id << 1), l, mid, ql, qr), Get((id << 1) | 1, mid + 1, r, ql, qr));
    }

    void Print(int id, int l, int r, int ql, int qr) {
        Shift(id, l, r);
        if (qr < l || r < ql || l > r)  return;
        if (l == r){
            for(int i = 0 ; i < 27 ; i++){
                if(seg[id].cnt[i]){
                    printf("%c" , char(i + 96));
                }
            }
            return;
        }
        int mid = (l + r) >> 1;
        Print((id << 1), l, mid, ql, qr);
        Print((id << 1) | 1, mid + 1, r, ql, qr);
        return;
    }

    void build(const string &s) {
        Build(1, 0, N - 1, s);
    }
    void update(int ql, int qr, int val) {
        Update(1, 0, N - 1, ql, qr, val);
    }
    Node get(int ql, int qr) {
        return Get(1, 0, N - 1, ql, qr);
    }
    void print(int ql , int qr){
        Print(1, 0, N - 1, ql, qr);
    }
};

int n , q , l , r , k;
string s;
LazySegTree<Node , MAXN> seg;

int main() {
    //fast_io;

    scanf("%d%d" , &n , &q);
    cin >> s;
    s = "." + s;
    seg.build(s);

    while(q--){
        scanf("%d%d%d" , &l , &r , &k);
        Node cur = seg.get(l , r);

        for(ll i = (k == 1 ? 0 : 26) ; i >= 0 && i < 27 ; i += (k == 1 ? 1 : -1)){
            seg.update(l , l + cur.cnt[i] - 1 , i);
            l += cur.cnt[i];
        }
    }
    seg.print(1 , n);

    return 0;
}
/*

*/