/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <algorithm>
#include <queue>
#include <vector>
#include <set>
#include <map>
#include <cassert>
#include <functional>
#include <sstream>
#include <cmath>

#include <cstring>
#include <cstdio>

using namespace std;

typedef pair<int, int> ii;
typedef long long int64;
typedef vector<int> vi;

#define pb push_back
#define mp make_pair
#define all(v) (v).begin(),(v).end()
#define sz(v) ((int)(v).size())

template<class T> T abs(T x) { return x >= 0 ? x : -x; }
template<class T> T sqr(T x) { return x * x; }

class TaskC {
public:
	void solve(std::istream& in, std::ostream& out) {
	    int n;
	    in >> n;
	    vector<vi> g(n);
	    vi a(n);
	    vi p(n, -1);
	    for (int i = 0; i < n; ++i)
	        in >> a[i];
	    vi st(n + 10);
	    int ss = 0;
	    st[ss++] = 0;
	    for (int i = 1; i < n; ++i) {
	        int x = a[i];
	        assert(ss > 0);
            if (x == 1) {
                p[i] = st[ss - 1];
                g[st[ss - 1]].pb(i);
                st[ss++] = i;
            } else {
                while (x != a[st[ss - 1]] + 1) {
                    --ss;
                }
                assert(ss > 0);
                p[i] = p[st[ss - 1]];
                st[ss - 1] = i;
            }
	    }
	    vector<string> res(n);
	    for (int i = 0; i < n; ++i) {
	        string s;
	        if (p[i] != -1)
	            s = res[p[i]];
	        if (sz(s)) s += ".";
	        s += to_string(a[i]);
	        res[i] = s;
	    }
	    for (string s : res)
	        out << s << "\n";
	}
};


int main() {
	TaskC solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	int n;
in >> n;
for(int i = 0; i < n; ++i) {
	solver.solve(in, out);
}

	return 0;
}