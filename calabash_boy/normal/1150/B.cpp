/* Generated by powerful Codeforces Tool
 * Author: calabash_boy_love_15 
 * Time: 2019-05-03 16:27:21
 * Personal Code Template: https://github.com/4thcalabash/ACM-Code-Library
**/
#pragma GCC optimize(3)
#include <bits/stdc++.h>
using namespace std;
#ifdef __LOCAL_DEBUG__
# define _debug(fmt, ...) fprintf(stderr, "\033[91m[%s %3d]: " fmt "\n\033[0m", \
  __func__,__LINE__, ##__VA_ARGS__)
#else
# define _debug(...) (void(0))
#endif
#define PB(x) push_back(x)
#define rep(i,l,r) for (int i = l,_ = r;i< _;i++)
#define REP(i,l,r) for (int i=l,_=r;i<=_;i++)
#define leave(x) do {cout<<#x<<endl;fflush(stdout);return 0;}while (0);
#define untie do{ios::sync_with_stdio(false);cin.tie(nullptr);cout.tie(nullptr);}while (0)
#define range(x) x.begin(),x.end()
typedef long long LL;
typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef long double db;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;
const int inf = 0x3f3f3f3f;
const ll inf_ll = 0x3f3f3f3f3f3f3f3fLL;
/************* header ******************/

const int maxn = 55;
char s[maxn][maxn];
int n;
int dx[] = {0,1,2,1,1};
int dy[] = {0,0,0,-1,1};
void gao(int x,int y){
    for (int i=0;i<5;i++){
        int xx = x + dx[i];
        int yy = y + dy[i];
        if (xx <1 || xx > n || yy < 1 || yy > n || s[xx][yy] == '#'){
            puts("NO");
            exit(0);
        }
        s[xx][yy] = '#';
    }
}
int main(){
    scanf("%d",&n);
    bool all_s = true;
    for (int i=1;i<=n;i++){
        scanf("%s",&s[i][1]);
        for (int j=1;j<=n;j++){
            if (s[i][j] == '.')all_s = false;
        }
    }
    if (all_s){
        return puts("YES"),0;
    }
    while (1){
        bool all_ss = true;
        bool to_break = false;
        for (int i=1;i<=n;i++){
            for (int j=1;j<=n;j++){
                if (s[i][j] == '.'){
                    //cout<<i<<" "<<j<<endl;
                    all_ss = false;
                    gao(i,j);
                    to_break = true;
                    break;
                }
            }
            if (to_break)break;
        }
        if (all_ss){
            puts("YES");
            return 0;
        }
    }
    assert(0);
    return 0;
}