#include<bits/stdc++.h>
#define int long long
using namespace std;
const int N=2e5+5;

int read()
{
	int s=0;
	char c=getchar(),lc='+';
	while (c<'0'||'9'<c) lc=c,c=getchar();
	while ('0'<=c&&c<='9') s=s*10+c-'0',c=getchar();
	return lc=='-'?-s:s;
}
void write(int x)
{
	if (x<0) putchar('-'),x=-x;
	if (x<10) putchar(x+'0');
	else write(x/10),putchar(x%10+'0');
}
void print(int x=-1,char c='\n')
{
	write(x);
	putchar(c);
}
string s,tmp,a[N];
map<string,vector<string>>mp;
int lcp[N],ri[N],ans=0;
struct stk
{
	int l,r,lcp;
}st[N];
struct trie
{
	int cnt;
	vector<int>w[N];
	struct node
	{
		int son[26];
		vector<int>pos;
	}t[N];
	void insert(int m,int pos,string &s)
	{
		w[pos].resize(m+1);
		int now=0;
		t[0].pos.push_back(-pos);
		#define to t[now].son[s[i]-'a']
		for (int i=m;i>=1;i--)
		{
			if (!to) to=++cnt;
			now=to;
			t[now].pos.push_back(-pos);
			w[pos][i]=now;
		}
		#undef to
	}
	int query(int pos,int m,int x,int l,int r)
	{
		int now=0;
		if (x<=m) now=w[pos][x];
//		for (int i:t[now].pos) print(i,'.');puts("");
		int L=lower_bound(t[now].pos.begin(),t[now].pos.end(),-r)-t[now].pos.begin();
		int R=upper_bound(t[now].pos.begin(),t[now].pos.end(),-l)-t[now].pos.begin();
		return R-L;
	}
	void clear(int n)
	{
		for (int i=1;i<=n;i++) w[i].clear();
		for (int i=0;i<=cnt;i++) for (int j=0;j<26;j++) t[i].son[j]=0;
		for (int i=0;i<=cnt;i++) t[i].pos.clear();
		cnt=0;
	}
}t;
void solve(int n)
{
	int tot0=0,tot1=0,top=0,m=a[1].size()-1;
	sort(a+1,a+1+n);
	for (int i=1;i<n;i++) lcp[i]=0;
	for (int i=1;i<n;i++)
	for (int j=1;j<=m;j++)
	if (a[i][j]==a[i+1][j]) lcp[i]=j;
	else break;
	st[0]=(stk){n+1,n,m};
	st[++top]=(stk){n,n,m};
	t.insert(m,n,a[n]);
	for (int i=n-1;i>=1;i--)
	{
		while (top&&st[top].lcp>=lcp[i]) top--;
		top++;
		st[top]=(stk){i+1,st[top-1].l-1,lcp[i]};
		t.insert(m,i,a[i]);
		
		ri[m]=m;
		for (int j=m-1;j>=1;j--)
		if (a[i][j]<=a[i][j+1])
		ri[j]=ri[j+1];
		else ri[j]=j;
		
//		print(i,' ');print(top);
		for (int j=1;j<=top;j++)
		{
			int x=st[j].lcp;
//			print(i,',');print(ri[x+1]);
			if (x==m) tot0+=st[j].r-st[j].l+1;
			else tot1+=t.query(i,m,ri[x+1]+1,st[j].l,st[j].r);
		}
		st[++top]=(stk){i,i,m};
	}
	int tot2=n*(n-1)/2-tot0-tot1;
	ans+=tot1+tot2*2;
	t.clear(n);
//	cout<<a[1]<<endl;
//	print(tot0);
//	print(tot1);
//	print(tot2);
}

signed main(signed Recall,char *_902_[])
{
	(void)Recall,(void)_902_;
	int n=read(),tot=n*(n-1)/2;
	for (int i=1;i<=n;i++)
	{
		cin>>s;
		tmp=s;
		sort(tmp.begin(),tmp.end());
		mp[tmp].push_back(s);
	}
	for (auto x:mp)
	{
		int m=0;
		for (string i:x.second) a[++m]=" "+i;
		solve(m);
		tot-=1LL*m*(m-1)/2;
	}
	ans+=tot*1337;
	print(ans);
	
	return 0;
}
//....................  ..                        .    . . ..   .                                          .........
//...................  ....,]]]]]]`.   . .         . .,@@@@@@`.. .                                          ........
//................... ,@@@@@@@@@@@@@@@@@@\].,]]]]]`,@@@@@@@@@@@. .                                          ........
//....................@^...[@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@`                                            .......
//...................,@`......\@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@`.                                          .......
//...................=@......../@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@`.                                         .......
//...................=@....../@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@.                                         .......
//...................=@....=@@@@@@/[[[[[@@@@@@@@@@@@@@@@@/`...[@@@@^                                         .......
//...................=@.../@@@/`...........\@@@@@@@@@@@`........,@@@.                                     . ........
//......,/@@@@@@@O\]`.@`.=@@@`...............\@@@@@@@@`...........@@^                                       ........
//....,@^........,/@@@@^,@@/..................,@@@@@@^............,@@.                                     .........
//....//......,/@[=OOOOO=@@....................,@@@@@...]O@@]......=@^                                     .........
//....@`....]@OO^.=OOO/@@@^.../@@@@@@@`.........=@@@@.=@@@@@@@@....=@^                                     .........
//...=@...,@OOO/.......=@@^.,@@@@@@@@@@@........=@@@@,@@@@@@@@@@...=@^                                    ..........
//...=@..=@`............\@^,@@@@@@@@@@@@@........@@@@=@@@@@@@@@@^..=@.                                 .............
//...=@.=@@OO@@]........@@@=@@@@@@@@@@@@@^......=@@@@O@@@@@@@@@@^..//.                                  ............
//...=@,@`.   .,\@`....=@\@@@@@@@@@@@@@@@^......O@@@@@@@@@@@@@@@..=@.  ......  .  . .......            .............
//...=@@/ ........\@`..=@.\@@@@@@@@@@@@@@^.....=@@@@@@@@@@@@@@@^./@`...,/@O[[...[[[O@@/.=/ .  ...... ...............
//....@@^   /@OOOO@@@\.=@  =@@@@@@@@@@@@@...../@@@@@@@@@@@@@@/]/@/...,@`...............[@@[[O@\`,[[@]...............
//....\@^  =@OOOOOOOO@\.@. OO@@@@@@@@@@/...,@@@@@@@@@@@@@@@@@@@@` .,@`.......,^...........,`...,\@`..,@.............
//....,@^ .=OOOOOOOOOO@\O^.\OOOO@@@@@@@@@@@@@@@@@@@@@@@@@@@@@/... ,@........=/..../@/[............\@...@`...........
//.....=@. =@OOOOOOOOOO@/@.,@OOOO@@@@@@@@@@@@@@@@@@@@@@@/[...    .@`...........,@`.................,@..=O...........
//......@\..\OOOOOOOOOO@^=@.,@OO@@@@@@@@@@@@@@@@@@@@@^         . .O......@O@^.,@....................=\..@*..........
//.......\@..\@OOOOOOOO@O.,@`..@@@@@@@@@@@@@@@@@@@@@@O    .     .,O......=@@`.=^.....................@..@@@]`.......
//........,@\..\@@OOOO@@^...\@@@@@@@@@@@@@@@@@@@@@@@@@.  ..,/@@@@@@..=@`......=O.........../^........@]@@O\*,O@`....
//..........,O@O]....,/@......@@@@@@@@@@@@@@@@@@@@@@@@^../@`*****=@@/@[....,[@`\@.......,@` .......,@/*********@\...
//..............,[\O@@@@@@@O@@@@@@@@@@@@@@@@@@@@@@@@@@@.=O*******[[[[O@@O]`]]]/@`@@@O@@O[[[***[[[\@@`*********,O@^..
//.................**O@...../@@@@@@@@@@@@@@@@@@@@@@@@@@@`*****************,\@*****[[`**************************=@...
//................****,@@@@@/*,@@@@@@@@@@@@@@@@@@@@@@@@O*******************************************************O/*..
//...................************[[\OO@@@@@@O/[[[[[[[*,@@\]**************************************************,@@*...
//..............................**********************.***[[@@O]]`***************************************]]@@[**....
//..........................................................*****,[[[OOOOOOOOOOOOOO@@@@@@@@@@@@O@OOOOO[[[****.......
//................................................................................******************................