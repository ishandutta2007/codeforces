/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 500 + 10;
const ll MAXK = 5e3 + 10;
const ll MAXA = 1e5 + 10;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n , k , ans , cntF[MAXA] , cntC[MAXA] , C[MAXK] , F[MAXK] , H[MAXK] , dp[MAXN][MAXK];

int main() {
    fast_io;

    cin >> n >> k;
    for(ll i = 0 ; i < n * k ; i++){
        cin >> C[i];
        cntC[C[i]]++;
    }
    for(ll i = 0 ; i < n ; i++){
        cin >> F[i];
        cntF[F[i]] += k;
    }
    for(ll i = 1 ; i <= k ; i++)    cin >> H[i];

    for(ll i = 1 ; i < MAXN ; i++){
        for(ll j = 0 ; j < MAXK ; j++){
            for(ll l = 0 ; l <= k ; l++){
                if(j -  l < 0) continue;
                dp[i][j] = max(dp[i][j] , dp[i - 1][j - l] + H[l]);
            }
        }
    }

    for(ll i = 0 ; i < MAXA ; i++)  ans += dp[cntF[i] / k][min(cntF[i] , cntC[i])];
    cout << ans << endl;

    return 0;
}
/*

*/