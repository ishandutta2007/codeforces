/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author majk
 */

#ifndef MAJK_LIB
#define MAJK_LIB

#include <vector>
#include <stack>
#include <iostream>
#include <fstream>
#include <unordered_map>
#include <unordered_set>
#include <map>
#include <iomanip>
#include <set>
#include <functional>
#include <algorithm>
#include <numeric>
#include <cassert>
#include <cmath>
#include <string>
#include <queue>
#include <array>
#include <bitset>
using namespace std;

#define x first
#define y second
typedef std::pair<int,int> pii; typedef long long ll; typedef unsigned long long ull; typedef unsigned int ui; typedef pair<ui,ui> puu;

template <typename T, typename U> std::istream&operator>>(std::istream&i, pair<T,U>&p) {i >> p.x >> p.y; return i;}
template<typename T>std::istream&operator>>(std::istream&i,vector<T>&t) {for(auto&v:t){i>>v;}return i;}
template <typename T, typename U> std::ostream&operator<<(std::ostream&o, const pair<T,U>&p) {o << p.x << ' ' << p.y; return o;}
template<typename T>std::ostream&operator<<(std::ostream&o,const vector<T>&t) {if(t.empty())o<<'\n';for(size_t i=0;i<t.size();++i){o<<t[i]<<" \n"[i == t.size()-1];}return o;}
template<typename T> using minheap = priority_queue<T, vector<T>, greater<T>>;
template<typename T> using maxheap = priority_queue<T, vector<T>, less<T>>;
ui logceil(ll x) { return x?8*sizeof(ll)-__builtin_clzll(x):0; }

namespace std { template<typename T,typename U>struct hash<pair<T,U>>{hash<T>t;hash<U>u;size_t operator()(const pair<T,U>&p)const{return t(p.x)^(u(p.y)<<7);}}; }
template<typename T,typename F>T bsh(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){l=m+1;r=m;}else{h=m-1;}}return r;}
template<typename F> double bshd(double l,double h,const F&f,double p=1e-9){ui r=3+(ui)log2((h-l)/p);while(r--){double m=(l+h)/2;if(f(m)){l=m;}else{h=m;}}return (l+h)/2;}
template<typename T,typename F>T bsl(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){h=m-1;r=m;}else{l=m+1;}}return r;}
template<typename F> double bsld(double l,double h,const F&f){ui r=200;while(r--){double m=(l+h)/2;if(f(m)){h=m;}else{l=m;}}return (l+h)/2;}
template<typename T> T gcd(T a,T b) { if (a<b) swap(a,b); return b?gcd(b,a%b):a; }


template<typename T>class vector2:public vector<vector<T>>{public:vector2(){} vector2(size_t a,size_t b,T t=T()):vector<vector<T>>(a,vector<T>(b,t)){}};
template<typename T>class vector3:public vector<vector2<T>>{public:vector3(){} vector3(size_t a,size_t b,size_t c,T t=T()):vector<vector2<T>>(a,vector2<T>(b,c,t)){}};
template<typename T>class vector4:public vector<vector3<T>>{public:vector4(){} vector4(size_t a,size_t b,size_t c,size_t d,T t=T()):vector<vector3<T>>(a,vector3<T>(b,c,d,t)){}};
template<typename T>class vector5:public vector<vector4<T>>{public:vector5(){} vector5(size_t a,size_t b,size_t c,size_t d,size_t e,T t=T()):vector<vector4<T>>(a,vector4<T>(b,c,d,e,t)){}};


#endif
#ifndef MAJK_STRING_H
#define MAJK_STRING_H

template <typename Input> struct KMP {
    explicit KMP(const Input&W) : W(W), T(W.size(),-1) {
        for (int p=1,c=0; p<W.size(); ++p,++c) {
            if(W[p]==W[c]){T[p]=T[c];}
            else {T[p]=c;while(c>=0&&W[p]!=W[c])c=T[c];}
        }
    }


    pair<int, vector<ui>> countAndSuffixes(const Input&S) {
        int ans = 0;
        for (ui m=0,i=0; m+i < S.size();) {
            if (W[i] == S[m+i]) { if (i + 1 < W.size()) { ++i; continue; } else ans++; }
            m += i - T[i];
            i = ui(max(T[i],0));
        }
        return {ans, {}};
    }

    vector<ui> search(const Input&S) {
        vector<ui> M;
        for (ui m=0,i=0; m+i < S.size();) {
            if (W[i] == S[m+i]) { if (i + 1 < W.size()) { ++i; continue; } else M.push_back(m); }
            m += i - T[i];
            i = ui(max(T[i],0));
        }
        return M;
    }

    template <typename Character>
    int advance(int i, Character ch) {
        while (i != -1) {
            if (W[i] == ch) return i+1;
            i = T[i];
        }
        return 0;
    }

    Input W;
    vector<int> T;
};

template <typename Input>
vector<int> PrefixFunction(const Input &S) {
    int N = S.length();
    vector<int> P(N);
    for (int i = 1; i < N; i++) {
        int j = P[i-1];
        while (j > 0 && S[i] != S[j]) j = P[j-1];
        j += (S[i] == S[j]);
        P[i] = j;
    }
    return P;
}

#endif //MAJK_STRING_H

#ifndef MOD_H
#define MOD_H



template <unsigned int N> class Field {
    typedef unsigned int ui;
    typedef unsigned long long ull;
	inline ui pow(ui a, ui p){ui r=1,e=a;while(p){if(p&1){r=((ull)r*e)%N;}e=((ull)e*e)%N;p>>=1;}return r;}
	/*extended GCD(slow):ll t=0,nt=1,r=N,nr=a;while(nr){ll q=r/nr;t-=q*nt;swap(t,nt);r-=q*nr;swap(r,nr);}assert(r<=1);return(t<0)?t+N:t;*/
	inline ui inv(ui a){return pow(a,N-2);}
public:
    inline Field(int x = 0) : v(x<0?N+x:x) {}
	inline Field<N> pow(int p){return (*this)^p; }
	inline Field<N> operator^(int p){return {(int)pow(v,(ui)p)};}
    inline Field<N>&operator+=(const Field<N>&o) {if (v+o.v >= N) v += o.v - N; else v += o.v; return *this; }
    inline Field<N>&operator-=(const Field<N>&o) {if (v<o.v) v -= o.v-N; else v-=o.v; return *this; }
    inline Field<N>&operator*=(const Field<N>&o) {v=(ull)v*o.v % N; return *this; }
    inline Field<N>&operator/=(const Field<N>&o) { return *this*=inv(o.v); }
    inline Field<N> operator+(const Field<N>&o) const {Field<N>r{*this};return r+=o;}
    inline Field<N> operator-(const Field<N>&o) const {Field<N>r{*this};return r-=o;}
    inline Field<N> operator*(const Field<N>&o) const {Field<N>r{*this};return r*=o;}
    inline Field<N> operator/(const Field<N>&o) const {Field<N>r{*this};return r/=o;}
    inline Field<N> operator-() {if(v) return {(int)(N-v)}; else return {0};};
    inline Field<N>& operator++() { ++v; if (v==N) v=0; return *this; }
    inline Field<N> operator++(int) { Field<N>r{*this}; ++*this; return r; }
    inline Field<N>& operator--() { --v; if (v==-1) v=N-1; return *this; }
    inline Field<N> operator--(int) { Field<N>r{*this}; --*this; return r; }
    inline bool operator==(const Field<N>&o) const { return o.v==v; }
	inline bool operator!=(const Field<N>&o) const { return o.v!=v; }
	inline explicit operator ui() const { return v; }
	inline static vector<Field<N>>fact(int t){vector<Field<N>>F(t+1,1);for(int i=2;i<=t;++i){F[i]=F[i-1]*i;}return F;}
	inline static vector<Field<N>>invfact(int t){vector<Field<N>>F(t+1,1);Field<N> X{1};for(int i=2;i<=t;++i){X=X*i;}F[t]=1/X;for(int i=t-1;i>=2;--i){F[i]=F[i+1]*(i+1);}return F;}
private: ui v;
};
template<unsigned int N>istream &operator>>(std::istream&is,Field<N>&f){unsigned int v;is>>v;f=v;return is;}
template<unsigned int N>ostream &operator<<(std::ostream&os,const Field<N>&f){return os<<(unsigned int)f;}
template<unsigned int N>Field<N> operator+(int i,const Field<N>&f){return Field<N>(i)+f;}
template<unsigned int N>Field<N> operator-(int i,const Field<N>&f){return Field<N>(i)-f;}
template<unsigned int N>Field<N> operator*(int i,const Field<N>&f){return Field<N>(i)*f;}
template<unsigned int N>Field<N> operator/(int i,const Field<N>&f){return Field<N>(i)/f;}


typedef Field<1000000007> FieldMod;

struct Ring {
	template <typename T>
	static T div(T p, T q, T N) {
		T t=0,nt=1,r=N,nr=q;
		while(nr!=0){ T q=r/nr;t-=q*nt;r-=q*nr;swap(t,nt);swap(r,nr); }
		t=(t<0)?t+N:t;
		r=(r<0)?r+N:r;
		if (gcd(p,N)%r!=0) { return 0; }
		return (t*p/r)%N;
	}
};
#endif


vector<int> KMP_build(string W) {
    int N = W.size();
    vector<int> T(N+1), U(N+1);
    T[0] = -1;
    U[0] = -1;

    int pos = 1;
    int cnd = 0;
    while (pos < N) {
        if (W[pos] == W[cnd]) {
            T[pos] = T[cnd];
            U[pos] = U[cnd];
        }
        else {
            T[pos] = cnd;
            U[pos] = cnd;
            cnd = T[cnd];
            while (cnd >= 0 && W[pos] != W[cnd]) {
                cnd = T[cnd];
            }
        }
        ++pos;
        ++cnd;
    }

    T[pos] = cnd;
    return T;
};

pair<int,int> KMP_search(const vector<int>& T, const string&S, const string&W) {
    int j = 0, k = 0, nP = 0;
    while (j < S.size()) {
        if (k == W.size()) k = T[k];
        if (W[k] == S[j]) {
            ++j; ++k;
            if (k == W.size()) nP++;
        } else {
            k = T[k];
            if (k < 0) {
                ++j;
                ++k;
            }
        }
    }
    return {nP, k};
}

vector<int> getZarr(string str) {
    int n = str.size();
    vector<int> Z(n+1, 0);
    Z[0] = n;
    int L = 0, R = 0, k;

    L = R = 0;
    for (int i = 1; i < n; ++i) {
        if (i > R) {
            L = R = i;
            while (R<n && str[R-L] == str[R])
                R++;
            Z[i] = R-L;
            R--;
        } else {
            k = i-L;

            if (Z[k] < R-i+1) Z[i] = Z[k];
            else {
                L = i;
                while (R<n && str[R-L] == str[R]) R++;
                Z[i] = R-L;
                R--;
            }
        }
    }
    return Z;
}

class GSongOfTheSirens {
public:
    void solve(istream& cin, ostream& cout) {
        int N, Q; cin >> N >> Q;
        string S0, T; cin >> S0 >> T;

        vector2<FieldMod> D(26, N+1, 0);
        for (int j = 0; j < 26; ++j) {
            char c = (char)('a'+j);
            for (int i = 0; i < N; ++i) {
                D[j][i+1] = 2*D[j][i];
                if (T[i] == c) D[j][i+1]++;
            }
        }

        for (int q = 0; q < Q; ++q) {
            int k;
            string W;
            cin >> k >> W;
            string SS = S0;
            int l = 0;
            while (l < k && SS.size() < W.size()) {
                SS += T[l] + SS;
                ++l;
            }

            int M = W.size();

            vector2<bool> Suf(2, M+1, false);
            FieldMod cnt;
            for (int d = 0; d < 2; ++d) {
                auto res = KMP_search(KMP_build(W), SS, W);
                cnt = res.x;

                auto Z1 = getZarr(W);

                Suf[d][0] = Suf[d][res.y] = true;
                for (int i = 1; i < res.y; ++i) Suf[d][i] = Z1[res.y - i] >= i;

                reverse(W.begin(),W.end());
                reverse(SS.begin(),SS.end());
            }

            vector<int> C(26, 0);
            for (int i = 0; i < M; ++i) {
                if (Suf[0][i] && Suf[1][M-1-i]) {
                    C[W[i]-'a']++;
                }
            }

            FieldMod pw = FieldMod{2}.pow(k-l);
            FieldMod other = 0;
            for (int i = 0; i < 26; ++i) {
                if (C[i]) {
                    cnt -= C[i] * D[i][l];
                    other += C[i] * D[i][k];
                }
            }

            cout << cnt * pw + other << endl;
        }
    }
};



int main() {
	ios_base::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr);
	GSongOfTheSirens solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
    return 0;
}