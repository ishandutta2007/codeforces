/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author RiaD
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <vector>
#include <queue>




#include <string>
#include <stdexcept>

#ifndef SPCPPL_ASSERT
	#ifdef SPCPPL_DEBUG
		#define SPCPPL_ASSERT(condition) \
		if(!(condition)) { \
			throw std::runtime_error(std::string() + #condition + " in line " + std::to_string(__LINE__) + " in " + __PRETTY_FUNCTION__); \
		}
	#else
		#define SPCPPL_ASSERT(condition)
	#endif
#endif


template <typename T>
T divideCeil(T a, T b) {
	SPCPPL_ASSERT(b != 0);
	if (b < 0) {
		a = -a;
		b = -b;
	}
	return a / b + (a % b > 0);
}

template <typename T>
T divideFloor(T a, T b) {
	SPCPPL_ASSERT(b != 0);
	if (b < 0) {
		a = -a;
		b = -b;
	}
	return a / b - (a % b < 0);
}

template <typename T>
T divideTowardsZero(T a, T b) {
	SPCPPL_ASSERT(b != 0);
	return a / b;
}

template <typename T>
T divideAwayFrowZero(T a, T b) {
	SPCPPL_ASSERT(b != 0);
	bool changeSign = false;
	if (a < 0) {
		changeSign = !changeSign;
		a = -a;
	}
	if (b < 0) {
		changeSign = !changeSign;
		b = -b;
	}
	int res = (a + b - 1) / b;
	if (changeSign) {
		res *= -1;
	}
	return res;

}




#include <iterator>


/**
* Support decrementing and multi-passing, but not declared bidirectional(or even forward) because
* it's reference type is not a reference.
*
* It doesn't return reference because
* 1. Anyway it'll not satisfy requirement [forward.iterators]/6
*   If a and b are both dereferenceable, then a == b if and only if *a and
*   b are bound to the same object.
* 2. It'll not work with reverse_iterator that returns operator * of temporary which is temporary for this iterator
*
* Note, reverse_iterator is not guaranteed to work  now too since it works only with bidirectional iterators,
* but it's seems to work at least on my implementation.
*
* It's not really useful anywhere except iterating anyway.
*/
template <typename T>
class IntegerIterator: public std::iterator<std::input_iterator_tag, T, std::ptrdiff_t, T*, T> {
public:
	explicit IntegerIterator(int value): value(value) {

	}

	IntegerIterator& operator++() {
		++value;
		return *this;
	}

	IntegerIterator operator++(int) {
		IntegerIterator copy = *this;
		++value;
		return copy;
	}

	IntegerIterator& operator--() {
		--value;
		return *this;
	}

	IntegerIterator operator--(int) {
		IntegerIterator copy = *this;
		--value;
		return copy;
	}

	T operator*() const {
		return value;
	}

	bool operator==(IntegerIterator rhs) {
		return value == rhs.value;
	}

	bool operator!=(IntegerIterator rhs) {
		return !(*this == rhs);
	}

private:
	T value;
};

template <typename T>
class IntegerRange {
public:
	IntegerRange(T begin, T end): begin_(begin), end_(end) {

	}

	IntegerIterator<T> begin() const {
		return IntegerIterator<T>(begin_);
	}

	IntegerIterator<T> end() const {
		return IntegerIterator<T>(end_);
	}

private:
	T begin_;
	T end_;
};

template <typename T>
class ReversedIntegerRange {
	typedef std::reverse_iterator<IntegerIterator<T>> IteratorType;
public:
	ReversedIntegerRange(T begin, T end): begin_(begin), end_(end) {

	}

	IteratorType begin() const {
		return IteratorType(IntegerIterator<T>(begin_));
	}

	IteratorType end() const {
		return IteratorType(IntegerIterator<T>(end_));
	}

private:
	T begin_;
	T end_;
};

template <typename T>
IntegerRange<T> range(T to) {
	SPCPPL_ASSERT(to >= 0);
	return IntegerRange<T>(0, to);
}

template <typename T>
IntegerRange<T> range(T from, T to) {
	SPCPPL_ASSERT(from <= to);
	return IntegerRange<T>(from, to);
}

template <typename T>
IntegerRange<T> inclusiveRange(T to) {
	SPCPPL_ASSERT(to >= 0);
	return IntegerRange<T>(0, to + 1);
}

template <typename T>
IntegerRange<T> inclusiveRange(T from, T to) {
	SPCPPL_ASSERT(from <= to);
	return IntegerRange<T>(from, to + 1);
}

template <typename T>
ReversedIntegerRange<T> downrange(T from) {
	SPCPPL_ASSERT(from >= 0);
	return ReversedIntegerRange<T>(from, 0);
}

template <typename T>
ReversedIntegerRange<T> downrange(T from, T to) {
	SPCPPL_ASSERT(from >= to);
	return ReversedIntegerRange<T>(from, to);
}

template <typename T>
ReversedIntegerRange<T> inclusiveDownrange(T from) {
	SPCPPL_ASSERT(from >= 0);
	return ReversedIntegerRange<T>(from + 1, 0);
}

template <typename T>
ReversedIntegerRange<T> inclusiveDownrange(T from, T to) {
	SPCPPL_ASSERT(from >= to);
	return ReversedIntegerRange<T>(from + 1, to);
}



#include <algorithm>



template <typename R>
void sort(R& range) {
	std::sort(range.begin(), range.end());
}

template <typename R, typename Comp>
void sort(R& range, Comp comp) {
	std::sort(range.begin(), range.end(), comp);
}

template <typename R>
void reverse(R& range) {
	std::reverse(range.begin(), range.end());
}

template <typename R, typename T>
auto lower_bound(const R& range, const T& value) -> decltype(range.begin()) {
	return std::lower_bound(range.begin(), range.end(), value);
}

template <typename R, typename T, typename Comp>
auto lower_bound(const R& range, const T& value, Comp comp) -> decltype(range.begin()) {
	return std::lower_bound(range.begin(), range.end(), value, comp);
}

template <typename R, typename T>
auto upper_bound(const R& range, const T& value) -> decltype(range.begin()) {
	return std::upper_bound(range.begin(), range.end(), value);
}

template <typename R, typename T, typename Comp>
auto upper_bound(const R& range, const T& value, Comp comp) -> decltype(range.begin()) {
	return std::upper_bound(range.begin(), range.end(), value, comp);
}

template <typename R>
auto min_element(const R& range) -> decltype(range.begin()) {
	return std::min_element(range.begin(), range.end());
}

template <typename R>
auto max_element(const R& range) -> decltype(range.begin()) {
	return std::max_element(range.begin(), range.end());
}

template <typename R>
bool next_permutation(R& range) {
	return std::next_permutation(range.begin(), range.end());
}

template <typename T>
void unique(std::vector<T>& range) {
	range.erase(std::unique(range.begin(), range.end()), range.end());
}

template <typename R>
R sorted(R range) {
	sort(range);
	return range;
}

template <typename R, typename Comp>
R sorted(R range, Comp comp) {
	sort(range, comp);
	return range;
}

template <typename R>
R reversed(R range) {
	reverse(range);
	return range;
}


using namespace std;
const int block_size = 350;
class TaskD {
public:
	void solve(std::istream& in, std::ostream& out) {
		int n;

		//n = 100000;
		in >> n;
		vector<int> indicies(n);
		vector<int> x(n);
		vector<int> y(n);
		vector<int> gox(n);
		vector<int> goy(n);

		for (int i = 0; i < n; ++i) {
			indicies[i] = i;
			in >> x[i] >> y[i] >> gox[i] >> goy[i];
			//x[i] = y[i] = i;
			//gox[i] = goy[i] = i + 1;

		}

		sort(indicies, [&x](int a, int b) {
			return x[a] < x[b];
		});


		int blocks_cnt = divideCeil(n, block_size);
		vector<Block> blocks(blocks_cnt);

		for (int i = 0; i < n; ++i) {
			int j = indicies[i];
			blocks[i / block_size].add(j, x[j]);
		}

		for (int i: range(blocks_cnt)) {
			sort(blocks[i].values, [&y](int l, int r) {
				return y[l] > y[r];
			});
		}

		queue<int> q;
		vector<int> dist(n, -1);
		vector<int> prev(n, -1);

		for (int i = 0; i < n; ++i) {
			if (x[i] == 0 && y[i] == 0) {
				dist[i] = 1;
				q.push(i);
			}
		}



		while(!q.empty()) {
			int v = q.front();
			q.pop();
			int times = 0;
			for (Block& block: blocks) {
				if (block.mn > gox[v]) {
					break;
				}
				if (block.mx <= gox[v]) {
					while(!block.values.empty() && y[block.values.back()] <= goy[v]) {
						int to = block.values.back();
						block.values.pop_back();
						if (dist[to] == -1) {
							dist[to] = dist[v] + 1;
							prev[to] = v;
							q.push(to);
						}
					}
					continue;
				}

				for (int to: block.values) {
					if(y[to] <= goy[v] && x[to] <= gox[v]) {
						if (dist[to] == -1) {
							dist[to] = dist[v] + 1;
							prev[to] = v;
							q.push(to);
						}
					}
				}
			}
		}

		out << dist.back() << endl;

		vector<int> ans;
		ans.reserve(n);
		int cur = n - 1;
		while(cur != -1) {
			ans.push_back(cur);
			cur = prev[cur];
		}
		reverse(ans);

		if(dist.back() != -1) {
			for (int z: ans) {
				out << z + 1 << ' ';
			}
		}
	}

	struct Block {
		Block() {
			values.reserve(block_size);
			mn = 2000000000;
		}

		void add(int id, int x) {
			mx = max(x, mx);
			mn = min(x, mn);
			values.push_back(id);
		}
		vector<int> values;
		int mx;
		int mn;
	};
};


int main() {
	std::ios_base::sync_with_stdio(false);
	TaskD solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	in.tie(0);
	out << std::fixed;
	out.precision(20);
	solver.solve(in, out);
	return 0;
}