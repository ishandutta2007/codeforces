/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author RiaD
 */

#include <iostream>
#include <fstream>

#include <iostream>




#include <vector>
#include <limits>
#include <functional>
#include <utility>
#include <queue>
#include <assert.h>


#include <iterator>

#include <string>
#include <stdexcept>
#ifdef SPCPPL_DEBUG
	#define SPCPPL_ASSERT(condition) \
	if(!(condition)) { \
		throw std::runtime_error(std::string() + #condition + " in line " + std::to_string(__LINE__) + " in " + __PRETTY_FUNCTION__); \
	}
#else
	#define SPCPPL_ASSERT(condition)
#endif



/**
* Support decrementing and multi-passing, but not declared bidirectional(or even forward) because
* it's reference type is not a reference.
*
* It doesn't return reference because
* 1. Anyway it'll not satisfy requirement [forward.iterators]/6
*   If a and b are both dereferenceable, then a == b if and only if *a and
*   b are bound to the same object.
* 2. It'll not work with reverse_iterator that returns operator * of temporary which is temporary for this iterator
*
* Note, reverse_iterator is not guaranteed to work  now too since it works only with bidirectional iterators,
* but it's seems to work at least on my implementation.
*
* It's not really useful anywhere except iterating anyway.
*/
template <typename T>
class IntegerIterator : public std::iterator<std::input_iterator_tag, T, std::ptrdiff_t, T*, T> {
public:
	explicit IntegerIterator(int value): value(value) {

	}

	IntegerIterator& operator++ () {
		++value;
		return *this;
	}

	IntegerIterator operator++ (int) {
		IntegerIterator copy = *this;
		++value;
		return copy;
	}

	IntegerIterator& operator-- () {
		--value;
		return *this;
	}

	IntegerIterator operator-- (int) {
		IntegerIterator copy = *this;
		--value;
		return copy;
	}

	T operator * () const {
		return value;
	}

	bool operator == (IntegerIterator rhs) {
		return value == rhs.value;
	}

	bool operator != (IntegerIterator rhs) {
		return !(*this == rhs);
	}
private:
	T value;
};

template <typename T>
class IntegerRange {
public:
	IntegerRange(T begin, T end): begin_(begin), end_(end) {

	}

	IntegerIterator<T> begin() const {
		return IntegerIterator<T>(begin_);
	}

	IntegerIterator<T> end() const {
		return IntegerIterator<T>(end_);
	}

private:
	T begin_;
	T end_;
};

template <typename T>
class ReversedIntegerRange {
	typedef std::reverse_iterator<IntegerIterator<T>> IteratorType;
public:
	ReversedIntegerRange(T begin, T end): begin_(begin), end_(end) {

	}

	IteratorType begin() const {
		return IteratorType(IntegerIterator<T>(begin_));
	}

	IteratorType end() const {
		return IteratorType(IntegerIterator<T>(end_));
	}

private:
	T begin_;
	T end_;
};

template <typename T>
IntegerRange<T> range(T to) {
	SPCPPL_ASSERT(to >= 0);
	return IntegerRange<T>(0, to);
}

template <typename T>
IntegerRange<T> range(T from, T to) {
	SPCPPL_ASSERT(from <= to);
	return IntegerRange<T>(from, to);
}

template <typename T>
ReversedIntegerRange<T> downrange(T from) {
	SPCPPL_ASSERT(from >= 0);
	return ReversedIntegerRange<T>(from, 0);
}

template <typename T>
ReversedIntegerRange<T> downrange(T from, T to) {
	SPCPPL_ASSERT(from >= to);
	return ReversedIntegerRange<T>(from, to);
}

template <typename FlowSize, typename CostSize>
struct CostFlow {
	FlowSize flow;
	CostSize cost;
};

template <typename FlowSize, typename CostSize, typename Strategy>
class MinCostFlow {
	struct Edge {
		std::size_t from, to;
		FlowSize cap;
		FlowSize flow;
		CostSize cost;
	};
public:
	MinCostFlow(std::size_t n, Strategy strategy = Strategy()): g(n), strategy(strategy) {

	}

	void addEdge(std::size_t from, std::size_t to, FlowSize capacity, CostSize cost) {
		SPCPPL_ASSERT(from < g.size() && to < g.size());
		Edge edge = {from, to, capacity, 0, cost};
		g[from].push_back(edges.size());
		edges.push_back(edge);

		Edge backwardEdge = {to, from, 0, 0, -cost};
		g[to].push_back(edges.size());
		edges.push_back(backwardEdge);
	}

	Edge getEdge(std::size_t id) {
		SPCPPL_ASSERT(id < edges.size());
		return edges[id];
	}

	std::size_t edgesCount() const {
		return edges.size();
	}

	CostFlow<FlowSize, CostSize> findFlow(std::size_t s, std::size_t t) {
		SPCPPL_ASSERT(s < g.size() && t < g.size());
		CostSize cost = 0;
		FlowSize flow = 0;
		std::size_t n = g.size();
		std::vector<CostSize> potential(n);
		const std::size_t NO_PARENT = std::numeric_limits<size_t>::max();
		{
			std::vector<size_t> p(n, NO_PARENT);
			std::vector<CostSize> d(n);
			d[s] = 0;
			p[s] = s;
			bool changed = true;
			while(changed) {
				changed = false;
				for(size_t i = 0; i < edges.size(); ++i) {
					Edge& e = edges[i];
					if(e.cap == e.flow || p[e.from] == -1)
						continue;
					if(p[e.to] == -1 || d[e.to] > d[e.from] + e.cost) {
						d[e.to] = d[e.from] + e.cost;
						p[e.to] = i;
						changed = true;
					}
				}
			}
			potential = std::move(d);
		}
		while(true) {
			std::vector<CostSize> d(n);
			std::vector<size_t> p(n, NO_PARENT);

			typedef std::pair<CostSize, std::size_t> QueueType;
			std::priority_queue<QueueType, std::vector<QueueType>, std::greater<QueueType>> q;

			q.push(std::make_pair(0, s));

			while(!q.empty()) {
				size_t v = q.top().second;
				CostSize oldD = q.top().first;
				q.pop();
				if(oldD != d[v])
					continue;
				for(std::size_t id: g[v]) {
					Edge& e = edges[id];
					if (e.to == s)
						continue;
					if(e.cap > e.flow) {
						SPCPPL_ASSERT(e.cost + potential[e.from] - potential[e.to] >= 0);
						CostSize newd = d[v] + e.cost + potential[e.from] - potential[e.to];
						if(p[e.to] == -1 || d[e.to] > newd) {
							d[e.to] = newd;
							p[e.to] = id;
							q.push(std::make_pair(d[e.to], e.to));
						}
					}
				}
			}

			if(p[t] == -1) {
				break;
			}

			std::size_t cur = t;
			FlowSize maxAdd = strategy.maximalAdditionFlow(flow, cost, potential[t] + d[t]);
			if (maxAdd == 0)
				break;
			while(cur != s) {
				Edge& e = edges[p[cur]];
				cur = e.from;
				maxAdd = std::min(maxAdd, e.cap - e.flow);
			}

			flow += maxAdd;
			cost += (potential[t] + d[t]) * maxAdd;
			cur = t;
			while(cur != s) {
				std::size_t id = p[cur];
				edges[id].flow += maxAdd;
				edges[id ^ 1].flow -= maxAdd;
				cur = edges[id].from;
			}

			for (size_t i: range(n)) {
				if (p[i] != -1) {
					potential[i] = potential[i] + d[i];
				}
			}
		}

		return {flow, cost};

	}
private:
	std::vector<std::vector<std::size_t>> g;
	std::vector<Edge> edges;

	Strategy strategy;
};

template <typename FlowSize, typename CostSize>
struct MinCostMaxFlowStrategy {
	FlowSize maximalAdditionFlow(const FlowSize&, const CostSize&, const CostSize&) {
		return true;
	}
};

template <typename FlowSize, typename CostSize>
class MinCostMaxFlow : public MinCostFlow<FlowSize, CostSize, MinCostMaxFlowStrategy<FlowSize, CostSize>> {
public:
	MinCostMaxFlow(size_t n) : MinCostFlow<FlowSize, CostSize, MinCostMaxFlowStrategy<FlowSize, CostSize>>(n) {}
};



using namespace std;

class TaskC1 {
public:
	void solve(std::istream& in, std::ostream& out) {
		size_t n, m;
		in >> n >> m;
		std::vector<std::vector<int>> a(n, std::vector<int>(m));
		for (int i = 0; i < n; ++i) {
			for (int j = 0; j < m; ++j) {
				in >> a[i][j];
			}
		}

		MinCostMaxFlow<int, int> flow(n * m + 2);
		size_t s = n * m;
		size_t t = s + 1;

		for (auto i: range(n)) {
			for (auto j: range(m)) {
				if((i + j) & 1) {
					flow.addEdge(s, i * m + j, 1, 0);
				}
				else {
					flow.addEdge(i * m + j, t, 1, 0);
				}
			}
		}

		for (int i = 0; i < n; ++i) {
			for (int j = 0; j + 1 < m; ++j) {
				if ((i + j) & 1) {
					flow.addEdge(i * m + j, i * m + j + 1, 1, a[i][j] != a[i][j + 1]);
				}
				else {
					flow.addEdge(i * m + j + 1, i * m + j, 1, a[i][j] != a[i][j + 1]);
				}
			}
		}

		for (int i = 0; i + 1 < n; ++i) {
			for (int j = 0; j < m; ++j) {
				if ((i + j) & 1) {
					flow.addEdge(i * m + j, i * m + j + m, 1, a[i][j] != a[i + 1][j]);
				}
				else {
					flow.addEdge(i * m + j + m, i * m + j, 1, a[i][j] != a[i + 1][j]);
				}
			}
		}

		out << flow.findFlow(s, t).cost << "\n";
	}
};

int main() {
	std::cin.sync_with_stdio(false);
	std::cin.tie(0);
	std::cout << std::fixed;
	std::cout.precision(20);
	TaskC1 solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}