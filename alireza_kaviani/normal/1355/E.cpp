/* Generated by powerful Codeforces Tool
 * You can download the binary file in here https://github.com/xalanq/cf-tool (Windows, macOS, Linux)
 * Author: AmShZ6
 * Time: 2020-05-16 16:05:01
**/
#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n , A , R , M , S , x , y , ans = INF , B[MAXN];

ll solve(ll x){
    ll cur = 0 , cur2 = 0;
    if(n * x >= S)  cur = (n * x - S) * A;
    if(n * x <= S)  cur = (S - n * x) * R;
    for(int i = 1 ; i <= n ; i++)   cur2 += abs(x - B[i]);
    cur2 -= abs(S - n * x);
    return cur + cur2 / 2 * M;
}

int main() {
    ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);

    cin >> n >> A >> R >> M;
    M = min(M , A + R);
    for(int i = 1 ; i <= n ; i++)   cin >> B[i] , S += B[i];
    sort(B + 1 , B + n + 1);
    y = S;
    for(int i = 1 ; i <= n ; i++){
        ll cur = 0 , cur2 = 0;
        if(n * B[i] >= S)   cur = (n * B[i] - S) * A;
        if(n * B[i] <= S)   cur = (S - n * B[i]) * R;
        y -= B[i] , x += B[i];
        cur2 = B[i] * i - x + y - B[i] * (n - i);
        cur2 -= abs(S - n * B[i]);
        //cout << cur << sep << cur2 << sep << x << sep << y << endl;
        ans = min(ans , cur + cur2 / 2 * M);
    }
    ans = min(ans , solve(S / n));
    ans = min(ans , solve(S / n + 1));
    cout << ans << endl;

    return 0;
}
/*

*/