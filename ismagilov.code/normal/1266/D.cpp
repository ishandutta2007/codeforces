/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Azat Ismagilov
 */

#include <fstream>

#include <iostream>
#include <algorithm>
#include <vector>
#include <queue>
#include <numeric>
#include <set>
#include <map>
#include <ext/pb_ds/assoc_container.hpp>

#define int long long
#define ld long double
#define fs first
#define sc second
#define pb push_back
#define ppb pop_back
#define pf push_front
#define ppf pop_front
#define mp make_pair
#define len(v) ((int)v.size())
#define vc vector
#define pr pair
#define all(v) v.begin(), v.end()
#pragma GCC optimize("O3")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,tune=native")
//#pragma GCC optimize("unroll-loops")

using namespace std;
using namespace __gnu_pbds;

template<typename T, typename U>
inline ostream &operator<<(ostream &_out, const pair<T, U> &_p) {
    _out << _p.first << ' ' << _p.second;
    return _out;
}

template<typename T, typename U>
inline istream &operator>>(istream &_in, pair<T, U> &_p) {
    _in >> _p.first >> _p.second;
    return _in;
}

template<typename T>
inline ostream &operator<<(ostream &_out, const vector<T> &_v) {
    if (_v.empty()) { return _out; }
    _out << _v.front();
    for (auto _it = ++_v.begin(); _it != _v.end(); ++_it) { _out << ' ' << *_it; }
    return _out;
}

template<typename T>
inline istream &operator>>(istream &_in, vector<T> &_v) {
    for (auto &_i : _v) { _in >> _i; }
    return _in;
}

const int MAXN = 3e5;
const int INF = 1e9;
const int MOD = 1e9 + 7;

map<int, int> g[MAXN];
map<int, int> gr[MAXN];

void minuss(int a, int b, int x) {
    if (g[a][b] == x) {
        g[a].erase(b);
        gr[b].erase(a);
    } else {
        g[a][b] -= x;
        gr[b][a] -= x;
    }
}

void checks(int v) {
    while (len(g[v]) > 0 && len(gr[v]) > 0) {
        auto xx = (*g[v].begin());
        auto xy = (*gr[v].begin());
        int x = min(xx.sc, xy.sc);
        minuss(xy.fs, v, x);
        minuss(v, xx.fs, x);
        if (xy.fs != xx.fs) {
            g[xy.fs][xx.fs] += x;
            gr[xx.fs][xy.fs] += x;
        }
    }
}

class DUmenshaemDolgi {
public:
    void solve(std::istream &in, std::ostream &out) {
        int n, m;
        in >> n >> m;
        for (int i = 0; i < n; i++) {
            g[i].clear();
            gr[i].clear();
        }
        for (int i = 0; i < m; i++) {
            int a, b, c;
            in >> a >> b >> c;
            a--, b--;
            g[a][b] += c;
            gr[b][a] += c;
        }
        for (int i = 0; i < n; i++) {
            checks(i);
        }
        vc<pr<pr<int, int>, int>> ans;
        for (int i = 0; i < n; i++) {
            for (auto to : g[i]) {
                ans.pb({{i + 1, to.fs + 1}, to.sc});
            }
        }
        out << len(ans) << '\n';
        for (auto v : ans) {
            out << v << '\n';
        }
    }
};


signed main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    DUmenshaemDolgi solver;
    std::istream &in(std::cin);
    std::ostream &out(std::cout);
    solver.solve(in, out);
    return 0;
}