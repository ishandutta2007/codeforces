/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author RiaD
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

class C {
public:
	void solve(std::istream& in, std::ostream& out) {
		int n;
		in >> n;
		vector<int> a(n);
		vector<int> cnt(n);

		for(int i = 0; i < n; ++i) {
			in >> a[i];
			--a[i];

			cnt[a[i]]++;
		}

		int oddCnt = 0;
		for(int i = 0; i < n; ++i) {
			if(cnt[i] % 2)
				++oddCnt;
		}

		if(oddCnt > 1) {
			out << "0";
			return;
		}
		bool pal = true;

		int cntS = 0;
		for(int i = 0; i < n; ++i) {
			if(a[i] != a[n - 1 - i]) {
				pal = false;
				break;
			}
			++cntS;
		}

		if(pal) {
			out << (long long)(n) * (n + 1) / 2 << "\n";
			return;
		}


		long long ans = 0;

		ans += cntS + 1;
		ans += cntS + 1;
		for(int iter = 0; iter < 2; ++iter) {


			vector<int> used(n, 0);

			for(int i = 0; i < n; ++i) {

			}

			for(int i = 0; i < n; ++i) {
				++used[a[i]];
				if((2 * i + 1 < n && used[a[i]] * 2 > cnt[a[i]]) || (2 * i + 1 == n && cnt[a[i]] % 2 == 0) || (2 * i + 1 > n && a[i] != a[n - 1 - i])) {
					//out << i << ' ' << a[i] << ' ' << used[a[i]] * 2 << ' ' << cnt[a[i]] << ' ' << endl;
					break;
				}

				ans += cntS + 1;
			}


			reverse(a.begin(), a.end());
		}

		ans -= (long long)(cntS + 1) * (cntS + 1);

		out << ans;
	}
};


int main() {
	std::cin.sync_with_stdio(false);
	std::cin.tie(0);
	std::cout << std::fixed;
	std::cout.precision(20);
	C solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}