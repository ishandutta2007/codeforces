/* Generated by powerful Codeforces Tool
 * You can download the binary file in here https://github.com/xalanq/cf-tool (Windows, macOS, Linux)
 * Author: alireza_kaviani
 * Time: 2020-03-19 10:13:03
**/
#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1000 + 10;
const ll MAXD = 6800;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n , k , A[MAXN] , B[MAXN];
vector<ll> D;
pair<pll , ll> dp[MAXN][MAXD];

int main() {
    ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
    fill(dp[0] , dp[0] + MAXD , pair<pll , ll>({INF , INF} , INF));

    cin >> n >> k;
    for(ll i = 1 ; i <= n ; i++)	cin >> A[i] , B[i] = A[i] , A[i] = __gcd(A[i] , k);
    if(k == 1)  return cout << 1 << endl << min_element(B + 1 , B + n + 1) - B << endl , 0;
    for(ll i = 1 ; i * i <= k ; i++){
        if(k % i == 0){
            D.push_back(i);
            if(i * i != k)	D.push_back(k / i);
        }
    }
    Sort(D);

    dp[0][0] = {{0 , 0} , 0};
    for(ll i = 1 ; i <= n ; i++){
        for(ll j = 0 ; j < SZ(D) ; j++){
            ll x = D[j] / __gcd(D[j] , A[i]) , ind = lower_bound(all(D) , x) - D.begin();
            dp[i][j] = min(pair<pll , ll>(dp[i - 1][j].X , j) , pair<pll , ll>({dp[i - 1][ind].X.X + 1 , dp[i - 1][ind].X.Y + B[i]} , ind));
        }
    }
    if(dp[n][SZ(D) - 1].X.X == INF)	return cout << -1 << endl , 0;
    cout << dp[n][SZ(D) - 1].X.X << endl;
    ll x = n , y = SZ(D) - 1;
    while(x > 0){
        //cout << x << sep << y << sep << dp[x][y].X << sep << dp[x][y].Y << endl;
        if(dp[x][y].Y != y)	cout << x << sep;
        y = dp[x][y].Y;
        x--;
    }

    return 0;
}
/*

*/