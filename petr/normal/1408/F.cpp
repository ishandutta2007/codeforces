/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <algorithm>
#include <array>
#include <bitset>
#include <cassert>
#include <climits>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <functional>
#include <iostream>
#include <map>
#include <memory>
#include <numeric>
#include <queue>
#include <random>
#include <set>
#include <stack>
#include <string>
#include <unordered_set>
#include <unordered_map>
#include <vector>

#define pb push_back
#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()
#define mp make_pair

using namespace std;

typedef long long int64;
typedef vector<int> vi;
typedef pair<int, int> ii;

class TaskF {
 public:
  void solveOne(istream &in, ostream &out) {
    int n;
    in >> n;
    vector<ii> res;
    vector<vector<int>> groups;
    int p2 = 0;
    while ((1 << p2) <= n) ++p2;
    while (p2 >= 0) {
      if ((1 << p2) <= n) {
        int start = n - (1 << p2);
        makePow2(start, p2, res);
        groups.emplace_back();
        for (int i = start; i < n; ++i) {
          groups.back().push_back(i);
        }
        n = start;
      }
      --p2;
    }
    reverse(all(groups));
    assert(n == 0);
    for (int i = 0; i + 2 < groups.size(); ++i) {
      while (groups[i].size() < groups[i + 1].size()) {
        int old = groups[i].size();
        for (int j = 0; j < old; ++j) {
          int v = groups.back().back();
          res.emplace_back(groups[i][j], v);
          groups[i].push_back(v);
          groups.back().pop_back();
        }
        assert(groups[i].size() == old * 2);
      }
      for (int j = 0; j < groups[i].size(); ++j) {
        res.emplace_back(groups[i][j], groups[i + 1][j]);
        groups[i + 1].push_back(groups[i][j]);
      }
      groups[i].clear();
    }
    out << res.size() << "\n";
    for (const auto& p : res) {
      out << (p.first + 1) << " " << (p.second + 1) << "\n";
    }
  }

  void makePow2(int offset, int p2, vector<ii>& res) {
    if (p2 == 0) return;
    makePow2(offset, p2 - 1, res);
    makePow2(offset + (1 << (p2 - 1)), p2 - 1, res);
    for (int i = 0; i < (1 << (p2 - 1)); ++i) {
      res.emplace_back(offset + i, offset + (1 << (p2 - 1)) + i);
    }
  }

  bool rec(vector<int> v, int d) {
    vector<int> vs = v;
    sort(all(vs));
    vs.erase(unique(all(vs)), vs.end());
    if (vs.size() <= 2) return true;
    if (d == 0) return false;
    for (int i = 0; i < vs.size(); ++i) {
      for (int j = i; j < vs.size(); ++j) {
        int v1 = vs[i];
        int v2 = vs[j];
        vector<int> sv = v;
        for (int ii = 0; ii < v.size(); ++ii) if (v[ii] == v1) {
          for (int jj = 0; jj < v.size(); ++jj) if ((jj != ii) && v[jj] == v2) {
              v[ii] = v[jj] = 1000 + d;
            break;
          }
        }
        if (rec(v, d - 1)) {
          cout << v1 << " " << v2 << "\n";
          return true;
        }
        v = sv;
      }
    }
    return false;
  }

  void solve(std::istream &in, std::ostream &out) {
    int nt = 1;
    for (int it = 0; it < nt; ++it) {
      solveOne(in, out);
    }
  }
};


int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  TaskF solver;
  std::istream& in(std::cin);
  std::ostream& out(std::cout);
  solver.solve(in, out);
  return 0;
}