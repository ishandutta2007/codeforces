/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author /dev/null
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 6e6 + 10;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n, m, ans, A[MAXN], sum[MAXN], sum2[MAXN];

ll ind(ll x, ll y) {
    return (max(n, m) + 2) * x + y;
}

int main() {
    fast_io;

    cin >> n >> m;
    for (ll i = 1; i <= n; i++) {
        for (ll j = 1; j <= m; j++) {
            if (n > m) cin >> A[ind(j, i)];
            else cin >> A[ind(i, j)];
        }
    }

    if (n > m) swap(n, m);

    for (ll i = 1; i <= n; i++) {
        for (ll j = 1; j <= m; j++) {
            sum[j] += A[ind(i, j)];
            sum2[i] += A[ind(i, j)];
        }
    }

    for (ll i = 0; i <= n; i++) {
        for (ll j = 0; j <= n; j++) {
            if (i == j && i != 0) continue;
            vector<ll> vec;
            for (ll k = 1; k <= m; k++) {
                vec.push_back(sum[k] - A[ind(i, k)] - A[ind(j, k)]);
                for (ll l = SZ(vec) - 1; l >= 1; l--) {
                    if (vec[l] > vec[l - 1]) swap(vec[l], vec[l - 1]);
                    else break;
                }
                if (vec.size() > 4) vec.pop_back();
            }
            ll s = 0;
            for (ll k = 0; k < min(SZ(vec), 2LL + (i == 0) + (j == 0)); k++) s += vec[k];
            ans = max(ans, s + sum2[i] + sum2[j]);
        }
    }

    for (ll i = 0; i <= m; i++) {
        vector<ll> vec;
        for (ll j = 1; j <= n; j++) {
            vec.push_back(sum2[j] - A[ind(j, i)]);
            sort(all(vec), greater<ll>());
            if (vec.size() > 4) vec.pop_back();
        }
        ll s = 0;
        for (ll j = 0; j < min(SZ(vec), 3LL + (i == 0)); j++) s += vec[j];
        ans = max(ans, s + sum[i]);
    }
    cout << ans << endl;

    return 0;
}
/*

*/