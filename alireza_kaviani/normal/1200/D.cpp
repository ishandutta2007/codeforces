/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 2e3 + 10;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n, k, ans, xl[MAXN], xr[MAXN], yl[MAXN], yr[MAXN], psx[MAXN], psy[MAXN], possiblex[MAXN][MAXN], possibley[MAXN][MAXN];
string s[MAXN];

int main() {
    fast_io;
    cin >> n >> k;
    fill(xl, xl + MAXN, -1);
    fill(xr, xr + MAXN, n);
    fill(yl, yl + MAXN, -1);
    fill(yr, yr + MAXN, n);

    for (ll i = 0; i < n; i++) {
        cin >> s[i];
        for (ll j = 0; j < n; j++) {
            if (s[i][j] == 'W') xl[i] = j;
            else break;
        }
        for (ll j = n - 1; j >= 0; j--) {
            if (s[i][j] == 'W') xr[i] = j;
            else break;
        }
        psx[i] = (xr[i] == 0);
    }

    for (ll i = 0; i < n; i++) {
        for (ll j = 0; j < n; j++) {
            if (s[j][i] == 'W') yl[i] = j;
            else break;
        }
        for (ll j = n - 1; j >= 0; j--) {
            if (s[j][i] == 'W') yr[i] = j;
            else break;
        }
        psy[i] = (yr[i] == 0);
    }

    partial_sum(psx, psx + MAXN, psx);
    partial_sum(psy, psy + MAXN, psy);

    for (ll i = 0; i < n; i++) {
        for (ll j = 0; j < n; j++) {
            if (j - 1 <= xl[i] && xr[i] <= j + k) possiblex[j][i] = 1;
            if (j - 1 <= yl[i] && yr[i] <= j + k) possibley[j][i] = 1;
        }
    }

    for (ll i = 0; i < MAXN; i++) {
        partial_sum(possiblex[i], possiblex[i] + MAXN, possiblex[i]);
        partial_sum(possibley[i], possibley[i] + MAXN, possibley[i]);
    }

    for (ll i = 0; i + k - 1 < n; i++) {
        for (ll j = 0; j + k - 1 < n; j++) {
            ll cnt = (i == 0 ? 0 : psx[i - 1]) + psx[n - 1] - psx[i + k - 1];
            cnt += (j == 0 ? 0 : psy[j - 1]) + psy[n - 1] - psy[j + k - 1];
            cnt += possiblex[j][i + k - 1] - (i == 0 ? 0 : possiblex[j][i - 1]);
            cnt += possibley[i][j + k - 1] - (j == 0 ? 0 : possibley[i][j - 1]);
            ans = max(ans, cnt);
        }
    }
    cout << ans << endl;


    return 0;
}
/*

*/