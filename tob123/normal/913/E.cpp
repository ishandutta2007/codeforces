#include <bits/stdc++.h>
using namespace std;

unordered_map<int,string> state = { { 0, "!x&x" },
{ 1, "x&y&z" },
{ 2, "!z&x&y" },
{ 3, "x&y" },
{ 4, "!y&x&z" },
{ 5, "x&z" },
{ 6, "!y&x&z|!z&x&y" },
{ 7, "(y|z)&x" },
{ 8, "!y&!z&x" },
{ 9, "!y&!z&x|x&y&z" },
{ 10, "!z&x" },
{ 11, "!z&x|x&y" },
{ 12, "!y&x" },
{ 13, "!y&x|x&z" },
{ 14, "!(y&z)&x" },
{ 15, "x" },
{ 16, "!x&y&z" },
{ 17, "y&z" },
{ 18, "!x&y&z|!z&x&y" },
{ 19, "(x|z)&y" },
{ 20, "!x&y&z|!y&x&z" },
{ 21, "(x|y)&z" },
{ 22, "!x&y&z|!y&x&z|!z&x&y" },
{ 23, "(x|y)&z|x&y" },
{ 24, "!x&y&z|!y&!z&x" },
{ 25, "!y&!z&x|y&z" },
{ 26, "!x&y&z|!z&x" },
{ 27, "!z&x|y&z" },
{ 28, "!x&y&z|!y&x" },
{ 29, "!y&x|y&z" },
{ 30, "!(y&z)&x|!x&y&z" },
{ 31, "x|y&z" },
{ 32, "!x&!z&y" },
{ 33, "!x&!z&y|x&y&z" },
{ 34, "!z&y" },
{ 35, "!z&y|x&y" },
{ 36, "!x&!z&y|!y&x&z" },
{ 37, "!x&!z&y|x&z" },
{ 38, "!y&x&z|!z&y" },
{ 39, "!z&y|x&z" },
{ 40, "!(!x&!y|x&y|z)" },
{ 41, "!(!x&!y|x&y|z)|x&y&z" },
{ 42, "!z&(x|y)" },
{ 43, "!z&(x|y)|x&y" },
{ 44, "!x&!z&y|!y&x" },
{ 45, "!x&!z&y|!y&x|x&z" },
{ 46, "!y&x|!z&y" },
{ 47, "!z&y|x" },
{ 48, "!x&y" },
{ 49, "!x&y|y&z" },
{ 50, "!(x&z)&y" },
{ 51, "y" },
{ 52, "!x&y|!y&x&z" },
{ 53, "!x&y|x&z" },
{ 54, "!(x&z)&y|!y&x&z" },
{ 55, "x&z|y" },
{ 56, "!x&y|!y&!z&x" },
{ 57, "!x&y|!y&!z&x|y&z" },
{ 58, "!x&y|!z&x" },
{ 59, "!z&x|y" },
{ 60, "!x&y|!y&x" },
{ 61, "!x&y|!y&x|x&z" },
{ 62, "!(x&z)&y|!y&x" },
{ 63, "x|y" },
{ 64, "!x&!y&z" },
{ 65, "!x&!y&z|x&y&z" },
{ 66, "!x&!y&z|!z&x&y" },
{ 67, "!x&!y&z|x&y" },
{ 68, "!y&z" },
{ 69, "!y&z|x&z" },
{ 70, "!y&z|!z&x&y" },
{ 71, "!y&z|x&y" },
{ 72, "!(!x&!z|x&z|y)" },
{ 73, "!(!x&!z|x&z|y)|x&y&z" },
{ 74, "!x&!y&z|!z&x" },
{ 75, "!x&!y&z|!z&x|x&y" },
{ 76, "!y&(x|z)" },
{ 77, "!y&(x|z)|x&z" },
{ 78, "!y&z|!z&x" },
{ 79, "!y&z|x" },
{ 80, "!x&z" },
{ 81, "!x&z|y&z" },
{ 82, "!x&z|!z&x&y" },
{ 83, "!x&z|x&y" },
{ 84, "!(x&y)&z" },
{ 85, "z" },
{ 86, "!(x&y)&z|!z&x&y" },
{ 87, "x&y|z" },
{ 88, "!x&z|!y&!z&x" },
{ 89, "!x&z|!y&!z&x|y&z" },
{ 90, "!x&z|!z&x" },
{ 91, "!x&z|!z&x|x&y" },
{ 92, "!x&z|!y&x" },
{ 93, "!y&x|z" },
{ 94, "!(x&y)&z|!z&x" },
{ 95, "x|z" },
{ 96, "!(!y&!z|x|y&z)" },
{ 97, "!(!y&!z|x|y&z)|x&y&z" },
{ 98, "!x&!y&z|!z&y" },
{ 99, "!x&!y&z|!z&y|x&y" },
{ 100, "!x&!z&y|!y&z" },
{ 101, "!x&!z&y|!y&z|x&z" },
{ 102, "!y&z|!z&y" },
{ 103, "!y&z|!z&y|x&y" },
{ 104, "!(!x&!y|x&y|z)|!x&!y&z" },
{ 105, "!(!x&!y|x&y|z)|!x&!y&z|x&y&z" },
{ 106, "!x&!y&z|!z&(x|y)" },
{ 107, "!x&!y&z|!z&(x|y)|x&y" },
{ 108, "!x&!z&y|!y&(x|z)" },
{ 109, "!x&!z&y|!y&(x|z)|x&z" },
{ 110, "!y&(x|z)|!z&y" },
{ 111, "!y&z|!z&y|x" },
{ 112, "!x&(y|z)" },
{ 113, "!x&(y|z)|y&z" },
{ 114, "!x&z|!z&y" },
{ 115, "!x&z|y" },
{ 116, "!x&y|!y&z" },
{ 117, "!x&y|z" },
{ 118, "!(x&y)&z|!z&y" },
{ 119, "y|z" },
{ 120, "!x&(y|z)|!y&!z&x" },
{ 121, "!x&(y|z)|!y&!z&x|y&z" },
{ 122, "!x&(y|z)|!z&x" },
{ 123, "!x&z|!z&x|y" },
{ 124, "!x&(y|z)|!y&x" },
{ 125, "!x&y|!y&x|z" },
{ 126, "!x&y|!y&z|!z&x" },
{ 127, "x|y|z" },
{ 128, "!(x|y|z)" },
{ 129, "!(x|y|z)|x&y&z" },
{ 130, "!(!x&y|!y&x|z)" },
{ 131, "!(x|y|z)|x&y" },
{ 132, "!(!x&z|!z&x|y)" },
{ 133, "!(x|y|z)|x&z" },
{ 134, "!(!x&y|!y&x|z)|!y&x&z" },
{ 135, "!(x|y|z)|(y|z)&x" },
{ 136, "!y&!z" },
{ 137, "!y&!z|x&y&z" },
{ 138, "!(!x&y|z)" },
{ 139, "!y&!z|x&y" },
{ 140, "!(!x&z|y)" },
{ 141, "!y&!z|x&z" },
{ 142, "!(!x&y|z)|!y&x" },
{ 143, "!y&!z|x" },
{ 144, "!(!y&z|!z&y|x)" },
{ 145, "!(x|y|z)|y&z" },
{ 146, "!(!x&y|!y&x|z)|!x&y&z" },
{ 147, "!(x|y|z)|(x|z)&y" },
{ 148, "!(!x&z|!z&x|y)|!x&y&z" },
{ 149, "!(x|y|z)|(x|y)&z" },
{ 150, "!(!x&y|!y&x|z)|!x&y&z|!y&x&z" },
{ 151, "!(x|y|z)|(x|y)&z|x&y" },
{ 152, "!x&y&z|!y&!z" },
{ 153, "!y&!z|y&z" },
{ 154, "!(!x&y|z)|!x&y&z" },
{ 155, "!(!x&y|z)|y&z" },
{ 156, "!(!x&z|y)|!x&y&z" },
{ 157, "!(!x&z|y)|y&z" },
{ 158, "!(!x&y|z)|!x&y&z|!y&x" },
{ 159, "!y&!z|x|y&z" },
{ 160, "!x&!z" },
{ 161, "!x&!z|x&y&z" },
{ 162, "!(!y&x|z)" },
{ 163, "!x&!z|x&y" },
{ 164, "!x&!z|!y&x&z" },
{ 165, "!x&!z|x&z" },
{ 166, "!(!y&x|z)|!y&x&z" },
{ 167, "!(!y&x|z)|x&z" },
{ 168, "!(x&y|z)" },
{ 169, "!(x&y|z)|x&y&z" },
{ 170, "!z" },
{ 171, "!z|x&y" },
{ 172, "!x&!z|!y&x" },
{ 173, "!(x&y|z)|x&z" },
{ 174, "!y&x|!z" },
{ 175, "!z|x" },
{ 176, "!(!y&z|x)" },
{ 177, "!x&!z|y&z" },
{ 178, "!(!y&x|z)|!x&y" },
{ 179, "!x&!z|y" },
{ 180, "!(!y&z|x)|!y&x&z" },
{ 181, "!(!y&z|x)|x&z" },
{ 182, "!(!y&x|z)|!x&y|!y&x&z" },
{ 183, "!x&!z|x&z|y" },
{ 184, "!x&y|!y&!z" },
{ 185, "!(x&y|z)|y&z" },
{ 186, "!x&y|!z" },
{ 187, "!z|y" },
{ 188, "!(!x&!y&z|x&y)" },
{ 189, "!x&!z|!y&x|y&z" },
{ 190, "!x&y|!y&x|!z" },
{ 191, "!z|x|y" },
{ 192, "!x&!y" },
{ 193, "!x&!y|x&y&z" },
{ 194, "!x&!y|!z&x&y" },
{ 195, "!x&!y|x&y" },
{ 196, "!(!z&x|y)" },
{ 197, "!x&!y|x&z" },
{ 198, "!(!z&x|y)|!z&x&y" },
{ 199, "!(!z&x|y)|x&y" },
{ 200, "!(x&z|y)" },
{ 201, "!(x&z|y)|x&y&z" },
{ 202, "!x&!y|!z&x" },
{ 203, "!(x&z|y)|x&y" },
{ 204, "!y" },
{ 205, "!y|x&z" },
{ 206, "!y|!z&x" },
{ 207, "!y|x" },
{ 208, "!(!z&y|x)" },
{ 209, "!x&!y|y&z" },
{ 210, "!(!z&y|x)|!z&x&y" },
{ 211, "!(!z&y|x)|x&y" },
{ 212, "!(!z&x|y)|!x&z" },
{ 213, "!x&!y|z" },
{ 214, "!(!z&x|y)|!x&z|!z&x&y" },
{ 215, "!x&!y|x&y|z" },
{ 216, "!x&z|!y&!z" },
{ 217, "!(x&z|y)|y&z" },
{ 218, "!(!x&!z&y|x&z)" },
{ 219, "!x&!y|!z&x|y&z" },
{ 220, "!x&z|!y" },
{ 221, "!y|z" },
{ 222, "!x&z|!y|!z&x" },
{ 223, "!y|x|z" },
{ 224, "!(x|y&z)" },
{ 225, "!(x|y&z)|x&y&z" },
{ 226, "!x&!y|!z&y" },
{ 227, "!(x|y&z)|x&y" },
{ 228, "!x&!z|!y&z" },
{ 229, "!(x|y&z)|x&z" },
{ 230, "!(!y&!z&x|y&z)" },
{ 231, "!x&!y|!z&y|x&z" },
{ 232, "!((x|y)&z|x&y)" },
{ 233, "!((x|y)&z|x&y)|x&y&z" },
{ 234, "!x&!y|!z" },
{ 235, "!x&!y|!z|x&y" },
{ 236, "!x&!z|!y" },
{ 237, "!x&!z|!y|x&z" },
{ 238, "!y|!z" },
{ 239, "!y|!z|x" },
{ 240, "!x" },
{ 241, "!x|y&z" },
{ 242, "!x|!z&y" },
{ 243, "!x|y" },
{ 244, "!x|!y&z" },
{ 245, "!x|z" },
{ 246, "!x|!y&z|!z&y" },
{ 247, "!x|y|z" },
{ 248, "!x|!y&!z" },
{ 249, "!x|!y&!z|y&z" },
{ 250, "!x|!z" },
{ 251, "!x|!z|y" },
{ 252, "!x|!y" },
{ 253, "!x|!y|z" },
{ 254, "!(x&y&z)" },
{ 255, "!x|x" }
};

int readNum(){
  int cur = 0;
  char c;
  for(int i=7; i>=0; i--){
    cin >> c;
    if(c == '1')
      cur += 1<<i;
  }
  return cur;
}

int main(){
  int N;
  cin >> N;
  int cur;
  for(int i=0; i<N; i++){
    cur = readNum();
    cout << state[cur] << endl;
  }

  return 0;
}