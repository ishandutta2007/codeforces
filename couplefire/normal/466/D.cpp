/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Locke Cai
 */


#include <bits/stdc++.h>
using namespace std;
#define MOD 1000000007ll

long long dp[2010][2010];

class DIncreaseSequence {
public:
	void solve(std::istream& in, std::ostream& out) {
	    out.sync_with_stdio(false);
	    cin.tie(0);
	    int n, h; in >> n >> h;
	    int arr[n+1]; for(int i = 0; i<n; i++) in >> arr[i+1];
	    arr[0] = 0;
	    int diff[n+2];
	    for(int i = 1; i<=n; i++) diff[i] = arr[i-1]-arr[i];
	    diff[1] = diff[1]+h;
	    diff[n+1] = arr[n]-h;
	    for(int i = 0; i<=n+6; i++){
	        for(int j = 0; j<=n+6; j++) dp[i][j] = 0;
	    }
	    dp[0][0] = 1;
//	    for(int i = 1; i<=n+1; i++) out << diff[i] << endl;
	    for(int i = 0; i<=n; i++){
	        for(int j = 0; j<=n; j++){
	            if(diff[i+1] == -1 && j > 0){
//                    out << i << " " << j << " " << dp[1][1] << endl;
	                dp[i+1][j-1] += dp[i][j]*j;
	                dp[i+1][j-1] %= MOD;
	            }
	            else if(diff[i+1] == 1 && j < n){
//                    out << i << " " << j << " " << dp[1][1] << endl;
	                dp[i+1][j+1] += dp[i][j];
	                dp[i+1][j+1] %= MOD;
	            }
	            else if(diff[i+1] == 0){
//                    out << i << " " << j << " " << dp[1][1] << endl;
	                dp[i+1][j] += dp[i][j]+dp[i][j]*j;
	                dp[i+1][j] %= MOD;
	            }
	        }
	    }
	    out << dp[n+1][0];
	}
};


int main() {
	DIncreaseSequence solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}