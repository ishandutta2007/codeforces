/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <bits/stdc++.h>

#define pb push_back
#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()
#define mp make_pair

using namespace std;

typedef long long int64;
typedef vector<int> vi;
typedef pair<int, int> ii;

class TaskE {
 public:
  void solveOne(istream &in, ostream &out) {
    int n, m;
    in >> n >> m;
    vector<vector<int>> outgo(n);
    for (int i = 0; i < m; ++i) {
      int x, y;
      in >> x >> y;
      --x; --y;
      outgo[x].push_back(y);
    }
    for (int i = 0; i < n; ++i) {
      sort(outgo[i].begin(), outgo[i].end());
    }
    vector<int> decision(n);
    vector<int> longest(n);
    for (int i = 0; i < n; ++i) {
      if (decision[i] == 0) {
        if (longest[i] >= 2) {
          decision[i] = 2;
          continue;
        }
        decision[i] = 1;
        for (int x : outgo[i]) {
          longest[x] = max(longest[x], 1 + longest[i]);
        }
      }
    }
    int cnt = 0;
    for (int x : decision) if (x == 2) ++cnt;
    assert(cnt * 7 <= 4 * n);
    out << cnt << "\n";
    for (int i = 0; i < n; ++i) if (decision[i] == 2) {
      out << i + 1 << " ";
    }
    out << "\n";
  }

  void solve(std::istream &in, std::ostream &out) {
    int nt;
    in >> nt;
    for (int it = 0; it < nt; ++it) {
      solveOne(in, out);
    }
  }
};


int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  TaskE solver;
  std::istream& in(std::cin);
  std::ostream& out(std::cout);
  solver.solve(in, out);
  return 0;
}