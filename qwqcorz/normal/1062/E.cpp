#include<bits/stdc++.h>
#define mk make_pair
#define fi first
#define se second
using namespace std;
const int N=1e5+5;

int read()
{
	int s=0;
	char c=getchar(),lc='+';
	while (c<'0'||'9'<c) lc=c,c=getchar();
	while ('0'<=c&&c<='9') s=s*10+c-'0',c=getchar();
	return lc=='-'?-s:s;
}
void write(int x)
{
	if (x<0) putchar('-'),x=-x;
	if (x<10) putchar(x+'0');
	else write(x/10),putchar(x%10+'0');
}
void print(int x=-1,char c='\n')
{
	write(x);
	putchar(c);
}
struct edge
{
	int to,nxt;
}e[N];
int head[N],cnte=0;
void add_edge(int u,int v)
{
	e[++cnte].to=v;
	e[cnte].nxt=head[u];
	head[u]=cnte;
}
int log_2[N*2];
pair<int,int>de[N*2][20],mn[N][20],mx[N][20];
pair<int,int>queryMin(pair<int,int>(*a)[20],int l,int r)
{
	int k=log_2[r-l+1];
	return min(a[l][k],a[r-(1<<k)+1][k]);
}
pair<int,int>queryMax(pair<int,int>(*a)[20],int l,int r)
{
	int k=log_2[r-l+1];
	return max(a[l][k],a[r-(1<<k)+1][k]);
}
int ola[N],cntola=0,dfn[N],cntdfn=0,deep[N];
void dfs(int now)
{
	dfn[now]=++cntdfn;
	de[ola[now]=++cntola][0]=mk(deep[now],now);
	for (int i=head[now];i;i=e[i].nxt)
	{
		int to=e[i].to;
		deep[to]=deep[now]+1;
		dfs(to);
		de[++cntola][0]=mk(deep[now],now);
	}
}
int lca(int x,int y)
{
	if (!x||!y) return x|y;
	if (ola[x]>ola[y]) swap(x,y);
	return queryMin(de,ola[x],ola[y]).se;
}
#define ls (w*2)
#define rs (w*2+1)
#define mid ((l+r)/2)
int t[N*4];
void build(int w,int l,int r)
{
	if (l==r) return void(t[w]=l);
	build(ls,l,mid);
	build(rs,mid+1,r);
	t[w]=lca(t[ls],t[rs]);
}
int query(int w,int l,int r,int ql,int qr)
{
	if (qr<l||r<ql) return 0;
	if (ql<=l&&r<=qr) return t[w];
	return lca(query(ls,l,mid,ql,qr),query(rs,mid+1,r,ql,qr));
}
#undef ls
#undef rs
#undef mid

signed main(signed Recall,char *_902_[])
{
	(void)Recall,(void)_902_;
	int n=read(),q=read();
	for (int i=2;i<=n;i++) add_edge(read(),i);
	dfs(1);
	for (int i=1;i<=n;i++) mn[i][0]=mx[i][0]=mk(dfn[i],i);
	for (int j=1;j<=17;j++)
	for (int i=1;i+(1<<j)-1<=cntola;i++)
		de[i][j]=min(de[i][j-1],de[i+(1<<(j-1))][j-1]);
	for (int j=1;j<=17;j++)
	for (int i=1;i+(1<<j)-1<=n;i++)
		mn[i][j]=min(mn[i][j-1],mn[i+(1<<(j-1))][j-1]),
		mx[i][j]=max(mx[i][j-1],mx[i+(1<<(j-1))][j-1]);
	for (int i=2;i<=n*2;i++) log_2[i]=log_2[i/2]+1;
	build(1,1,n);
//	for (int i=1;i<=n;i++) for (int j=0;j<5;j++) print(mn[i][j].se,j==4?'\n':' ');
	for (int i=1;i<=q;i++)
	{
		int l=read(),r=read();
		int x=queryMin(mn,l,r).se,y=queryMax(mx,l,r).se;
		int ansx=lca(query(1,1,n,l,x-1),query(1,1,n,x+1,r));
		int ansy=lca(query(1,1,n,l,y-1),query(1,1,n,y+1,r));
//		print(x,',');print(y);
		if (deep[ansx]>=deep[ansy]) print(x,' '),print(deep[ansx]);
							   else print(y,' '),print(deep[ansy]);
	}
	
	return 0;
}
//....................  ..                        .    . . ..   .                                          .........
//...................  ....,]]]]]]`.   . .         . .,@@@@@@`.. .                                          ........
//................... ,@@@@@@@@@@@@@@@@@@\].,]]]]]`,@@@@@@@@@@@. .                                          ........
//....................@^...[@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@`                                            .......
//...................,@`......\@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@`.                                          .......
//...................=@......../@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@`.                                         .......
//...................=@....../@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@.                                         .......
//...................=@....=@@@@@@/[[[[[@@@@@@@@@@@@@@@@@/`...[@@@@^                                         .......
//...................=@.../@@@/`...........\@@@@@@@@@@@`........,@@@.                                     . ........
//......,/@@@@@@@O\]`.@`.=@@@`...............\@@@@@@@@`...........@@^                                       ........
//....,@^........,/@@@@^,@@/..................,@@@@@@^............,@@.                                     .........
//....//......,/@[=OOOOO=@@....................,@@@@@...]O@@]......=@^                                     .........
//....@`....]@OO^.=OOO/@@@^.../@@@@@@@`.........=@@@@.=@@@@@@@@....=@^                                     .........
//...=@...,@OOO/.......=@@^.,@@@@@@@@@@@........=@@@@,@@@@@@@@@@...=@^                                    ..........
//...=@..=@`............\@^,@@@@@@@@@@@@@........@@@@=@@@@@@@@@@^..=@.                                 .............
//...=@.=@@OO@@]........@@@=@@@@@@@@@@@@@^......=@@@@O@@@@@@@@@@^..//.                                  ............
//...=@,@`.   .,\@`....=@\@@@@@@@@@@@@@@@^......O@@@@@@@@@@@@@@@..=@.  ......  .  . .......            .............
//...=@@/ ........\@`..=@.\@@@@@@@@@@@@@@^.....=@@@@@@@@@@@@@@@^./@`...,/@O[[...[[[O@@/.=/ .  ...... ...............
//....@@^   /@OOOO@@@\.=@  =@@@@@@@@@@@@@...../@@@@@@@@@@@@@@/]/@/...,@`...............[@@[[O@\`,[[@]...............
//....\@^  =@OOOOOOOO@\.@. OO@@@@@@@@@@/...,@@@@@@@@@@@@@@@@@@@@` .,@`.......,^...........,`...,\@`..,@.............
//....,@^ .=OOOOOOOOOO@\O^.\OOOO@@@@@@@@@@@@@@@@@@@@@@@@@@@@@/... ,@........=/..../@/[............\@...@`...........
//.....=@. =@OOOOOOOOOO@/@.,@OOOO@@@@@@@@@@@@@@@@@@@@@@@/[...    .@`...........,@`.................,@..=O...........
//......@\..\OOOOOOOOOO@^=@.,@OO@@@@@@@@@@@@@@@@@@@@@^         . .O......@O@^.,@....................=\..@*..........
//.......\@..\@OOOOOOOO@O.,@`..@@@@@@@@@@@@@@@@@@@@@@O    .     .,O......=@@`.=^.....................@..@@@]`.......
//........,@\..\@@OOOO@@^...\@@@@@@@@@@@@@@@@@@@@@@@@@.  ..,/@@@@@@..=@`......=O.........../^........@]@@O\*,O@`....
//..........,O@O]....,/@......@@@@@@@@@@@@@@@@@@@@@@@@^../@`*****=@@/@[....,[@`\@.......,@` .......,@/*********@\...
//..............,[\O@@@@@@@O@@@@@@@@@@@@@@@@@@@@@@@@@@@.=O*******[[[[O@@O]`]]]/@`@@@O@@O[[[***[[[\@@`*********,O@^..
//.................**O@...../@@@@@@@@@@@@@@@@@@@@@@@@@@@`*****************,\@*****[[`**************************=@...
//................****,@@@@@/*,@@@@@@@@@@@@@@@@@@@@@@@@O*******************************************************O/*..
//...................************[[\OO@@@@@@O/[[[[[[[*,@@\]**************************************************,@@*...
//..............................**********************.***[[@@O]]`***************************************]]@@[**....
//..........................................................*****,[[[OOOOOOOOOOOOOO@@@@@@@@@@@@O@OOOOO[[[****.......
//................................................................................******************................