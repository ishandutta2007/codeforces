/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n, ind, val;
int mx[MAXN << 2], mn[MAXN << 2], lazy[MAXN << 2];
string s;
char c[MAXN];

void Shift(int id, int l, int r) {
    lazy[id << 1] += lazy[id];
    mn[id << 1] += lazy[id];
    mx[id << 1] += lazy[id];
    lazy[id << 1 | 1] += lazy[id];
    mn[id << 1 | 1] += lazy[id];
    mx[id << 1 | 1] += lazy[id];
    lazy[id] = 0;
}

void update(int ql, int qr, int x, int id = 1, int l = 0, int r = MAXN) {
    if (r <= ql || qr <= l || r <= l || qr <= ql) return;
    if (ql <= l && r <= qr) {
        lazy[id] += x;
        mn[id] += x;
        mx[id] += x;
        return;
    }
    Shift(id, l, r);
    int mid = l + r >> 1;
    update(ql, qr, x, id << 1, l, mid);
    update(ql, qr, x, id << 1 | 1, mid, r);
    mn[id] = min(mn[id << 1], mn[id << 1 | 1]);
    mx[id] = max(mx[id << 1], mx[id << 1 | 1]);
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    cin >> n >> s;
    for (ll i = 0; i < n; i++) {
        if (s[i] == 'L') ind = max(0LL, ind - 1);
        else if (s[i] == 'R') ind++;
        else {
            if (c[ind] == '(' || c[ind] == ')') {
                val += (c[ind] == '(' ? -1 : 1);
                update(ind, MAXN, (c[ind] == '(' ? -1 : 1));
            }
            if (s[i] == '(' || s[i] == ')') update(ind, MAXN, (s[i] == '(' ? 1 : -1)), val += (s[i] == '(' ? 1 : -1);
            c[ind] = s[i];
        }
        if (mn[1] < 0 || val != 0) cout << -1 << sep;
        else cout << mx[1] << sep;
    }

    return 0;
}
/*

*/