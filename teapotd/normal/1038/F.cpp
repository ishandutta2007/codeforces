#define _USE_MATH_DEFINES/////////////////////////////////////////////////////
#include <bits/stdc++.h>//////////////////////////////////////////////////////
#ifdef LOC////////////////////////////////////////////////////////////////////
#include "debuglib.h"/////////////////////////////////////////////////////////
#else/////////////////////////////////////////////////////////////////////////
#define deb(...)//////////////////////////////////////////////////////////////
#define DBP(...)//////////////////////////////////////////////////////////////
#endif////////////////////////////////////////////////////////////////////////
#define x first///////////////////////////////////////////////////////////////
#define y second//////////////////////////////////////////////////////////////
#define mp make_pair//////////////////////////////////////////////////////////
#define pb push_back//////////////////////////////////////////////////////////
#define sz(x)int((x).size())//////////////////////////////////////////////////
#define each(a,x)for(auto&a:(x))///////////////// by teapotd /////////////////
#define all(x)(x).begin(),(x).end()///////////////////////////////////////////
#define rep(i,b,e)for(int i=(b);i<(e);i++)////////////////////////////////////
using namespace std;using namespace rel_ops;using ll=int64_t;using Pii=pair///
<int,int>;using ull=uint64_t;using Vi=vector<int>;void run();int main(){cin.//
sync_with_stdio(0);cin.tie(0);cout<<fixed<<setprecision(10);run();return 0;}//
//--------------------------------------------------------------------------//

int uplg(int n) { return 32-__builtin_clz(n); }
int uplg(ll n)  { return 64-__builtin_clzll(n); }

void run() {
	int n, m;
	string pattern;
	Vi valid;

	cin >> n >> pattern;
	m = sz(pattern);

	rep(i, 0, n) {
		bool ok = true;

		rep(j, 0, m) {
			int k = (i+j) % n;
			if (k < m && pattern[j] != pattern[k]) {
				ok = false;
				break;
			}
		}

		if (ok) valid.pb(i);
	}

	ll ans = 0;
	vector<ll> dp(n);
	dp[0] = 1;

	each(k, valid) {
		if (k > 0) {
			each(j, valid) {
				int i = (k+j) % n;
				if (i < k) {
					dp[k] -= dp[i] << max(0, k-i-m);
				}
			}
		}

		ans += (dp[k] * (n-k)) << max(0, n-k-m);
	}

	cout << ans << endl;
}