/* Generated by powerful Codeforces Tool
 * You can download the binary file in here https://github.com/xalanq/cf-tool (Windows, macOS, Linux)
 * Author: alireza_kaviani
 * Time: 2020-09-02 11:18:45
**/
#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<int, int> pii;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 2e5 + 2;
const ll N = 1e3 + 2;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

int n , m , q , ans[MAXN] , V[MAXN] , U[MAXN] , dp[N][N];
vector<pair<pii ,  pii>> Q[MAXN];

int main() {
	ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
	for(int i = 0 ; i < N ; i++)	fill(dp[i] , dp[i] + N , MOD);

	cin >> n >> m >> q;
	for(int i = 1 ; i <= m ; i++)	cin >> V[i] >> U[i];
	for(int i = 1 ; i <= q ; i++){
		int l , r , s , t;
		cin >> l >> r >> s >> t;
		Q[l].push_back({{i , r} , {s , t}});
	}

	for(int i = MAXN - 1 ; i >= 0 ; i--){
		int v = V[i] , u = U[i];
		dp[v][u] = dp[u][v] = i;
		for(int j = 0 ; j < N ; j++){
			dp[v][j] = dp[u][j] = min(dp[v][j] , dp[u][j]);
		}
		for(pair<pii , pii> j : Q[i]){
			int ind = j.X.X , r = j.X.Y , s = j.Y.X , t = j.Y.Y;
			if(dp[s][t] <= r)	ans[ind] = 1;
		}
	}

	for(int i = 1 ; i <= q ; i++){
		if(ans[i])	cout << "Yes" << endl;
		else	cout << "No" << endl;
	}

    return 0;
}
/*

*/