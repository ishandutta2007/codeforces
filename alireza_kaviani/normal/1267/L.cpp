/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author ParsaAlizadeh
 */

#include <bits/stdc++.h>
using namespace std;

typedef long long int   ll;
typedef long double     ld;
typedef pair<ll, ll>    pll;
typedef pair<int, int>  pii;

#define all(x)          x.begin(), x.end()
#define kill(x)         return cout << x << endl, 0;
#define X               first
#define Y               second
#define sep             ' '
#define endl            '\n'
#define file_io         freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);

ll pw(ll a, ll b, ll mod) {
    if (!b)    return 1;
    if (b & 1) return a * pw(a * a % mod, b / 2, mod) % mod;
    return pw(a * a % mod, b / 2, mod) % mod;
}

const ll MAXN  = 1e3 + 10;
const ll INF   = 8e18;
const ll MOD   = 1e9 + 7; // 998244353;

int n, l, k, ans[MAXN][MAXN], cnt[30], ind, x, y, ptr;
string s;
vector<char> vec;

int main() {
    ios_base::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr);
    cin >> n >> l >> k >> s;
    for (char c : s)
        vec.push_back(c);
    sort(all(vec));
    while (true) {
        if (x > k - 1 && y == l - 1) break;
        if (x > k - 1) {
            x = ind;
            y++;
        }
        ans[x][y] = vec[ptr] - 'a' + 1;
        if (ptr + 1 < vec.size() && x < k - 1 && vec[ptr] != vec[ptr + 1])
            ind = max(ind, x + 1);
        x++;
        ptr++;
    }
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < l; j++) {
            if (ans[i][j] != 0) cout << char(ans[i][j] + 'a' - 1);
            else cout << vec[ptr++];
        }
        cout << endl;
    }

    return 0;
}