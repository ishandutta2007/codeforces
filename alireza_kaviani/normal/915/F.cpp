/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n, cnt, A[MAXN], par[MAXN], sz[MAXN];
vector<pair<ll, pll>> E;
vector<pll> Edges;

ll Find(ll v) {
    return (par[v] == -1 ? v : par[v] = Find(par[v]));
}

void Union(ll v, ll u) {
    v = Find(v);
    u = Find(u);
    if (v == u) return;
    if (sz[v] < sz[u]) swap(v, u);
    par[u] = v;
    cnt += sz[v] * sz[u];
    sz[v] += sz[u];
}

ll get() {
    fill(par, par + MAXN, -1);
    fill(sz, sz + MAXN, 1);
    cnt = 0;
    ll ans = 0;
    for (pair<ll, pll> i : E) {
        ll w = i.X, u = i.Y.X, v = i.Y.Y, c = cnt;
        Union(v, u);
        ans += w * (cnt - c);
    }
    return ans;
}

int main() {
    fast_io;

    cin >> n;
    for (ll i = 1; i <= n; i++) cin >> A[i];
    for (ll i = 1; i < n; i++) {
        ll v, u;
        cin >> v >> u;
        Edges.push_back({v, u});
        E.push_back({max(A[v], A[u]), {v, u}});
    }

    Sort(E);
    ll mx = get();
    E = {};
    for (pll i : Edges) E.push_back({min(A[i.X], A[i.Y]), {i.X, i.Y}});
    sort(all(E), greater<pair<ll, pll>>());
    ll mn = get();
    cout << mx - mn << endl;

    return 0;
}
/*

*/