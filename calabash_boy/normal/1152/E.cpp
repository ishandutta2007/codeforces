/* Generated by powerful Codeforces Tool
 * Author: calabash_boy_love_15 
 * Time: 2019-05-07 23:39:22
 * Personal Code Template: https://github.com/4thcalabash/ACM-Code-Library
**/
#pragma GCC optimize(3)
#include <bits/stdc++.h>
using namespace std;
#ifdef __LOCAL_DEBUG__
# define _debug(fmt, ...) fprintf(stderr, "\033[91m[%s %3d]: " fmt "\n\033[0m", \
  __func__,__LINE__, ##__VA_ARGS__)
#else
# define _debug(...) (void(0))
#endif
#define PB(x) push_back(x)
#define rep(i,l,r) for (int i = l,_ = r;i< _;i++)
#define REP(i,l,r) for (int i=l,_=r;i<=_;i++)
#define leave(x) do {cout<<#x<<endl;fflush(stdout);return 0;}while (0);
#define untie do{ios::sync_with_stdio(false);cin.tie(nullptr);cout.tie(nullptr);}while (0)
#define range(x) x.begin(),x.end()
typedef long long LL;
typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef long double db;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;
const int inf = 0x3f3f3f3f;
const ll inf_ll = 0x3f3f3f3f3f3f3f3fLL;
/************* header ******************/

const int maxn = 2e5+ 100;

vector<int> ID(0);
int last[maxn];
vector<pii> E[maxn];
bool used[maxn];
int b[maxn];
int c[maxn];
int n;
int get_id(int val){
    return lower_bound(range(ID),val) - ID.begin() + 1;
}
int get_val(int id){
    return ID[id-1];
}
int check(){
    for (int i=1;i<=n;i++){
        if (b[i] >c[i])return -1;
    }

    int odd = 0;
    for (int i=1;i<=ID.size();i++){
        odd += E[i].size() & 1;
    }
    if (odd == 0)return 1;
    if (odd != 2)return -1;
    int idx = 1;
    while (E[idx].size()% 2 == 0)idx ++;
    return idx;
}
vi ans;
void dfs(int u){
    for (int & it = last[u];it < E[u].size();){
        int id,v;
        tie(v,id) = E[u][it];
        if (used[id]){
            it ++;
            continue;
        }
        used[id] = true;
        dfs(v);
        ans.push_back(v);
    }

}
int main(){
    cin>>n;
    n--;
    for (int i=1;i<=n;i++){
        cin>>b[i];
        ID.PB(b[i]);
    }
    for (int i=1;i<=n;i++){
        cin>>c[i];
        ID.PB(c[i]);
    }
    sort(range(ID));
    ID.erase(unique(range(ID)),ID.end());
    for (int i=1;i<=n;i++){
        b[i] = get_id(b[i]);
        c[i] = get_id(c[i]);
        E[b[i]].PB(make_pair(c[i],i));
        E[c[i]].PB(make_pair(b[i],i));
    }
    int st = check();
    if (st == -1){
        puts("-1");
        return 0;
    }
    dfs(st);
    ans.PB(st);
    if (ans.size() != n+ 1){
        puts("-1");
        return 0;
    }
    for (int v : ans){
        cout<<get_val(v)<<" ";
    }
    cout<<endl;
    return 0;
}