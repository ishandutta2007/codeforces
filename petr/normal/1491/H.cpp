/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

// Actual solution is at the bottom

#include <algorithm>
#include <array>
#include <bitset>
#include <cassert>
#include <climits>
#include <cstdint>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <memory>
#include <numeric>
#include <queue>
#include <random>
#include <set>
#include <stack>
#include <string>
#include <unordered_set>
#include <unordered_map>
#include <vector>
#ifndef ATCODER_FENWICKTREE_HPP
#define ATCODER_FENWICKTREE_HPP 1




#ifndef ATCODER_INTERNAL_TYPE_TRAITS_HPP
#define ATCODER_INTERNAL_TYPE_TRAITS_HPP 1



#include <type_traits>

namespace atcoder {

namespace internal {

#ifndef _MSC_VER
template <class T>
using is_signed_int128 =
    typename std::conditional<std::is_same<T, __int128_t>::value ||
                                  std::is_same<T, __int128>::value,
                              std::true_type,
                              std::false_type>::type;

template <class T>
using is_unsigned_int128 =
    typename std::conditional<std::is_same<T, __uint128_t>::value ||
                                  std::is_same<T, unsigned __int128>::value,
                              std::true_type,
                              std::false_type>::type;

template <class T>
using make_unsigned_int128 =
    typename std::conditional<std::is_same<T, __int128_t>::value,
                              __uint128_t,
                              unsigned __int128>;

template <class T>
using is_integral = typename std::conditional<std::is_integral<T>::value ||
                                                  is_signed_int128<T>::value ||
                                                  is_unsigned_int128<T>::value,
                                              std::true_type,
                                              std::false_type>::type;

template <class T>
using is_signed_int = typename std::conditional<(is_integral<T>::value &&
                                                 std::is_signed<T>::value) ||
                                                    is_signed_int128<T>::value,
                                                std::true_type,
                                                std::false_type>::type;

template <class T>
using is_unsigned_int =
    typename std::conditional<(is_integral<T>::value &&
                               std::is_unsigned<T>::value) ||
                                  is_unsigned_int128<T>::value,
                              std::true_type,
                              std::false_type>::type;

template <class T>
using to_unsigned = typename std::conditional<
    is_signed_int128<T>::value,
    make_unsigned_int128<T>,
    typename std::conditional<std::is_signed<T>::value,
                              std::make_unsigned<T>,
                              std::common_type<T>>::type>::type;

#else

template <class T> using is_integral = typename std::is_integral<T>;

template <class T>
using is_signed_int =
    typename std::conditional<is_integral<T>::value && std::is_signed<T>::value,
                              std::true_type,
                              std::false_type>::type;

template <class T>
using is_unsigned_int =
    typename std::conditional<is_integral<T>::value &&
                                  std::is_unsigned<T>::value,
                              std::true_type,
                              std::false_type>::type;

template <class T>
using to_unsigned = typename std::conditional<is_signed_int<T>::value,
                                              std::make_unsigned<T>,
                                              std::common_type<T>>::type;

#endif

template <class T>
using is_signed_int_t = std::enable_if_t<is_signed_int<T>::value>;

template <class T>
using is_unsigned_int_t = std::enable_if_t<is_unsigned_int<T>::value>;

template <class T> using to_unsigned_t = typename to_unsigned<T>::type;

}  // namespace internal

}  // namespace atcoder

#endif  // ATCODER_INTERNAL_TYPE_TRAITS_HPP



namespace atcoder {

// Reference: https://en.wikipedia.org/wiki/Fenwick_tree
template <class T> struct fenwick_tree {
    using U = internal::to_unsigned_t<T>;

  public:
    fenwick_tree() : _n(0) {}
    fenwick_tree(int n) : _n(n), data(n) {}

    void add(int p, T x) {
        assert(0 <= p && p < _n);
        p++;
        while (p <= _n) {
            data[p - 1] += U(x);
            p += p & -p;
        }
    }

    T sum(int l, int r) {
        assert(0 <= l && l <= r && r <= _n);
        return sum(r) - sum(l);
    }

  private:
    int _n;
    std::vector<U> data;

    U sum(int r) {
        U s = 0;
        while (r > 0) {
            s += data[r - 1];
            r -= r & -r;
        }
        return s;
    }
};

}  // namespace atcoder

#endif  // ATCODER_FENWICKTREE_HPP



#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()

using namespace std;

typedef int64_t int64;
typedef pair<int, int> ii;

constexpr int BUBEN = 300;

class HYuezhengLingAndDynamicTree {
 public:
  void solveOne() {
    int n, q;
    cin >> n >> q;
    vector<int> a(n);
    vector<int> lastOnLevel(n);
    vector<int> level(n);
    for (int i = 1; i < n; ++i) level[i] = 1 + (i - 1) / BUBEN;
    a[0] = -1;
    for (int i = 1; i < n; ++i) {
      cin >> a[i];
      --a[i];
    }
    atcoder::fenwick_tree<int> updates(n + 1);
    set<int> withins;
    for (int i = 1; i < n; ++i) {
      int j = a[i];
      if (level[j] == level[i]) {
        withins.insert(i);
        lastOnLevel[i] = lastOnLevel[j];
      } else {
        lastOnLevel[i] = i;
      }
    }
    vector<int> process;
    for (int qi = 0; qi < q; ++qi) {
      int t;
      cin >> t;
      if (t == 1) {
        int l;
        int r;
        int x;
        cin >> l >> r >> x;
        --l; --r;
        updates.add(l, x);
        updates.add(r + 1, -x);
        auto from = withins.lower_bound(l);
        auto to = withins.lower_bound(r + 1);
        process.clear();
        for (auto it = from; it != to; ++it) {
          process.push_back(*it);
        }
        for (int v : process) {
          int na = a[v] - updates.sum(0, v + 1);
          int dest = max(0, na);
          if (level[dest] == level[v]) {
            lastOnLevel[v] = lastOnLevel[dest];
          } else {
            lastOnLevel[v] = v;
            withins.erase(v);
          }
        }
        for (int v = r + 1; v < n && level[v] == level[r]; ++v) if (lastOnLevel[v] != v) {
          int na = a[v] - updates.sum(0, v + 1);
          int dest = max(0, na);
          assert(level[dest] == level[v]);
          lastOnLevel[v] = lastOnLevel[dest];
        }
      } else {
        int u, v;
        cin >> u >> v;
        --u;
        --v;
        while (u != v) {
          if (u > v) {
            swap(u, v);
          }
          if (level[u] == level[v]) {
            int uu = lastOnLevel[u];
            int vv = lastOnLevel[v];
            if (uu == vv) {
              int na = a[v] - updates.sum(0, v + 1);
              int dest = max(0, na);
              v = dest;
              continue;
            }
          }
          v = lastOnLevel[v];
          int na = a[v] - updates.sum(0, v + 1);
          int dest = max(0, na);
          v = dest;
        }
        cout << (u + 1) << "\n";
      }
    }
  }

  void solve() {
    int nt = 1;
    for (int it = 0; it < nt; ++it) {
      solveOne();
    }
  }
};


int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(0);
    HYuezhengLingAndDynamicTree solver;


    solver.solve();
    return 0;
}