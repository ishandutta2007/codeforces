/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 2e5 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n, ans, A[MAXN], B[MAXN], mn[LOG][MAXN], mx[LOG][MAXN], lg[MAXN];

ll diff(ll l, ll r) {
    ll sz = (r - l + 1), L = lg[sz];
    return max(mx[L][l], mx[L][r - (1LL << L) + 1]) - min(mn[L][l], mn[L][r - (1LL << L) + 1]);
}

int main() {
    fast_io;

    lg[1] = 0;
    for (ll i = 2; i < MAXN; i++) lg[i] = lg[i / 2] + 1;

    cin >> n;
    for (ll i = 1; i <= n; i++) cin >> A[i], mx[0][i] = A[i];
    for (ll i = 1; i <= n; i++) cin >> B[i], mn[0][i] = B[i];
    for (ll i = 1; i < LOG; i++) {
        for (ll j = 0; j + (1LL << i) < MAXN; j++) {
            mn[i][j] = min(mn[i - 1][j], mn[i - 1][j + (1LL << (i - 1))]);
            mx[i][j] = max(mx[i - 1][j], mx[i - 1][j + (1LL << (i - 1))]);
        }
    }

    for (ll i = 1; i <= n; i++) {
        ll l = i - 1, r = n + 1;
        while (r - l > 1) {
            ll mid = (l + r) / 2;
            if (diff(i, mid) >= 0) r = mid;
            else l = mid;
        }
        ans -= r;
        l = i - 1, r = n + 1;
        while (r - l > 1) {
            ll mid = (l + r) / 2;
            if (diff(i, mid) > 0) r = mid;
            else l = mid;
        }
        ans += r;
    }
    cout << ans << endl;

    return 0;
}
/*

*/