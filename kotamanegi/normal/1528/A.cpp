using namespace std;
#include "bits/stdc++.h"

// add your library with double quotation #include"" here.
// define your macros here.
using namespace std;
typedef string::const_iterator State;
#define eps 1e-8L
#define MAX_MOD 1000000007LL
#define GYAKU 500000004LL
#define MOD 998244353LL
#define pb push_back
#define mp make_pair
typedef long long ll;
typedef long double ld;
#define REP(a,b) for(long long (a) = 0;(a) < (b);++(a))
#define ALL(x) (x).begin(),(x).end()

#define int long long
vector<int> vertexs[200000];
pair<int, int> S[200000];
pair<int, int> dp[200000];
void dfs(int now, int back) {
    dp[now] = mp(0, 0);
    for (auto x : vertexs[now]) {
        if (x == back) continue;
        dfs(x, now);
        dp[now].first += max(dp[x].first + abs(S[x].first - S[now].first), dp[x].second + abs(S[x].second - S[now].first));
        dp[now].second += max(dp[x].first + abs(S[x].first - S[now].second), dp[x].second + abs(S[x].second - S[now].second));
    }
    return;
}
void solve() {
    // write your solution here.
    int n;
    cin >> n;
    REP(i, n + 1) {
        vertexs[i].clear();
    }
    REP(i, n) {
        int a, b;
        cin >> a >> b;
        S[i] = mp(a, b);
    }
    REP(i, n - 1) {
        int a, b;
        cin >> a >> b;
        a--; b--;
        vertexs[a].push_back(b);
        vertexs[b].push_back(a);
    }
    dfs(0, -1);
    cout << max(dp[0].first, dp[0].second) << endl;
}
#undef int

// generated by oj-template v4.7.2 (https://github.com/online-judge-tools/template-generator)
int main() {
    // Fasterize input/output script
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    cout << fixed << setprecision(100);
    // scanf/printf user should delete this fasterize input/output script

    int t = 1;
    cin >> t; // comment out if solving multi testcase
    for (int testCase = 1; testCase <= t; ++testCase) {
        solve();
    }
    return 0;
}