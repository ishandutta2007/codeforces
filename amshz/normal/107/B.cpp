/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Parsa Bahrami
 */

#pragma GCC optimize("O2")

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

typedef long long int ll;
typedef long double ld;
typedef pair<ll, ll> pll;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

#define sz(x)                       (ll) x.size()
#define all(x)                      (x).begin(),(x).end()
#define F                           first
#define S                           second

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll INF = 8e18;
const ll MOD = 1e9 + 7;
ll n, m, h;
ll A[MAXN];

ll C(ll i, ll j) {
    if (i == j || i == 0) return 1;
    if (i > j) return 0;
    return C(i - 1, j) + C(i - 1, j - 1);
}

int main() {
    scanf("%lld%lld%lld", &n, &m, &h);
    ll sum = 0;
    for (ll i = 1; i <= m; i++) {
        scanf("%lld", &A[i]);
        sum += A[i];
    }
    if (sum < n) return !printf("-1\n");
    //n--, sum--, A[h]--;
    double ans = 1.0;
    for (ll i = 1; i < A[h]; i++)
        ans = ans / (sum - A[h] + i) * (sum - n - A[h] + 1 + i);
    printf("%.15f\n", 1 - ans);
    return 0;
}