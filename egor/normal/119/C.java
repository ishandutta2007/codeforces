import java.util.NavigableSet;
import java.util.Map;
import java.util.Collections;
import java.util.HashMap;
import java.util.InputMismatchException;
import java.math.BigInteger;
import java.util.*;
import java.util.Collection;
import java.util.ArrayList;
import java.util.List;
import java.util.Comparator;
import java.io.*;
import java.util.Iterator;
import java.util.Arrays;
import java.util.NoSuchElementException;

/**
 * Generated by Contest helper plug-in
 * Actual solution is at the bottom
 */
public class Main {
	public static void main(String[] args) {
		InputReader in = new StreamInputReader(System.in);
		PrintWriter out = new PrintWriter(System.out);
		run(in, out);
	}

	public static void run(InputReader in, PrintWriter out) {
		Solver solver = new TaskC();
		solver.solve(1, in, out);
		Exit.exit(in, out);
	}
}

abstract class InputReader {
	private boolean finished = false;

	public abstract int read();

	public int readInt() {
		int c = read();
		while (isSpaceChar(c))
			c = read();
		int sgn = 1;
		if (c == '-') {
			sgn = -1;
			c = read();
		}
		int res = 0;
		do {
			if (c < '0' || c > '9')
				throw new InputMismatchException();
			res *= 10;
			res += c - '0';
			c = read();
		} while (!isSpaceChar(c));
		return res * sgn;
	}

	public long readLong() {
		int c = read();
		while (isSpaceChar(c))
			c = read();
		int sgn = 1;
		if (c == '-') {
			sgn = -1;
			c = read();
		}
		long res = 0;
		do {
			if (c < '0' || c > '9')
				throw new InputMismatchException();
			res *= 10;
			res += c - '0';
			c = read();
		} while (!isSpaceChar(c));
		return res * sgn;
	}

	public String readString() {
		int c = read();
		while (isSpaceChar(c))
			c = read();
		StringBuffer res = new StringBuffer();
		do {
			res.appendCodePoint(c);
			c = read();
		} while (!isSpaceChar(c));
		return res.toString();
	}

	private boolean isSpaceChar(int c) {
		return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
	}

	public void setFinished(boolean finished) {
		this.finished = finished;
	}

	public abstract void close();
}

class StreamInputReader extends InputReader {
	private InputStream stream;
	private byte[] buf = new byte[1024];
	private int curChar, numChars;

	public StreamInputReader(InputStream stream) {
		this.stream = stream;
	}

	public int read() {
		if (numChars == -1)
			throw new InputMismatchException();
		if (curChar >= numChars) {
			curChar = 0;
			try {
				numChars = stream.read(buf);
			} catch (IOException e) {
				throw new InputMismatchException();
			}
			if (numChars <= 0)
				return -1;
		}
		return buf[curChar++];
	}

	public void close() {
		try {
			stream.close();
		} catch (IOException ignored) {
		}
	}
}

class Exit {
	private Exit() {
	}

	public static void exit(InputReader in, PrintWriter out) {
		in.setFinished(true);
		in.close();
		out.close();
	}
}

interface Solver {
	public void solve(int testNumber, InputReader in, PrintWriter out);
}

class ArrayUtils {

	public static void fill(long[][] array, long value) {
		for (long[] row : array)
			Arrays.fill(row, value);
	}

	public static void fill(long[][][] array, long value) {
		for (long[][] row : array)
			fill(row, value);
	}

	}

class CollectionUtils {

	public static<T extends Comparable<T>> T maxElement(Iterable<T> collection) {
		T result = null;
		for (T element : collection) {
			if (result == null || result.compareTo(element) < 0)
				result = element;
		}
		return result;
	}

	}

abstract class ReadOnlyIterator<T> implements Iterator<T>  {
	public final void remove() {
		throw new UnsupportedOperationException();
	}
}

abstract class AbstractSequence<T> implements Sequence<T> {

	public Iterator<T> iterator() {
		return new ReadOnlyIterator<T>() {
			private int index = 0;

			public boolean hasNext() {
				return index != size();
			}

			public T next() {
				if (!hasNext())
					throw new NoSuchElementException();
				return get(index++);
			}
		};
	}

	}

abstract class AbstractWritableSequence<T> extends AbstractSequence<T> implements WritableSequence<T> {

	}

abstract class ArrayWrapper<T> extends AbstractWritableSequence<T> {

	public static WritableSequence<Long> wrap(long...array) {
		return new LongArrayWrapper(array);
	}

	protected static class LongArrayWrapper extends ArrayWrapper<Long> {
		protected final long[] array;

		protected LongArrayWrapper(long[] array) {
			this.array = array;
		}

		public int size() {
			return array.length;
		}

		public Long get(int index) {
			return array[index];
		}

		}

	}

interface Sequence<T> extends Iterable<T> {
	public int size();
	public T get(int index);
}

class MiscUtils {

	public static<T> boolean equals(T first, T second) {
		return first == null && second == null || first != null && first.equals(second);
	}

	}

class SequenceUtils {
	public static<T> int find(Sequence<T> sequence, T value) {
		int size = sequence.size();
		for (int i = 0; i < size; i++) {
			if (MiscUtils.equals(sequence.get(i), value))
				return i;
		}
		return -1;
	}

	public static<T extends Comparable<T>> int maxIndex(Sequence<T> sequence) {
		return find(sequence, CollectionUtils.maxElement(sequence));
	}

	}

interface WritableSequence<T> extends Sequence<T> {
	}

class IOUtils {

	public static void readLongArrays(InputReader in, long[]... arrays) {
		for (int i = 0; i < arrays[0].length; i++) {
			for (int j = 0; j < arrays.length; j++)
				arrays[j][i] = in.readLong();
		}
	}

	}

class TaskC implements Solver {
	public void solve(int testNumber, InputReader in, PrintWriter out) {
		int dayCount = in.readInt();
		int studyCount = in.readInt();
		int delta = in.readInt();
		long[] min = new long[studyCount];
		long[] max = new long[studyCount];
		long[] hardness = new long[studyCount];
		IOUtils.readLongArrays(in, min, max, hardness);
		long[][][] total = new long[dayCount][studyCount][101];
		long[][][] last = new long[dayCount][studyCount][101];
		ArrayUtils.fill(total, Long.MIN_VALUE / 2);
		for (int i = 0; i < studyCount; i++) {
			for (int j = 0; j <= max[i] - min[i]; j++)
				total[0][i][j] = min[i] + j;
		}
		for (int i = 1; i < dayCount; i++) {
			for (int j = 0; j < studyCount; j++) {
				for (int k = 0; k <= max[j] - min[j]; k++) {
					for (int l = 0; l < studyCount; l++) {
						if (hardness[l] >= hardness[j])
							continue;
						long index = min[j] + k - delta - min[l];
						if (index >= 0 && index <= max[l] - min[l]) {
							long value = total[i - 1][l][((int) index)] + k + min[j];
							if (value > total[i][j][k]) {
								total[i][j][k] = value;
								last[i][j][k] = l + (index << 7);
							}
						}
						index = min[j] + k;
						if (index % delta != 0)
							continue;
						index = index / delta - min[l];
						if (index >= 0 && index <= max[l] - min[l]) {
							long value = total[i - 1][l][((int) index)] + k + min[j];
							if (value > total[i][j][k]) {
								total[i][j][k] = value;
								last[i][j][k] = l + (index << 7);
							}
						}
					}
				}
			}
		}
		long result = -1;
		long[][] longs = total[dayCount - 1];
		int lastStudy = -1;
		int count = -1;
		for (int i = 0, longsLength = longs.length; i < longsLength; i++) {
			long[] row = longs[i];
			int index = SequenceUtils.maxIndex(ArrayWrapper.wrap(row));
			if (row[index] > result) {
				result = row[index];
				lastStudy = i;
				count = index;
			}
		}
		if (result < 0) {
			out.println("NO");
			return;
		}
		int[] index = new int[dayCount];
		long[] homework = new long[dayCount];
		for (int i = dayCount - 1; i >= 0; i--) {
			index[i] = lastStudy + 1;
			homework[i] = min[lastStudy] + count;
			int nextStudy = (int) (last[i][lastStudy][count] & 127);
			int nextCount = (int) (last[i][lastStudy][count] >> 7);
			lastStudy = nextStudy;
			count = nextCount;
		}
		out.println("YES");
		for (int i = 0; i < dayCount; i++)
			out.println(index[i] + " " + homework[i]);
	}
}