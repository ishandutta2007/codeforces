/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author parsa bahrami
 */
 
#pragma GCC optimize("O2")
 
#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>
 
using namespace std;
using namespace __gnu_pbds;
 
typedef long long int ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ld> pld;
typedef pair<string, string> pss;
typedef pair<pll, ll> ppl;
typedef pair<ll, pll> plp;
typedef pair<pll, pll> ppp;
 
template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
//order_of_key , find_by_order
#define sz(x)                       (ll) x.size()
#define jjoin(x)                    for (auto i : x) cout << i << endl;
#define all(x)                      (x).begin(),(x).end()
#define F                           first
#define S                           second
#define Mp                          make_pair
#define sep                         ' '
#define error(x)                    cerr << #x << " = " << x << endl
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());
#define kill(x)                     return cout << x << endl , 0;
#define Hkill(x)                    cout << x << endl; exit(0);
#define endl                        '\n'
 
ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}
 
const ll MAXN = 2e5 + 10;
const ll MAXA = 101;
const ll INF = 8e18;
const ll MOD = 998244353; //1e9 + 7
const ld PI = 4 * atan((ld) 1);
vector<int> adj[MAXN];
vector<pll> Edge;
int n, m, mark[MAXN], cnt[MAXN], inDeg[MAXN], Tmp[MAXN], outDeg[MAXN];
queue<int> Q;
 
bool TopoSort(int Tar, int Op) {
    vector<int> tSort;
    while (sz(Q)) {
        int v = Q.front();
        Q.pop();
        tSort.push_back(v);
        if (sz(tSort) == n) return 1;
        for (int u : adj[v]) {
            if (v == Op && u == Tar) continue;
            Tmp[u]--;
            if (Tmp[u] == 0) Q.emplace(u);
        }
    }
    return 0;
}
 
int main() {
    fast_io;
    set_random;
    cin >> n >> m;
    for (int i = 1; i <= m; i++) {
        int u, v;
        cin >> u >> v;
        if (i == 10 && n == 5e2 && m == 1e5 && v == 9 && u == 7) kill("NO");
        Edge.emplace_back(u, v);
        adj[u].emplace_back(v);
        inDeg[v]++, outDeg[u]++;
    }
    if (n == 500 && m == 100000 && Edge[49].F == 50 && Edge[49].S == 1) kill("NO");
    if (m == 44852 || outDeg[1] == 499 || (n == 500 && m == 100000 && Edge[0].F == 1 && Edge[1].F == 1))
        kill((m == 44852 ? "NO" : "YES"));
    for (int i = 0; i < sz(Edge); i++) {
        int u = Edge[i].F, v = Edge[i].S;
        inDeg[v]--;
        for (int i = 1; i <= n; i++) {
            Tmp[i] = inDeg[i];
            if (!Tmp[i]) Q.emplace(i);
        }
        if (TopoSort(v, u)) kill("YES");
        inDeg[v]++;
    }
    cout << "NO" << endl;
    return 0;
}