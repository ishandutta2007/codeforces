/* Generated by powerful Codeforces Tool
 * Author: calabash_boy_love_15 
 * Time: 2019-10-11 00:11:34
 * Personal Code Template: https://github.com/4thcalabash/ACM-Code-Library
**/
#pragma GCC optimize(3)
#include <bits/stdc++.h>
using namespace std;
#ifdef __LOCAL_DEBUG__
# define _debug(fmt, ...) fprintf(stderr, "\033[91m[%s %3d]: " fmt "\n\033[0m", \
  __func__,__LINE__, ##__VA_ARGS__)
#else
# define _debug(...) (void(0))
#endif
#define PB(x) push_back(x)
#define rep(i,l,r) for (int i = l,_ = r;i< _;i++)
#define REP(i,l,r) for (int i=l,_=r;i<=_;i++)
#define leave(x) do {cout<<#x<<endl;fflush(stdout);return 0;}while (0);
#define untie do{ios::sync_with_stdio(false);cin.tie(nullptr);cout.tie(nullptr);}while (0)
#define range(x) x.begin(),x.end()
typedef long long LL;
typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef long double db;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;
const int inf = 0x3f3f3f3f;
const ll inf_ll = 0x3f3f3f3f3f3f3f3fLL;
/************* header ******************/
const int maxn = 5000 + 10;
const int maxa = 1000000 + 100;
int edge[maxa];
int n,k;
vector<int> val;
int edge_cnt[maxa];
int used[maxa];
int used2[maxa];
int main(){
    scanf("%d%d",&n,&k);
    int Max = -1;
    for (int i=0;i<n;i++){
        int x;
        scanf("%d",&x);
        Max = max(Max,x);
        val.push_back(x);
    }
    for (int i=0;i<n;i++){
        for (int j=i+1;j<n;j++){
            int del = abs(val[j] - val[i]);
            edge[del]++;
        }
    }
    int limit = k * (k+1)/2;
   for (int ans = n - k;ans <= Max;ans ++){
        for (int i = ans;i <= Max;i += ans){
            edge_cnt[ans] += edge[i];
            if (edge_cnt[ans] > limit)break;
        }
        if (edge_cnt[ans] >limit)continue;
        int need = 0;
        {
            for (auto x : val){
                int rest = x % ans;
                if (used2[rest] == ans)need ++;
                else used2[rest] = ans;
                if (need > k)break;
            }
        }
        if (need <= k){
            printf("%d\n",ans);
            return 0;
        }
    }
    assert(0);
    return 0;
}