/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author RiaD
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <algorithm>
#include <cassert>


#include <iterator>


#include <string>
#include <stdexcept>

#ifndef SPCPPL_ASSERT
	#ifdef SPCPPL_DEBUG
		#define SPCPPL_ASSERT(condition) \
		if(!(condition)) { \
			throw std::runtime_error(std::string() + #condition + " in line " + std::to_string(__LINE__) + " in " + __PRETTY_FUNCTION__); \
		}
	#else
		#define SPCPPL_ASSERT(condition)
	#endif
#endif


/**
* Support decrementing and multi-passing, but not declared bidirectional(or even forward) because
* it's reference type is not a reference.
*
* It doesn't return reference because
* 1. Anyway it'll not satisfy requirement [forward.iterators]/6
*   If a and b are both dereferenceable, then a == b if and only if *a and
*   b are bound to the same object.
* 2. It'll not work with reverse_iterator that returns operator * of temporary which is temporary for this iterator
*
* Note, reverse_iterator is not guaranteed to work  now too since it works only with bidirectional iterators,
* but it's seems to work at least on my implementation.
*
* It's not really useful anywhere except iterating anyway.
*/
template <typename T>
class IntegerIterator: public std::iterator<std::input_iterator_tag, T, std::ptrdiff_t, T*, T> {
public:
	explicit IntegerIterator(T value): value(value) {

	}

	IntegerIterator& operator++() {
		++value;
		return *this;
	}

	IntegerIterator operator++(int) {
		IntegerIterator copy = *this;
		++value;
		return copy;
	}

	IntegerIterator& operator--() {
		--value;
		return *this;
	}

	IntegerIterator operator--(int) {
		IntegerIterator copy = *this;
		--value;
		return copy;
	}

	T operator*() const {
		return value;
	}

	bool operator==(IntegerIterator rhs) const {
		return value == rhs.value;
	}

	bool operator!=(IntegerIterator rhs) const {
		return !(*this == rhs);
	}

private:
	T value;
};

template <typename T>
class IntegerRange {
public:
	IntegerRange(T begin, T end): begin_(begin), end_(end) {
		SPCPPL_ASSERT(begin <= end);
	}

	IntegerIterator<T> begin() const {
		return IntegerIterator<T>(begin_);
	}

	IntegerIterator<T> end() const {
		return IntegerIterator<T>(end_);
	}

private:
	T begin_;
	T end_;
};

template <typename T>
class ReversedIntegerRange {
	typedef std::reverse_iterator<IntegerIterator<T>> IteratorType;
public:
	ReversedIntegerRange(T begin, T end): begin_(begin), end_(end) {
		SPCPPL_ASSERT(begin >= end);
	}

	IteratorType begin() const {
		return IteratorType(IntegerIterator<T>(begin_));
	}

	IteratorType end() const {
		return IteratorType(IntegerIterator<T>(end_));
	}

private:
	T begin_;
	T end_;
};

template <typename T>
IntegerRange<T> range(T to) {
	return IntegerRange<T>(0, to);
}

template <typename T>
IntegerRange<T> range(T from, T to) {
	return IntegerRange<T>(from, to);
}

template <typename T>
IntegerRange<T> inclusiveRange(T to) {
	return IntegerRange<T>(0, to + 1);
}

template <typename T>
IntegerRange<T> inclusiveRange(T from, T to) {
	return IntegerRange<T>(from, to + 1);
}

template <typename T>
ReversedIntegerRange<T> downrange(T from) {
	return ReversedIntegerRange<T>(from, 0);
}

template <typename T>
ReversedIntegerRange<T> downrange(T from, T to) {
	return ReversedIntegerRange<T>(from, to);
}

template <typename T>
ReversedIntegerRange<T> inclusiveDownrange(T from) {
	return ReversedIntegerRange<T>(from + 1, 0);
}

template <typename T>
ReversedIntegerRange<T> inclusiveDownrange(T from, T to) {
	return ReversedIntegerRange<T>(from + 1, to);
}


using namespace std;

class TaskE {
public:
	constexpr static int sz = 1 << 8;
	string dp[3][sz];
	bool update(string& lhs, string cand) {
		assert(!cand.empty());
		if (lhs.empty()) {
			lhs = move(cand);
			return true;
		}

		if (cand.size() < lhs.size() || (cand.size() == lhs.size() && cand < lhs)) {
			lhs = move(cand);
			return true;
		}
		return false;
	}

	TaskE() {
		bool updated = true;
		dp[0][0x33] = "y";
		dp[0][0x0f] = "x";
		dp[0][0x55] = "z";
		while (updated) {
			cerr << "new iteration" << endl;
			updated = false;

			for (int j: range(sz)) {
				if (!dp[0][j].empty()) {
					updated |= update(dp[1][j], dp[0][j]);
					updated |= update(dp[0][~j & (sz - 1)], "!" + dp[0][j]);
				}
			}
			for (int j: range(sz)) {
				if (!dp[1][j].empty()) {

					updated |= update(dp[2][j], dp[1][j]);

					for (int k: range(sz)) {
						if (!dp[1][k].empty()) {
							updated |= update(dp[1][j & k], dp[1][j] + "&" + dp[1][k]);
						}
					}
				}
			}

			for (int j: range(sz)) {
				if (!dp[2][j].empty()) {
					updated |= update(dp[0][j], "(" + dp[2][j] + ")");

					for (int k: range(sz)) {
						if (!dp[2][k].empty()) {
							updated |= update(dp[2][j | k], dp[2][j] + "|" + dp[2][k]);
						}
					}
				}
			}
		}
	}
	void solve(std::istream& in, std::ostream& out) {

		//for (int i: range(256)) {
		//	cerr << i << " " << dp[2][i] << endl;
		//}
		//exit(0);
		string s;
		in >> s;
		int cur = 0;
		for (int i: range(8)) {
			cur += ((s[i] - '0') << (7 - i));
		}

		out << dp[2][cur] << "\n";
	}
};


int main() {
	std::ios_base::sync_with_stdio(false);
	TaskE solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	in.tie(0);
	out << std::fixed;
	out.precision(20);
	int n;
in >> n;
for(int i = 0; i < n; ++i) {
	solver.solve(in, out);
}

	return 0;
}