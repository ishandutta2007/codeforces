/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author majk
 */

#ifndef MAJK_LIB
#define MAJK_LIB

#include <vector>
#include <stack>
#include <iostream>
#include <fstream>
#include <unordered_map>
#include <unordered_set>
#include <map>
#include <iomanip>
#include <set>
#include <functional>
#include <algorithm>
#include <numeric>
#include <cassert>
#include <cmath>
#include <string>
#include <queue>
#include <array>
#include <bitset>
using namespace std;

#define x first
#define y second
typedef std::pair<int,int> pii; typedef long long ll; typedef unsigned long long ull; typedef unsigned int ui; typedef pair<ui,ui> puu;

template <typename T, typename U> std::istream&operator>>(std::istream&i, pair<T,U>&p) {i >> p.x >> p.y; return i;}
template<typename T>std::istream&operator>>(std::istream&i,vector<T>&t) {for(auto&v:t){i>>v;}return i;}
template <typename T, typename U> std::ostream&operator<<(std::ostream&o, const pair<T,U>&p) {o << p.x << ' ' << p.y; return o;}
template<typename T>std::ostream&operator<<(std::ostream&o,const vector<T>&t) {if(t.empty())o<<'\n';for(size_t i=0;i<t.size();++i){o<<t[i]<<" \n"[i == t.size()-1];}return o;}
template<typename T> using minheap = priority_queue<T, vector<T>, greater<T>>;
template<typename T> using maxheap = priority_queue<T, vector<T>, less<T>>;
ui logceil(ll x) { return x?8*sizeof(ll)-__builtin_clzll(x):0; }

namespace std { template<typename T,typename U>struct hash<pair<T,U>>{hash<T>t;hash<U>u;size_t operator()(const pair<T,U>&p)const{return t(p.x)^(u(p.y)<<7);}}; }
template<typename T,typename F>T bsh(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){l=m+1;r=m;}else{h=m-1;}}return r;}
template<typename F> double bshd(double l,double h,const F&f,double p=1e-9){ui r=3+(ui)log2((h-l)/p);while(r--){double m=(l+h)/2;if(f(m)){l=m;}else{h=m;}}return (l+h)/2;}
template<typename T,typename F>T bsl(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){h=m-1;r=m;}else{l=m+1;}}return r;}
template<typename F> double bsld(double l,double h,const F&f){ui r=200;while(r--){double m=(l+h)/2;if(f(m)){h=m;}else{l=m;}}return (l+h)/2;}
template<typename T> T gcd(T a,T b) { if (a<b) swap(a,b); return b?gcd(b,a%b):a; }


template<typename T>class vector2:public vector<vector<T>>{public:vector2(){} vector2(size_t a,size_t b,T t=T()):vector<vector<T>>(a,vector<T>(b,t)){}};
template<typename T>class vector3:public vector<vector2<T>>{public:vector3(){} vector3(size_t a,size_t b,size_t c,T t=T()):vector<vector2<T>>(a,vector2<T>(b,c,t)){}};
template<typename T>class vector4:public vector<vector3<T>>{public:vector4(){} vector4(size_t a,size_t b,size_t c,size_t d,T t=T()):vector<vector3<T>>(a,vector3<T>(b,c,d,t)){}};
template<typename T>class vector5:public vector<vector4<T>>{public:vector5(){} vector5(size_t a,size_t b,size_t c,size_t d,size_t e,T t=T()):vector<vector4<T>>(a,vector4<T>(b,c,d,e,t)){}};


#endif

constexpr int INF = 2e9+2;

int D[5002][5002][2];

class DCakesForClones {
public:
    void solve(istream& cin, ostream& cout) {
        int N; cin >> N;
        vector<pair<ll,ll>> C(N+1, {0,0});
        for (int i = 0; i < N; ++i) {
            cin >> C[i+1];
        }

        for (int i = 0; i <= N+1; ++i) {
            for (int j = 0; j <= N+1; ++j) {
                for (int k = 0; k <= 1; ++k) {
                    D[i][j][k] = INF;
                }
            }
        }

        // 0 - at collected
        // 1 - at cloned
        D[0][0][0] = 0;
        auto put = [&](int col, int clon, bool atClo, ll dist) {
            if (D[col][clon][atClo] > dist) {
                D[col][clon][atClo] = dist;
            }
        };


        for (int collected = 0; collected <= N; ++collected) {
            for (int cloned = 0; cloned <= N; ++cloned) {
                for (int at = 0; at <= 1; ++at) {
                    int t = D[collected][cloned][at];
                    if (t == INF) continue;
                    bool nextOne = collected+1 == cloned;
                    int pos = at?C[cloned].y:C[collected].y;
                    if (nextOne) {
                        if (cloned == N) {
                            cout << "YES\n";
                            return;
                        }

                        // collect the one after
                        ll tt = t + abs(C[collected+2].y-pos);
                        if (tt <= C[collected+2].x) put(collected+2, 0, false, C[collected+2].x);

                        // clone some next one
                        for (int j = collected + 2; j <= N; ++j) {
                            ll tt = max(C[cloned].x, t + abs(C[j].y - pos));
                            if (tt <= C[j].x) put(collected + 1, j, true, tt);
                        }
                    }

                    if (cloned == 0) {
                        // nothing cloned, clone something ourselves
                        for (int j = collected+1; j <= N; ++j) {
                            ll tt = t + abs(C[j].y - pos);
                            if (tt <= C[j].x) put(collected, j, true, tt);
                        }
                    }

                    if (!at) {
                        // at collected
                        ll tt = t + abs(C[collected+1].y - pos);
                        if (tt <= C[collected+1].x) {
                            if (collected+1 == N) {
                                cout << "YES\n";
                                return;
                            }

                            // collect next one
                            put(collected+1, cloned, false, C[collected+1].x);
                        }
                    } else {
                        // at cloned
                        ll tt = t + abs(C[collected+1].y - pos);
                        if (tt <= C[collected+1].x) {
                            // collect next one
                            put(collected + 1, cloned, false, C[collected + 1].x);
                        }
                    }
                }
            }
        }
        cout << "NO\n";


//        vector3<int> D(N+2, N+2, 2, INF);
//        minheap<pair<int, pair<pii, int>>> Q;
//        D[0][0][0] = 0;
//        Q.push({0, {{0,0},0}});
//        auto put = [&](int col, int clon, bool atClo, ll dist) {
//            if (D[col][clon][atClo] > dist) {
//                D[col][clon][atClo] = dist;
//                Q.push({dist, {{col, clon}, atClo}});
//            }
//        };
//
//
//        while (!Q.empty()) {
//            auto q = Q.top();
//            Q.pop();
//            if (D[q.y.x.x][q.y.x.y][q.y.y] != q.x) continue;
//            int collected = q.y.x.x;
//            int cloned = q.y.x.y;
//            int t = q.x;
//            bool nextOne = collected+1 == cloned;
//            int pos = q.y.y?C[cloned].y:C[collected].y;
//            if (nextOne) {
//                if (cloned == N) {
//                    cout << "YES\n";
//                    return;
//                }
//
//                // collect the one after
//                ll tt = max(C[collected+1].x, t + abs(C[collected+2].y-pos));
//                if (tt <= C[collected+2].x) put(collected+2, 0, false, tt);
//
//                // clone some next one
//                for (int j = collected + 2; j <= N; ++j) {
//                    ll tt = max(C[cloned].x, t + abs(C[j].y - pos));
//                    if (tt <= C[j].x) put(collected + 1, j, true, tt);
//                }
//            }
//
//            if (cloned == 0) {
//                // nothing cloned, clone something ourselves
//                for (int j = collected+1; j <= N; ++j) {
//                    ll tt = t + abs(C[j].y - pos);
//                    if (tt <= C[j].x) put(collected, j, true, tt);
//                }
//            }
//
//            if (q.y.y == 0) {
//                // at collected
//                int tt = t + abs(C[collected+1].y - pos);
//                if (tt <= C[collected+1].x) {
//                    if (collected+1 == N) {
//                        cout << "YES\n";
//                        return;
//                    }
//
//                    // collect next one
//                    put(collected+1, cloned, false, C[collected+1].x);
//
//                    // clone anything
//                    if (cloned == 0) {
//                        for (int j = collected + 1; j <= N; ++j) {
//                            ll tt = t + abs(C[j].y - pos);
//                            put(collected, j, true, tt);
//                        }
//                    }
//                }
//            } else {
//                // at cloned
//                int tt = t + abs(C[collected+1].y - pos);
//                if (tt <= C[collected+1].x) {
//                    // collect next one
//                    put(collected + 1, cloned, false, C[collected + 1].x);
//                }
//            }
//        }
//
//        cout << "NO\n";

    }
};



int main() {
	ios_base::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr);
	DCakesForClones solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
    return 0;
}