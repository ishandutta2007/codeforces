/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <algorithm>
#include <queue>
#include <vector>
#include <set>
#include <map>
#include <cassert>
#include <functional>
#include <sstream>
#include <cmath>

#include <cstring>
#include <cstdio>

using namespace std;

typedef pair<int, int> ii;
typedef long long int64;
typedef vector<int> vi;

#define pb push_back
#define mp make_pair
#define all(v) (v).begin(),(v).end()
#define sz(v) ((int)(v).size())

template<class T> T abs(T x) { return x >= 0 ? x : -x; }
template<class T> T sqr(T x) { return x * x; }

class TaskC {
public:
	void solve(std::istream& in, std::ostream& out) {
	    int n;
	    in >> n;
	    vi a(n);
	    for (int i = 0; i < n; ++i) {
            in >> a[i];
            if (i % 2 == 1) a[i] = -a[i];
	    }
	    int64 res = 0;
	    for (int s = 0; s < n; s += 2) {
	        int64 cur = 0;
	        int64 cur_m = -1;
	        for (int t = s + 1; t < n; t += 2) {
	            cur += a[t];
	            cur += a[t - 1];
	            int64 val = cur - a[s] - a[t];
	            int64 l = max(-cur_m, -val + 1);
	            int64 r = min<int64>(a[s], -val - a[t]);
	            if (l <= r) {
	                res += r - l + 1LL;
	            }
                cur_m = min(cur_m, val + a[t]);
	        }
	    }
	    out << res << "\n";
	}
};


int main() {
	TaskC solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}