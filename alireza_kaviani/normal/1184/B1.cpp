/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author devnull
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long int   ll;
typedef long double     ld;
typedef pair<ll,ll>     pll;
typedef complex<ld>     cld;

#define all(x)          x.begin(),x.end()
#define Sort(x)         sort(all(x))
#define kill(x)         return cout << x << endl, 0;
#define Mp              make_pair
#define X               first
#define Y               second
#define sep             " "
#define endl            "\n"
#define fastio          ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define file_io         freopen("in.txt" , "r" , stdin) ; freopen("out.txt" , "w" , stdout);
#define ld_io           cout << setprecision(10) << fixed;
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());

ll pw(ll a, ll b, ll md) {
    if (!b)
        return 1;
    if (b & 1)
        return a * pw(a * a % md, b / 2, md) % md;
    return pw(a * a % md, b / 2, md) % md;
}

const ll MAXN = 1e5 + 10,
         INF  = 8e18,
         MOD  = 1e9 + 7,
         LOG  = 32;

ll s, b, a[MAXN], pref[MAXN];
pll p[MAXN];

int main()
{
    fastio;

    cin >> s >> b;
    for (ll i = 0; i < s; i++) {
        cin >> a[i];
    }
    for (ll i = 0; i < b; i++) {
        cin >> p[i].X >> p[i].Y;
    }
    sort(p, p+b);
    pref[0] = p[0].Y;
    for (ll i = 1; i < b; i++) {
        pref[i] = pref[i - 1] + p[i].Y;
    }
    for (ll i = 0; i < s; i++) {
        ll ptr = upper_bound(p, p+b, Mp(a[i], INF)) - p - 1;
        cout << pref[ptr] << sep;
    }

    return 0;
}