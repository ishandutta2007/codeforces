/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <algorithm>
#include <queue>
#include <vector>
#include <set>
#include <map>
#include <cassert>
#include <functional>
#include <sstream>
#include <cmath>

#include <cstring>
#include <cstdio>

using namespace std;

typedef pair<int, int> ii;
typedef long long int64;
typedef vector<int> vi;

#define pb push_back
#define mp make_pair
#define all(v) (v).begin(),(v).end()
#define sz(v) ((int)(v).size())

template<class T> T abs(T x) { return x >= 0 ? x : -x; }
template<class T> T sqr(T x) { return x * x; }

class TaskC {
public:
	void solve(std::istream& in, std::ostream& out) {
	    int n, m, X;
	    in >> n >> m >> X;
	    vector<ii> v(n);
	    for (int i = 0; i < n; ++i) {
	        in >> v[i].first;
	        v[i].second = i;
	    }
	    vi res(n, -1);
	    sort(all(v));
	    reverse(all(v));
	    set<ii> s;
	    for (int i = 0; i < m; ++i)
	        s.insert(ii(0, i + 1));
	    for (ii e : v) {
	        int x = e.first, ind = e.second;
	        ii smallest = *s.begin();
	        s.erase(s.begin());
	        res[ind] = smallest.second;
	        s.insert(ii(smallest.first + x, smallest.second));
	    }
	    out << "YES\n";
	    for (int x : res) {
	        out << x << " ";
	    }
	    out << "\n";
	}
};


int main() {
	TaskC solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	int n;
in >> n;
for(int i = 0; i < n; ++i) {
	solver.solve(in, out);
}

	return 0;
}