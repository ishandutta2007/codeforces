/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author RiaD
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <vector>

using namespace std;

class TaskD1 {

	vector<int> l;
	vector<int> r;
	vector<int> pos;
	vector<int> res;
public:
	void solve(std::istream& in, std::ostream& out) {
		int n, c;
		in >> n >> c;
		l.assign(c, 0);
		r.assign(c, 0);
		pos.assign(c, 0);

		for(int i = 0; i < c; ++i) {
			int a, b;
			string s;
			in >> a >> b >> s;
			if(a >= b) {
				cout << "IMPOSSIBLE\n";
				return;
			}
			--a, --b;
			l[i] = a;
			r[i] = b;
			pos[i] = s[0] == 'R';
		}

		if(!solve(0, n)) {
			out << "IMPOSSIBLE\n";
			return;
		}

		for(int i = 0; i < n; ++i) {
			out << res[i] + 1 << ' ';
		}
		cerr << "test end" << endl;
	}

	bool solve(int v, int to) {
		int c = l.size();
		if(v >= to)
			return true;


		//cerr << v  << ' ' << to << endl;
		for(int left = v + 1; left <= to; ++left) {
			bool ok = true;
			for(int i = 0; i < c; ++i) {

				if(l[i] == v) {
					if(r[i] >= left && pos[i] == false) {
					//	cerr << "bad1";
						ok = false;
						break;
					}
					if(r[i] < left && pos[i] == true) {
					//	cerr << "bad2";

						ok = false;
						break;
					}
				}
				else {
					if(l[i] >= v + 1 && l[i] < left && r[i] >= left && r[i] < to) {
					//	cerr << "bad3";
						ok = false;
						break;
					}
				}
			}

			if(ok) {
				//cerr << "ok left" << left << endl;
				if(!solve(v + 1, left))
					return false;
				res.push_back(v);
				if(!solve(left, to))
					return false;
			//	cerr << "out" << v << ' ' << to << endl;
				return true;


			}
		}



		return false;
	}
};


int main() {
	std::cin.sync_with_stdio(false);
	std::cin.tie(0);
	std::cout << std::fixed;
	std::cout.precision(20);
	TaskD1 solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}