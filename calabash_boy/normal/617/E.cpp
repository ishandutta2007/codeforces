/* Generated by powerful Codeforces Tool
 * Author: calabash_boy_love_15 
 * Time: 2019-05-13 15:42:54
 * Personal Code Template: https://github.com/4thcalabash/ACM-Code-Library
**/
#pragma GCC optimize(3)
#include <bits/stdc++.h>
using namespace std;
#ifdef __LOCAL_DEBUG__
# define _debug(fmt, ...) fprintf(stderr, "\033[91m[%s %3d]: " fmt "\n\033[0m", \
  __func__,__LINE__, ##__VA_ARGS__)
#else
# define _debug(...) (void(0))
#endif
#define PB(x) push_back(x)
#define rep(i,l,r) for (int i = l,_ = r;i< _;i++)
#define REP(i,l,r) for (int i=l,_=r;i<=_;i++)
#define leave(x) do {cout<<#x<<endl;fflush(stdout);return 0;}while (0);
#define untie do{ios::sync_with_stdio(false);cin.tie(nullptr);cout.tie(nullptr);}while (0)
#define range(x) x.begin(),x.end()
typedef long long LL;
typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef long double db;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;
const int inf = 0x3f3f3f3f;
const ll inf_ll = 0x3f3f3f3f3f3f3f3fLL;
/************* header ******************/
const int maxn = 1e6+ 100;
const int maxa = 3e6 + 100;
const int BLOCK = 800;
int have[maxa];
int a[maxn];
ll ans[maxn];
ll ANS = 0;
int n,m,k;
typedef tuple<int,int,int> Query;
vector<Query> queries;
void add(int idx){
    int other = a[idx] ^ k;
    if (other < maxa)ANS += have[other];
    have[a[idx]] ++;
}
void remove(int idx){
    int other = a[idx] ^ k;
    have[a[idx]] --;
    if (other < maxa ) ANS -= have[other];
}
namespace fast_io{
    int read(){
        int ret = 0;
        char ch = getchar();
        while (ch < '0' || ch > '9')ch = getchar();
        while (ch >= '0' && ch <= '9')ret = ret * 10 + ch - '0',ch = getchar();
        return ret;
    }
};
using namespace fast_io;
int main(){
    n = read(),m = read(),k = read();
    REP(i,1,n)a[i] = read() ^ a[i-1];
    REP(i,1,m){
        int l = read(),r = read();
        //cin>>l>>r;
        l--;
        queries.push_back(make_tuple(l,r,i));
    }
    sort(queries.begin(),queries.end(),[](const Query &x,const Query &y){
        return make_pair(get<0>(x)/ BLOCK,get<1>(x)) < make_pair(get<0>(y)/BLOCK,get<1>(y));   
    });
    int L = 0;
    int R = -1;
    for (Query query : queries){
        int l,r,id;
        tie(l,r,id) = query;
        //_debug("%d %d id = %d",l,r,id);
        while (R < r){
            R++;
            add(R);
          //  _debug("R = %d,ANS = %d",R,ANS);
        }
        while (R>r){
            remove(R);
            R--;
        }
        while (L< l){
            remove(L);
            L++;
        }
        while (L > l){
            L--;
            add(L);
        }
        ans[id] = ANS;
    }
    REP(i,1,m)printf("%lld\n",ans[i]);
    return 0;
}