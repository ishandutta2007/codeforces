#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#define pb push_back
#define mp make_pair
#define all(a) begin(a),end(a)
#define FOR(x,val,to) for(int x=(val);x<int((to));++x)
#define FORE(x,val,to) for(auto x=(val);x<=(to);++x)
#define FORR(x,arr) for(auto &x: arr)
#define FORS(x,plus,arr) for(auto x = begin(arr)+(plus); x != end(arr); ++x)
#define FORREV(x,plus,arr) for(auto x = (arr).rbegin()+(plus); x !=(arr).rend(); ++x)
#define REE(s_) {cout<<s_<<'\n';exit(0);}
#define GET(arr) for(auto &i: (arr)) sc(i)
#define whatis(x) cerr << #x << " is " << x << endl;
#define e1 first
#define e2 second
#define INF 0x7f7f7f7f
typedef std::pair<int,int> pi;
typedef std::vector<int> vi;
typedef std::vector<std::string> vs;
typedef int64_t ll;
typedef uint64_t ull;
#define umap unordered_map
#define uset unordered_set
using namespace std;
using namespace __gnu_pbds;

#ifdef _WIN32
#define getchar_unlocked() _getchar_nolock()
#define _CRT_DISABLE_PERFCRIT_LOCKS
#endif
template<class T> ostream& operator<<(ostream &os, vector<T> V) { os<<"[";for(auto const &vv:V)os<<vv<<","; os<<"]"; return os; }
template<class L, class R> ostream& operator<<(ostream &os, pair<L, R> P) { os<<"("<<P.first<<","<<P.second<<")"; return os; }
template<typename T> inline void print_128(T num){ if(!num) return; print_128(num / 10); cout.put((num % 10) + '0'); }
inline int fstoi(const string &str){auto it=str.begin();bool neg=0;int num=0;if(*it=='-')neg=1;else num=*it-'0';++it;while(it<str.end()) num=num*10+(*it++-'0');if(neg)num*=-1;return num;}
inline void getch(char &x){while(x = getchar_unlocked(), x < 33){;}}
inline void getstr(string &str){str.clear(); char cur;while(cur=getchar_unlocked(),cur<33){;}while(cur>32){str+=cur;cur=getchar_unlocked();}}
template<typename T> inline bool sc(T &num){ bool neg=0; int c; num=0; while(c=getchar_unlocked(),c<33){if(c == EOF) return false;} if(c=='-'){ neg=1; c=getchar_unlocked(); } for(;c>47;c=getchar_unlocked()) num=num*10+c-48; if(neg) num*=-1; return true;}template<typename T, typename ...Args> inline void sc(T &num, Args &...args){ bool neg=0; int c; num=0; while(c=getchar_unlocked(),c<33){;} if(c=='-'){ neg=1; c=getchar_unlocked(); } for(;c>47;c=getchar_unlocked()) num=num*10+c-48; if(neg) num*=-1; sc(args...); }
template<typename T> using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>; //s.find_by_order(), s.order_of_key() <- works like lower_bound
template<typename T> using ordered_map = tree<T, int, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

int main(){
    ios_base::sync_with_stdio(0);cin.tie(0);
    int n;
    sc(n);
    int arr[] = {0,0,0,0,0,0,1,0,0,0,1,0,3,2,3,0,0,0,1,0,3,2,3,0,7,6,7,4,9,6,7,0,0,0,1,0,3,2,3,0,7,6,7,4,9,6,7,0,15,14,15,12,17,14,15,8,21,18,19,12,21,14,15,0,0,0,1,0,3,2,3,0,7,6,7,4,9,6,7,0,15,14,15,12,17,14,15,8,21,18,19,12,21,14,15,0,31,30,31,28,33,30,31,24,37,34,35,28,37,30,31,16,45,42,43,36,45,38,39,24,49,42,43,28,45,30,31,0,0,0,1,0,3,2,3,0,7,6,7,4,9,6,7,0,15,14,15,12,17,14,15,8,21,18,19,12,21,14,15,0,31,30,31,28,33,30,31,24,37,34,35,28,37,30,31,16,45,42,43,36,45,38,39,24,49,42,43,28,45,30,31,0,63,62,63,60,65,62,63,56,69,66,67,60,69,62,63,48,77,74,75,68,77,70,71,56,81,74,75,60,77,62,63,32,93,90,91,84,93,86,87,72,97,90,91,76,93,78,79,48,105,98,99,84,101,86,87,56,105,90,91,60,93,62,63,0,0,0,1,0,3,2,3,0,7,6,7,4,9,6,7,0,15,14,15,12,17,14,15,8,21,18,19,12,21,14,15,0,31,30,31,28,33,30,31,24,37,34,35,28,37,30,31,16,45,42,43,36,45,38,39,24,49,42,43,28,45,30,31,0,63,62,63,60,65,62,63,56,69,66,67,60,69,62,63,48,77,74,75,68,77,70,71,56,81,74,75,60,77,62,63,32,93,90,91,84,93,86,87,72,97,90,91,76,93,78,79,48,105,98,99,84,101,86,87,56,105,90,91,60,93,62,63,0,127,126,127,124,129,126,127,120,133,130,131,124,133,126,127,112,141,138,139,132,141,134,135,120,145,138,139,124,141,126,127,96,157,154,155,148,157,150,151,136,161,154,155,140,157,142,143,112,169,162,163,148,165,150,151,120,169,154,155,124,157,126,127,64,189,186,187,180,189,182,183,168,193,186,187,172,189,174,175,144,201,194,195,180,197,182,183,152,201,186,187,156,189,158,159,96,217,210,211,196,213,198,199,168,217,202,203,172,205,174,175,112,225,210,211,180,213,182,183,120,217,186,187,124,189,126,127,0,0,0,1,0,3,2,3,0,7,6,7,4,9,6,7,0,15,14,15,12,17,14,15,8,21,18,19,12,21,14,15,0,31,30,31,28,33,30,31,24,37,34,35,28,37,30,31,16,45,42,43,36,45,38,39,24,49,42,43,28,45,30,31,0,63,62,63,60,65,62,63,56,69,66,67,60,69,62,63,48,77,74,75,68,77,70,71,56,81,74,75,60,77,62,63,32,93,90,91,84,93,86,87,72,97,90,91,76,93,78,79,48,105,98,99,84,101,86,87,56,105,90,91,60,93,62,63,0,127,126,127,124,129,126,127,120,133,130,131,124,133,126,127,112,141,138,139,132,141,134,135,120,145,138,139,124,141,126,127,96,157,154,155,148,157,150,151,136,161,154,155,140,157,142,143,112,169,162,163,148,165,150,151,120,169,154,155,124,157,126,127,64,189,186,187,180,189,182,183,168,193,186,187,172,189,174,175,144,201,194,195,180,197,182,183,152,201,186,187,156,189,158,159,96,217,210,211,196,213,198,199,168,217,202,203,172,205,174,175,112,225,210,211,180,213,182,183,120,217,186,187,124,189,126,127,0,255,254,255,252,257,254,255,248,261,258,259,252,261,254,255,240,269,266,267,260,269,262,263,248,273,266,267,252,269,254,255,224,285,282,283,276,285,278,279,264,289,282,283,268,285,270,271,240,297,290,291,276,293,278,279,248,297,282,283,252,285,254,255,192,317,314,315,308,317,310,311,296,321,314,315,300,317,302,303,272,329,322,323,308,325,310,311,280,329,314,315,284,317,286,287,224,345,338,339,324,341,326,327,296,345,330,331,300,333,302,303,240,353,338,339,308,341,310,311,248,345,314,315,252,317,254,255,128,381,378,379,372,381,374,375,360,385,378,379,364,381,366,367,336,393,386,387,372,389,374,375,344,393,378,379,348,381,350,351,288,409,402,403,388,405,390,391,360,409,394,395,364,397,366,367,304,417,402,403,372,405,374,375,312,409,378,379,316,381,318,319,192,441,434,435,420,437,422,423,392,441,426,427,396,429,398,399,336,449,434,435,404,437,406,407,344,441,410,411,348,413,350,351,224,465,450,451,420,453,422,423,360,457,426,427,364,429,366,367,240,465,434,435,372,437,374,375,248,441,378,379,252,381,254,255,0,0,0,1,0,3,2,3,0,7,6,7,4,9,6,7,0,15,14,15,12,17,14,15,8,21,18,19,12,21,14,15,0,31,30,31,28,33,30,31,24,37,34,35,28,37,30,31,16,45,42,43,36,45,38,39,24,49,42,43,28,45,30,31,0,63,62,63,60,65,62,63,56,69,66,67,60,69,62,63,48,77,74,75,68,77,70,71,56,81,74,75,60,77,62,63,32,93,90,91,84,93,86,87,72,97,90,91,76,93,78,79,48,105,98,99,84,101,86,87,56,105,90,91,60,93,62,63,0,127,126,127,124,129,126,127,120,133,130,131,124,133,126,127,112,141,138,139,132,141,134,135,120,145,138,139,124,141,126,127,96,157,154,155,148,157,150,151,136,161,154,155,140,157,142,143,112,169,162,163,148,165,150,151,120,169,154,155,124,157,126,127,64,189,186,187,180,189,182,183,168,193,186,187,172,189,174,175,144,201,194,195,180,197,182,183,152,201,186,187,156,189,158,159,96,217,210,211,196,213,198,199,168,217,202,203,172,205,174,175,112,225,210,211,180,213,182,183,120,217,186,187,124,189,126,127,0,255,254,255,252,257,254,255,248,261,258,259,252,261,254,255,240,269,266,267,260,269,262,263,248,273,266,267,252,269,254,255,224,285,282,283,276,285,278,279,264,289,282,283,268,285,270,271,240,297,290,291,276,293,278,279,248,297,282,283,252,285,254,255,192,317,314,315,308,317,310,311,296,321,314,315,300,317,302,303,272,329,322,323,308,325,310,311,280,329,314,315,284,317,286,287,224,345,338,339,324,341,326,327,296,345,330,331,300,333,302,303,240,353,338,339,308,341,310,311,248,345,314,315,252,317,254,255,128,381,378,379,372,381,374,375,360,385,378,379,364,381,366,367,336,393,386,387,372,389,374,375,344,393,378,379,348,381,350,351,288,409,402,403,388,405,390,391,360,409,394,395,364,397,366,367,304,417,402,403,372,405,374,375,312,409,378,379,316,381,318,319,192,441,434,435,420,437,422,423,392,441,426,427,396,429,398,399,336,449,434,435,404,437,406,407,344,441,410,411,348,413,350,351,224,465,450,451,420,453,422,423,360,457,426,427,364,429,366,367,240,465,434,435,372,437,374,375,248,441,378,379,252,381,254,255,0,511,510,511,508,513,510,511,504,517,514,515,508,517,510,511,496,525,522,523,516,525,518,519,504,529,522,523,508,525,510,511,480,541,538,539,532,541,534,535,520,545,538,539,524,541,526,527,496,553,546,547,532,549,534,535,504,553,538,539,508,541,510,511,448,573,570,571,564,573,566,567,552,577,570,571,556,573,558,559,528,585,578,579,564,581,566,567,536,585,570,571,540,573,542,543,480,601,594,595,580,597,582,583,552,601,586,587,556,589,558,559,496,609,594,595,564,597,566,567,504,601,570,571,508,573,510,511,384,637,634,635,628,637,630,631,616,641,634,635,620,637,622,623,592,649,642,643,628,645,630,631,600,649,634,635,604,637,606,607,544,665,658,659,644,661,646,647,616,665,650,651,620,653,622,623,560,673,658,659,628,661,630,631,568,665,634,635,572,637,574,575,448,697,690,691,676,693,678,679,648,697,682,683,652,685,654,655,592,705,690,691,660,693,662,663,600,697,666,667,604,669,606,607,480,721,706,707,676,709,678,679,616,713,682,683,620,685,622,623,496,721,690,691,628,693,630,631,504,697,634,635,508,637,510,511,256,765,762,763,756,765,758,759,744,769,762,763,748,765,750,751,720,777,770,771,756,773,758,759,728,777,762,763,732,765,734,735,672,793,786,787,772,789,774,775,744,793,778,779,748,781,750,751,688,801,786,787,756,789,758,759,696,793,762,763,700,765,702,703,576,825,818,819,804,821,806,807,776,825,810,811,780,813,782,783,720,833,818,819,788,821,790,791,728,825,794,795,732,797,734,735,608,849,834,835,804,837,806,807,744,841,810,811,748,813,750,751,624,849,818,819,756,821,758,759,632,825,762,763,636,765,638,639,384,889,882,883,868,885,870,871,840,889,874,875,844,877,846,847,784,897,882,883,852,885,854,855,792,889,858,859,796,861,798,799,672,913,898,899,868,901,870,871,808,905,874,875,812,877,814,815,688,913,882,883,820,885,822,823,696,889,826,827,700,829,702,703,448,945,930,931,900,933,902,903,840,937,906,907,844,909,846,847,720,945,914,915,852,917,854,855,728,921,858,859,732,861,734,735,480,961,930,931,868,933,870,871,744,937,874,875,748,877,750,751,496,945,882,883,756,885,758,759,504,889,762,763,508,765,510,511,0,0,0,1,0,3,2,3,0,7,6,7,4,9,6,7,0,15,14,15,12,17,14,15,8,21,18,19,12,21,14,15,0,31,30,31,28,33,30,31,24,37,34,35,28,37,30,31,16,45,42,43,36,45,38,39,24,49,42,43,28,45,30,31,0,63,62,63,60,65,62,63,56,69,66,67,60,69,62,63,48,77,74,75,68,77,70,71,56,81,74,75,60,77,62,63,32,93,90,91,84,93,86,87,72,97,90,91,76,93,78,79,48,105,98,99,84,101,86,87,56,105,90,91,60,93,62,63,0,127,126,127,124,129,126,127,120,133,130,131,124,133,126,127,112,141,138,139,132,141,134,135,120,145,138,139,124,141,126,127,96,157,154,155,148,157,150,151,136,161,154,155,140,157,142,143,112,169,162,163,148,165,150,151,120,169,154,155,124,157,126,127,64,189,186,187,180,189,182,183,168,193,186,187,172,189,174,175,144,201,194,195,180,197,182,183,152,201,186,187,156,189,158,159,96,217,210,211,196,213,198,199,168,217,202,203,172,205,174,175,112,225,210,211,180,213,182,183,120,217,186,187,124,189,126,127,0,255,254,255,252,257,254,255,248,261,258,259,252,261,254,255,240,269,266,267,260,269,262,263,248,273,266,267,252,269,254,255,224,285,282,283,276,285,278,279,264,289,282,283,268,285,270,271,240,297,290,291,276,293,278,279,248,297,282,283,252,285,254,255,192,317,314,315,308,317,310,311,296,321,314,315,300,317,302,303,272,329,322,323,308,325,310,311,280,329,314,315,284,317,286,287,224,345,338,339,324,341,326,327,296,345,330,331,300,333,302,303,240,353,338,339,308,341,310,311,248,345,314,315,252,317,254,255,128,381,378,379,372,381,374,375,360,385,378,379,364,381,366,367,336,393,386,387,372,389,374,375,344,393,378,379,348,381,350,351,288,409,402,403,388,405,390,391,360,409,394,395,364,397,366,367,304,417,402,403,372,405,374,375,312,409,378,379,316,381,318,319,192,441,434,435,420,437};
    /* whatis(sizeof arr) */
    ll ans = 0;
    FORE(i,1,n)
        ans += arr[i];
    REE(ans)
}