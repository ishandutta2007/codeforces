//,,,,,,,,,,,,,,,,,,,,,,,,,,,,,@@@@@@@@@@@@@@@@@%@@@@@@@@@@@@@%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,,,,,,,,,,@@@@@@@@@@@@@@@@@@@%@@@@@%@@@@@@@@@%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,,,,,,&@@@@@@@@@@@@@@@@@@@@@%@@@@@%@@@@@@%@@@%&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,,@@@@,,,,@@@@@@@@@@@@@@@@@%@@@@@%@@@@@@%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,,,,,,,,@@@@@@@@@@@@@@@@@%%@@@@@%@@@@@@%%&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,,,,,@@@@@@@@@@@@@@@@@@@%%@@@@@%%@@@@@%%%&@@@@@@@@@@@@%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,#@,,*@@@@@@@@@@@@@@@@@%%%@@@@@%@@@@@%%%%&@@@@@@%@@@@@%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,,,,@@@@@@@@@@@@@@@@@@%%%@@@@@%%@@@@&%%%%%@@%@@@@&@@@@%%&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,,,@@@@@@@@@@@@@@@@@@%%%@@@@@%%%@@@@%%%%%%@@%@@@@%@@@@%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,,@@@@@@@@@@@@@@@@@@@%%%@@@@@%%%@@@%%%%%%%@@%@@@@%%@@@%%%&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,@@@@@@@@@@%@@@@@@@@%%%@@@@%@%%%@@@%%%%%%%@&%&%@@&%@@&%%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,@@@@@@%@@@%@@@@@@@@%%%%@@@@%%%%%@@%%%%%%%%%%%%%%@@%%@%%%%%@@@@@@@@@@@@@@@@@@@%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,@@@@@@%@@@%@@@@@@@@%%%%@@@%%%%%%@@%%%%%%%%%%%%%%&@%%@%%%%%@@@@@@@@&@@@@%@@@@@@%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,@@@@@@%@@@%%@@@&@@@%%%%@@@@%%%%%%%%%%%%%%%%%%%%%%%@%%%%%%%%&@@&%@@@@@@@@%%&@@@@@%%@@@@%%@@@@@&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,@@@,@@%%@@@%%@@@%@@@%%%%@@@@%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%&@@@%&@@@@@@@%%%%@@@@%%%@@@%%%@@@%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,@@@,*@@%%@@%%@@@%%@@%%%%%@@@%%%%%%%%%%%%#%%%%%%%%%%%%%%%%%%%%@@@@%%@@@&@@@#%%%%@@@@%%@@@%%%%@@%%%@@@@%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,@,@(,@@@%&@@%%@@@%%@@%%%%%@@@%%%%%%%%%%%%/%%%%%%%%%%%%%%%%%%%%@@@@%%%@@%@@@//%%%%@@@@%%@@%%%%@@%%%@@@@%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,(,,,@,,@@%%@@%%%@%%%%@@%%%%%@@@%%%%%%%%%%%///%%%/(%%%%%%%%%%%%%%@@@@@%%%@%@@@&//#%#&@@@%%%%%%%%%@%%%%@@@%%@@@@%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,/,,@@%%@@%%%%%%%%@%%%%%%%@@%%%%#/%%%%%///%%%//(%(%%%%%%%%%%/&@@@@(%%&%%@@@////%/@@@@%%%%%%%%&%%%%@@@%%@@@@%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,@@%%%&%%%%%%%%@%%%%%%%@%%%%%///%%%%///%%%///#(/%%%%%%%///%@@@@/%%%%%@@.     ( .@@%%%%%%%%%%%%%%@%%%@@@@%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,@@%%%%%%%%%%%%@%%%%%%%@%#%%#///#%%%/////%#///#//%%%%%#///&@@@@//&%%*@            %%%%%%%%%%%%%%@%%%%%@@%%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,#%%%%%%%%%%%%%%%%%%%%%%//#%/////%*%*/////////////%%/%////@@@/@@@@ %(     ,,       %%( #%%%%%%%%%%%%%%%@%%%@%@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,,%%%%%%%%%%%%%%%%%%%%%%///%  (((((((((((, ///////(%//////@@///@@@        ,,       %% //%%%%%%%%%%%%%%%%%%%@@%@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,,,%%%%%%%%%%%%%%%%%%%%%/* %((@@@@@./(.@@@@#( /////#//////(////@@@                 #//@/%%%%%%%%%%%%%%%%%%%@@@%@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,,,,%%%%%%%%%%%%%%%%%%%%// ((@@@@@@@@.%@@@@@@(/////////@///#@@#/////@@@        %////@@@/%%%%%%%%%%%%%%%%%%@@@@%@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,,,#%%%%%%%%%%%%%%%%%%/%///@@(@@@@@@@@@@@@(@@@/@@@/////@@/@@@@@@////////(@@@@@@@@@@@@@@@%%%%%%%%%%%%%%%%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,,%%%,%%,%%%%%%%%%%%%%#////@@@@@@@@@@@&#///////////////#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%%%%%%//%%%%%%%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,(,,,%,,,%%%%%%%%%%%%%%/@@/@@&//////////////////////////@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%%@%%%%///%%%%%%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,,,*,,,,,%%%%%%#%%%%%%%@@@@@@//////////////////////////@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%@@/%#%/////%%%%%%&@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,,,,,,,,,%,%%%%//%%%%%%%@@@@@//////////////////////////&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@//////@@@@@%%%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,,,,,,,,,%,%%%/////%/%%@%@@@@@(/////////////////////////@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@////%@@@@@@@@@%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,,,,,,,,,#,%%%,,////////@@@@@@@@////////////////////////%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@(/&@@@/#@@@@@@@@@@%@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,///////@@@@@@@@////////////////////////@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@//////@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,/////@@@@@@@@@///////////////////////@@@@@@@@@@@@@@@@@@@#@@@@@@@@@@/%%%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,##////@@@@@@@@@@@@@//////////////////@@@@@@@@@@@@@@@@@(/@@@@@@@@@#(%%@@&%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,(#,,,##,*@@@@@@@@@///////////////////////////////////@@@@@@@@@@@@/%%%%@@@@%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,##,,,@@@@@@@&//////////@@@@@@@@@@@@@&//@@@@@@@@@@@@@@@@@@@/%%%%%%@@@@@@&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,#,,,#%@@@@@@(//////////////@@@@@@@@@@@@@@@@@@@@@@@@@@@@/%%%%%%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,#,,,####@@@@@@/////////////////%%#///////@@@@@@@@@@@@///%%%%@@@%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,#,#####@@@@@/////////////////(@@@@@@@@@@@@@@@@(/////%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,*,,#####(//@@@@//////////////@@@@@@@@@@@@@@&////////% %         &@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,           # ###//////@@&///////////@@@@@@@@@@@///////////.% #              @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,            ###/////////@/////////@@@@@@@/////////////// %              @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,                 , ////////////////////////////////,  ///                /@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,  .                                                                        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,                                                                        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,                                                                       @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,                                                                        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,                                                                         @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,                                                                                 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,,,,,,,,,,,,,,                                                                                           @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,,,,,,,,,,,                                                                                                 @@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,,,,,,,                                                                                                          %@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,,,                                                                                                                  *@@@@@@@@@@@@@@@@@
//,                                                                                                                                          .@@@@@@@@@@
//                                                                                                                                                      
//                                                                                                                                                      
//                                                                                                                                                                                                                                                                                                      
#include <iostream>
#include <complex>
#include <vector>
#include <string>
#include <algorithm>
#include <cstdio>
#include <numeric>
#include <cstring>
#include <ctime>
#include <cstdlib>
#include <set>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <list>
#include <cmath>
#include <bitset>
#include <cassert>
#include <queue>
#include <stack>
#include <deque>
#include <random>
 
using namespace std;
template<typename T1, typename T2> inline void chkmin(T1 &a, T2 b) {if (a > b) a = b;}
template<typename T1, typename T2> inline void chkmax(T1 &a, T2 b) {if (a < b) a = b;}
#define files(FILENAME) read(FILENAME); write(FILENAME)
#define read(FILENAME) freopen((FILENAME + ".in").c_str(), "r", stdin)
#define write(FILENAME) freopen((FILENAME + ".out").c_str(), "w", stdout)
#define all(c) (c).begin(), (c).end()
#define sz(c) (int)(c).size()
#define left left228
#define right right228
#define y1 y1228
#define mp make_pair
#define pb push_back
#define y2 y2228
#define rank rank228
using ll = long long;
using ld = long double; 
const string FILENAME = "input";




#define INF 1000000002


struct edge {
    int a, b, cap, flow;
};


int s, t, d[2601], ptr[2601], q[2601];
vector<edge> e;
vector<int> g[2601];

 
void add_edge(int a, int b, int cap) {
    edge e1 = {a, b, cap, 0};
    edge e2 = {b, a, 0, 0};
    g[a].push_back((int)e.size());
    e.push_back(e1);
    g[b].push_back((int)e.size());
    e.push_back(e2);
}


bool bfs() {
    int qh = 0, qt = 0;
    q[qt++] = s;
    memset(d, -1, sizeof(d));
    d[s] = 0;
    while (qh < qt && d[t] == -1) {
        int v = q[qh++];
        for (unsigned int i = 0; i < g[v].size(); i++) {
            int id = g[v][i], to = e[id].b;
            if (d[v] != -1 && d[to] == -1 && e[id].flow < e[id].cap) {
                q[qt++] = to;
                d[to] = d[v] + 1;
            }
        }
    }
    return d[t] != -1;
}
 
int dfs(int v, int flow) {
    if (!flow) { 
        return 0;
    }
    if (v == t) { 
        return flow;
    }
    for (; ptr[v] < (int)g[v].size(); ptr[v]++) {
        int id = g[v][ptr[v]], to = e[id].b;
        if (d[to] != d[v] + 1)  {
            continue;
        }
        int pushed = dfs(to, min(flow, e[id].cap - e[id].flow));
        if (pushed) {
            e[id].flow += pushed;
            e[id ^ 1].flow -= pushed;
            return pushed;
        }
    }
    return 0;
}
 

int dinic() {
    int flow = 0;
    for (;;) {
        if (!bfs()) {
            break;
        }
        memset(ptr, 0, sizeof(ptr));
        while (int pushed = dfs(s, INF)) {
            flow += pushed;
        }
    }
    return flow;
}


void solve() {
    int c1, c2, c3;
    int a1, a2, a3, a4, a5;
    cin >> c1 >> c2 >> c3;
    cin >> a1 >> a2 >> a3 >> a4 >> a5;
    s = 0;
    t = 9;
    e.clear();
    for (int i = s; i <= t; i++) {
        g[i].clear();
    }
    add_edge(s, 1, a1);
    add_edge(s, 2, a2);
    add_edge(s, 3, a3);
    add_edge(s, 4, a4);
    add_edge(s, 5, a5);
    add_edge(1, 6, INF);
    add_edge(2, 7, INF);
    add_edge(3, 8, INF);
    add_edge(4, 6, INF);
    add_edge(4, 8, INF);
    add_edge(5, 7, INF);
    add_edge(5, 8, INF);
    add_edge(6, 9, c1);
    add_edge(7, 9, c2);
    add_edge(8, 9, c3);
    int t = dinic();
    if (t == a1 + a2 + a3 + a4 + a5) {
        cout << "YES\n";
    } else {
        cout << "NO\n";
    }
}   


int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    //read(FILENAME);
    int t = 1;
    cin >> t;
    while (t--) {
        solve();
    }
    return 0;
}