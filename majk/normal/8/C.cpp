/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Majk
 */

#include <vector>
#include <iostream>
#include <unordered_map>
#include <map>
#include <iomanip>
#include <set>
#include <functional>
#include <fstream>
#include <algorithm>
#include <cassert>
#include <cmath>
#include <string>
#include <sstream>
#include <queue>
using namespace std;

#define x first
#define y second
constexpr int MOD = 1000000007;

typedef std::pair<int,int> pii;
typedef long long ll;
typedef unsigned int ui;

template<typename T>std::istream&operator>>(std::istream&i,vector<T>&t) {for(auto&v:t){i>>v;}return i;}
template<typename T>std::ostream&operator<<(std::ostream&o,const vector<T>&t) {for(size_t i=0;i<t.size();++i){o<<t[i]<<" \n"[i == t.size()-1];}return o;}
template<typename T> using minheap = priority_queue<T, vector<T>, greater<T>>;
template<typename T> using maxheap = priority_queue<T, vector<T>, less<T>>;

int logceil(ll x) {int b=0;while(x){x>>=1;++b;}return b;}

namespace std {
    template<typename T,typename U>struct hash<pair<T,U>>{hash<T>t;hash<U>u;size_t operator()(const pair<T,U>&p)const{return t(p.x)^(u(p.y)<<7);}};
}
template<typename T,typename F>T bsh(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){l=m+1;r=m;}else{h=m-1;}}return r;}
template<typename T,typename F>T bsl(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){h=m-1;r=m;}else{l=m+1;}}return r;}
template<typename T> T gcd(T a,T b) { if (a<b) swap(a,b); return b?gcd(b,a%b):a; }

template<typename T>class vector2:public vector<vector<T>>{public:vector2(){} vector2(size_t a,size_t b,T t=T()):vector<vector<T>>(a,vector<T>(b,t)){}};
template<typename T>class vector3:public vector<vector<vector<T>>>{public:vector3(){} vector3(size_t a,size_t b,size_t c,T t=T()):vector<vector<vector<T>>>(a,vector<vector<T>>(b,vector<T>(c,t))){}};
// #include "../l/mod.h"

class C8 {
public:

	void putmin(unordered_map<int,pii> & M, int mask, pii val) {
		auto it = M.find(mask);
		if (it != M.end()) {
			it->y = min(it->y, val);
		} else {
			M.insert(it, {mask, val});
		}
	}

    void solve(istream& cin, ostream& cout) {
        int XS, YS; cin >> XS >> YS;
        int N; cin >> N;
		vector<pii> I(N);
		for (int i = 0; i < N; ++i) {
			int x, y; cin >> x >> y; x -= XS; y -= YS;
			I[i] = {x,y};
		}

		vector<unordered_map<int, pii>> D(N+1);
		D[0] = {{0, {0, 0}}};
		for (int i = 0; i < N; ++i) {

			for (auto it = D[i].begin(); it != D[i].end(); ++it) {
				if (it->x & (1<<i)) putmin(D[i+1], it->x, {it->y.x, it->x});
				else {
					int ihand = (I[i].x * I[i].x + I[i].y * I[i].y);
					putmin(D[i+1], it->x | (1<<i), {it->y.x + 2 * ihand, it->x});
					for (int j = i+1; j < N; ++j) {
						if (it->x & (1<<j)) continue;
						int jhand = (I[j].x * I[j].x + I[j].y * I[j].y);
						int ij = (I[i].x - I[j].x) * (I[i].x - I[j].x) + (I[i].y - I[j].y) * (I[i].y - I[j].y);
						putmin(D[i+1], it->x | (1<<i) | (1<<j), {it->y.x + ihand + jhand + ij, it->x});
					}
				}
			}
		}

		pii ans = D[N][(1<<N)-1];
		cout << ans.x << endl;

		int mask = (1<<N)-1;
		for (int i = N; i > 0; --i) {
			if (D[i][mask].y != mask) {
				cout << "0 ";
				for (int j = 0; j < N; ++j) {
					if ((D[i][mask].y ^ mask) & (1<<j)) cout << j+1 << ' ';
				}
				mask = D[i][mask].y;
			}
		}
		cout << "0\n";
    }
};


int main() {
	ios_base::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr);
	C8 solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}