/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author majk
 */

#ifndef MAJK_LIB
#define MAJK_LIB

#include <vector>
#include <stack>
#include <iostream>
#include <unordered_map>
#include <unordered_set>
#include <map>
#include <iomanip>
#include <set>
#include <functional>
#include <fstream>
#include <algorithm>
#include <cassert>
#include <cmath>
#include <string>
#include <sstream>
#include <queue>
#include <bitset>
using namespace std;

#define x first
#define y second
typedef std::pair<int,int> pii; typedef long long ll; typedef unsigned long long ull; typedef unsigned int ui; typedef pair<ui,ui> puu;

template <typename T, typename U> std::istream&operator>>(std::istream&i, pair<T,U>&p) {i >> p.x >> p.y; return i;}
template<typename T>std::istream&operator>>(std::istream&i,vector<T>&t) {for(auto&v:t){i>>v;}return i;}
template <typename T, typename U> std::ostream&operator<<(std::ostream&o, const pair<T,U>&p) {o << p.x << ' ' << p.y; return o;}
template<typename T>std::ostream&operator<<(std::ostream&o,const vector<T>&t) {if(t.empty())o<<'\n';for(size_t i=0;i<t.size();++i){o<<t[i]<<" \n"[i == t.size()-1];}return o;}
template<typename T> using minheap = priority_queue<T, vector<T>, greater<T>>;
template<typename T> using maxheap = priority_queue<T, vector<T>, less<T>>;
template <typename T> bool in(T a, T b, T c) { return a <= b && b < c; }
ui logceil(int x) { return 8*sizeof(int)-__builtin_clz(x); }

namespace std { template<typename T,typename U>struct hash<pair<T,U>>{hash<T>t;hash<U>u;size_t operator()(const pair<T,U>&p)const{return t(p.x)^(u(p.y)<<7);}}; }
template<typename T,typename F>T bsh(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){l=m+1;r=m;}else{h=m-1;}}return r;}
template<typename F> double bshd(double l,double h,const F&f,double p=1e-9){ui r=3+(ui)log2((h-l)/p);while(r--){double m=(l+h)/2;if(f(m)){l=m;}else{h=m;}}return (l+h)/2;}
template<typename T,typename F>T bsl(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){h=m-1;r=m;}else{l=m+1;}}return r;}
template<typename F> double bsld(double l,double h,const F&f,double p=1e-9){ui r=3+(ui)log2((h-l)/p);while(r--){double m=(l+h)/2;if(f(m)){h=m;}else{l=m;}}return (l+h)/2;}
template<typename T> T gcd(T a,T b) { if (a<b) swap(a,b); return b?gcd(b,a%b):a; }

template<typename T>class vector2:public vector<vector<T>>{public:vector2(){} vector2(size_t a,size_t b,T t=T()):vector<vector<T>>(a,vector<T>(b,t)){}};
template<typename T>class vector3:public vector<vector2<T>>{public:vector3(){} vector3(size_t a,size_t b,size_t c,T t=T()):vector<vector2<T>>(a,vector2<T>(b,c,t)){}};
template<typename T>class vector4:public vector<vector3<T>>{public:vector4(){} vector4(size_t a,size_t b,size_t c,size_t d,T t=T()):vector<vector3<T>>(a,vector3<T>(b,c,d,t)){}};
template<typename T>class vector5:public vector<vector4<T>>{public:vector5(){} vector5(size_t a,size_t b,size_t c,size_t d,size_t e,T t=T()):vector<vector4<T>>(a,vector4<T>(b,c,d,e,t)){}};


#endif
// #include "../l/mod.h"

constexpr ll up = 10004205361450474LL;

class TaskG {
public:

    map<pair<pair<ll,ll>,int>,vector<ll>> M;
    unordered_map<pair<pair<ll,ll>,int>,bool> C;
    vector<ll> INTSIZE;

    bool canSolve(ll lo, ll hi, int depth) {
        if ((hi-lo) > INTSIZE[depth]) return false;
        if (lo >= 10000) return true;
//        if (lo >= 10000) return true;
//            return (hi-lo) <= INTSIZE[depth];
//        }


        auto it = C.find({{lo,hi},depth});
        if (it!=C.end()) return it->y;
        if (depth == 1) {
            if (hi <= min(2*lo, lo + 10000)) return true;
            else return false;
        } else {
//            cerr << lo << ' ' << hi << ' ' << depth << endl;

            ll l = lo;
            for (int i = 0; i <= min(lo, 10000LL); ++i) {
                ll r = bsh(l, hi, [&](ll z) { return canSolve(l, z, depth-1); });
                M[{{lo,hi},depth}].push_back(r);
                if (r >= hi) {
                    M[{{lo,hi},depth}].pop_back();
                    C[{{lo,hi},depth}] = true;
                    return true;
                }
                l = r+1;
            }
            return C[{{lo,hi},depth}] = false;
        }
    }


void solve(istream& cin, ostream& cout) {
//        cout << bsh(200000000000LL, 250000000000LL, [&](ll w) { return canSolve(1, w, 4); }) << endl;

        INTSIZE.resize(5);
        INTSIZE[0] = 0;
        for (int l = 0; l < 4; ++l) INTSIZE[l+1] = INTSIZE[l]*10001+10000;
        vector<ll> H{204761410474LL};
        cerr << canSolve(1, H[0], 4);
        int d = 5;
        ll lo = 1;
        ll hi = up+1;
        while (d > 0) {
            auto &G = d == 5 ? H : M[{{lo, hi}, d}];
            cerr << lo << ' ' << hi << endl;
            if (G.empty()) {
                if (d == 1) {
                    for (ll i = lo; i < hi; ++i) {
                        G.push_back(i);
                        if (G.size() == 10000) break;
                    }
                } else {
                    for (ll s = lo+INTSIZE[d-1]; s < hi; s += INTSIZE[d-1]+1) {
                        G.push_back(s);
                        if (G.size() == 10000) break;
                    }
                }
            }
            cout << G.size() << ' ' << G;
            flush(cout);
            int ans; cin >> ans;
            if (ans < 0) return;

            if (ans != 0) { lo = G[ans-1]+1; }
            if (ans != G.size()) { hi = G[ans]; }
            --d;
        }
//        print(1, hi, d, cout);
//        cout << canSolve(1, 10004205361450474LL, 3) << '\n';
//    for (int i = 1; i < 10; ++i) {
//        int r = bsh(i+1, 10000, [&](int w) { return canSolve(i, w, 4); });
//        cout << i << ' ' << r << endl;
//    }
}
};


int main() {
	ios_base::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr);
	TaskG solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
    return 0;
}