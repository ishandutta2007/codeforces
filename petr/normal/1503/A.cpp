/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

// Actual solution is at the bottom

#include <algorithm>
#include <array>
#include <bitset>
#include <cassert>
#include <climits>
#include <cstdint>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <memory>
#include <numeric>
#include <queue>
#include <random>
#include <set>
#include <stack>
#include <string>
#include <unordered_set>
#include <unordered_map>
#include <vector>
//#include "../atcoder/all"

#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()

using namespace std;

typedef int64_t int64;
typedef pair<int, int> ii;

class ASbalansiruiteBiti {
 public:
  void solveOne() {
    int n; cin >> n;
    string s; cin >> s;
    int n0 = 0;
    for (int i = 0; i < n; ++i) if (s[i] == '0') ++n0;
    if (n0 % 2 != 0 || s[0] == '0' || s.back() == '0') {
      cout << "NO\n";
      return;
    }
    cout << "YES\n";
    string a;
    string b;
    int n1 = n - n0;
    int i0 = 0;
    int i1 = 0;
    for (int i = 0; i < n; ++i) {
      if (s[i] == '0') {
        if (i0 % 2 == 0) {
          a += '(';
          b += ')';
        } else {
          a += ')';
          b += '(';
        }
        ++i0;
      } else {
        if (i1 < n1 / 2) {
          a += '(';
          b += '(';
        } else {
          a += ')';
          b += ')';
        }
        ++i1;
      }
    }
    assert(i0 == n0);
    assert(i1 == n1);
    cout << a << "\n" << b << "\n";
  }

  void solve() {
    int nt;
    cin >> nt;
    for (int it = 0; it < nt; ++it) {
      solveOne();
    }
  }
};


int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(0);
    ASbalansiruiteBiti solver;


    solver.solve();
    return 0;
}