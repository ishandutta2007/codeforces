/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 2e5 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n, q, timer, ver[MAXN], val[MAXN], st[MAXN], fn[MAXN], sz[MAXN], H[MAXN], ans[MAXN];
vector<ll> adj[MAXN];
vector<pll> Q[MAXN];
set<ll> S[MAXN];
vector<string> vec;
string name[MAXN];

bool cmp(ll v, ll u) {
    return sz[v] < sz[u];
}

void DFS1(ll v, ll p = 0) {
    H[v] = H[p] + 1;
    sz[v] = 1;
    for (ll u : adj[v]) DFS1(u, v), sz[v] += sz[u];
}

void DFS2(ll v, ll clear = 1) {
    st[v] = ++timer;
    ver[timer] = v;
    for (ll i = 0; i < SZ(adj[v]) - 1; i++) DFS2(adj[v][i]);
    if (adj[v].size()) DFS2(adj[v].back(), 0);
    S[H[v]].insert(val[v]);
    for (ll i = 0; i < SZ(adj[v]) - 1; i++) {
        ll u = adj[v][i];
        for (ll j = st[u]; j <= fn[u]; j++) {
            S[H[ver[j]]].insert(val[ver[j]]);
        }
    }
    for (pll i : Q[v]) ans[i.X] = S[H[v] + i.Y].size();
    fn[v] = timer;
    if (clear) for (ll i = st[v]; i <= fn[v]; i++) S[H[ver[i]]] = {};
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    cin >> n;
    for (ll i = 1, p; i <= n; i++) {
        cin >> name[i] >> p;
        adj[p].push_back(i);
        vec.push_back(name[i]);
    }
    Sort(vec);
    vec.resize(unique(all(vec)) - vec.begin());
    val[0] = -1;
    for (ll i = 1; i <= n; i++) val[i] = lower_bound(all(vec), name[i]) - vec.begin();

    cin >> q;
    for (ll i = 0; i < q; i++) {
        ll v, k;
        cin >> v >> k;
        Q[v].push_back({i, k});
    }
    DFS1(0);
    for (ll i = 0; i <= n; i++) sort(all(adj[i]), cmp);
    DFS2(0);
    for (ll i = 0; i < q; i++) cout << ans[i] << endl;

    return 0;
}
/*

*/