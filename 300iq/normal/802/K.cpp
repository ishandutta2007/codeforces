/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author gainullin.ildar
 */

#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <set>
#include <map>
#include <list>
#include <time.h>
#include <math.h>
#include <random>
#include <deque>
#include <queue>
#include <cassert>

using namespace std;

typedef long long ll;

const int N = 1e5 + 7;

ll dp[N][2];
int n, k;
vector<pair<int, int> > g[N];

void dfs(int v, int pr)
{
    multiset<ll> a;
    a.clear();
    ll sum = 0;
    for (auto x : g[v])
    {
        int len = x.second;
        int to = x.first;
        if (to != pr)
        {
            dfs(to, v);
            sum += dp[to][0] + len;
            a.insert(dp[to][0] + len);
        }
    }
    while (a.size() > k)
    {
        sum -= *a.begin();
        a.erase(a.begin());
    }
    dp[v][0] = sum - (a.size() > k - 1 ? *a.begin() : 0);
    dp[v][1] = dp[v][0];
    for (auto x : g[v])
    {
        int len = x.second;
        int to = x.first;
        if (to != pr)
        {
            ll new_sum = sum;
            bool gg = 0;
            if (a.find(dp[to][0] + len) != a.end())
            {
                a.erase(a.find(dp[to][0] + len));
                new_sum -= dp[to][0] + len;
                gg = 1;
            }
            if (a.size() > k - 1)
            {
                new_sum -= *a.begin();
            }
            dp[v][1] = max(dp[v][1], new_sum + len + dp[to][1]);
            if (gg)
            {
                a.insert(dp[to][0] + len);
            }
        }
    }
}

class TaskK
{
public:
    void solve(std::istream &in, std::ostream &out)
    {
        in >> n >> k;
        for (int i = 0; i < n; i++)
        {
            dp[i][0] = dp[i][1] = 0;
            g[i].clear();
        }
        for (int i = 1; i < n; i++)
        {
            int u, v, c;
            in >> u >> v >> c;
            g[u].push_back({v, c});
            g[v].push_back({u, c});
        }
        dfs(0, -1);
        out << dp[0][1] << '\n';
    }
};


int main()
{
    ios::sync_with_stdio(0);
    TaskK solver;
    std::istream &in(std::cin);
    std::ostream &out(std::cout);
    solver.solve(in, out);
    return 0;
}