/* Generated by powerful Codeforces Tool
 * You can download the binary file in here https://github.com/xalanq/cf-tool (Windows, macOS, Linux)
 * Author: alireza_kaviani
 * Time: 2020-05-12 17:05:01
**/
#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 2e5 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n , A[MAXN] , pr[MAXN] , dv[MAXN] , cnt[MAXN] , C[MAXN];
vector<ll> P[MAXN];

int main() {
    ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);

    pr[1] = 1;
    for(int i = 2 ; i < MAXN ; i++){
        if(pr[i])   continue;
        dv[i] = i;
        for(int j = i * 2 ; j < MAXN ; j += i){
            dv[j] = i; pr[j] = 1;
        }
    }

    cin >> n;
    for(int i = 1 ; i <= n ; i++){
        vector<int> v;
        cin >> A[i];
        while(A[i] != 1){
            cnt[dv[A[i]]]++;
            v.push_back(dv[A[i]]);
            A[i] /= dv[A[i]];
        }
        Sort(v) ;
        v.resize(unique(all(v)) - v.begin());
        for(int j : v)  P[j].push_back(cnt[j]);
        for(int j : v)  cnt[j] = 0;
    }

    ll ans = 1;
    for(ll i = 2 ; i < MAXN ; i++){
        if(pr[i])   continue;
        sort(all(P[i]));
        ll C = 0;
        if(SZ(P[i]) < n - 1)    continue;
        if(SZ(P[i]) < n)    C = P[i][0];
        else    C = P[i][1];
        //cout << i << sep << C << endl;
        for(int j = 0 ; j < C ; j++)    ans *= i;
    }
    cout << ans << endl;

    return 0;
}
/*

*/