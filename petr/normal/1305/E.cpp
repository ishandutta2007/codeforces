/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <bits/stdc++.h>

#define pb push_back
#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()
#define mp make_pair

using namespace std;

typedef long long int64;
typedef vector<int> vi;
typedef pair<int, int> ii;

class TaskE {
 public:
  void solveOne(istream &in, ostream &out) {
    int n;
    int m;
    in >> n >> m;
    int n0 = 1;
    int total = 0;
    while (total < m) {
      ++n0;
      total += (n0 - 1) / 2;
    }
    if (n0 > n) {
      out << -1 << "\n";
      return;
    }
    ++n0;
    total += (n0 - 1) / 2;
    vector<int> reduce(n0 + 1);
    for (int a = 1; a <= n0; ++a) {
      for (int b = a + 1; a + b <= n0; ++b) {
        int c = a + b;
        ++reduce[a];
        ++reduce[b];
        ++reduce[c];
      }
    }
    for (int i = 1; i <= n0; ++i) if (total - reduce[i] == m) {
      vector<int> res;
      for (int j = 1; j <= n0; ++j) if (j != i) res.push_back(j);
      assert(res.size() <= n);
      int next = (int) 1e8;
      while (res.size() < n) {
        res.push_back(next);
        next += 20000;
      }
      for (int x : res) {
        out << x << " ";
      }
      out << "\n";
      return;
    }
    assert(false);
  }

  void solve(std::istream &in, std::ostream &out) {
    int nt;
    nt = 1;
    for (int it = 0; it < nt; ++it) {
      solveOne(in, out);
    }
  }
};


int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  TaskE solver;
  std::istream& in(std::cin);
  std::ostream& out(std::cout);
  solver.solve(in, out);
  return 0;
}