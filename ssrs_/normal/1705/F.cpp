#include <bits/stdc++.h>
using namespace std;
vector<int> g1 = {168, 15, 493, 72};
vector<tuple<vector<int>, int, int>> T = {
{{-3, -4, -7, -2}, 0, 16},
{{-3, -4, -5, -2}, 0, 16},
{{-3, -4, -5, 0}, 0, 16},
{{-3, -4, -3, 0}, 0, 16},
{{-3, -2, -7, -2}, 0, 16},
{{-3, -2, -5, -2}, 1, 274},
{{-3, -2, -5, 0}, 0, 16},
{{-3, -2, -3, -2}, 1, 16},
{{-3, -2, -3, 0}, 1, 274},
{{-3, -2, -1, 0}, 1, 16},
{{-3, 0, -5, -2}, 1, 16},
{{-3, 0, -3, -2}, 1, 274},
{{-3, 0, -3, 0}, 1, 16},
{{-3, 0, -1, -2}, 0, 16},
{{-3, 0, -1, 0}, 1, 274},
{{-3, 0, 1, 0}, 0, 16},
{{-3, 2, -3, -2}, 0, 16},
{{-3, 2, -1, -2}, 0, 16},
{{-3, 2, -1, 0}, 0, 16},
{{-3, 2, 1, 0}, 0, 16},
{{-1, -4, -5, -2}, 16, 32},
{{-1, -4, -3, -2}, 16, 32},
{{-1, -4, -3, 0}, 16, 32},
{{-1, -4, -1, 0}, 16, 32},
{{-1, -2, -5, -2}, 16, 32},
{{-1, -2, -5, 0}, 0, 16},
{{-1, -2, -3, -2}, 291, 403},
{{-1, -2, -3, 0}, 16, 34},
{{-1, -2, -3, 2}, 0, 16},
{{-1, -2, -1, -2}, 17, 52},
{{-1, -2, -1, 0}, 291, 403},
{{-1, -2, -1, 2}, 0, 16},
{{-1, -2, 1, 0}, 17, 52},
{{-1, 0, -5, 0}, 0, 16},
{{-1, 0, -3, -2}, 17, 52},
{{-1, 0, -3, 0}, 1, 274},
{{-1, 0, -3, 2}, 0, 16},
{{-1, 0, -1, -2}, 291, 403},
{{-1, 0, -1, 0}, 19, 118},
{{-1, 0, -1, 2}, 1, 274},
{{-1, 0, 1, -2}, 16, 32},
{{-1, 0, 1, 0}, 291, 403},
{{-1, 0, 1, 2}, 1, 16},
{{-1, 0, 3, 0}, 16, 32},
{{-1, 2, -3, 0}, 1, 16},
{{-1, 2, -1, -2}, 16, 32},
{{-1, 2, -1, 0}, 1, 274},
{{-1, 2, -1, 2}, 1, 16},
{{-1, 2, 1, -2}, 16, 32},
{{-1, 2, 1, 0}, 16, 34},
{{-1, 2, 1, 2}, 1, 274},
{{-1, 2, 3, 0}, 16, 32},
{{-1, 2, 3, 2}, 0, 16},
{{-1, 4, -1, 0}, 0, 16},
{{-1, 4, 1, 0}, 0, 16},
{{-1, 4, 1, 2}, 0, 16},
{{-1, 4, 3, 2}, 0, 16},
{{1, -4, -3, -2}, 0, 16},
{{1, -4, -1, -2}, 0, 16},
{{1, -4, -1, 0}, 0, 16},
{{1, -4, 1, 0}, 0, 16},
{{1, -2, -3, -2}, 0, 16},
{{1, -2, -3, 0}, 16, 32},
{{1, -2, -1, -2}, 1, 274},
{{1, -2, -1, 0}, 16, 34},
{{1, -2, -1, 2}, 16, 32},
{{1, -2, 1, -2}, 1, 16},
{{1, -2, 1, 0}, 1, 274},
{{1, -2, 1, 2}, 16, 32},
{{1, -2, 3, 0}, 1, 16},
{{1, 0, -3, 0}, 16, 32},
{{1, 0, -1, -2}, 1, 16},
{{1, 0, -1, 0}, 291, 403},
{{1, 0, -1, 2}, 16, 32},
{{1, 0, 1, -2}, 1, 274},
{{1, 0, 1, 0}, 19, 118},
{{1, 0, 1, 2}, 291, 403},
{{1, 0, 3, -2}, 0, 16},
{{1, 0, 3, 0}, 1, 274},
{{1, 0, 3, 2}, 17, 52},
{{1, 0, 5, 0}, 0, 16},
{{1, 2, -1, 0}, 17, 52},
{{1, 2, 1, -2}, 0, 16},
{{1, 2, 1, 0}, 291, 403},
{{1, 2, 1, 2}, 17, 52},
{{1, 2, 3, -2}, 0, 16},
{{1, 2, 3, 0}, 16, 34},
{{1, 2, 3, 2}, 291, 403},
{{1, 2, 5, 0}, 0, 16},
{{1, 2, 5, 2}, 16, 32},
{{1, 4, 1, 0}, 16, 32},
{{1, 4, 3, 0}, 16, 32},
{{1, 4, 3, 2}, 16, 32},
{{1, 4, 5, 2}, 16, 32},
{{3, -2, -1, 0}, 0, 16},
{{3, -2, 1, 0}, 0, 16},
{{3, -2, 1, 2}, 0, 16},
{{3, -2, 3, 2}, 0, 16},
{{3, 0, -1, 0}, 0, 16},
{{3, 0, 1, 0}, 1, 274},
{{3, 0, 1, 2}, 0, 16},
{{3, 0, 3, 0}, 1, 16},
{{3, 0, 3, 2}, 1, 274},
{{3, 0, 5, 2}, 1, 16},
{{3, 2, 1, 0}, 1, 16},
{{3, 2, 3, 0}, 1, 274},
{{3, 2, 3, 2}, 1, 16},
{{3, 2, 5, 0}, 0, 16},
{{3, 2, 5, 2}, 1, 274},
{{3, 2, 7, 2}, 0, 16},
{{3, 4, 3, 0}, 0, 16},
{{3, 4, 5, 0}, 0, 16},
{{3, 4, 5, 2}, 0, 16},
{{3, 4, 7, 2}, 0, 16}
};
int query(int n, int l, int r, int x){
  string S(n, 'F');
  for (int i = 0; i < 9; i++){
    if ((x >> i & 1) == 1){
      S[l + i] = 'T';
    }
  }
  cout << S << endl;
  int ans;
  cin >> ans;
  return n - ans;
}
int main(){
  int n;
  cin >> n;
  if (n < 9){
    for (int i = 0; i < (1 << n); i++){
      string S;
      for (int j = 0; j < n; j++){
        if ((i >> j & 1) == 1){
          S += 'T';
        } else {
          S += 'F';
        }
      }
      cout << S << endl;
      int k;
      cin >> k;
      if (k == n){
        break;
      }
    }
  } else {
    cout << string(n, 'F') << endl;
    int h1;
    cin >> h1;
    h1 = n - h1;
    if (h1 != 0){
      vector<char> ans(n, 'F');
      bool ok = false;
      for (int i = 0; i < n; i += 9){
        int l = min(i, n - 9), r = l + 9;
        vector<int> h(4);
        for (int j = 0; j < 4; j++){
          h[j] = query(n, l, r, g1[j]) - h1;
          if (h[j] == -h1){
            ok = true;
            break;
          }
        }
        if (ok){
          break;
        }
        int p = lower_bound(T.begin(), T.end(), make_tuple(h, -1, -1)) - T.begin();
        int x = get<1>(T[p]);
        int y = get<2>(T[p]);
        int hx = query(n, l, r, x) - h1;
        if (hx == -h1){
          ok = true;
          break;
        }
        int hy = query(n, l, r, y) - h1;
        if (hy == -h1){
          ok = true;
          break;
        }
        for (int j = 0; j < (1 << 9); j++){
          bool ok2 = true;
          for (int k = 0; k < 4; k++){
            if (__builtin_popcount(j ^ g1[k]) - __builtin_popcount(j) != h[k]){
              ok2 = false;
            }
          }
          if (__builtin_popcount(j ^ x) - __builtin_popcount(j) != hx){
            ok2 = false;
          }
          if (__builtin_popcount(j ^ y) - __builtin_popcount(j) != hy){
            ok2 = false;
          }
          if (ok2){
            for (int k = 0; k < 9; k++){
              if ((j >> k & 1) == 1){
                ans[l + k] = 'T';
              }
            }
          }
        }
      }
      if (!ok){
        for (int i = 0; i < n; i++){
          cout << ans[i];
        }
        cout << endl;
      }
    }
  }
}