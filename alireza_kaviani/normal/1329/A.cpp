/* Generated by powerful Codeforces Tool
 * You can download the binary file in here https://github.com/xalanq/cf-tool (Windows, macOS, Linux)
 * Author: alireza_kaviani
 * Time: 2020-04-03 19:05:01
**/
#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n , m  , ps[MAXN] , ans[MAXN];
pll A[MAXN];

int main() {
    ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);

    cin >> n >> m;
    for(ll i = 0 ; i < m ; i++) cin >> A[i].X , A[i].Y = i;
    //sort(A , A + m , greater<pll>());
    //partial_sum(A , A + MAXN , ps);
    for(ll i = 1 ; i <= m + 5 ; i++)    ps[i] = ps[i - 1] + A[i - 1].X;
    ll x = (A[m - 1]).X;
    if(ps[m + 5] < n)   return cout << -1 << endl , 0;
    //if(n - x + 1 < m)    return cout << -1 << endl , 0;
    x = n - x + 1;
    for(ll i = m - 1 ; i >= 0 ; i--){
        if(x <= 0)  return cout << -1 << endl , 0;
        ans[A[i].Y] = min({n - A[i].X + 1 , x , ps[i] + 1});
        x = ans[A[i].Y] - 1;
        // cout << i << sep << ans[A[i].Y] << endl;
    }
    for(ll i = 0 ; i < m ; i++) cout << ans[i] << sep;

    return 0;
}
/*

*/