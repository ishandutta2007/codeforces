/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;
typedef pair<ld, ld> pld;
typedef pair<string, string> pss;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define file_io                     freopen("in.txt" , "r" , stdin) ; freopen("out.txt" , "w" , stdout);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

inline ll input() {
    ll n;
    cin >> n;
    return n;
}

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

set_random;

const ll MAXN = 24;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n , dp[(1 << MAXN)] , prv[(1 << MAXN)] , dist[MAXN][MAXN];
pll start , point[MAXN];
vector<ll> ans;

int main() {
    fast_io;

    cin >> start.X >> start.Y >> n;
    for(ll i = 0 ; i < n ; i++) cin >> point[i].X >> point[i].Y;

    for(ll i = 0 ; i < n ; i++){
        for(ll j = 0 ; j < n ; j++){
            dist[i][j] = (start.X - point[i].X) * (start.X - point[i].X) + (start.Y - point[i].Y) * (start.Y - point[i].Y) + (start.X - point[j].X) * (start.X - point[j].X) + (start.Y - point[j].Y) * (start.Y - point[j].Y) + (point[i].X - point[j].X) * (point[i].X - point[j].X) + (point[i].Y - point[j].Y) * (point[i].Y - point[j].Y);
        }
    }

    dp[0] = 0;
    prv[0] = -1;
    for(ll i = 1 ; i < (1 << n) ; i++){
        ll ind = 0;
        for(ll j = 0 ; j < n ; j++){
            if(i & (1 << j)){
                ind = j;
                break;
            }
        }

        dp[i] = dp[i ^ (1 << ind)] + dist[ind][ind];
        prv[i] = (i ^ (1 << ind));
        for(ll j = ind + 1 ; j < n ; j++){
            if(i & (1 << j)){
                if(dp[i ^ (1 << j) ^ (1 << ind)] + dist[ind][j] < dp[i]){
                    dp[i] = dp[i ^ (1 << j) ^ (1 << ind)] + dist[ind][j];
                    prv[i] = (i ^ (1 << j) ^ (1 << ind));
                }
            }
        }
    }

    ll x = (1 << n) - 1;
    while(prv[x] != -1){
        ll t = (x ^ prv[x]);
        ans.push_back(0);
        for(ll i = 0 ; i < n ; i++){
            if(t & (1 << i)){
                ans.push_back(i + 1);
            }
        }
        x = prv[x];
    }
    ans.push_back(0);
    reverse(all(ans));

    cout << dp[(1 << n) - 1] << endl;
    for(ll i : ans) cout << i << sep;

    return 0;
}
/*

*/