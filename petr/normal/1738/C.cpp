/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

// Actual solution is at the bottom

#undef NDEBUG

#include <algorithm>
#include <array>
#include <bitset>
#include <cassert>
#include <climits>
#include <cstdint>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <memory>
#include <numeric>
#include <queue>
#include <random>
#include <set>
#include <stack>
#include <string>
#include <unordered_set>
#include <unordered_map>
#include <vector>
// AtCoder library from https://github.com/atcoder/ac-library
// #include "../atcoder/all"

#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()

using namespace std;

using int64 = int64_t;
using ii = pair<int, int>;

class CUporotieChetnieChisla {
 public:
  void solveOne() {
    int n;
    cin >> n;
    vector<vector<vector<bool>>> can(2, vector<vector<bool>>(101, vector<bool>(101)));
    for (int i = 0; i <= 100; ++i) {
      for (int j = 0; j <= 100; ++j) {
        if (i == 0 && j == 0) {
          can[0][i][j] = true;
        }
        for (int need = 0; need < 2; ++need) {
          for (int move = 0; move < 2; ++move) {
            int other = (j + need + 1) % 2;
            int ni = i;
            int nj = j;
            if (move == 0) --ni; else --nj;
            if (ni < 0 || nj < 0) continue;
            if (!can[other][ni][nj]) can[need][i][j] = true;
          }
        }
      }
    }
    {
      int i = 0;
      int j = 0;
      for (int k = 0; k < n; ++k) {
        int a;
        cin >> a;
        if (a % 2 == 0) ++i; else ++j;
      }
      if (can[0][i][j]) {
        cout << "Alice\n";
      } else {
        cout << "Bob\n";
      }
    }
  }

  void solve() {
    int nt;
    cin >> nt;
    for (int it = 0; it < nt; ++it) {
      // cout << "Case #" << (it + 1) << ": ";
      solveOne();
      // cerr << "Case #" << (it + 1) << " done" << endl;
    }
  }
};

// #define st_mtimespec st_mtim

int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(0);
    CUporotieChetnieChisla solver;


    solver.solve();
    return 0;
}