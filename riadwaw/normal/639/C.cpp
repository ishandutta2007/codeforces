/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author RiaD
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <vector>
#include <assert.h>


#include <iterator>


#include <string>
#include <stdexcept>

#ifndef SPCPPL_ASSERT
	#ifdef SPCPPL_DEBUG
		#define SPCPPL_ASSERT(condition) \
		if(!(condition)) { \
			throw std::runtime_error(std::string() + #condition + " in line " + std::to_string(__LINE__) + " in " + __PRETTY_FUNCTION__); \
		}
	#else
		#define SPCPPL_ASSERT(condition)
	#endif
#endif


/**
* Support decrementing and multi-passing, but not declared bidirectional(or even forward) because
* it's reference type is not a reference.
*
* It doesn't return reference because
* 1. Anyway it'll not satisfy requirement [forward.iterators]/6
*   If a and b are both dereferenceable, then a == b if and only if *a and
*   b are bound to the same object.
* 2. It'll not work with reverse_iterator that returns operator * of temporary which is temporary for this iterator
*
* Note, reverse_iterator is not guaranteed to work  now too since it works only with bidirectional iterators,
* but it's seems to work at least on my implementation.
*
* It's not really useful anywhere except iterating anyway.
*/
template <typename T>
class IntegerIterator: public std::iterator<std::input_iterator_tag, T, std::ptrdiff_t, T*, T> {
public:
	explicit IntegerIterator(int value): value(value) {

	}

	IntegerIterator& operator++() {
		++value;
		return *this;
	}

	IntegerIterator operator++(int) {
		IntegerIterator copy = *this;
		++value;
		return copy;
	}

	IntegerIterator& operator--() {
		--value;
		return *this;
	}

	IntegerIterator operator--(int) {
		IntegerIterator copy = *this;
		--value;
		return copy;
	}

	T operator*() const {
		return value;
	}

	bool operator==(IntegerIterator rhs) {
		return value == rhs.value;
	}

	bool operator!=(IntegerIterator rhs) {
		return !(*this == rhs);
	}

private:
	T value;
};

template <typename T>
class IntegerRange {
public:
	IntegerRange(T begin, T end): begin_(begin), end_(end) {
		SPCPPL_ASSERT(begin <= end);
	}

	IntegerIterator<T> begin() const {
		return IntegerIterator<T>(begin_);
	}

	IntegerIterator<T> end() const {
		return IntegerIterator<T>(end_);
	}

private:
	T begin_;
	T end_;
};

template <typename T>
class ReversedIntegerRange {
	typedef std::reverse_iterator<IntegerIterator<T>> IteratorType;
public:
	ReversedIntegerRange(T begin, T end): begin_(begin), end_(end) {
		SPCPPL_ASSERT(begin >= end);
	}

	IteratorType begin() const {
		return IteratorType(IntegerIterator<T>(begin_));
	}

	IteratorType end() const {
		return IteratorType(IntegerIterator<T>(end_));
	}

private:
	T begin_;
	T end_;
};

template <typename T>
IntegerRange<T> range(T to) {
	return IntegerRange<T>(0, to);
}

template <typename T>
IntegerRange<T> range(T from, T to) {
	return IntegerRange<T>(from, to);
}

template <typename T>
IntegerRange<T> inclusiveRange(T to) {
	return IntegerRange<T>(0, to + 1);
}

template <typename T>
IntegerRange<T> inclusiveRange(T from, T to) {
	return IntegerRange<T>(from, to + 1);
}

template <typename T>
ReversedIntegerRange<T> downrange(T from) {
	return ReversedIntegerRange<T>(from, 0);
}

template <typename T>
ReversedIntegerRange<T> downrange(T from, T to) {
	return ReversedIntegerRange<T>(from, to);
}

template <typename T>
ReversedIntegerRange<T> inclusiveDownrange(T from) {
	return ReversedIntegerRange<T>(from + 1, 0);
}

template <typename T>
ReversedIntegerRange<T> inclusiveDownrange(T from, T to) {
	return ReversedIntegerRange<T>(from + 1, to);
}


using namespace std;

class TaskC {
public:

	int64_t k;
	void solve(std::istream& in, std::ostream& out) {
		int n;
		in >> n >> k;
		++n;
		vector<int64_t> values(n);
		for (int i: range(n)) {
			in >> values[i];
		}

		for (int j: range(2)) {
			if (try_solve(values, out)) {
				return;
			}
			for (int i : range(values.size())) {
				values[i] = -values[i];
			}
		}

	}

	bool try_solve(vector<int64_t> values, std::ostream& out) {
		int n = (int) values.size();

		vector<int64_t> v((unsigned long) (n + 120));
		for (int i: range(n)) {
			for (int j: range(32)) {
				if(values[i] > 0) {
					if ((1LL << j) & values[i]) {
						++v[i + j];
					}
				}
				else {
					if ((1LL << j) & (-values[i])) {
						--v[i + j];
					}
				}
			}
		}

		int64_t carry = 0;
		for (size_t i: range(v.size())) {
			int64_t cur = carry + v[i];
			carry = cur / 2;
			v[i] = int(cur % 2);
			if (v[i] == -1) {
				--carry;
				v[i] = 1;
			}
			assert(v[i] == 0 || v[i] == 1);
		}
		if (carry < 0) {
			return false;
		}

		assert(!carry);

		int mx = -1;
		for (int i: range(v.size())) {
			if (v[i]) {
				mx = i;
			}
		}

		assert(mx != -1);

		int answer = 0;

		for (size_t i: range(values.size())) {
			if (mx - i > 32) {
				if (v[i]) {
					out << answer;
					return true;
				}
				continue;
			}
			int64_t need_subtract = 0;
			for (int j: range(33)) {
				need_subtract += ((1LL * v[i + j]) << j);
			}
			if (values[i] - need_subtract >= -k) {
				if (i != n - 1 || values[i] - need_subtract != 0)
					++answer;
			}
			if (v[i]) {
				out << answer;
				return true;
			}
		}

		out << answer;
		return true;
	}
};


int main() {
	std::ios_base::sync_with_stdio(false);
	TaskC solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	in.tie(0);
	out << std::fixed;
	out.precision(20);
	solver.solve(in, out);
	return 0;
}