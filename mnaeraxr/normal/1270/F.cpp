/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author marX
 */

#include <iostream>
#include <fstream>

#include <bits/stdc++.h>

using namespace std;

const int K = 100;

long long get(long long l, long long m, long long r, long long s) {
    long long beg, fin;

    if (m + r >= s) {
        fin = l;
    } else {
        fin = l - (s - (m + r));
    }

    if (s >= m + l) {
        beg = 0;
    } else {
        beg = m + l - s;
    }

    return fin - beg + 1;
}

long long good(string &s) {
    int n = s.length();

    vector<int> pos;

    vector<int> zero_l(n);
    vector<int> zero_r(n);

    int t = 0, o = 0, z = 0;

    long long answer = 0;

    for (int i = 0; i < n; ++i) {
        t++;
        o += s[i] == '1';

        if (s[i] == '1') {
            pos.push_back(i);
            zero_l[i] = z;
            z = 0;
        } else {
            z++;
        }
    }

    for (int k = 1; k <= K; ++k) {
        map<int, int> freq;
        freq[0] = 1;

        int t = 0, o = 0;

        for (int i = 0; i < n; ++i) {
            t++;
            o += s[i] == '1';

            answer += freq[t - k * o]++;
        }
    }

    z = 0;

    for (int i = n - 1; i >= 0; --i) {
        if (s[i] == '1') {
            zero_r[i] = z;
            z = 0;
        } else {
            z++;
        }
    }

    int on = pos.size();

    for (int i = 0; i < on; ++i) {
        for (int j = i; j < on; ++j) {
            int t = j - i + 1;
            if (t * K > n)
                break;

            int m = pos[j] - pos[i] + 1;
            int b = pos[j] + zero_r[pos[j]] - (pos[i] - zero_l[pos[i]]) + 1;
            int l = zero_l[pos[i]];
            int r = zero_r[pos[j]];

            if (l > r) swap(l, r);

            for (int k = t * (K + 1); k <= b; k += t) {
                if (k < m) continue;
                long long cur = get(l, m, r, k);
                answer += cur;
            }
        }
    }

    return answer;
}

class FAwesomeSubstrings {
public:
    void solve(std::istream &in, std::ostream &out) {
//	    stress(out);
        string s;
        in >> s;
//
        out << good(s) << endl;
//        out << brute(s) << endl;
    }
};


int main() {
    FAwesomeSubstrings solver;
    std::istream &in(std::cin);
    std::ostream &out(std::cout);
    solver.solve(in, out);
    return 0;
}