/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n, x[MAXN], y[MAXN];

ll dist(ll X1, ll Y1, ll X2, ll Y2) {
    return (X1 - X2) * (X1 - X2) + (Y1 - Y2) * (Y1 - Y2);
}

ll check(ll X1, ll Y1, ll X2, ll Y2, ll X3, ll Y3, ll X4, ll Y4) {
    //cout << X1 << sep << Y1 << sep << X2 << sep << Y2 << sep << X3 << sep << Y3 << sep << X4 << sep << Y4 << endl;
    return dist(X1, Y1, X2, Y2) == dist(X3, Y3, X4, Y4) &&
           (dist(X1, Y1, X3, Y3) == dist(X2, Y2, X4, Y4) || dist(X1, Y1, X4, Y4) == dist(X2, Y2, X3, Y3));
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    cin >> n;
    for (ll i = 0; i < n; i++) cin >> x[i] >> y[i];
    if (n % 2 == 1) return cout << "NO" << endl, 0;

    x[n] = x[0];
    y[n] = y[0];
    for (ll i = 0; i < n / 2; i++) {
        if (!check(x[i], y[i], x[i + 1], y[i + 1], x[i + n / 2], y[i + n / 2], x[i + n / 2 + 1],
                   y[i + n / 2 + 1]))
            return cout << "NO" << endl, 0;
    }
    cout << "YES" << endl;
    return 0;
}
/*a

*/