/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author RiaD
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <assert.h>

using namespace std;

class TaskB {
public:

	void solve(std::istream& in, std::ostream& out) {
		int n;
		in >> n;
		auto get = [&](int a, int b, int c, int d) {
			std::cout << "? " << a << ' ' << b << ' ' << c << ' ' << d << endl;
			int x;
			std::cin >> x;
			return x;
		};

		int oneR;
		{
			int l = 0;
			int r = n;
			while (r - l > 1) {
				int m = (l + r) / 2;
				if (get(1, 1, n, m)) {
					r = m;
				} else {
					l = m;
				}
			}

			oneR = r;
		}
		cerr << "r" << oneR << endl;
		int oneL;
		{
			int l = 1;
			int r = oneR + 1;
			while (r - l > 1) {
				int m = (l + r) / 2;
				if (get(1, m, n, oneR)) {
					l = m;
				} else {
					r = m;
				}
			}
			oneL = l;
		}
		cerr << "l" << oneL << endl;

		int oneD;
		{
			int l = 0;
			int r = n;
			while (r - l > 1) {
				int m = (l + r) / 2;
				if (get(1, oneL, m, oneR)) {
					r = m;
				} else {
					l = m;
				}
			}

			oneD = r;
		}

		cerr << "d" << oneD << endl;


		int oneU;
		{
			int r = oneD + 1;
			int l = 1;
			while (r - l > 1) {
				int m = (l + r) / 2;
				if (get(m, oneL, oneD, oneR)) {
					l = m;
				} else {
					r = m;
				}
			}
			oneU = l;
		}
		cerr << "u" << oneU << endl;


		auto cur_get = [&](int a, int b, int c, int d) {
			int ans = get(a, b, c, d);
			if (a <= oneU && c >= oneD && b <= oneL && d >= oneR) {
				--ans;
			}
			assert(ans >= 0);
			return ans;
		};


		int twoR;
		{
			int l = 0;
			int r = n;
			while (r - l > 1) {
				int m = (l + r) / 2;
				if (cur_get(1, 1, n, m)) {
					r = m;
				} else {
					l = m;
				}
			}

			twoR = r;
		}
		cerr << "r" << twoR << endl;
		int twoL;
		{
			int l = 1;
			int r = twoR + 1;
			while (r - l > 1) {
				int m = (l + r) / 2;
				if (cur_get(1, m, n, twoR)) {
					l = m;
				} else {
					r = m;
				}
			}
			twoL = l;
		}
		cerr << "l" << twoL << endl;

		int twoD;
		{
			int l = 0;
			int r = n;
			while (r - l > 1) {
				int m = (l + r) / 2;
				if (cur_get(1, twoL, m, twoR)) {
					r = m;
				} else {
					l = m;
				}
			}

			twoD = r;
		}

		cerr << "d" << twoD << endl;


		int twoU;
		{
			int r = twoD + 1;
			int l = 1;
			while (r - l > 1) {
				int m = (l + r) / 2;
				if (cur_get(m, twoL, twoD, twoR)) {
					l = m;
				} else {
					r = m;
				}
			}
			twoU = l;
		}
		cerr << "u" << twoU << endl;

		out << "! ";
		out << oneU << ' ' << oneL << ' ' << oneD << ' ' << oneR << " ";
		out << twoU << ' ' << twoL << ' ' << twoD << ' ' << twoR << " ";
	}
};


int main() {
	std::ios_base::sync_with_stdio(false);
	TaskB solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	in.tie(0);
	out << std::fixed;
	out.precision(20);
	solver.solve(in, out);
	return 0;
}