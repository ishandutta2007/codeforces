/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Azat Ismagilov
 */

#include <fstream>

#include <iostream>
#include <algorithm>
#include <vector>
#include <queue>
#include <numeric>
#include <set>
#include <map>

#define int long long
#define ld long double
#define fs first
#define sc second
#define pb push_back
#define ppb pop_back
#define pf push_front
#define ppf pop_front
#define mp make_pair
#define len(v) ((int)v.size())
#define vc vector
#define pr pair
#define all(v) v.begin(), v.end()
//#pragma GCC optimize("Ofast")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,tune=native")
//#pragma GCC optimize("unroll-loops")

using namespace std;

template<typename T, typename U>
inline ostream &operator<<(ostream &_out, const pair<T, U> &_p) {
    _out << _p.first << ' ' << _p.second;
    return _out;
}

template<typename T, typename U>
inline istream &operator>>(istream &_in, pair<T, U> &_p) {
    _in >> _p.first >> _p.second;
    return _in;
}

template<typename T>
inline ostream &operator<<(ostream &_out, const vector<T> &_v) {
    if (_v.empty()) { return _out; }
    _out << _v.front();
    for (auto _it = ++_v.begin(); _it != _v.end(); ++_it) { _out << ' ' << *_it; }
    return _out;
}

template<typename T>
inline istream &operator>>(istream &_in, vector<T> &_v) {
    for (auto &_i : _v) { _in >> _i; }
    return _in;
}

const int MAXN = 2e3 + 10;
const int INF = 1e9;
const int MOD = 1e9 + 7;

int sum(int a, int b) {
    if (a + b >= MOD) {
        return a + b - MOD;
    }
    return a + b;
}

int mul(int a, int b) {
    if (a * b >= MOD) {
        return (a * b) % MOD;
    }
    return a * b;
}

int sqr(int a) {
    return (a * a) % MOD;
}

int bin_pow(int a, int b) {
    if (b == 0) {
        return 1;
    }
    if (b % 2) {
        return mul(a, bin_pow(a, b - 1));
    }
    return sqr(bin_pow(a, b / 2));
}

int dp[MAXN][MAXN];
int dp1[MAXN][MAXN];
int sumdp[MAXN][MAXN];
int prevl[MAXN][MAXN];
int prevr[MAXN][MAXN];

class CRockIsPush {
public:
    void solve(std::istream &in, std::ostream &out) {
        int n, m;
        in >> n >> m;
        vc<string> a(n);
        in >> a;
        for (auto &v : a) {
            reverse(all(v));
        }
        reverse(all(a));
        if (a[0][0] == 'R') {
            out << 0;
            return;
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                prevl[i + 1][j + 1] = (j > 0 ? prevl[i + 1][j] : 0) + (a[i][j] == 'R');
                prevr[i + 1][j + 1] = (i > 0 ? prevr[i][j + 1] : 0) + (a[i][j] == 'R');
            }
        }
        if (n == 1) {
            if (prevl[n][m] == 0) {
                out << 1;
            } else {
                out << 0;
            }
            return;
        }
        if (m == 1) {
            if (prevr[n][m] == 0) {
                out << 1;
            } else {
                out << 0;
            }
            return;
        }
        int i = 1;
        for (int j = 1; j <= m; j++) {
            dp[i][j] = sum(dp[i][j], dp[i][j - 1]);
            if (j == 1) {
                dp[1][1] = 1;
                dp1[1][1] = 1;
            } else {
                int y = prevl[i][j - 1];
                if (y < 1) {
                    dp1[i][j] = sum(dp[i][j - 1], MOD - dp[i][y]);
                }
            }
            sumdp[i][j] = sum(sumdp[i - 1][j], dp1[i][j]);
        }
        int ans = 0;
        for (int i = 2; i <= n; i++) {
            for (int j = 1; j <= m; j++) {
                dp[i][j] = sum(dp[i][j], dp[i][j - 1]);
                {
                    int x = prevr[i - 1][j];
                    if (x < i) {
                        dp[i][j] = sum(dp[i][j], sum(sumdp[i - 1][j], MOD - sumdp[x][j]));
                    }
                }
                {
                    int y = prevl[i][j - 1];
                    if (y < j) {
                        dp1[i][j] = sum(dp[i][j - 1], MOD - dp[i][y]);
                    }
                }
                sumdp[i][j] = sum(sumdp[i - 1][j], dp1[i][j]);
            }
        }
        {
            int i = n;
            int j = m;
            ans += dp1[i][j];
            int x = prevr[i - 1][j];
            ans += sumdp[i - 1][j] - sumdp[x][j];
        }
        out << (ans % MOD + MOD) % MOD;
    }
};


signed main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    CRockIsPush solver;
    std::istream &in(std::cin);
    std::ostream &out(std::cout);
    solver.solve(in, out);
    return 0;
}