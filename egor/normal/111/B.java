import java.util.InputMismatchException;
import java.math.BigInteger;
import java.util.Collection;
import java.util.ArrayList;
import java.util.List;
import java.util.Comparator;
import java.io.*;
import java.util.Iterator;
import java.util.Arrays;

/**
 * Generated by Contest helper plug-in
 * Actual solution is at the bottom
 */
public class Main {
	public static void main(String[] args) {
		InputReader in = new StreamInputReader(System.in);
		PrintWriter out = new PrintWriter(System.out);
		run(in, out);
	}

	public static void run(InputReader in, PrintWriter out) {
		Solver solver = new TaskB();
		solver.solve(1, in, out);
		Exit.exit(in, out);
	}
}

abstract class InputReader {
	private boolean finished = false;

	public abstract int read();

	public int readInt() {
		int c = read();
		while (isSpaceChar(c))
			c = read();
		int sgn = 1;
		if (c == '-') {
			sgn = -1;
			c = read();
		}
		int res = 0;
		do {
			if (c < '0' || c > '9')
				throw new InputMismatchException();
			res *= 10;
			res += c - '0';
			c = read();
		} while (!isSpaceChar(c));
		return res * sgn;
	}

	public String readString() {
		int c = read();
		while (isSpaceChar(c))
			c = read();
		StringBuffer res = new StringBuffer();
		do {
			res.appendCodePoint(c);
			c = read();
		} while (!isSpaceChar(c));
		return res.toString();
	}

	private boolean isSpaceChar(int c) {
		return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
	}

	public void setFinished(boolean finished) {
		this.finished = finished;
	}

	public abstract void close();
}

class StreamInputReader extends InputReader {
	private InputStream stream;
	private byte[] buf = new byte[1024];
	private int curChar, numChars;

	public StreamInputReader(InputStream stream) {
		this.stream = stream;
	}

	public int read() {
		if (numChars == -1)
			throw new InputMismatchException();
		if (curChar >= numChars) {
			curChar = 0;
			try {
				numChars = stream.read(buf);
			} catch (IOException e) {
				throw new InputMismatchException();
			}
			if (numChars <= 0)
				return -1;
		}
		return buf[curChar++];
	}

	public void close() {
		try {
			stream.close();
		} catch (IOException ignored) {
		}
	}
}

class Exit {
	private Exit() {
	}

	public static void exit(InputReader in, PrintWriter out) {
		in.setFinished(true);
		in.close();
		out.close();
	}
}

interface Solver {
	public void solve(int testNumber, InputReader in, PrintWriter out);
}

class IntegerUtils {

	public static int[] generateDivisorTable(int upTo) {
		int[] divisor = new int[upTo];
		for (int i = 1; i < upTo; i++)
			divisor[i] = i;
		for (int i = 2; i * i < upTo; i++) {
			if (divisor[i] == i) {
				for (int j = i * i; j < upTo; j += i)
					divisor[j] = i;
			}
		}
		return divisor;
	}

	}

class TaskB implements Solver {
	public void solve(int testNumber, InputReader in, PrintWriter out) {
		int[] lastUse = new int[100001];
		Arrays.fill(lastUse, -1);
		int[][] divisors = new int[100001][];
		int[] oneDivisor = IntegerUtils.generateDivisorTable(100001);
		divisors[1] = new int[1];
		divisors[1][0] = 1;
		for (int i = 2; i <= 100000; i++) {
			int iCopy = i;
			int multiplier = 1;
			while (iCopy % oneDivisor[i] == 0) {
				multiplier++;
				iCopy /= oneDivisor[i];
			}
			divisors[i] = new int[divisors[iCopy].length * multiplier];
			for (int j = 0; j < divisors[iCopy].length; j++) {
				int current = divisors[iCopy][j];
				for (int k = 0; k < multiplier; k++) {
					divisors[i][j * multiplier + k] = current;
					current *= oneDivisor[i];
				}
			}
		}
		int count = in.readInt();
		for (int i = 0; i < count; i++) {
			int number = in.readInt();
			int lastForbidden = in.readInt();
			int result = 0;
			for (int j : divisors[number]) {
				if (lastUse[j] < i - lastForbidden)
					result++;
				lastUse[j] = i;
			}
			out.println(result);
		}
	}
}