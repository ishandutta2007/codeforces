/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;
typedef pair<ld, ld> pld;
typedef pair<string, string> pss;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define file_io                     freopen("in.txt" , "r" , stdin) ; freopen("out.txt" , "w" , stdout);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

inline ll input() {
    ll n;
    cin >> n;
    return n;
}

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

set_random;

const ll MAXN = 2e5 + 10;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

struct Node{
    ll val = 0 , lazy = 0;
    Node(ll v = 0 , ll lzy = 0){
        val = v;
        lazy = lzy;
    }

    void update(ll v){
        if(v != 3){
            lazy = v;
            return;
        }
        lazy = 3 - lazy;
    }

    friend Node merge(const Node &x , const Node &y){
        return Node(x.val + y.val);
    }
};

template<class T , ll N>
struct LazySegTree {
    T seg[4 * N];

    void Shift(ll id, ll l, ll r) {
        if(seg[id].lazy == 0)   return;
        if(seg[id].lazy == 1)   seg[id].val = (r - l + 1);
        if(seg[id].lazy == 2)   seg[id].val = 0;
        if(seg[id].lazy == 3)   seg[id].val = (r - l + 1) - seg[id].val;

        if (l != r) {
            seg[id * 2].update(seg[id].lazy);
            seg[id * 2 | 1].update(seg[id].lazy);
        }
        seg[id].lazy = 0;
    }

    void Add(ll id, ll l, ll r, ll ql, ll qr, ll val) {
        Shift(id, l, r);
        if (qr < l || r < ql || l > r)  return;
        if (ql <= l && r <= qr) {
            seg[id].update(val);
            Shift(id, l, r);
            return;
        }

        ll mid = (l + r) >> 1;
        Add(id * 2, l, mid, ql, qr, val);
        Add(id * 2 | 1, mid + 1, r, ql, qr, val);
        seg[id] = merge(seg[id * 2], seg[id * 2 | 1]);
    }

    ll Get(ll id, ll l, ll r) {
        Shift(id, l, r);
        if(l == r)  return l;

        ll mid = (l + r) >> 1;
        Shift(id * 2 , l , mid);
        Shift(id * 2 | 1 , mid + 1 , r);
        if(seg[id * 2].val == (mid - l + 1))    return Get(id * 2 | 1 , mid + 1 , r);
        return Get(id * 2 , l , mid);
    }

    void add(ll ql, ll qr, ll val) {
        Add(1, 0, N - 1, ql, qr, val);
    }
    ll get() {
        return Get(1, 0, N - 1);
    }
};

ll n , l[MAXN] , r[MAXN] , type[MAXN];
vector<ll> vec;
LazySegTree<Node , MAXN> seg;

int main() {
    fast_io;

    cin >> n;
    for(ll i = 1 ; i <= n ; i++){
        cin >> type[i] >> l[i] >> r[i];
        vec.push_back(l[i]);
        vec.push_back(r[i] + 1);
    }
    vec.push_back(1);
    Sort(vec);
    vec.resize(unique(all(vec)) - vec.begin());

    for(ll i = 1 ; i <= n ; i++){
        ll L = lower_bound(all(vec) , l[i]) - vec.begin() , R = upper_bound(all(vec) , r[i]) - vec.begin() - 1;
        seg.add(L , R , type[i]);
        cout << vec[seg.get()] << endl;
    }

    return 0;
}
/*
todo :
    1- set constants
    2- check TimeLimit and MemoryLimit
    3- check special test cases
    4- don't forget BS can help you that is good idea(use for loop for floats)
    5- don't forget printf and scanf can help you in your code speed
*/