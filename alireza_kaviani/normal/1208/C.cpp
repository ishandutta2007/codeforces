/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 2e3 + 10;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n , ans[MAXN][MAXN];
vector<ll> vec[4];

int main() {
    fast_io;

    cin >> n;
    for(ll i = n * n - 1 ; i >= 0 ; i--){
        vec[i % 4].push_back(i);
    }

    for(ll i = 0 ; i < n / 2 ; i++){
        for(ll j = 0 ; j < n / 2 ; j++){
            ans[i][j] = vec[0].back();
            vec[0].pop_back();
        }
    }

    for(ll i = 0 ; i < n / 2 ; i++){
        for(ll j = n / 2 ; j < n ; j++){
            ans[i][j] = vec[1].back();
            vec[1].pop_back();
        }
    }

    for(ll i = n / 2 ; i < n ; i++){
        for(ll j = 0 ; j < n / 2 ; j++){
            ans[i][j] = vec[2].back();
            vec[2].pop_back();
        }
    }

    for(ll i = n / 2 ; i < n ; i++){
        for(ll j = n / 2 ; j < n ; j++){
            ans[i][j] = vec[3].back();
            vec[3].pop_back();
        }
    }

    for(ll i = 0 ; i < n ; i++ , cout << endl){
        for(ll j = 0 ; j < n ; j++) cout << ans[i][j] << sep;
    }

    return 0;
}
/*

*/