/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <algorithm>
#include <queue>
#include <vector>
#include <set>
#include <map>
#include <cassert>
#include <functional>
#include <sstream>
#include <cmath>

#include <cstring>
#include <cstdio>

using namespace std;

typedef pair<int, int> ii;
typedef long long int64;
typedef vector<int> vi;

#define pb push_back
#define mp make_pair
#define all(v) (v).begin(),(v).end()
#define sz(v) ((int)(v).size())

template<class T> T abs(T x) { return x >= 0 ? x : -x; }
template<class T> T sqr(T x) { return x * x; }

constexpr int inf = 1000 * 1000 * 1000 + 7;

class TaskD {
public:
	void solve(std::istream& in, std::ostream& out) {
	    int n;
	    in >> n;
	    vi a(n), b(n);
	    for (int i = 0; i < n; ++i)
	        in >> a[i];
        for (int i = 0; i < n; ++i)
            in >> b[i];
        vi vs(n + 1);
        vs[0] = 0;
        for (int i = 0; i < n; ++i) {
            vs[i + 1] = vs[i] + a[i] + b[i];
        }
        vi d(101 * 100, inf);
        d[0] = 0;
        for (int i = 0; i < n; ++i) {
            int x = a[i], y = b[i], S = vs[i];
            vi nd(101 * 100, inf);
            for (int j = 0; j < sz(d); ++j) if (d[j] < inf) {
                int s1 = j, s2 = S - j;
                nd[s1 + x] = min(nd[s1 + x], d[j] + x * s1 + y * s2);
                nd[s1 + y] = min(nd[s1 + y], d[j] + y * s1 + x * s2);
            }
            d = nd;
        }
        int res = inf;
        for (int x : d) res = min(res, x);
        int64 inc = 0;
        for (int x : a) inc += x * x;
        for (int x : b) inc += x * x;
        inc *= (int64) (n - 1);
        inc += 2LL * res;
        out << inc << "\n";
	}
};


int main() {
	TaskD solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	int n;
in >> n;
for(int i = 0; i < n; ++i) {
	solver.solve(in, out);
}

	return 0;
}