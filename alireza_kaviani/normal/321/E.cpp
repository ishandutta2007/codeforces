/* Generated by powerful Codeforces Tool
 * You can download the binary file in here https://github.com/xalanq/cf-tool (Windows, macOS, Linux)
 * Author: alireza_kaviani
 * Time: 2020-10-10 09:31:15
**/
#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

#pragma GCC optimize ("O2")
#pragma GCC optimize ("unroll-loops")

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<int, int> pii;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 4010;
const ll MAXK = 810;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

int n , k , A[MAXN][MAXN] , cost[MAXN][MAXN] , dp[MAXK][MAXN];

void solve(int i , int l , int r , int optl , int optr){
	if(r < l)	return;
	if(optr < optl)	return;
	int mid = l + r >> 1 , opt = optl;
	for(int j = optl ; j <= min(optr , mid - 1) ; j++){
		int c = dp[i - 1][j] + cost[j + 1][mid];
		if(c < dp[i][mid]){
			dp[i][mid] = c;
			opt = j;
		}
	}
	solve(i , l , mid - 1 , optl , opt);
	solve(i , mid + 1 , r , opt , optr);
}

int main() {
	ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);

	//cin >> n >> k;
	scanf("%d%d" , &n , &k);
	getchar();
	for(int i = 1 ; i <= n ; i++){
		for(int j = 1 ; j <= n ; j++){
			A[i][j] = getchar() - 48;
			getchar();
		}
	}
	for(int l = n ; l > 0 ; l--){
		for(int r = l + 1 ; r <= n ; r++){
			cost[l][r] = cost[l][r - 1] + cost[l + 1][r] - cost[l + 1][r - 1] + A[l][r];
		}
	}
	for(int i = 0 ; i < MAXK ; i++){
		fill(dp[i] , dp[i] + MAXN , MOD);
	}
	dp[0][0] = 0;
	for(int i = 1 ; i <= k ; i++){
		solve(i , 0 , n , 0 , n);
	}
	cout << dp[k][n] << endl;

    return 0;
}
/*

*/