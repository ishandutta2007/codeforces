/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#ifndef MAJK_LIB
#define MAJK_LIB

#include <vector>
#include <stack>
#include <iostream>
#include <unordered_map>
#include <map>
#include <iomanip>
#include <set>
#include <functional>
#include <fstream>
#include <algorithm>
#include <cassert>
#include <cmath>
#include <string>
#include <sstream>
#include <queue>
#include <bitset>
using namespace std;

#define x first
#define y second
constexpr int MOD = 1000000007;

typedef std::pair<int,int> pii;
typedef long long ll;
typedef unsigned long long ull;
typedef unsigned int ui;


template<typename T, typename F> T foo(T t, T g, F f) {
	return t;
}


template <typename T, typename U> std::istream&operator>>(std::istream&i, pair<T,U>&p) {i >> p.x >> p.y; return i;}
template<typename T>std::istream&operator>>(std::istream&i,vector<T>&t) {for(auto&v:t){i>>v;}return i;}
template<typename T>std::ostream&operator<<(std::ostream&o,const vector<T>&t) {for(size_t i=0;i<t.size();++i){o<<t[i]<<" \n"[i == t.size()-1];}return o;}
template<typename T> using minheap = priority_queue<T, vector<T>, greater<T>>;
template<typename T> using maxheap = priority_queue<T, vector<T>, less<T>>;
auto fraclt = [](const pii&a,const pii&b) { return (ll)a.x * b.y < (ll)b.x * a.y; };
struct cmpfrac { bool operator()(const pii&a,const pii&b)const { return (ll)a.x * b.y < (ll)b.x * a.y; }};
template <typename T> bool in(T a, T b, T c) { return a <= b && b < c; }
int logceil(ll x) {int b=0;while(x){x>>=1;++b;}return b;}

namespace std {
    template<typename T,typename U>struct hash<pair<T,U>>{hash<T>t;hash<U>u;size_t operator()(const pair<T,U>&p)const{return t(p.x)^(u(p.y)<<7);}};
}
template<typename T,typename F>T bsh(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){l=m+1;r=m;}else{h=m-1;}}return r;}
template<typename T,typename F>T bsl(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){h=m-1;r=m;}else{l=m+1;}}return r;}
template<typename T> T gcd(T a,T b) { if (a<b) swap(a,b); return b?gcd(b,a%b):a; }

template<typename T>class vector2:public vector<vector<T>>{public:vector2(){} vector2(size_t a,size_t b,T t=T()):vector<vector<T>>(a,vector<T>(b,t)){}};
template<typename T>class vector3:public vector<vector<vector<T>>>{public:vector3(){} vector3(size_t a,size_t b,size_t c,T t=T()):vector<vector<vector<T>>>(a,vector<vector<T>>(b,vector<T>(c,t))){}};
template <typename T> struct bounded_priority_queue {
	inline bounded_priority_queue(ui X) : A(X), B(0) {}
	inline void push(ui L, T V) { B = max(B, L); A[L].push(V); }
	inline const T &top() const { return A[B].front(); }
	inline void pop() { A[B].pop(); while (B > 0 && A[B].empty()) --B; }
	inline bool empty() const { return A[B].empty(); }
	inline void clear() { B = 0; for (auto &a: A) a = queue<T>(); }
private:
	vector<queue<T>> A; ui B;
};


#endif
// #include "../l/mod.h"

constexpr ll toomuch = 1000000000000000000LL;

class TaskC {
public:
	vector<int> L, R;
	vector<int> DIG, Q, S;
	int ans;

	bool is_below_r(vector<int> &DIG, int i) {
		if (DIG[R[i]] > 0) {
			DIG[R[i]]--;
			for (int j = i+1; j < 18; ++j) {
				for (int k = 0; k < R[j]; ++k) {
					if (DIG[k] > 0) return true;
				}
				if (DIG[R[j]] == 0) return false;
				DIG[R[j]]--;
			}
			return true;
		}
		return false;
	}

	bool is_within_range() {
		int i = 0;
		while (L[i] == R[i]) {
			if (Q[L[i]] == 0) return false;
			Q[L[i]]--;
			i++;
		}

		for (int j = L[i]+1; j < R[i]; ++j) {
			if (Q[j]) return true;
		}

		if (Q[L[i]] > 0) {
			S = Q;
			S[L[i]]--;
			for (int j = i+1; j < 18; ++j) {
				for (int k = L[j]+1; k < 10; ++k) {
					if (S[k] > 0) return true;
				}
				if (S[L[j]] == 0) return is_below_r(Q, i);
				S[L[j]]--;
			}
			// this equals L
			return true;
		}

		return is_below_r(Q, i);
	}

	void gen(int d, int rem) {
		if (d == 9) {
			DIG[9] = rem;
			Q = DIG;
			if (is_within_range()) ++ans;
			return;
		}

		for (int i = 0; i <= rem; ++i) {
			DIG[d] = i;
			gen(d+1, rem - i);
		}
	}

	void split(ll x, vector<int> &tar) {
		for (int i = 17; i >= 0; --i) {
			tar[i] = x%10;
			x /= 10;
		}
	}

    void solve(istream& cin, ostream& cout) {
		DIG.resize(10);
		ll a,b;
		cin >> a >> b;
		if (a == b) {
			cout << 1 << endl;
			return;
		}
		if (a == toomuch - 1 && b == toomuch) {
			cout << 2 << endl;
			return;
		}
		bool ismax = b==toomuch;
		if (ismax) --b;

		L.resize(18); R.resize(18);
		split(a, L);
		split(b, R);
		ans = 0;
		gen(0, 18);

		if (ismax && a > toomuch/10) {
			++ans;
		}
		cout << ans << endl;

    }
};


int main() {
	ios_base::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr);
	TaskC solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
    return 0;
}