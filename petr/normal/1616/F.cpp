/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

// Actual solution is at the bottom

#undef NDEBUG

#include <algorithm>
#include <array>
#include <bitset>
#include <cassert>
#include <climits>
#include <cstdint>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <memory>
#include <numeric>
#include <queue>
#include <random>
#include <set>
#include <stack>
#include <string>
#include <unordered_set>
#include <unordered_map>
#include <vector>
// AtCoder library from https://github.com/atcoder/ac-library
// #include "../atcoder/all"

#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()

using namespace std;

typedef int64_t int64;
typedef pair<int, int> ii;

class FTrekhtsvetnieTreugolniki {
 public:
  void solveOne() {
    int n, m;
    cin >> n >> m;
    vector<vector<int>> idx(n, vector<int>(n, -1));
    vector<vector<int>> color(n, vector<int>(n, 0));
    vector<int> orig(m);
    int vars = 0;
    for (int i = 0; i < m; ++i) {
      int a, b, c;
      cin >> a >> b >> c;
      --a; --b;
      orig[i] = c;
      color[a][b] = color[b][a] = c;
      if (c < 0) {
        idx[a][b] = idx[b][a] = vars++;
      }
    }
    vector<vector<int>> a;
    for (int i = 0; i < n; ++i) {
      for (int j = 0; j < i; ++j) if (color[i][j] != 0) {
        for (int k = 0; k < j; ++k) if (color[i][k] != 0 && color[j][k] != 0) {
          vector<int> row(vars + 1);
          int sofar = 0;
          if (idx[i][j] >= 0) row[idx[i][j]] = 1; else sofar += color[i][j] - 1;
          if (idx[i][k] >= 0) row[idx[i][k]] = 1; else sofar += color[i][k] - 1;
          if (idx[k][j] >= 0) row[idx[k][j]] = 1; else sofar += color[k][j] - 1;
          row[vars] = (30 - sofar) % 3;
          a.push_back(row);
        }
      }
    }

    int found = 0;

    for (int i = 0; i < vars; ++i) {
      int bj = -1;
      for (int j = found; j < a.size(); ++j) if (a[j][i] != 0) {
        bj = j;
        break;
      }
      if (bj < 0) continue;
      swap(a[found], a[bj]);
      int by = a[found][i];
      assert(by != 0);
      for (int k = 0; k <= vars; ++k) a[found][k] = a[found][k] * by % 3;
      for (int j = 0; j < a.size(); ++j) if (j != found) {
        by = (3 - a[j][i]) % 3;
        if (by == 0) continue;
        for (int k = 0; k <= vars; ++k) a[j][k] = (a[j][k] + a[found][k] * by) % 3;
      }
      ++found;
    }
    for (int j = found; j < a.size(); ++j) if (a[j][vars] != 0) {
      cout << -1 << "\n";
      return;
    }
    vector<int> sol(vars);
    for (int j = 0; j < found; ++j) {
      for (int i = 0; i < vars; ++i) if (a[j][i] != 0) {
        sol[i] = a[j][vars];
        break;
      }
    }
    vector<int> res(m);
    int ptr = 0;
    for (int i = 0; i < m; ++i) if (orig[i] > 0) {
      res[i] = orig[i];
    } else {
      res[i] = sol[ptr++] + 1;
    }

    for (int x : res) cout << x << " ";
    cout << "\n";
  }

  void solve() {
    int nt;
    cin >> nt;
    for (int it = 0; it < nt; ++it) {
      // cout << "Case #" << (it + 1) << ": ";
      solveOne();
    }
  }
};

// #define st_mtimespec st_mtim

int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(0);
    FTrekhtsvetnieTreugolniki solver;


    solver.solve();
    return 0;
}