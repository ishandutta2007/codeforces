/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <bits/stdc++.h>

#define pb push_back
#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()
#define mp make_pair

using namespace std;

typedef long long int64;
typedef vector<int> vi;
typedef pair<int, int> ii;

int BUBEN = 70;

class TaskF {
 public:
  void solveOne(istream &in, ostream &out) {
    string s;
    in >> s;
    /*s.clear();
    for (int i = 0; i < 200000; ++i)
      s += '1';*/
    vector<int> p;
    vector<int> ones;
    p.push_back(0);
    for (int i = 0; i < s.size(); ++i) {
      int v = s[i] - '0';
      p.push_back(p.back() + v);
      if (v == 1) {
        ones.push_back(i);
      }
    }
    unordered_map<int, int> cnt;
    int64 res = 0;
    for (int k = 1; k < BUBEN; ++k) {
      cnt.clear();
      for (int i = 0; i < p.size(); ++i) {
        int v = k * p[i] - i;
        res += cnt[v];
        cnt[v] += 1;
      }
    }
    cerr << clock() / (double) CLOCKS_PER_SEC << endl;
    for (int fi = 0; fi < ones.size(); ++fi) {
      int first = ones[fi];
      int pfirst = fi > 0 ? ones[fi - 1] : -1;
      for (int li = fi; li < ones.size(); ++li) {
        int last = ones[li];
        int nlast = li + 1 < ones.size() ? ones[li + 1] : s.size();
        int count = li - fi + 1;
        if (count * BUBEN > s.size()) {
          break;
        }
        for (int start = pfirst + 1; start <= first; ++start) {
          int earliest = start + count * BUBEN - 1;
          if (earliest < last) {
            int by = (last - earliest + count - 1) / count;
            earliest += count * by;
          }
          if (earliest < nlast) {
            res += 1 + (nlast - 1 - earliest) / count;
          }
        }
      }
    }
    cerr << clock() / (double) CLOCKS_PER_SEC << endl;
    out << res << "\n";
  }

  void solve(std::istream &in, std::ostream &out) {
    int nt = 1;
    for (int it = 0; it < nt; ++it) {
      solveOne(in, out);
    }
  }
};


int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  TaskF solver;
  std::istream& in(std::cin);
  std::ostream& out(std::cout);
  solver.solve(in, out);
  return 0;
}