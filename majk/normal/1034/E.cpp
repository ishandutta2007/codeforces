/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author majk
 */

#ifndef MAJK_LIB
#define MAJK_LIB

#include <vector>
#include <stack>
#include <iostream>
#include <fstream>
#include <unordered_map>
#include <unordered_set>
#include <map>
#include <iomanip>
#include <set>
#include <functional>
#include <algorithm>
#include <numeric>
#include <cassert>
#include <cmath>
#include <string>
#include <queue>
#include <array>
#include <bitset>
using namespace std;

#define x first
#define y second
typedef std::pair<int,int> pii; typedef long long ll; typedef unsigned long long ull; typedef unsigned int ui; typedef pair<ui,ui> puu;

template <typename T, typename U> std::istream&operator>>(std::istream&i, pair<T,U>&p) {i >> p.x >> p.y; return i;}
template<typename T>std::istream&operator>>(std::istream&i,vector<T>&t) {for(auto&v:t){i>>v;}return i;}
template <typename T, typename U> std::ostream&operator<<(std::ostream&o, const pair<T,U>&p) {o << p.x << ' ' << p.y; return o;}
template<typename T>std::ostream&operator<<(std::ostream&o,const vector<T>&t) {if(t.empty())o<<'\n';for(size_t i=0;i<t.size();++i){o<<t[i]<<" \n"[i == t.size()-1];}return o;}
template<typename T> using minheap = priority_queue<T, vector<T>, greater<T>>;
template<typename T> using maxheap = priority_queue<T, vector<T>, less<T>>;
ui logceil(ll x) { return x?8*sizeof(ll)-__builtin_clzll(x):0; }

namespace std { template<typename T,typename U>struct hash<pair<T,U>>{hash<T>t;hash<U>u;size_t operator()(const pair<T,U>&p)const{return t(p.x)^(u(p.y)<<7);}}; }
template<typename T,typename F>T bsh(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){l=m+1;r=m;}else{h=m-1;}}return r;}
template<typename F> double bshd(double l,double h,const F&f,double p=1e-9){ui r=3+(ui)log2((h-l)/p);while(r--){double m=(l+h)/2;if(f(m)){l=m;}else{h=m;}}return (l+h)/2;}
template<typename T,typename F>T bsl(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){h=m-1;r=m;}else{l=m+1;}}return r;}
template<typename F> double bsld(double l,double h,const F&f){ui r=200;while(r--){double m=(l+h)/2;if(f(m)){h=m;}else{l=m;}}return (l+h)/2;}
template<typename T> T gcd(T a,T b) { if (a<b) swap(a,b); return b?gcd(b,a%b):a; }


template<typename T>class vector2:public vector<vector<T>>{public:vector2(){} vector2(size_t a,size_t b,T t=T()):vector<vector<T>>(a,vector<T>(b,t)){}};
template<typename T>class vector3:public vector<vector2<T>>{public:vector3(){} vector3(size_t a,size_t b,size_t c,T t=T()):vector<vector2<T>>(a,vector2<T>(b,c,t)){}};
template<typename T>class vector4:public vector<vector3<T>>{public:vector4(){} vector4(size_t a,size_t b,size_t c,size_t d,T t=T()):vector<vector3<T>>(a,vector3<T>(b,c,d,t)){}};
template<typename T>class vector5:public vector<vector4<T>>{public:vector5(){} vector5(size_t a,size_t b,size_t c,size_t d,size_t e,T t=T()):vector<vector4<T>>(a,vector4<T>(b,c,d,e,t)){}};


#endif
#ifndef MAJK_SUBSET_H
#define MAJK_SUBSET_H

class SubsetIterator {
public:
    SubsetIterator(int mask, int submask) : mask(mask), submask(submask) {}
    SubsetIterator& operator++() { submask = (submask - 1) & mask; return *this; }
    inline bool operator==(const SubsetIterator& o) const { return submask == o.submask; }
    inline bool operator!=(const SubsetIterator& o) const { return submask != o.submask; }
    inline int operator*() const { return mask^submask; }
private:
    int mask, submask;
};

class SubsetRange {
public:
    explicit SubsetRange(int mask) : mask(mask) {}
    SubsetIterator begin() const { return SubsetIterator(mask, mask); }
    SubsetIterator end() const { return SubsetIterator(mask, 0); }
private:
    int mask;
};

SubsetRange subsets(int mask) { return SubsetRange(mask); }

template <typename T>
void zetaTransform(vector<T>&A, int N = 0) {
    while ((1<<N) < int(A.size())) ++N;
    assert((1<<N) == int(A.size()));

    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < (1<<N); ++j) {
            if (j&1<<i) A[j] += A[j^1<<i];
        }
    }
}

template <typename T>
void oddNegateTransform(vector<T>&A) {
    for (int i = 0; i < int(A.size()); ++i) if (__builtin_popcount(i)&1) A[i] = -A[i];
}

template <typename T>
void moebiusTransform(vector<T>&A, int N = 0) {
    oddNegateTransform(A);
    zetaTransform(A);
    oddNegateTransform(A);
}

template <typename T>
vector<vector<T>> rankBySize(const vector<T>& A, int N = 0) {
    while ((1<<N) < int(A.size())) ++N;
    assert((1<<N) == int(A.size()));

    vector2<T> B(N+1, 1<<N);
    for (int i = 0; i < (1<<N); ++i) B[__builtin_popcount(i)][i] = A[i];
    return B;
}

template <typename T>
vector<vector<T>> rankedZetaTransform(const vector<T>&A, int N = 0) {
    while ((1<<N) < int(A.size())) ++N;
    assert((1<<N) == int(A.size()));

    auto B = rankBySize(A);
    for (auto &BB: B) zetaTransform(BB);
    return B;
}

template <typename T>
vector<T> subsetConvolution(const vector<T>&A, const vector<T>&B, int N = 0) {
    while ((1<<N) < int(A.size())) ++N;
    assert((1<<N) == int(A.size()));
    assert(int(A.size()) == int(B.size()));

    auto rankedA = rankBySize(A);
    auto rankedB = rankBySize(B);
    for (auto & AA: rankedA) zetaTransform(AA);
    for (auto & BB: rankedB) zetaTransform(BB);

    vector2<T> C(N+1, 1<<N);
    for (int i = 0; i <= N; ++i) {
        for (int j = 0; j+i <= N; ++j) {
            for (int k = 0; k < 1<<N; ++k) {
                C[j+i][k] += rankedA[i][k] * rankedB[j][k];
            }
        }
    }

    for (auto &CC: C) moebiusTransform(CC);

    vector<T> Answer(1<<N);
    for (int i = 0; i < 1<<N; ++i) Answer[i] = C[__builtin_popcount(i)][i];
    return Answer;
}

#endif //MAJK_SUBSET_H


class ELittleCLoves3III {
public:
    void solve(istream& cin, ostream& cout) {
        int N; cin >> N;
        string AS, BS; cin >> AS >> BS;
        vector<ll> AR(1<<N), BR(1<<N);
        for (int i = 0; i < 1<<N; ++i) {
            int p = __builtin_popcount(i);
            AR[i] = ll(AS[i]-'0')<<(2*p);
            BR[i] = ll(BS[i]-'0')<<(2*p);
        }
        zetaTransform(AR, N);
        zetaTransform(BR, N);
        vector<ll> CR(1<<N);
        for (int i = 0; i < 1<<N; ++i) CR[i] = AR[i] * BR[i];
        moebiusTransform(CR, N);
        string C(1<<N, '?');
        for (int i = 0; i < 1<<N; ++i) {
            int p = __builtin_popcount(i);
            C[i] = char('0'+((CR[i]>>(2*p))&3));
        }

        cout << C << '\n';
    }
};



int main() {
	ios_base::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr);
	ELittleCLoves3III solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
    return 0;
}