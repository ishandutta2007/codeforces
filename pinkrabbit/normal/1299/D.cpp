#include <bits/stdc++.h>
using namespace std;

struct Basis {
	int A[5];
	Basis() { memset(A, 0, sizeof A); }
	Basis(int x) { getSt(x); }
	int Insert(int x) {
		int ok = 0;
		for (int j = 4; j >= 0; --j) if (x >> j & 1) {
			if (A[j]) x ^= A[j];
			else {
				A[j] = x;
				ok = 1;
				for (int k = 0; k < j; ++k)
					if (A[k] && (A[j] >> k & 1))
						A[j] ^= A[k];
				for (int k = j + 1; k < 5; ++k)
					if (A[k] >> j & 1)
						A[k] ^= A[j];
				x = 0;
			}
		}
		return ok;
	}
	int toInt() {
		return A[0] | A[1] << 1 | A[2] << 3 | A[3] << 6 | A[4] << 10;
	}
	void getSt(int x) {
		A[0] = x & 1;
		A[1] = x >> 1 & 3;
		A[2] = x >> 3 & 7;
		A[3] = x >> 6 & 15;
		A[4] = x >> 10 & 31;
	}
	void Print() {
		for (int i = 4; i >= 0; --i) {
			printf(" ");
			for (int j = 4; j >= 0; --j) {
				if (j > i) printf(" ");
				else printf("%d", A[i] >> j & 1);
			}
			puts("");
		} puts("=======");
	}
};

int id[1 << 15], cnt;
int st[374];
int comb[374][374];

void Init0() {
	id[0] = 0, st[0] = 0;
	id[1] = 1, st[1] = 1;
	id[5] = 2, st[2] = 5;
	id[37] = 3, st[3] = 37;
	id[549] = 4, st[4] = 549;
	id[16933] = 5, st[5] = 16933;
	id[16421] = 6, st[6] = 16421;
	id[24613] = 7, st[7] = 24613;
	id[517] = 8, st[8] = 517;
	id[16901] = 9, st[9] = 16901;
	id[20997] = 10, st[10] = 20997;
	id[773] = 11, st[11] = 773;
	id[17157] = 12, st[12] = 17157;
	id[21253] = 13, st[13] = 21253;
	id[16389] = 14, st[14] = 16389;
	id[20485] = 15, st[15] = 20485;
	id[24581] = 16, st[16] = 24581;
	id[28677] = 17, st[17] = 28677;
	id[33] = 18, st[18] = 33;
	id[545] = 19, st[19] = 545;
	id[16929] = 20, st[20] = 16929;
	id[18977] = 21, st[21] = 18977;
	id[673] = 22, st[22] = 673;
	id[17057] = 23, st[23] = 17057;
	id[19105] = 24, st[24] = 19105;
	id[16417] = 25, st[25] = 16417;
	id[18465] = 26, st[26] = 18465;
	id[24609] = 27, st[27] = 24609;
	id[26657] = 28, st[28] = 26657;
	id[49] = 29, st[29] = 49;
	id[561] = 30, st[30] = 561;
	id[16945] = 31, st[31] = 16945;
	id[18993] = 32, st[32] = 18993;
	id[689] = 33, st[33] = 689;
	id[17073] = 34, st[34] = 17073;
	id[19121] = 35, st[35] = 19121;
	id[16433] = 36, st[36] = 16433;
	id[18481] = 37, st[37] = 18481;
	id[24625] = 38, st[38] = 24625;
	id[26673] = 39, st[39] = 26673;
	id[513] = 40, st[40] = 513;
	id[16897] = 41, st[41] = 16897;
	id[18945] = 42, st[42] = 18945;
	id[20993] = 43, st[43] = 20993;
	id[23041] = 44, st[44] = 23041;
	id[641] = 45, st[45] = 641;
	id[17025] = 46, st[46] = 17025;
	id[19073] = 47, st[47] = 19073;
	id[21121] = 48, st[48] = 21121;
	id[23169] = 49, st[49] = 23169;
	id[769] = 50, st[50] = 769;
	id[17153] = 51, st[51] = 17153;
	id[19201] = 52, st[52] = 19201;
	id[21249] = 53, st[53] = 21249;
	id[23297] = 54, st[54] = 23297;
	id[897] = 55, st[55] = 897;
	id[17281] = 56, st[56] = 17281;
	id[19329] = 57, st[57] = 19329;
	id[21377] = 58, st[58] = 21377;
	id[23425] = 59, st[59] = 23425;
	id[16385] = 60, st[60] = 16385;
	id[18433] = 61, st[61] = 18433;
	id[20481] = 62, st[62] = 20481;
	id[22529] = 63, st[63] = 22529;
	id[24577] = 64, st[64] = 24577;
	id[26625] = 65, st[65] = 26625;
	id[28673] = 66, st[66] = 28673;
	id[30721] = 67, st[67] = 30721;
	id[4] = 68, st[68] = 4;
	id[36] = 69, st[69] = 36;
	id[548] = 70, st[70] = 548;
	id[16932] = 71, st[71] = 16932;
	id[17956] = 72, st[72] = 17956;
	id[612] = 73, st[73] = 612;
	id[16996] = 74, st[74] = 16996;
	id[18020] = 75, st[75] = 18020;
	id[16420] = 76, st[76] = 16420;
	id[17444] = 77, st[77] = 17444;
	id[24612] = 78, st[78] = 24612;
	id[25636] = 79, st[79] = 25636;
	id[44] = 80, st[80] = 44;
	id[556] = 81, st[81] = 556;
	id[16940] = 82, st[82] = 16940;
	id[17964] = 83, st[83] = 17964;
	id[620] = 84, st[84] = 620;
	id[17004] = 85, st[85] = 17004;
	id[18028] = 86, st[86] = 18028;
	id[16428] = 87, st[87] = 16428;
	id[17452] = 88, st[88] = 17452;
	id[24620] = 89, st[89] = 24620;
	id[25644] = 90, st[90] = 25644;
	id[516] = 91, st[91] = 516;
	id[16900] = 92, st[92] = 16900;
	id[17924] = 93, st[93] = 17924;
	id[20996] = 94, st[94] = 20996;
	id[22020] = 95, st[95] = 22020;
	id[580] = 96, st[96] = 580;
	id[16964] = 97, st[97] = 16964;
	id[17988] = 98, st[98] = 17988;
	id[21060] = 99, st[99] = 21060;
	id[22084] = 100, st[100] = 22084;
	id[772] = 101, st[101] = 772;
	id[17156] = 102, st[102] = 17156;
	id[18180] = 103, st[103] = 18180;
	id[21252] = 104, st[104] = 21252;
	id[22276] = 105, st[105] = 22276;
	id[836] = 106, st[106] = 836;
	id[17220] = 107, st[107] = 17220;
	id[18244] = 108, st[108] = 18244;
	id[21316] = 109, st[109] = 21316;
	id[22340] = 110, st[110] = 22340;
	id[16388] = 111, st[111] = 16388;
	id[17412] = 112, st[112] = 17412;
	id[20484] = 113, st[113] = 20484;
	id[21508] = 114, st[114] = 21508;
	id[24580] = 115, st[115] = 24580;
	id[25604] = 116, st[116] = 25604;
	id[28676] = 117, st[117] = 28676;
	id[29700] = 118, st[118] = 29700;
	id[6] = 119, st[119] = 6;
	id[38] = 120, st[120] = 38;
	id[550] = 121, st[121] = 550;
	id[16934] = 122, st[122] = 16934;
	id[17958] = 123, st[123] = 17958;
	id[614] = 124, st[124] = 614;
	id[16998] = 125, st[125] = 16998;
	id[18022] = 126, st[126] = 18022;
	id[16422] = 127, st[127] = 16422;
	id[17446] = 128, st[128] = 17446;
	id[24614] = 129, st[129] = 24614;
	id[25638] = 130, st[130] = 25638;
	id[46] = 131, st[131] = 46;
	id[558] = 132, st[132] = 558;
	id[16942] = 133, st[133] = 16942;
	id[17966] = 134, st[134] = 17966;
	id[622] = 135, st[135] = 622;
	id[17006] = 136, st[136] = 17006;
	id[18030] = 137, st[137] = 18030;
	id[16430] = 138, st[138] = 16430;
	id[17454] = 139, st[139] = 17454;
	id[24622] = 140, st[140] = 24622;
	id[25646] = 141, st[141] = 25646;
	id[518] = 142, st[142] = 518;
	id[16902] = 143, st[143] = 16902;
	id[17926] = 144, st[144] = 17926;
	id[20998] = 145, st[145] = 20998;
	id[22022] = 146, st[146] = 22022;
	id[582] = 147, st[147] = 582;
	id[16966] = 148, st[148] = 16966;
	id[17990] = 149, st[149] = 17990;
	id[21062] = 150, st[150] = 21062;
	id[22086] = 151, st[151] = 22086;
	id[774] = 152, st[152] = 774;
	id[17158] = 153, st[153] = 17158;
	id[18182] = 154, st[154] = 18182;
	id[21254] = 155, st[155] = 21254;
	id[22278] = 156, st[156] = 22278;
	id[838] = 157, st[157] = 838;
	id[17222] = 158, st[158] = 17222;
	id[18246] = 159, st[159] = 18246;
	id[21318] = 160, st[160] = 21318;
	id[22342] = 161, st[161] = 22342;
	id[16390] = 162, st[162] = 16390;
	id[17414] = 163, st[163] = 17414;
	id[20486] = 164, st[164] = 20486;
	id[21510] = 165, st[165] = 21510;
	id[24582] = 166, st[166] = 24582;
	id[25606] = 167, st[167] = 25606;
	id[28678] = 168, st[168] = 28678;
	id[29702] = 169, st[169] = 29702;
	id[32] = 170, st[170] = 32;
	id[544] = 171, st[171] = 544;
	id[16928] = 172, st[172] = 16928;
	id[17952] = 173, st[173] = 17952;
	id[18976] = 174, st[174] = 18976;
	id[20000] = 175, st[175] = 20000;
	id[608] = 176, st[176] = 608;
	id[16992] = 177, st[177] = 16992;
	id[18016] = 178, st[178] = 18016;
	id[19040] = 179, st[179] = 19040;
	id[20064] = 180, st[180] = 20064;
	id[672] = 181, st[181] = 672;
	id[17056] = 182, st[182] = 17056;
	id[18080] = 183, st[183] = 18080;
	id[19104] = 184, st[184] = 19104;
	id[20128] = 185, st[185] = 20128;
	id[736] = 186, st[186] = 736;
	id[17120] = 187, st[187] = 17120;
	id[18144] = 188, st[188] = 18144;
	id[19168] = 189, st[189] = 19168;
	id[20192] = 190, st[190] = 20192;
	id[16416] = 191, st[191] = 16416;
	id[17440] = 192, st[192] = 17440;
	id[18464] = 193, st[193] = 18464;
	id[19488] = 194, st[194] = 19488;
	id[24608] = 195, st[195] = 24608;
	id[25632] = 196, st[196] = 25632;
	id[26656] = 197, st[197] = 26656;
	id[27680] = 198, st[198] = 27680;
	id[40] = 199, st[199] = 40;
	id[552] = 200, st[200] = 552;
	id[16936] = 201, st[201] = 16936;
	id[17960] = 202, st[202] = 17960;
	id[18984] = 203, st[203] = 18984;
	id[20008] = 204, st[204] = 20008;
	id[616] = 205, st[205] = 616;
	id[17000] = 206, st[206] = 17000;
	id[18024] = 207, st[207] = 18024;
	id[19048] = 208, st[208] = 19048;
	id[20072] = 209, st[209] = 20072;
	id[680] = 210, st[210] = 680;
	id[17064] = 211, st[211] = 17064;
	id[18088] = 212, st[212] = 18088;
	id[19112] = 213, st[213] = 19112;
	id[20136] = 214, st[214] = 20136;
	id[744] = 215, st[215] = 744;
	id[17128] = 216, st[216] = 17128;
	id[18152] = 217, st[217] = 18152;
	id[19176] = 218, st[218] = 19176;
	id[20200] = 219, st[219] = 20200;
	id[16424] = 220, st[220] = 16424;
	id[17448] = 221, st[221] = 17448;
	id[18472] = 222, st[222] = 18472;
	id[19496] = 223, st[223] = 19496;
	id[24616] = 224, st[224] = 24616;
	id[25640] = 225, st[225] = 25640;
	id[26664] = 226, st[226] = 26664;
	id[27688] = 227, st[227] = 27688;
	id[48] = 228, st[228] = 48;
	id[560] = 229, st[229] = 560;
	id[16944] = 230, st[230] = 16944;
	id[17968] = 231, st[231] = 17968;
	id[18992] = 232, st[232] = 18992;
	id[20016] = 233, st[233] = 20016;
	id[624] = 234, st[234] = 624;
	id[17008] = 235, st[235] = 17008;
	id[18032] = 236, st[236] = 18032;
	id[19056] = 237, st[237] = 19056;
	id[20080] = 238, st[238] = 20080;
	id[688] = 239, st[239] = 688;
	id[17072] = 240, st[240] = 17072;
	id[18096] = 241, st[241] = 18096;
	id[19120] = 242, st[242] = 19120;
	id[20144] = 243, st[243] = 20144;
	id[752] = 244, st[244] = 752;
	id[17136] = 245, st[245] = 17136;
	id[18160] = 246, st[246] = 18160;
	id[19184] = 247, st[247] = 19184;
	id[20208] = 248, st[248] = 20208;
	id[16432] = 249, st[249] = 16432;
	id[17456] = 250, st[250] = 17456;
	id[18480] = 251, st[251] = 18480;
	id[19504] = 252, st[252] = 19504;
	id[24624] = 253, st[253] = 24624;
	id[25648] = 254, st[254] = 25648;
	id[26672] = 255, st[255] = 26672;
	id[27696] = 256, st[256] = 27696;
	id[56] = 257, st[257] = 56;
	id[568] = 258, st[258] = 568;
	id[16952] = 259, st[259] = 16952;
	id[17976] = 260, st[260] = 17976;
	id[19000] = 261, st[261] = 19000;
	id[20024] = 262, st[262] = 20024;
	id[632] = 263, st[263] = 632;
	id[17016] = 264, st[264] = 17016;
	id[18040] = 265, st[265] = 18040;
	id[19064] = 266, st[266] = 19064;
	id[20088] = 267, st[267] = 20088;
	id[696] = 268, st[268] = 696;
	id[17080] = 269, st[269] = 17080;
	id[18104] = 270, st[270] = 18104;
	id[19128] = 271, st[271] = 19128;
	id[20152] = 272, st[272] = 20152;
	id[760] = 273, st[273] = 760;
	id[17144] = 274, st[274] = 17144;
	id[18168] = 275, st[275] = 18168;
	id[19192] = 276, st[276] = 19192;
	id[20216] = 277, st[277] = 20216;
	id[16440] = 278, st[278] = 16440;
	id[17464] = 279, st[279] = 17464;
	id[18488] = 280, st[280] = 18488;
	id[19512] = 281, st[281] = 19512;
	id[24632] = 282, st[282] = 24632;
	id[25656] = 283, st[283] = 25656;
	id[26680] = 284, st[284] = 26680;
	id[27704] = 285, st[285] = 27704;
	id[512] = 286, st[286] = 512;
	id[16896] = 287, st[287] = 16896;
	id[17920] = 288, st[288] = 17920;
	id[18944] = 289, st[289] = 18944;
	id[19968] = 290, st[290] = 19968;
	id[20992] = 291, st[291] = 20992;
	id[22016] = 292, st[292] = 22016;
	id[23040] = 293, st[293] = 23040;
	id[24064] = 294, st[294] = 24064;
	id[576] = 295, st[295] = 576;
	id[16960] = 296, st[296] = 16960;
	id[17984] = 297, st[297] = 17984;
	id[19008] = 298, st[298] = 19008;
	id[20032] = 299, st[299] = 20032;
	id[21056] = 300, st[300] = 21056;
	id[22080] = 301, st[301] = 22080;
	id[23104] = 302, st[302] = 23104;
	id[24128] = 303, st[303] = 24128;
	id[640] = 304, st[304] = 640;
	id[17024] = 305, st[305] = 17024;
	id[18048] = 306, st[306] = 18048;
	id[19072] = 307, st[307] = 19072;
	id[20096] = 308, st[308] = 20096;
	id[21120] = 309, st[309] = 21120;
	id[22144] = 310, st[310] = 22144;
	id[23168] = 311, st[311] = 23168;
	id[24192] = 312, st[312] = 24192;
	id[704] = 313, st[313] = 704;
	id[17088] = 314, st[314] = 17088;
	id[18112] = 315, st[315] = 18112;
	id[19136] = 316, st[316] = 19136;
	id[20160] = 317, st[317] = 20160;
	id[21184] = 318, st[318] = 21184;
	id[22208] = 319, st[319] = 22208;
	id[23232] = 320, st[320] = 23232;
	id[24256] = 321, st[321] = 24256;
	id[768] = 322, st[322] = 768;
	id[17152] = 323, st[323] = 17152;
	id[18176] = 324, st[324] = 18176;
	id[19200] = 325, st[325] = 19200;
	id[20224] = 326, st[326] = 20224;
	id[21248] = 327, st[327] = 21248;
	id[22272] = 328, st[328] = 22272;
	id[23296] = 329, st[329] = 23296;
	id[24320] = 330, st[330] = 24320;
	id[832] = 331, st[331] = 832;
	id[17216] = 332, st[332] = 17216;
	id[18240] = 333, st[333] = 18240;
	id[19264] = 334, st[334] = 19264;
	id[20288] = 335, st[335] = 20288;
	id[21312] = 336, st[336] = 21312;
	id[22336] = 337, st[337] = 22336;
	id[23360] = 338, st[338] = 23360;
	id[24384] = 339, st[339] = 24384;
	id[896] = 340, st[340] = 896;
	id[17280] = 341, st[341] = 17280;
	id[18304] = 342, st[342] = 18304;
	id[19328] = 343, st[343] = 19328;
	id[20352] = 344, st[344] = 20352;
	id[21376] = 345, st[345] = 21376;
	id[22400] = 346, st[346] = 22400;
	id[23424] = 347, st[347] = 23424;
	id[24448] = 348, st[348] = 24448;
	id[960] = 349, st[349] = 960;
	id[17344] = 350, st[350] = 17344;
	id[18368] = 351, st[351] = 18368;
	id[19392] = 352, st[352] = 19392;
	id[20416] = 353, st[353] = 20416;
	id[21440] = 354, st[354] = 21440;
	id[22464] = 355, st[355] = 22464;
	id[23488] = 356, st[356] = 23488;
	id[24512] = 357, st[357] = 24512;
	id[16384] = 358, st[358] = 16384;
	id[17408] = 359, st[359] = 17408;
	id[18432] = 360, st[360] = 18432;
	id[19456] = 361, st[361] = 19456;
	id[20480] = 362, st[362] = 20480;
	id[21504] = 363, st[363] = 21504;
	id[22528] = 364, st[364] = 22528;
	id[23552] = 365, st[365] = 23552;
	id[24576] = 366, st[366] = 24576;
	id[25600] = 367, st[367] = 25600;
	id[26624] = 368, st[368] = 26624;
	id[27648] = 369, st[369] = 27648;
	id[28672] = 370, st[370] = 28672;
	id[29696] = 371, st[371] = 29696;
	id[30720] = 372, st[372] = 30720;
	id[31744] = 373, st[373] = 31744;
}

void Init() {
	cnt = 374;
	Init0();
	for (int i = 0; i < cnt; ++i) {
		Basis si = Basis(st[i]);
		for (int j = 0; j < cnt; ++j) {
			Basis sj = Basis(st[j]);
			int chk = 1;
			for (int k = 0; k < 5; ++k) {
				if (!si.A[k]) continue;
				int ok = sj.Insert(si.A[k]);
				if (!ok) { chk = 0; break; }
			}
			if (!chk) comb[i][j] = -1;
			else comb[i][j] = id[sj.toInt()];
		}
	}
}

#define fi first
#define se second
const int MN = 1000005;

int N, M;
vector<pair<int, int>> G[MN];
int uid[MN], cyw[MN], C;
Basis B[MN]; int rel[MN];

int vis[MN], xorv[MN], dfn[MN], dfc;
void DFS(int u, int c, int pa) {
	dfn[u] = ++dfc;
	vis[u] = c;
	for (auto e : G[u]) {
		int v = e.fi, w = e.se;
		if (!vis[v]) xorv[v] = xorv[u] ^ w, /*printf("%d -> %d\n", u, v), */DFS(v, c, u);
		else if (v != 1 && v != pa && dfn[v] < dfn[u]) rel[c] |= !B[c].Insert(xorv[v] ^ xorv[u] ^ w)/*, printf("B[%d] . %d (%d -> %d)\n", c, xorv[v] ^ xorv[u] ^ w, u, v)*/;
	}
}

int dp[374], pd[374];

typedef long long LL;
const int Mod = 1000000007;
inline void Add(int &x, LL y) { (x += y) %= Mod; }

int main() {
	Init();
	scanf("%d%d", &N, &M);
	for (int i = 1; i <= M; ++i) {
		int u, v, w;
		scanf("%d%d%d", &u, &v, &w);
		G[u].push_back({v, w});
		G[v].push_back({u, w});
	}
	vis[1] = -1;
	for (auto e : G[1]) {
		int v = e.fi, w = e.se;
		if (!vis[v]) uid[++C] = v, cyw[C] = w, DFS(v, C, 1);
		else {
			int vv = uid[vis[v]];
			for (auto e2 : G[v]) if (e2.fi == vv) { cyw[vis[v]] = -1 - (cyw[vis[v]] ^ w ^ e2.se); break; }
		}
	}
	for (int i = 1; i <= C; ++i)
		if (cyw[i] < 0) cyw[i] = -1 - cyw[i];
		else cyw[i] = -1;
	dp[0] = 1;
	for (int i = 1; i <= C; ++i) {
//		printf("%d %d %d\n", uid[i], cyw[i], rel[i]);
//		B[i].Print();
		if (rel[i]) continue;
		for (int S = 0; S < cnt; ++S) pd[S] = 0;
		if (cyw[i] == -1) {
			int T = id[B[i].toInt()];
			for (int S = 0; S < cnt; ++S) {
				if (!dp[S]) continue;
				Add(pd[S], dp[S]);
				if (comb[S][T] != -1) Add(pd[comb[S][T]], dp[S]);
			}
		} else {
			int T1 = id[B[i].toInt()];
			Basis Tmp = B[i];
			int ok = Tmp.Insert(cyw[i]);
			int T2 = id[Tmp.toInt()];
			for (int S = 0; S < cnt; ++S) {
				if (!dp[S]) continue;
				Add(pd[S], dp[S]);
				if (comb[S][T1] != -1) {
					Add(pd[comb[S][T1]], dp[S] * 2 % Mod);
					if (ok && comb[S][T2] != -1) {
						Add(pd[comb[S][T2]], dp[S]);
					}
				}
			}
		}
		swap(dp, pd);
	}
	int Ans = 0;
	for (int i = 0; i < cnt; ++i) Add(Ans, dp[i]);
	printf("%d\n", Ans);
	return 0;
}