/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n, r, ind, mx;

int main() {
    fast_io;

    cin >> n >> r;
    for (ll i = 1; i <= r; i++) {
        if (__gcd(i, r) != 1) continue;
        ll A = r, B = i, cnt = 0, sum = 0;
        while (B != 0) {
            cnt++;
            if (B == 1 && A > 1) {
                sum += A - 1;
                A = 1;
                continue;
            }
            sum += A / B;
            A %= B;
            swap(A, B);
        }
        if (sum != n) continue;
        if (cnt > mx) {
            mx = cnt;
            ind = i;
        }
    }
    if (mx == 0) return cout << "IMPOSSIBLE" << endl, 0;
    vector<ll> ans;
    ll A = r, B = ind;
    while (B != 0) {
        if (B == 1 && A > 1) {
            ans.push_back(A - 1);
            A = 1;
            continue;
        }
        ans.push_back(A / B);
        A %= B;
        swap(A, B);
    }
    cout << n - ans.size() << endl;
    reverse(all(ans));
    for (ll i = 0; i < ans.size(); i++) {
        cout << string(ans[i], (i % 2 == 0 ? 'T' : 'B'));
    }

    return 0;
}
/*

*/