/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

// Actual solution is at the bottom

#include <algorithm>
#include <array>
#include <bitset>
#include <cassert>
#include <climits>
#include <cstdint>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <memory>
#include <numeric>
#include <queue>
#include <random>
#include <set>
#include <stack>
#include <string>
#include <unordered_set>
#include <unordered_map>
#include <vector>
//#include "../atcoder/all"

#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()

using namespace std;

typedef int64_t int64;
typedef pair<int, int> ii;
constexpr int INF = (int) 1e9;

void updMax(int& x, int y) {
  if (y < -INF / 2) return;
  x = max(x, y);
}

void updMin(int& x, int y) {
  if (y > INF / 2) return;
  x = min(x, y);
}

struct MaxFenwick {
  vector<int> a;

  explicit MaxFenwick(int n) : a(n, -INF) {}

  void upd(int at, int by) {
    while (at < a.size()) {
      updMax(a[at], by);
      at |= at + 1;
    }
  }

  int get(int upto) {
    int res = -INF;
    while (upto >= 0) {
      updMax(res, a[upto]);
      upto = (upto & (upto + 1)) - 1;
    }
    return res;
  }
};

class HPremiyaTyuringa {
 public:
  void solveOne() {
    int n;
    cin >> n;
    vector<int> a(n);
    for (auto& x : a) {
      cin >> x;
      --x;
    }
    reverse(all(a));
    vector<int> where(n);
    for (int i = 0; i < n; ++i) where[a[i]] = i;
    int res = 1;
    for (int take0 = 0; take0 < 2; ++take0) {
      vector<vector<int>> bestGivenLeft(2, vector<int>(n, INF));
      vector<vector<int>> bestGivenRight(2, vector<int>(n, -INF));
      if (take0) {
        bestGivenLeft[1][a[0]] = a[0];
        bestGivenRight[1][a[0]] = a[0];
      }
      for (int len = 2;; ++len) {
        bestGivenLeft.emplace_back(n, INF);
        bestGivenRight.emplace_back(n, -INF);
        if (len == 2 && !take0) {
          for (int i = 1; i < n; ++i) {
            bestGivenLeft[len][a[i]] = a[i];
            bestGivenRight[len][a[i]] = a[i];
          }
        } else {
          MaxFenwick maxOverLeft(n);
          MaxFenwick maxOverLeftSwap(n);
          MaxFenwick maxOverRight(n);
          MaxFenwick maxOverRightSwap(n);
          for (int i = 1; i < n; ++i) {
            {
              int j = i - 1;
              maxOverLeft.upd(n - 1 - a[j], -bestGivenLeft[len - 1][a[j]]);
              maxOverRight.upd(a[j], bestGivenRight[len - 1][a[j]]);
            }
            {
              int j = i - len + 1;
              if (j >= 0) {
                if (bestGivenRight[len - 1][a[j]] > -INF / 2) {
                  maxOverLeftSwap.upd(n - 1 - bestGivenRight[len - 1][a[j]], -a[j]);
                }
                if (bestGivenLeft[len - 1][a[j]] < INF / 2) {
                  maxOverRightSwap.upd(bestGivenLeft[len - 1][a[j]], a[j]);
                }
              }
            }
            updMin(bestGivenLeft[len][a[i]], -maxOverLeft.get(n - 1 - a[i]));
            updMin(bestGivenLeft[len][a[i]], -maxOverLeftSwap.get(n - 1 - a[i]));
            updMax(bestGivenRight[len][a[i]], maxOverRight.get(a[i]));
            updMax(bestGivenRight[len][a[i]], maxOverRightSwap.get(a[i]));
          }
        }
        bool any = false;
        for (int x : bestGivenLeft[len]) if (x < INF) {
          res = max(res, len - (1 - take0));
          any = true;
        }
        for (int x : bestGivenRight[len]) if (x > -INF) {
          res = max(res, len - (1 - take0));
          any = true;
        }
        if (!any) break;

      }
    }
    cout << res << "\n";
  }

  void solve() {
    int nt;
    cin >> nt;
    for (int it = 0; it < nt; ++it) {
      solveOne();
    }
  }
};


int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(0);
    HPremiyaTyuringa solver;


    solver.solve();
    return 0;
}