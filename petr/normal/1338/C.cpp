/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <vector>
#include <utility>
#include <iostream>
#include <cmath>
#include <algorithm>
#include <set>
#include <string>
#include <cassert>

#define pb push_back
#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()
#define mp make_pair

using namespace std;

typedef long long int64;
typedef vector<int> vi;
typedef pair<int, int> ii;

class TaskC {
 public:
  string tobinary(int a) {
    string res = "";
    while (a > 0) {
      res = (char) ('0' + (a % 2)) + res;
      a /= 2;
    }
    return res;
  }

  int64 encode(int64 x) {
    int64 res = 0;
    int64 pow = 1;
    while (x > 0) {
      int64 digit = x % 4;
      x /= 4;
      int y;
      switch (digit) {
        case 0:
          y = 0;
          break;
        case 1:
          y = 2;
          break;
        case 2:
          y = 3;
          break;
        case 3:
          y = 1;
          break;
        default:
          assert(false);
      }
      res += y * pow;
      pow *= 4;
    }
    return res;
  }

  void solveOne(istream &in, ostream &out) {
    int64 n;
    in >> n;
    /*set<int> s;
    for (int a = 1;; ++a) if (s.count(a) == 0) {
      for (int b = a + 1;; ++b) if (s.count(b) == 0) {
        int c = a ^ b;
        if (s.count(c) == 0) {
          s.insert(a);
          s.insert(b);
          s.insert(c);
          cout << tobinary(a) << " " << tobinary(b) << " " << tobinary(c) << endl;
          break;
        }
      }
    }*/
    --n;
    int64 block = n / 3;
    int offset = n % 3;
    for (int size = 0;; ++size) {
      int64 first = int64(1) << (2 * size);
      int64 last = first * 2;
      int64 count = last - first;
      if (block >= count) {
        block -= count;
        continue;
      }
      vector<int64> which(3);
      which[0] = first + block;
      which[1] = first * 2 + encode(block);
      which[2] = which[0] ^ which[1];
      out << which[offset] << "\n";
      break;
    }
  }

  void solve(std::istream &in, std::ostream &out) {
    int nt;
    in >> nt;
    for (int it = 0; it < nt; ++it) {
      solveOne(in, out);
    }
  }
};


int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  TaskC solver;
  std::istream& in(std::cin);
  std::ostream& out(std::cout);
  solver.solve(in, out);
  return 0;
}