/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e3 + 10;
const ll LOG = 22;
const ll INF = 4e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n, m, C1, L[MAXN], R[MAXN], C[MAXN][MAXN];
ld dp[MAXN][MAXN];
vector<ll> A[MAXN], vec;

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    cout << fixed << setprecision(20);

    for (ll i = 0; i < MAXN; i++) C[i][0] = 1;
    for (ll i = 1; i < MAXN; i++) {
        for (ll j = 1; j < MAXN; j++) C[i][j] = min(INF, C[i - 1][j] + C[i - 1][j - 1]);
    }

    cin >> n >> m;
    for (ll i = 1; i <= m; i++) {
        ll k;
        cin >> k;
        for (ll j = 0; j < k; j++) {
            ll x;
            cin >> x;
            A[i].push_back(x);
            vec.push_back(x);
        }
    }
    sort(all(vec), greater<ll>());

    for (ll i = 1; i <= m; i++) {
        for (ll j : A[i]) {
            if (j > vec[n - 1]) L[i]++, C1++;
            if (j >= vec[n - 1]) R[i]++;
        }
    }

    ll cnt = 0;
    dp[0][0] = 1;
    for (ll i = 1; i <= m; i++) {
        if (L[i] != R[i]) cnt++;
        for (ll j = 0; j <= cnt; j++) {
            if (L[i] == R[i]) {
                dp[i][j] = dp[i - 1][j];
                continue;
            }
            if (j != 0) dp[i][j] += dp[i - 1][j - 1] * ld(j) / ld(cnt) * ld(R[i]) / ld(SZ(A[i]) - L[i]);
            if (j != cnt) dp[i][j] += dp[i - 1][j] * ld(cnt - j) / ld(cnt);
        }
        for (ll j = 0; j <= cnt; j++) {
            dp[i][j] /= C[SZ(A[i])][L[i]];
        }
    }
    cout << dp[m][n - C1] << endl;

    return 0;
}
/*

*/