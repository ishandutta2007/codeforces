/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Azat Ismagilov
 */

#include <bits/stdc++.h>

#define int long long
#define fs first
#define sc second
#define pb push_back
#define mp make_pair
#define len(v) ((int)v.size())
#define vc vector
#define pr pair
#define all(v) v.begin(), v.end()

using namespace std;

typedef long long ll;
typedef long double ld;


class TaskE {
public:
	void solve(std::istream& in, std::ostream& out) {
		int n, c;
		in >> n >> c;
		vc<int> a(n);
		vc<int> pref(n + 1);
		int maxi = 0;
		for (int i = 0; i < n; i++){
			in >> a[i];
			maxi = max(maxi, a[i]);
			pref[i + 1] = pref[i];
			if (a[i] == c){
				pref[i + 1]++;
			}
		}
		vc<vc<int>> kek(maxi + 1);
		for (int i = 0; i < n; i++){
			kek[a[i]].pb(i);
		}
		int ans = pref[n];
		for (int ii = 0; ii < maxi + 1; ii++){
			if (ii == c || len(kek[ii]) == 0){
				continue;
			}
			int sum = 1;
			ans = max(ans, pref[n] + sum);
			for (int i = 1; i < len(kek[ii]); i++){
				if (sum <= 0){
					sum = 1;
				}
				sum++;
				sum -= pref[kek[ii][i] + 1] - pref[kek[ii][i - 1]];
				ans = max(ans, pref[n] + sum);
			}
		}
		out << ans;
	}
};


main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
	TaskE solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}