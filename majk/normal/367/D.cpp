/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Majk
 */

#include <vector>
#include <iostream>
#include <unordered_map>
#include <map>
#include <iomanip>
#include <set>
#include <functional>
#include <fstream>
#include <algorithm>
#include <cassert>
#include <cmath>
#include <string>
#include <sstream>
#include <queue>
using namespace std;

#define x first
#define y second
constexpr int MOD = 1000000007;

typedef std::pair<int,int> pii;
typedef long long ll;
typedef unsigned int ui;

template<typename T>std::istream&operator>>(std::istream&i,vector<T>&t) {for(auto&v:t){i>>v;}return i;}
template<typename T>std::ostream&operator<<(std::ostream&o,const vector<T>&t) {for(size_t i=0;i<t.size();++i){o<<t[i]<<" \n"[i == t.size()-1];}return o;}
template<typename T> using minheap = priority_queue<T, vector<T>, greater<T>>;
template<typename T> using maxheap = priority_queue<T, vector<T>, less<T>>;

int logceil(ll x) {int b=0;while(x){x>>=1;++b;}return b;}

namespace std {
    template<typename T,typename U>struct hash<pair<T,U>>{hash<T>t;hash<U>u;size_t operator()(const pair<T,U>&p)const{return t(p.x)^(u(p.y)<<7);}};
}
template<typename T,typename F>T bsh(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){l=m+1;r=m;}else{h=m-1;}}return r;}
template<typename T,typename F>T bsl(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){h=m-1;r=m;}else{l=m+1;}}return r;}
template<typename T> T gcd(T a,T b) { if (a<b) swap(a,b); return b?gcd(b,a%b):a; }

template<typename T>class vector2:public vector<vector<T>>{public:vector2(){} vector2(size_t a,size_t b,T t=T()):vector<vector<T>>(a,vector<T>(b,t)){}};
template<typename T>class vector3:public vector<vector<vector<T>>>{public:vector3(){} vector3(size_t a,size_t b,size_t c,T t=T()):vector<vector<vector<T>>>(a,vector<vector<T>>(b,vector<T>(c,t))){}};
// #include "../l/mod.h"

class TaskD {
public:
    void solve(istream& cin, ostream& cout) {
		int N, M, D; cin >> N >> M >> D;
		if (D==1) { cout << M << endl; return; }
		vector<int> A(N);
		for (int i = 0; i < M; ++i) {
			int q; cin >> q;
			for (int j = 0; j < q; ++j) {
				int a; cin >> a; A[a-1] = i;
			}
		}

		vector<int> C(M, 0);
		vector<bool> U(1<<M, false);
		int mask = 0;
		for (int i = 0; i < N; ++i) {
			if (!C[A[i]]++) mask ^= 1<<A[i];
			if (i >= D && !--C[A[i-D]]) mask ^= 1<<A[i-D];
			if (i >= D-1) {
				cerr << mask << endl;
				U[mask] = true;
			}
		}

		vector<int> R;
		for (int m = 0; m < (1<<M); ++m) {
			bool child = false;
			for (int i = 0; i < M; ++i) {
				child |= ((m & (1<<i)) && U[m ^ (1<<i)]);
			}
			if (child) {
				U[m] = true;
			} else if (U[m]) {
				R.push_back(m);
			}
		}

		random_shuffle(R.begin(),R.end());

		int ans = M;
		for (int i = 1; i < (1<<M); ++i) {
			int p = __builtin_popcount(i);
			if (p >= ans) continue;

			bool ok = true;
			for (int r:R) if ((r&i) == 0) {ok=false;break;}
			if (ok) ans = p;
		}
		cout << ans << endl;

    }
};


int main() {
	ios_base::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr);
	TaskD solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}