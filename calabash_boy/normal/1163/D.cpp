/* Generated by powerful Codeforces Tool
 * Author: calabash_boy_love_15 
 * Time: 2019-05-15 10:26:13
 * Personal Code Template: https://github.com/4thcalabash/ACM-Code-Library
**/
#pragma GCC optimize(3)
#include <bits/stdc++.h>
using namespace std;
#ifdef __LOCAL_DEBUG__
# define _debug(fmt, ...) fprintf(stderr, "\033[91m[%s %3d]: " fmt "\n\033[0m", \
  __func__,__LINE__, ##__VA_ARGS__)
#else
# define _debug(...) (void(0))
#endif
#define PB(x) push_back(x)
#define rep(i,l,r) for (int i = l,_ = r;i< _;i++)
#define REP(i,l,r) for (int i=l,_=r;i<=_;i++)
#define leave(x) do {cout<<#x<<endl;fflush(stdout);return 0;}while (0);
#define untie do{ios::sync_with_stdio(false);cin.tie(nullptr);cout.tie(nullptr);}while (0)
#define range(x) x.begin(),x.end()
typedef long long LL;
typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef long double db;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;
const int inf = 0x3f3f3f3f;
const ll inf_ll = 0x3f3f3f3f3f3f3f3fLL;
/************* header ******************/
const int maxn = 1e3+ 100;
struct KMP{
    int nxt[maxn];
    char *s;
    int n;
    void init(char *s,int n){
        this->s = s;
        this->n = n;
        nxt[0] = nxt[1] = 0;
        for (int i=2;i<=n;i++){
            nxt[i] = nxt[i-1];
            while (nxt[i] && s[nxt[i] + 1] != s[i])nxt[i]=nxt[nxt[i]];
            nxt[i] += s[nxt[i] + 1] == s[i];
        }
    }
    int get(int now,int ch){
        while (now && s[now + 1] != ch)now = nxt[now];
        now += s[now+1] == ch;
        if (now == n)now = nxt[now];
        return now;
    }
}ks,kt;
int dp[maxn][55][55];
char s[maxn];
char t[maxn];
char c[maxn];
int ls,lt,lc;
int main(){
    cin>>c + 1>>s + 1>>t + 1;
    ls = strlen(s + 1);
    lt = strlen(t + 1);
    lc = strlen(c + 1);
    ks.init(s,ls);
    kt.init(t,lt);
    memset(dp,-inf,sizeof dp);
    dp[0][0][0] = 0;
    for (int ic = 0;ic < lc;ic++){
        for (int is = 0;is < ls;is ++){
            for (int it = 0;it < lt;it ++){
                if (dp[ic][is][it] == -inf)continue;
                int dp_now = dp[ic][is][it];
                char ch_c_low = c[ic+1]== '*'?'a':c[ic+1];
                char ch_c_high = c[ic+1]=='*'?'z':c[ic+1];
                for (int chc = ch_c_low;chc <= ch_c_high;chc++){
                    int poss = ks.get(is,chc);
                    int post = kt.get(it,chc);
                    int dp_nxt = dp_now;
                    if (is == ls -1 && s[ls] == chc)dp_nxt ++;
                    if (it == lt -1 && t[lt] == chc)dp_nxt --;
                    dp[ic+1][poss][post] = max(dp[ic+1][poss][post],dp_nxt);
                }
            }
        }
    }
    int ans = -inf;
    for (int is=0;is < ls;is ++){
        for (int it = 0;it < lt;it ++){
            ans = max(ans,dp[lc][is][it]);
        }
    }
    assert(ans != inf);
    cout<<ans<<endl;
    return 0;
}