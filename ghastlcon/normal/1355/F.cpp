#pragma GCC optimize("Ofast,inline,unroll-loops,fast-math")
#include <iostream>
#include <algorithm>
#include <cstdio>
#define N 168
using namespace std;

const int p[N] = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997};

long long Query(long long x)
{
    long long o;

    cout << "? " << x << endl;
    cout.flush();
    cin >> o;

    return o;
}

void Answer(int x)
{
    cout << "! " << x << endl;
    cout.flush();

    return;
}

int main(void)
{
    int t;
    int i, j, k[2], o, c;
    long long s, v, x, y;

    scanf("%d", &t);
    while(t --)
    {
        try
        {
            for(i = c = 0, o = 1; i < N; i = j)
            {
                for(j = i, s = 1; j < N; j ++)
                {
                    if((long double)s * p[j] > 1000000000000000000)
                        break;
                    s *= p[j];
                }

                v = Query(s);
                if(++ c == 22)
                    throw 0;
                for(k[0] = i; k[0] < j; k[0] ++)
                    if(!(v % p[k[0]]))
                    {
                        for(k[1] = k[0] + 1; k[1] < j; k[1] ++)
                            if(!(v % p[k[1]]))
                            {
                                for(x = 1; x * p[k[0]] <= 1000000000; x *= p[k[0]])
                                    ;
                                for(y = 1; y * p[k[1]] <= 1000000000; y *= p[k[1]])
                                    ;
                                s = Query(x * y);
                                for(x = 0; !(s % p[k[0]]); x ++)
                                    s /= p[k[0]];
                                for(y = 0; !(s % p[k[1]]); y ++)
                                    s /= p[k[1]];
                                o *= (x + 1) * (y + 1);

                                break;
                            }
                        if(k[1] == j)
                        {
                            for(x = 1; x * p[k[0]] <= 1000000000; x *= p[k[0]])
                                ;
                            s = Query(x);
                            for(x = 0; !(s % p[k[0]]); x ++)
                                s /= p[k[0]];
                            o *= x + 1;
                        }
                        else
                            k[0] = k[1];

                        if(++ c == 22)
                            throw 0;
                    }
            }
        }
        catch(...)
        {
            Answer(o * 2);
        }
    }

    return 0;
}