/* Generated by powerful Codeforces Tool
 * Author: calabash_boy_love_15 
 * Time: 2019-05-02 22:08:20
 * Personal Code Template: https://github.com/4thcalabash/ACM-Code-Library
**/
#pragma GCC optimize(3)
#include <bits/stdc++.h>
using namespace std;
#ifdef __LOCAL_DEBUG__
# define _debug(fmt, ...) fprintf(stderr, "\033[91m[%s %3d]: " fmt "\n\033[0m", \
  __func__,__LINE__, ##__VA_ARGS__)
#else
# define _debug(...) (void(0))
#endif
#define PB(x) push_back(x)
#define rep(i,l,r) for (int i = l,_ = r;i< _;i++)
#define REP(i,l,r) for (int i=l,_=r;i<=_;i++)
#define leave(x) do {cout<<#x<<endl;fflush(stdout);return 0;}while (0);
#define untie do{ios::sync_with_stdio(false);cin.tie(nullptr);cout.tie(nullptr);}while (0)
#define range(x) x.begin(),x.end()
typedef long long LL;
typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef long double db;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;
const int inf = 0x3f3f3f3f;
const ll inf_ll = 0x3f3f3f3f3f3f3f3fLL;
/************* header ******************/
const int maxn = 2e5+ 100;
char s[maxn];
int sum[maxn];
int n,q;
struct Segment_Tree{
    int Min[maxn*4];
    int Max[maxn*4];
    int PMax[maxn*4];
    int SMax[maxn*4];
    int AMax[maxn*4];
    int lazy[maxn*4];
    void up(int x){
        int lson = x<<1;
        int rson = lson|1;
        Min[x] = min(Min[lson],Min[rson]);
        Max[x] = max(Max[lson],Max[rson]);
        AMax[x] = max(SMax[lson] + Max[rson],PMax[rson] + Max[lson]);
        AMax[x] = max(max(AMax[lson],AMax[rson]),AMax[x]);
        PMax[x] = max(max(PMax[lson],PMax[rson]),Max[rson] - 2 * Min[lson]);
        SMax[x] = max(max(SMax[lson],SMax[rson]),Max[lson] - 2 * Min[rson]);
    }
    void down(int x){
        int lson = x<<1;
        int rson = lson|1;
        affect(lson,lazy[x]);
        affect(rson,lazy[x]);
        lazy[x]= 0;
    }
    void affect(int x,int val){
        lazy[x] += val;
        Min[x] += val;
        Max[x] += val;
       // AMax[x] -= val;
        PMax[x] -= val;
        SMax[x] -= val;
    }
    void build(int x,int l,int r){
        if(l == r){
            AMax[x] = 0;
            Min[x] = Max[x] = sum[l];
            PMax[x] = SMax[x] = -sum[l];
            return;
        }
        int mid = l + r >> 1;
        build(x<<1,l,mid);
        build(x<<1|1,mid+1,r);
        up(x);
    }
    void update(int x,int l,int r,int L,int R,int val){
        if (l > R || L > r)return;
        if (L <= l && r <= R){
           affect(x,val);
           return;
        }
        int mid = l + r >> 1;
        down(x);
        update(x<<1,l,mid,L,R,val);
        update(x<<1|1,mid+1,r,L,R,val);
        up(x);
    }
    int query(){
        return AMax[1];
    }
    void debug(int x,int l,int r){
        _debug("x=%d l=%d r=%d",x,l,r);
        _debug("Max=%d Min=%d PMax=%d SMax=%d AMax=%d",Max[x],Min[x],PMax[x],SMax[x],AMax[x]);
        if (l == r)return;
        int mid = l + r >> 1;
        down(x);
        debug(x<<1,l,mid);
        debug(x<<1|1,mid+1,r);
    }
}segtree;

int main(){
   
    scanf("%d%d",&n,&q);
    scanf("%s",s+1);
    n <<= 1;
    n-= 2;
    for (int i=1;i<=n;i++){
        sum[i] = sum[i-1];
        sum[i] += s[i] == '('?1:-1;
    }
    //for (int i=1;i<=n;i++){
    //    printf("sum[%d]=%d\n",i,sum[i]);
    //}
    segtree.build(1,0,n);
    printf("%d\n",segtree.query());
    while (q--){
        //_debug("here debug");
        //segtree.debug(1,0,n);
        int a,b;
        scanf("%d%d",&a,&b);
        if (a > b)swap(a,b);
        if (s[a] == s[b]){
            //_debug("a == b");
            printf("%d\n",segtree.query());
            continue;
        }
        if (s[a] == '('){
           // _debug("[%d,%d]-2",a,b-1);
            segtree.update(1,0,n,a,b-1,-2);
            s[a] = ')';
            s[b] = '(';
        }else{
           // _debug("[%d,%d]+2",a,b-1);
            segtree.update(1,0,n,a,b-1,2);
            s[a] = '(';
            s[b] = ')';
        }
        printf("%d\n",segtree.query());
    }
    return 0;
}