/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

set_random;

const ll MAXN = 2e5 + 1;
const ll MAXA = 101;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n , q , l , r , x , y , a[MAXN];

struct Node{
    unsigned char val[MAXA];
    Node(){
        for(ll i = 1 ; i < MAXA ; i++)  val[i] = i;
    }
};

template<class T , ll N>
struct LazySegTree {
    T seg[4 * N];

    void Shift(ll id, ll l, ll r) {
        if (l != r) {
            for(ll i = 1 ; i < MAXA ; i++){
                seg[id << 1].val[i] = seg[id].val[seg[id << 1].val[i]];
                seg[id << 1 | 1].val[i] = seg[id].val[seg[id << 1 | 1].val[i]];
            }
            seg[id] = T();
        }
    }

    void Update(ll id, ll l, ll r, ll ql, ll qr, ll x , ll y) {
        if (qr < l || r < ql)  return;
        if (ql <= l && r <= qr) {
            for(ll i = 1 ; i < MAXA ; i++){
                if(seg[id].val[i] == x) seg[id].val[i] = y;
            }
            return;
        }

        Shift(id, l, r);
        ll mid = (l + r) >> 1;
        Update(id << 1, l, mid, ql, qr, x , y);
        Update(id << 1 | 1, mid + 1, r, ql, qr, x , y);
    }

    void Print(ll id , ll l , ll r , ll ql , ll qr){
        Shift(id , l , r);
        if(r < ql || qr < l) return;
        if(l == r){
            printf("%d " , ll(seg[id].val[a[l]]));
            return;
        }

        ll mid = (l + r) >> 1;
        Print(id << 1 , l , mid , ql , qr);
        Print(id << 1 | 1 , mid + 1 , r , ql , qr);
    }

    void update(ll ql, ll qr, ll x , ll y) {
        Update(1, 0, N - 1, ql, qr, x , y);
    }
    void print(ll ql , ll qr){
        Print(1 , 0 , N - 1 , ql , qr);
    }
};

LazySegTree<Node , MAXN> seg;

int main() {
    //fast_io;

    scanf("%d" , &n);
    for(ll i = 1 ; i <= n ; i++)    scanf("%d" , a + i);
    scanf("%d" , &q);
    while(q--){
        scanf("%d%d%d%d" , &l , &r , &x , &y);
        seg.update(l , r , x , y);
    }
    seg.print(1 , n);

    return 0;
}
/*

*/