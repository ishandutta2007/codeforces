/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e3 + 10;
const ll MAXM = 6e6 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 998244353; // 1e9 + 9;

ll n, m, mn = INF, cntX, dist[MAXM], dist2[MAXM];
string s[MAXM];

ll ind(ll x, ll y) {
    return x * (m + 3) + y;
}

void BFS() {
    queue<ll> q;
    fill(dist, dist + MAXM, INF);
    for (ll i = 0; i <= n + 1; i++) {
        for (ll j = 0; j <= m + 1; j++) {
            if (s[i][j] == 'X') continue;
            q.push(i), q.push(j), dist[ind(i, j)] = 0;
        }
    }

    while (!q.empty()) {
        ll x = q.front();
        q.pop();
        ll y = q.front();
        q.pop();

        for (ll i = -1; i <= 1; i++) {
            for (ll j = -1; j <= 1; j++) {
                ll nx = x + i, ny = y + j;
                if (nx < 0 || nx > n + 1 || ny < 0 || ny > m + 1) continue;
                if (dist[ind(nx, ny)] == INF) {
                    dist[ind(nx, ny)] = dist[ind(x, y)] + 1;
                    q.push(nx);
                    q.push(ny);
                }
            }
        }
    }
}

ll check(ll Ax) {
    queue<ll> q;
    fill(dist2, dist2 + MAXM, INF);
    for (ll i = 0; i <= n + 1; i++) {
        for (ll j = 0; j <= m + 1; j++) {
            if (dist[ind(i, j)] > Ax) {
                dist2[ind(i, j)] = 0;
                q.push(i);
                q.push(j);
            }
        }
    }

    ll cnt = 0;
    while (!q.empty()) {
        ll x = q.front();
        q.pop();
        ll y = q.front();
        q.pop();
        cnt++;
        if (dist2[ind(x, y)] == Ax) continue;

        for (ll i = -1; i <= 1; i++) {
            for (ll j = -1; j <= 1; j++) {
                ll nx = x + i, ny = y + j;
                if (nx < 0 || nx > n + 1 || ny < 0 || ny > m + 1) continue;
                if (dist2[ind(nx, ny)] == INF) {
                    dist2[ind(nx, ny)] = dist2[ind(x, y)] + 1;
                    q.push(nx);
                    q.push(ny);
                }
            }
        }
    }
    return cnt == cntX;
}

int main() {
    fast_io;

    cin >> n >> m;
    s[0] = s[n + 1] = string(m + 2, '.');
    for (ll i = 1; i <= n; i++) cin >> s[i], s[i] = "." + s[i] + ".";

    BFS();

    for (ll i = 1; i <= n; i++) {
        for (ll j = 1; j <= m; j++) {
            if (s[i][j] == '.') continue;
            cntX++;
        }
    }

    ll l = 0, r = n + m + 10;
    while (r - l > 1) {
        ll mid = (l + r) / 2;
        if (check(mid)) l = mid;
        else r = mid;
    }

    cout << l << endl;
    for (ll i = 1; i <= n; i++) {
        for (ll j = 1; j <= m; j++) {
            if (s[i][j] == '.') {
                cout << '.';
                continue;
            }
            if (s[i][j] == 'X' && dist[ind(i, j)] > l) cout << 'X';
            else cout << '.';
        }
        cout << endl;
    }

    return 0;
}
/*

*/