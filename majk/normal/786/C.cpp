/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Majk
 */

#include <vector>
#include <iostream>
#include <unordered_map>
#include <map>
#include <iomanip>
#include <set>
#include <functional>
#include <fstream>
#include <algorithm>
#include <cassert>
#include <cmath>
#include <string>
#include <sstream>
#include <queue>
using namespace std;

#define x first
#define y second
constexpr int MOD = 1000000007;

typedef std::pair<int,int> pii;
typedef long long ll;
typedef unsigned int ui;

template<typename T>std::istream&operator>>(std::istream&i,vector<T>&t) {for(auto&v:t){i>>v;}return i;}
template<typename T>std::ostream&operator<<(std::ostream&o,const vector<T>&t) {for(size_t i=0;i<t.size();++i){o<<t[i]<<" \n"[i == t.size()-1];}return o;}

namespace std {
    template<typename T,typename U>struct hash<pair<T,U>>{hash<T>t;hash<U>u;size_t operator()(const pair<T,U>&p)const{return t(p.x)^(u(p.y)<<7);}};
}
template<typename T,typename F>T bsh(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){l=m+1;r=m;}else{h=m-1;}}return r;}
template<typename T,typename F>T bsl(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){h=m-1;r=m;}else{l=m+1;}}return r;}
template<typename T> T gcd(T a,T b) { if (a<b) swap(a,b); return b?gcd(b,a%b):a; }

template<typename T>class vector2:public vector<vector<T>>{public:vector2(){} vector2(size_t a,size_t b,T t=T()):vector<vector<T>>(a,vector<T>(b,t)){}};
// #include "../l/mod.h"

class TaskC {
public:
	struct Node {
		int v;
		Node *l, *r;
		int s;
	};

	Node* build(int lo, int hi) {
		if (lo > hi) return nullptr;
		int m = (lo+hi)/2;
		return new Node{m, build(lo, m-1), build(m+1, hi), 0};
	}

	Node* update(Node* x, int v, int a) {
		return new Node{x->v,
					 v < x->v ? update(x->l, v, a) : x->l,
					 v > x->v ? update(x->r, v, a) : x->r,
					 x->s+ (v >= x->v ? a : 0)};
	}

	int query_max(Node* x, int r) {
		if (x->s > r) {
			return x->r ? query_max(x->r, r) : x->v;
		} else {
			return x->l ? query_max(x->l, r - x->s) : x->v - 1;
		}
	}

	void solve(istream& cin, ostream& cout) {
		int N; cin >> N;
		vector<int> C(N+1, -1);
		vector<Node*> T(N+1);
		T[0] = build(1, N);
		for (int i = 0; i < N; ++i) {
			int c; cin >> c;
			if (C[c] == -1) {
				T[i+1] = update(T[i], i+1, 1);
			} else {
				T[i+1] = update(update(T[i], C[c]+1, -1), i+1, 1);
			}
			C[c] = i;
		}

		vector<int> R(N, 0);
		for (int i = 0; i < N; ++i) {
			for (int q = N; q > 0; R[i]++) {
				q = query_max(T[q], i+1);
			}
		}
		cout << R;

	}
};


int main() {
	ios_base::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr);
	TaskC solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}