/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author majk
 */

#ifndef MAJK_LIB
#define MAJK_LIB

#include <vector>
#include <stack>
#include <iostream>
#include <fstream>
#include <unordered_map>
#include <unordered_set>
#include <map>
#include <iomanip>
#include <set>
#include <functional>
#include <algorithm>
#include <numeric>
#include <cassert>
#include <cmath>
#include <string>
#include <queue>
#include <array>
#include <bitset>
using namespace std;

#define x first
#define y second
typedef std::pair<int,int> pii; typedef long long ll; typedef unsigned long long ull; typedef unsigned int ui; typedef pair<ui,ui> puu;

template <typename T, typename U> std::istream&operator>>(std::istream&i, pair<T,U>&p) {i >> p.x >> p.y; return i;}
template<typename T>std::istream&operator>>(std::istream&i,vector<T>&t) {for(auto&v:t){i>>v;}return i;}
template <typename T, typename U> std::ostream&operator<<(std::ostream&o, const pair<T,U>&p) {o << p.x << ' ' << p.y; return o;}
template<typename T>std::ostream&operator<<(std::ostream&o,const vector<T>&t) {if(t.empty())o<<'\n';for(size_t i=0;i<t.size();++i){o<<t[i]<<" \n"[i == t.size()-1];}return o;}
template<typename T> using minheap = priority_queue<T, vector<T>, greater<T>>;
template<typename T> using maxheap = priority_queue<T, vector<T>, less<T>>;
ui logceil(ll x) { return x?8*sizeof(ll)-__builtin_clzll(x):0; }

namespace std { template<typename T,typename U>struct hash<pair<T,U>>{hash<T>t;hash<U>u;size_t operator()(const pair<T,U>&p)const{return t(p.x)^(u(p.y)<<7);}}; }
template<typename T,typename F>T bsh(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){l=m+1;r=m;}else{h=m-1;}}return r;}
template<typename F> double bshd(double l,double h,const F&f,double p=1e-9){ui r=3+(ui)log2((h-l)/p);while(r--){double m=(l+h)/2;if(f(m)){l=m;}else{h=m;}}return (l+h)/2;}
template<typename T,typename F>T bsl(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){h=m-1;r=m;}else{l=m+1;}}return r;}
template<typename F> double bsld(double l,double h,const F&f,double p=1e-9){ui r=3+(ui)log2((h-l)/p);while(r--){double m=(l+h)/2;if(f(m)){h=m;}else{l=m;}}return (l+h)/2;}
template<typename T> T gcd(T a,T b) { if (a<b) swap(a,b); return b?gcd(b,a%b):a; }


template<typename T>class vector2:public vector<vector<T>>{public:vector2(){} vector2(size_t a,size_t b,T t=T()):vector<vector<T>>(a,vector<T>(b,t)){}};
template<typename T>class vector3:public vector<vector2<T>>{public:vector3(){} vector3(size_t a,size_t b,size_t c,T t=T()):vector<vector2<T>>(a,vector2<T>(b,c,t)){}};
template<typename T>class vector4:public vector<vector3<T>>{public:vector4(){} vector4(size_t a,size_t b,size_t c,size_t d,T t=T()):vector<vector3<T>>(a,vector3<T>(b,c,d,t)){}};
template<typename T>class vector5:public vector<vector4<T>>{public:vector5(){} vector5(size_t a,size_t b,size_t c,size_t d,size_t e,T t=T()):vector<vector4<T>>(a,vector4<T>(b,c,d,e,t)){}};


#endif

class BBeingawesomeism {
public:
    void solve(istream& cin, ostream& cout) {
        int T; cin >> T;
        for (int t = 0; t < T; ++t) {
            int R, C; cin >> R >> C;
            vector<string> A(R); cin >> A;
            bool hasA = false, hasP = false;
            for (int r = 0; r < R; ++r) {
                for (int c = 0; c < C; ++c) {
                    if (A[r][c] == 'A') hasA = true;
                    else hasP = true;
                }
            }
            if (!hasA) {
                cout << "MORTAL\n"; continue;
            }
            if (!hasP) {
                cout << 0 << '\n'; continue;
            }

            int ans = 4;

            bool firstRow = true, lastRow = true, firstColumn = true, lastColumn = true;
            bool border = false;
            for (int r = 0; r < R; ++r) {
                firstColumn &= A[r][0] == 'A';
                lastColumn &= A[r][C-1] == 'A';
                border |= A[r][0] == 'A';
                border |= A[r][C-1] == 'A';
            }
            for (int c = 0; c < C; ++c) {
                firstRow &= A[0][c] == 'A';
                lastRow &= A[R-1][c] == 'A';

                border |= A[0][c] == 'A';
                border |= A[R-1][c] == 'A';
            }
            if (firstRow || lastRow || firstColumn || lastColumn) {
                cout << 1 << '\n';
                continue;
            }
            if (A[0][0] == 'A' || A[0][C-1] == 'A' || A[R-1][0] == 'A' || A[R-1][C-1] == 'A') {
                cout << 2 << '\n';
                continue;
            }

            if (border) ans = 3;

            for (int r = 0; r < R; ++r) {
                bool col = true;
                for (int c = 0; c < C; ++c) {
                    col &= A[r][c] == 'A';
                }
                if (col) ans = 2;
            }
            for (int c = 0; c < C; ++c) {
                bool row = true;
                for (int r = 0; r < R; ++r) {
                    row &= A[r][c] == 'A';
                }
                if (row) ans = 2;
            }

//            for (int i = 0; i < 2; ++i) {
//                vector<int> Bot(C, 0), Top(C, 0);
//                for (int c = 0; c < C; ++c) {
//                    while (Bot[c] < C && A[R - 1 - Bot[c]][c] == 'A') ++Bot[c];
//                    while (Top[c] < C && A[Top[c]][c] == 'A') ++Top[c];
//                }
//                for (int c = 1; c < C; ++c) {
//                    Bot[c] = max(Bot[c], Bot[c - 1]);
//                    Top[C - 1 - c] = max(Top[C - 1 - c], Top[C - c]);
//                }
//
//                for (int i = 0; i < C; ++i) {
//                    if (Bot[i] + Top[i] >= R) ans = 2;
//                }
//
//                if (i==1) {
//                    vector<string> W(C, string(R, ' '));
//                    for (int r = 0; r < R; ++r) {
//                        for (int c = 0; c < C; ++c) {
//                            W[c][r] = A[r][c];
//                        }
//                    }
//                    swap(R, C);
//                    swap(W, A);
//                } else {
//                    for (auto&a: A) reverse(a.begin(),a.end());
//                }
//            }

            cout << ans << '\n';
        }
    }
};


int main() {
	ios_base::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr);
	BBeingawesomeism solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
    return 0;
}