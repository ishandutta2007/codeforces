/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
//#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 2e5 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n, h, H[MAXN], par[MAXN], sz[MAXN], mark[MAXN];
vector<ll> adj[MAXN];

ll query1(ll v) {
    ll x;
    cout << "d" << sep << v << endl;
    cin >> x;
    return x;
}

ll query2(ll v) {
    ll x;
    cout << "s" << sep << v << endl;
    cin >> x;
    if (x == -1) assert(0);
    return x;
}

void DFSSize(ll v, ll p = 0) {
    sz[v] = 1;
    for (ll u : adj[v]) if (!mark[u] && u != p) DFSSize(u, v), sz[v] += sz[u];
}

ll centroid(ll v, ll p, ll siz) {
    for (ll u : adj[v]) if (!mark[u] && u != p && sz[u] > siz / 2) return centroid(u, v, siz);
    return v;
}

void DFS(ll v, ll p = 0) {
    par[v] = p;
    H[v] = (p == 0 ? 0 : H[p] + 1);
    for (ll u : adj[v]) if (u != p) DFS(u, v);
}

ll solve(ll v) {
    DFSSize(v);
    if (sz[v] == 1) return v;
    ll cent = centroid(v, 0, sz[v]);
    ll x = query1(cent);
    mark[cent] = 1;
    if (x == 0) return cent;
    if (H[cent] + x == h) return solve(query2(cent));
    return solve(par[cent]);
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    cin >> n;
    for (ll i = 1; i < n; i++) {
        ll v, u;
        cin >> v >> u;
        adj[v].push_back(u);
        adj[u].push_back(v);
    }
    DFS(1);
    h = query1(1);
    ll ans = solve(1);
    cout << "! " << ans << endl;

    return 0;
}
/*

*/