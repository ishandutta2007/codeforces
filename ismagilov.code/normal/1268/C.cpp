/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Azat Ismagilov
 */

#include <fstream>

#include <iostream>
#include <algorithm>
#include <vector>
#include <queue>
#include <numeric>
#include <set>
#include <map>
#include <ext/pb_ds/assoc_container.hpp>

#define int long long
#define ld long double
#define fs first
#define sc second
#define pb push_back
#define ppb pop_back
#define pf push_front
#define ppf pop_front
#define mp make_pair
#define len(v) ((int)v.size())
#define vc vector
#define pr pair
#define all(v) v.begin(), v.end()
//#pragma GCC optimize("Ofast")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,tune=native")
//#pragma GCC optimize("unroll-loops")

using namespace std;
using namespace __gnu_pbds;

typedef tree<
        int,
        null_type,
        less<int>,
        rb_tree_tag,
        tree_order_statistics_node_update>
        ordered_set;

template<typename T, typename U>
inline ostream &operator<<(ostream &_out, const pair<T, U> &_p) {
    _out << _p.first << ' ' << _p.second;
    return _out;
}

template<typename T, typename U>
inline istream &operator>>(istream &_in, pair<T, U> &_p) {
    _in >> _p.first >> _p.second;
    return _in;
}

template<typename T>
inline ostream &operator<<(ostream &_out, const vector<T> &_v) {
    if (_v.empty()) { return _out; }
    _out << _v.front();
    for (auto _it = ++_v.begin(); _it != _v.end(); ++_it) { _out << ' ' << *_it; }
    return _out;
}

template<typename T>
inline istream &operator>>(istream &_in, vector<T> &_v) {
    for (auto &_i : _v) { _in >> _i; }
    return _in;
}

const int MAXN = 3e5;
const int INF = 1e9;
const int MOD = 1e9 + 7;

int tt[MAXN];

int get(int v) {
    int ans = 0;
    for (; v >= 0; v = (v & (v + 1)) - 1) {
        ans += tt[v];
    }
    return ans;
}

void upd(int v, int x) {
    for (; v < MAXN; v = (v | (v + 1))) {
        tt[v] += x;
    }
}

int counts[4 * MAXN];
int suml[4 * MAXN];
int sumr[4 * MAXN];
int obhl[4 * MAXN];
int obhr[4 * MAXN];

void push(int v, int l, int r) {
    if (l != r) {
        obhl[2 * v] += obhl[v];
        obhl[2 * v + 1] += obhl[v];
        obhr[2 * v] += obhr[v];
        obhr[2 * v + 1] += obhr[v];
    }
    suml[v] += obhl[v] * counts[v];
    sumr[v] += obhr[v] * counts[v];
    obhl[v] = 0;
    obhr[v] = 0;
}

int getsuml(int v, int l, int r, int tl, int tr) {
    push(v, l, r);
    if (tl <= l && r <= tr) {
        return suml[v];
    }
    if (r < tl || tr < l) {
        return 0;
    }
    int mid = (l + r) / 2;
    return getsuml(2 * v, l, mid, tl, tr) + getsuml(2 * v + 1, mid + 1, r, tl, tr);
}

int getsumr(int v, int l, int r, int tl, int tr) {
    push(v, l, r);
    if (tl <= l && r <= tr) {
        return sumr[v];
    }
    if (r < tl || tr < l) {
        return 0;
    }
    int mid = (l + r) / 2;
    return getsumr(2 * v, l, mid, tl, tr) + getsumr(2 * v + 1, mid + 1, r, tl, tr);
}

void build(int v, int l, int r) {
    if (l == r) {
        counts[v] = 1;
        return;
    }
    int mid = (l + r) / 2;
    build(2 * v, l, mid);
    build(2 * v + 1, mid + 1, r);
    counts[v] = counts[2 * v] + counts[2 * v + 1];
}

void updates(int v, int l, int r, int poss) {
    push(v, l, r);
    if (l == r && r == poss) {
        counts[v] = 0;
        suml[v] = 0;
        sumr[v] = 0;
        return;
    }
    if (poss < l || r < poss) {
        return;
    }
    int mid = (l + r) / 2;
    updates(2 * v, l, mid, poss);
    updates(2 * v + 1, mid + 1, r, poss);
    counts[v] = counts[2 * v] + counts[2 * v + 1];
    suml[v] = suml[2 * v] + suml[2 * v + 1];
    sumr[v] = sumr[2 * v] + sumr[2 * v + 1];
}

void addleft(int v, int l, int r, int tl, int tr, int addl, int addr) {
    push(v, l, r);
    if (tl <= l && r <= tr) {
        obhl[v] += addl;
        obhr[v] += addr;
        push(v, l, r);
        return;
    }
    if (r < tl || tr < l) {
        return;
    }
    int mid = (l + r) / 2;
    addleft(2 * v, l, mid, tl, tr, addl, addr);
    addleft(2 * v + 1, mid + 1, r, tl, tr, addl, addr);
    suml[v] = suml[2 * v] + suml[2 * v + 1];
    sumr[v] = sumr[2 * v] + sumr[2 * v + 1];
}

class CKTselikhChisel {
public:
    void solve(std::istream &in, std::ostream &out) {
        int n;
        in >> n;
        vc<int> p(n);
        in >> p;
        fill(tt, tt + MAXN, 0);
        int ans = 0;
        vc<int> aa(n);
        vc<int> bb(n);
        vc<int> unpp(n);
        for (int i = n - 1; i >= 0; i--) {
            p[i]--;
            unpp[p[i]] = i;
            bb[p[i]] = get(p[i]);
            upd(p[i], 1);
            ans += bb[p[i]];
        }
        for (int i = n - 1; i >= 0; i--) {
            aa[i] = ans;
            ans -= bb[i];
        }
        ordered_set poses;
        build(1, 0, n - 1);
        for (int i = 0; i < n; i++) {
            int x = unpp[i];
            updates(1, 0, n - 1, x);
            addleft(1, 0, n - 1, x, n - 1, 1, 0);
            addleft(1, 0, n - 1, 0, x, 0, 1);
            poses.insert(x);
            int m = *poses.find_by_order(len(poses) / 2);
            aa[i] += getsuml(1, 0, n - 1, 0, m);
            aa[i] += getsumr(1, 0, n - 1, m, n - 1);
        }
        out << aa;
    }
};


signed main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    CKTselikhChisel solver;
    std::istream &in(std::cin);
    std::ostream &out(std::cout);
    solver.solve(in, out);
    return 0;
}