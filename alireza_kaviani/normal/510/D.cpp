/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 3e2 + 10;
const ll MAXM = 1e5 + 10;
const ll LOG = 10;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n, L[MAXN], C[MAXN], ans = INF, val[MAXN], dp[1 << LOG], dv[MAXM];
vector<ll> primes;

int main() {
    fast_io;

    for (ll i = 2; i < MAXM; i++) {
        if (dv[i] == 0) {
            dv[i] = i;
            for (ll j = i * i; j < MAXM; j += i) dv[j] = i;
            primes.push_back(i);
        }
    }

    cin >> n;
    for (ll i = 1; i <= n; i++) cin >> L[i];
    for (ll i = 1; i <= n; i++) cin >> C[i];

    for (ll i = 1; i <= n; i++) {
        vector<ll> pr;
        ll x = L[i];
        for (ll j : primes) {
            if (x % j == 0) {
                pr.push_back(j);
                while (x % j == 0) x /= j;
            }
        }
        if (x != 1) pr.push_back(x);

        for (ll j = 0; j < (1 << LOG); j++) dp[j] = INF;

        for (ll j = 1; j <= n; j++) {
            val[j] = 0;
            for (ll k = 0; k < pr.size(); k++) {
                if (L[j] % pr[k] == 0) {
                    val[j] += (1 << k);
                }
            }
        }
        dp[(1 << SZ(pr)) - 1] = C[i];

        for (ll j = 1; j <= n; j++) {
            for (ll k = 0; k < (1 << SZ(pr)); k++) {
                dp[k & val[j]] = min(dp[k & val[j]], dp[k] + C[j]);
            }
        }
        ans = min(ans, dp[0]);
    }
    cout << (ans == INF ? -1 : ans) << endl;

    return 0;
}
/*

*/