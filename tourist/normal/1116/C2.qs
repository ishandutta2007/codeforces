namespace Solution {
    open Microsoft.Quantum.Primitive;
    open Microsoft.Quantum.Canon;

    operation Solve (x : Qubit[], y : Qubit) : Unit {
        body (...) {
            let N = Length(x);
            if (N == 2) {
                Controlled X ([x[0], x[N - 1]], y);
                X(x[0]);
                X(x[1]);
                Controlled X ([x[0], x[N - 1]], y);
                X(x[0]);
                X(x[1]);
                X(x[1]);
                X(x[0]);
                X(x[1]);
                X(x[0]);
            }
            if (N == 3) {
                Controlled X ([x[0], x[N - 1]], y);
                X(x[0]);
                X(x[2]);
                Controlled X ([x[0], x[N - 1]], y);
                X(x[0]);
                X(x[2]);
                X(x[2]);
                X(x[0]);
                X(x[1]);
                X(x[0]);
                X(x[2]);
                X(x[0]);
                X(x[1]);
                X(x[0]);
            }
            if (N == 4) {
                Controlled X ([x[0], x[N - 1]], y);
                X(x[0]);
                X(x[3]);
                Controlled X ([x[0], x[N - 1]], y);
                X(x[0]);
                X(x[3]);
                X(x[3]);
                X(x[0]);
                X(x[1]);
                X(x[0]);
                Controlled X (x, y);
                X(x[2]);
                X(x[0]);
                X(x[1]);
                X(x[0]);
                X(x[3]);
                X(x[0]);
                Controlled X (x, y);
                X(x[1]);
                X(x[0]);
                X(x[2]);
                X(x[0]);
                X(x[1]);
                X(x[0]);
            }
            if (N == 5) {
                Controlled X ([x[0], x[N - 1]], y);
                X(x[0]);
                X(x[4]);
                Controlled X ([x[0], x[N - 1]], y);
                X(x[0]);
                X(x[4]);
                X(x[4]);
                X(x[0]);
                X(x[1]);
                X(x[0]);
                Controlled X (x, y);
                X(x[2]);
                Controlled X (x, y);
                X(x[0]);
                X(x[1]);
                X(x[0]);
                X(x[3]);
                X(x[0]);
                X(x[1]);
                X(x[0]);
                X(x[2]);
                X(x[0]);
                X(x[1]);
                X(x[0]);
                X(x[4]);
                X(x[0]);
                Controlled X (x, y);
                X(x[1]);
                X(x[0]);
                X(x[2]);
                X(x[0]);
                X(x[1]);
                Controlled X (x, y);
                X(x[0]);
                X(x[3]);
                X(x[0]);
                X(x[1]);
                X(x[0]);
                X(x[2]);
                X(x[0]);
                X(x[1]);
                X(x[0]);
            }
            if (N == 6) {
                Controlled X ([x[0], x[N - 1]], y);
                X(x[0]);
                X(x[5]);
                Controlled X ([x[0], x[N - 1]], y);
                X(x[0]);
                X(x[5]);
                X(x[5]);
                X(x[0]);
                X(x[1]);
                X(x[0]);
                Controlled X (x, y);
                X(x[2]);
                Controlled X (x, y);
                X(x[0]);
                X(x[1]);
                X(x[0]);
                Controlled X (x, y);
                X(x[3]);
                X(x[0]);
                X(x[1]);
                X(x[0]);
                Controlled X (x, y);
                X(x[2]);
                Controlled X (x, y);
                X(x[0]);
                X(x[1]);
                X(x[0]);
                X(x[4]);
                X(x[0]);
                X(x[1]);
                X(x[0]);
                X(x[2]);
                X(x[0]);
                X(x[1]);
                X(x[0]);
                X(x[3]);
                X(x[0]);
                X(x[1]);
                X(x[0]);
                Controlled X (x, y);
                X(x[2]);
                X(x[0]);
                X(x[1]);
                X(x[0]);
                X(x[5]);
                X(x[0]);
                Controlled X (x, y);
                X(x[1]);
                X(x[0]);
                X(x[2]);
                X(x[0]);
                X(x[1]);
                Controlled X (x, y);
                X(x[0]);
                X(x[3]);
                X(x[0]);
                Controlled X (x, y);
                X(x[1]);
                X(x[0]);
                X(x[2]);
                X(x[0]);
                Controlled X (x, y);
                X(x[1]);
                Controlled X (x, y);
                X(x[0]);
                X(x[4]);
                X(x[0]);
                Controlled X (x, y);
                X(x[1]);
                X(x[0]);
                X(x[2]);
                X(x[0]);
                X(x[1]);
                X(x[0]);
                X(x[3]);
                X(x[0]);
                X(x[1]);
                X(x[0]);
                X(x[2]);
                X(x[0]);
                X(x[1]);
                X(x[0]);
            }
            if (N == 7) {
                Controlled X ([x[0], x[N - 1]], y);
                X(x[0]);
                X(x[6]);
                Controlled X ([x[0], x[N - 1]], y);
                X(x[0]);
                X(x[6]);
                X(x[6]);
                X(x[0]);
                X(x[1]);
                X(x[0]);
                Controlled X (x, y);
                X(x[2]);
                Controlled X (x, y);
                X(x[0]);
                X(x[1]);
                X(x[0]);
                Controlled X (x, y);
                X(x[3]);
                Controlled X (x, y);
                X(x[0]);
                X(x[1]);
                X(x[0]);
                Controlled X (x, y);
                X(x[2]);
                Controlled X (x, y);
                X(x[0]);
                X(x[1]);
                X(x[0]);
                X(x[4]);
                X(x[0]);
                X(x[1]);
                X(x[0]);
                Controlled X (x, y);
                X(x[2]);
                Controlled X (x, y);
                X(x[0]);
                X(x[1]);
                X(x[0]);
                X(x[3]);
                X(x[0]);
                X(x[1]);
                X(x[0]);
                Controlled X (x, y);
                X(x[2]);
                Controlled X (x, y);
                X(x[0]);
                X(x[1]);
                X(x[0]);
                X(x[5]);
                X(x[0]);
                X(x[1]);
                X(x[0]);
                X(x[2]);
                X(x[0]);
                X(x[1]);
                X(x[0]);
                X(x[3]);
                X(x[0]);
                X(x[1]);
                X(x[0]);
                X(x[2]);
                X(x[0]);
                X(x[1]);
                X(x[0]);
                X(x[4]);
                X(x[0]);
                X(x[1]);
                X(x[0]);
                X(x[2]);
                Controlled X (x, y);
                X(x[0]);
                X(x[1]);
                X(x[0]);
                X(x[3]);
                X(x[0]);
                X(x[1]);
                X(x[0]);
                Controlled X (x, y);
                X(x[2]);
                X(x[0]);
                X(x[1]);
                X(x[0]);
                X(x[6]);
                X(x[0]);
                Controlled X (x, y);
                X(x[1]);
                X(x[0]);
                X(x[2]);
                X(x[0]);
                X(x[1]);
                Controlled X (x, y);
                X(x[0]);
                X(x[3]);
                X(x[0]);
                Controlled X (x, y);
                X(x[1]);
                X(x[0]);
                X(x[2]);
                X(x[0]);
                X(x[1]);
                Controlled X (x, y);
                X(x[0]);
                X(x[4]);
                X(x[0]);
                Controlled X (x, y);
                X(x[1]);
                Controlled X (x, y);
                X(x[0]);
                X(x[2]);
                X(x[0]);
                X(x[1]);
                Controlled X (x, y);
                X(x[0]);
                X(x[3]);
                X(x[0]);
                Controlled X (x, y);
                X(x[1]);
                X(x[0]);
                X(x[2]);
                X(x[0]);
                Controlled X (x, y);
                X(x[1]);
                Controlled X (x, y);
                X(x[0]);
                X(x[5]);
                X(x[0]);
                Controlled X (x, y);
                X(x[1]);
                X(x[0]);
                X(x[2]);
                X(x[0]);
                X(x[1]);
                X(x[0]);
                X(x[3]);
                X(x[0]);
                X(x[1]);
                X(x[0]);
                X(x[2]);
                X(x[0]);
                X(x[1]);
                Controlled X (x, y);
                X(x[0]);
                X(x[4]);
                X(x[0]);
                X(x[1]);
                X(x[0]);
                X(x[2]);
                 X(x[0]);
                X(x[1]);
                X(x[0]);
                X(x[3]);
                X(x[0]);
                X(x[1]);
                X(x[0]);
                X(x[2]);
                X(x[0]);
                X(x[1]);
                X(x[0]);
            }
        }
        adjoint auto;
    }
}