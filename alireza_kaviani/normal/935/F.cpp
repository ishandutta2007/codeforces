/* Generated by powerful Codeforces Tool
 * You can download the binary file in here https://github.com/xalanq/cf-tool (Windows, macOS, Linux)
 * Author: alireza_kaviani
 * Time: 2020-04-27 13:58:31
**/
#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e5 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n , q , A[MAXN] , diff[MAXN] , seg[MAXN << 2] , ok[MAXN << 2] , mn[MAXN << 2];

void build(int id = 1 , int l = 0 , int r = MAXN){
    if(r - l == 1){
        seg[id] = abs(diff[l]);
        mn[id] = seg[id];
        return;
    }
    int mid = l + r >> 1;
    build(id << 1 , l , mid);
    build(id << 1 | 1 , mid , r);
    seg[id] = seg[id << 1] + seg[id << 1 | 1];
    mn[id] = min(mn[id << 1] , mn[id << 1 | 1]);
    ok[id] = (ok[id << 1] | ok[id << 1 | 1] | (diff[mid - 1] >= 0 && diff[mid] <= 0));
}

void modify(int x , int id = 1 , int l = 0 , int r = MAXN){
    //cout << id << sep << l << sep << r << endl;
    //cout.flush();
    if(r - l == 1){
        seg[id] = abs(diff[l]);
        mn[id] = seg[id];
        return;
    }
    int mid = l + r >> 1;
    if(x < mid) modify(x , id << 1 , l , mid);
    else    modify(x , id << 1 | 1 , mid , r);
    seg[id] = seg[id << 1] + seg[id << 1 | 1];
    mn[id] = min(mn[id << 1] , mn[id << 1 | 1]);
    ok[id] = (ok[id << 1] | ok[id << 1 | 1] | (diff[mid - 1] >= 0 && diff[mid] <= 0));
}

ll getSum(int ql , int qr , int id = 1 , int l = 0 , int r = MAXN){
    if(qr <= l || r <= ql)  return 0;
    if(ql <= l && r <= qr)  return seg[id];
    int mid = l + r >> 1;
    return getSum(ql , qr , id << 1 , l , mid) + getSum(ql , qr , id << 1 | 1 , mid , r);
}

int getOk(int ql , int qr , int id = 1 , int l = 0 , int r = MAXN){
    if(qr <= l || r <= ql)  return 0;
    if(ql <= l && r <= qr)  return ok[id];
    int mid = l + r >> 1;
    if(ql < mid && mid < qr && diff[mid - 1] >= 0 && diff[mid] <= 0)    return 1;
    return (getOk(ql , qr , id << 1 , l , mid) || getOk(ql , qr , id << 1 | 1 , mid , r));
}

ll getMin(int ql , int qr , int id = 1 , int l = 0 , int r = MAXN){
    if(qr <= l || r <= ql || qr <= ql)  return INF;
    if(ql <= l && r <= qr)  return mn[id];
    int mid = l + r >> 1;
    return min(getMin(ql , qr , id << 1 , l , mid) , getMin(ql , qr , id << 1 | 1 , mid , r));
}

int main() {
    ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);

    cin >> n;
    for(ll i = 1 ; i <= n ; i++)    cin >> A[i];
    for(ll i = 1 ; i < n ; i++) diff[i] = A[i + 1] - A[i];
    build();

    cin >> q;
    while(q--){
        ll t , l , r , x;
        cin >> t >> l >> r >> x;
        if(t == 1){
            ll S = seg[1] , O = getOk(l - 1 , r + 1);
            if(O){
                cout << S + 2 * x << endl; continue;
            }
            ll L = l - 2 , R = r + 1 , ans = 0;
            while(R - L > 1){
                ll mid = L + R >> 1;
                if(diff[mid] >= 0)  R = mid;
                else    L = mid;
            }
            //cout << L << sep << R << sep << S << endl;
            ll A = getMin(R + 1 , r + 1) , B = getMin(l - 1 , L);
            if(A != INF)    ans = max(ans , S + x - A + abs(A - x));
            if(B != INF)    ans = max(ans , S + x - B + abs(B - x));
            if(L != l - 2 && R != r + 1)    ans = max(ans , S - abs(diff[L]) + abs(diff[L] + x) - abs(diff[R]) + abs(diff[R] - x));
            cout << ans << endl;
        }
        else{
            diff[l - 1] += x; diff[r] -= x;
            modify(l - 1) ; modify(r);
        }
    }

    return 0;
}
/*

*/