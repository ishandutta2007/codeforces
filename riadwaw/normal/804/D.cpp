/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author RiaD
 */

#include <iostream>
#include <fstream>

#include <iostream>


#include <iterator>


#include <string>
#include <stdexcept>

#ifndef SPCPPL_ASSERT
	#ifdef SPCPPL_DEBUG
		#define SPCPPL_ASSERT(condition) \
		if(!(condition)) { \
			throw std::runtime_error(std::string() + #condition + " in line " + std::to_string(__LINE__) + " in " + __PRETTY_FUNCTION__); \
		}
	#else
		#define SPCPPL_ASSERT(condition)
	#endif
#endif


/**
* Support decrementing and multi-passing, but not declared bidirectional(or even forward) because
* it's reference type is not a reference.
*
* It doesn't return reference because
* 1. Anyway it'll not satisfy requirement [forward.iterators]/6
*   If a and b are both dereferenceable, then a == b if and only if *a and
*   b are bound to the same object.
* 2. It'll not work with reverse_iterator that returns operator * of temporary which is temporary for this iterator
*
* Note, reverse_iterator is not guaranteed to work  now too since it works only with bidirectional iterators,
* but it's seems to work at least on my implementation.
*
* It's not really useful anywhere except iterating anyway.
*/
template <typename T>
class IntegerIterator: public std::iterator<std::input_iterator_tag, T, std::ptrdiff_t, T*, T> {
public:
	explicit IntegerIterator(T value): value(value) {

	}

	IntegerIterator& operator++() {
		++value;
		return *this;
	}

	IntegerIterator operator++(int) {
		IntegerIterator copy = *this;
		++value;
		return copy;
	}

	IntegerIterator& operator--() {
		--value;
		return *this;
	}

	IntegerIterator operator--(int) {
		IntegerIterator copy = *this;
		--value;
		return copy;
	}

	T operator*() const {
		return value;
	}

	bool operator==(IntegerIterator rhs) const {
		return value == rhs.value;
	}

	bool operator!=(IntegerIterator rhs) const {
		return !(*this == rhs);
	}

private:
	T value;
};

template <typename T>
class IntegerRange {
public:
	IntegerRange(T begin, T end): begin_(begin), end_(end) {
		SPCPPL_ASSERT(begin <= end);
	}

	IntegerIterator<T> begin() const {
		return IntegerIterator<T>(begin_);
	}

	IntegerIterator<T> end() const {
		return IntegerIterator<T>(end_);
	}

private:
	T begin_;
	T end_;
};

template <typename T>
class ReversedIntegerRange {
	typedef std::reverse_iterator<IntegerIterator<T>> IteratorType;
public:
	ReversedIntegerRange(T begin, T end): begin_(begin), end_(end) {
		SPCPPL_ASSERT(begin >= end);
	}

	IteratorType begin() const {
		return IteratorType(IntegerIterator<T>(begin_));
	}

	IteratorType end() const {
		return IteratorType(IntegerIterator<T>(end_));
	}

private:
	T begin_;
	T end_;
};

template <typename T>
IntegerRange<T> range(T to) {
	return IntegerRange<T>(0, to);
}

template <typename T>
IntegerRange<T> range(T from, T to) {
	return IntegerRange<T>(from, to);
}

template <typename T>
IntegerRange<T> inclusiveRange(T to) {
	return IntegerRange<T>(0, to + 1);
}

template <typename T>
IntegerRange<T> inclusiveRange(T from, T to) {
	return IntegerRange<T>(from, to + 1);
}

template <typename T>
ReversedIntegerRange<T> downrange(T from) {
	return ReversedIntegerRange<T>(from, 0);
}

template <typename T>
ReversedIntegerRange<T> downrange(T from, T to) {
	return ReversedIntegerRange<T>(from, to);
}

template <typename T>
ReversedIntegerRange<T> inclusiveDownrange(T from) {
	return ReversedIntegerRange<T>(from + 1, 0);
}

template <typename T>
ReversedIntegerRange<T> inclusiveDownrange(T from, T to) {
	return ReversedIntegerRange<T>(from + 1, to);
}



#include <vector>
#include <cstddef>


class DSU {
public:
	explicit DSU(std::size_t n): dsu(n) {
		for (std::size_t i = 0; i < n; ++i) {
			dsu[i] = i;
		}
	}

	std::size_t getSet(std::size_t v) {
		SPCPPL_ASSERT(v < dsu.size());
		if (v == dsu[v]) {
			return v;
		}
		return dsu[v] = getSet(dsu[v]);
	}

	void unite(std::size_t u, std::size_t v) {
		SPCPPL_ASSERT(u < dsu.size());
		SPCPPL_ASSERT(v < dsu.size());
		u = getSet(u);
		v = getSet(v);
		dsu[v] = u;
	}

private:
	std::vector<std::size_t> dsu;
};

#include <algorithm>

template <typename T>
void updateMin(T& oldValue, const T& newValue) {
	if (newValue < oldValue) {
		oldValue = newValue;
	}
}

template <typename T>
void updateMax(T& oldValue, const T& newValue) {
	if (oldValue < newValue) {
		oldValue = newValue;
	}
}




#include <numeric>

#include <type_traits>

template <typename T>
using range_iterator_traits = std::iterator_traits<typename std::decay<decltype(std::declval<T>().begin())>::type>;


template <typename R>
auto prefixSums(const R& range) -> std::vector<typename range_iterator_traits<R>::value_type> {
	std::vector<typename range_iterator_traits<R>::value_type> result(
			static_cast<std::size_t>(
					std::distance(std::begin(range), std::end(range)) + 1
			)
	);
	std::partial_sum(std::begin(range), std::end(range), result.begin() + 1);
	return result;
}

#include <map>

using namespace std;

class TaskD {
public:
	vector<int> length;
	vector<int> lenDown;

	vector<int> diam;

	vector<vector<int>> lenCnt;
	vector<vector<int>> prefSums;
	vector<vector<int64_t>> prefSumsDp;

	vector<vector<int>> g;

	void dfs1(int v, int p) {
		for (int to: g[v]) {
			if (to != p) {
				dfs1(to, v);
				updateMax(lenDown[v], 1 + lenDown[to]);
			}
		}
	}

	void dfs2(int v, int p, int mn, vector<int>& lenCnt, int& my_diam) {
		length[v] = max(lenDown[v], mn);
		if (length[v] >= lenCnt.size()) {
			lenCnt.resize(length[v] + 1);
		}
		++lenCnt[length[v]];

		updateMax(my_diam, length[v]);
		int mx1 = -1, mx2 = -1;
		for (int to: g[v]) {
			if (to != p) {
				if (lenDown[to] > mx1) {
					mx2 = mx1;
					mx1 = lenDown[to];
				} else if (lenDown[to] > mx2) {
					mx2 = lenDown[to];
				}
			}
		}

		for (int to: g[v]) {
			if (to != p) {
				int mx = mx1;
				if (lenDown[to] == mx1) {
					mx = mx2;
				}

				dfs2(to, v, max(mn + 1, mx + 2), lenCnt, my_diam);
			}
		}
	}


	void solve(std::istream& in, std::ostream& out) {
		int n, m, q;
		//in >> n >> m >> q;
scanf("%d%d%d", &n,&m,&q);
		DSU dsu(n);

		g.resize(n);
		length.resize(n);
		prefSums.resize(n);
		prefSumsDp.resize(n);
		lenDown.resize(n);
		lenCnt.resize(n);
		diam.resize(n);
		for (int i: range(m)) {
			int a, b;
//			in >> a >> b;
scanf("%d%d", &a, &b);
			--a, --b;
			dsu.unite(a, b);
			g[a].push_back(b);
			g[b].push_back(a);
		}

		vector<int> sizes(n);
		for (int i: range(n)) {
			++sizes[dsu.getSet(i)];
		}

		//vector<int> long_groups;

		int MAGIC = 2000;
		for (int i: range(n)) {
			if(dsu.getSet(i) == i) {
				dfs1(i, i);
				dfs2(i, i, 0, lenCnt[i], diam[i]);
				prefSums[i] = prefixSums(lenCnt[i]);
				prefSumsDp[i].resize(lenCnt[i].size() + 1);
				for (int j: range(lenCnt[i].size())) {
					prefSumsDp[i][j + 1] = prefSumsDp[i][j] + j * 1LL * lenCnt[i][j];
				}
			}
			//if (sizes[i] > MAGIC) {
			//	long_groups.push_back(i);
			//}
		}


		map<pair<int, int>, double> res;
		for (int _: range(q)) {
			int a, b;
//			in >> a >> b;
scanf("%d%d", &a, &b);
			--a, --b;
			a = (int) dsu.getSet(a);
			b = (int) dsu.getSet(b);
			if (a == b) {
printf("-1\n");
			//	out << -1 << '\n';
				continue;
			}
			if (sizes[a] > sizes[b]) {
				swap(a, b);
			}

			auto it = res.find({a, b});
			if (it != res.end()) {
printf("%.10lf\n", it->second);
//				out << it->second << "\n";
				continue;
			}
			int64_t ch = 0;
			int64_t zn = sizes[a] * 1LL * sizes[b];
			int startDiam = max(diam[a], diam[b]);
			for (int i: range(lenCnt[a].size())) {
				int leftSize = i;

				int gr = max(0, startDiam - i);
				gr = min(gr, (int)(prefSums[b].size() - 1));

				ch += lenCnt[a][i] * 1LL * prefSums[b][gr] * startDiam;
				ch += lenCnt[a][i] * 1LL * ((prefSumsDp[b].back() - prefSumsDp[b][gr]) + (i + 1) * (prefSums[b].back() - prefSums[b][gr]));
			}

			//cerr << ch << ' ' << zn << endl;

			double ans = (ch / 1.0 / zn);
			res[{a, b}] = ans;

printf("%.10lf\n", ans);
			//out << ans << "\n";
			continue;
		}
	}
};


int main() {
	std::ios_base::sync_with_stdio(false);
	TaskD solver;
	std::istream& in(std::cin);   
	std::ostream& out(std::cout);
	in.tie(0);
	out << std::fixed;
	out.precision(20);
	solver.solve(in, out);
	return 0;
}