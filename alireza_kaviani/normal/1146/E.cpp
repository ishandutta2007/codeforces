/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e5 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n, q, A[MAXN];
int seg[MAXN << 3], lz[MAXN << 3];

void shift(int id, int l, int r) {
    if (lz[id] == -1) return;
    int mid = l + r >> 1;
    if (lz[id] == 2) {
        lz[id << 1] = 1 - lz[id << 1];
        lz[id << 1 | 1] = 1 - lz[id << 1 | 1];
        seg[id << 1] = (mid - l) - seg[id << 1];
        seg[id << 1 | 1] = (r - mid) - seg[id << 1 | 1];
    } else {
        lz[id << 1] = lz[id << 1 | 1] = lz[id];
        seg[id << 1] = lz[id] * (mid - l);
        seg[id << 1 | 1] = lz[id] * (r - mid);
    }
    lz[id] = -1;
}

void modify(int ql, int qr, int x, int id = 1, int l = 0, int r = MAXN * 2) {
    if (qr <= ql || qr <= l || r <= ql) return;
    if (ql <= l && r <= qr) {
        lz[id] = x;
        seg[id] = x * (r - l);
        return;
    }
    shift(id, l, r);
    int mid = l + r >> 1;
    modify(ql, qr, x, id << 1, l, mid);
    modify(ql, qr, x, id << 1 | 1, mid, r);
    seg[id] = seg[id << 1] + seg[id << 1 | 1];
}

void flip(int ql, int qr, int id = 1, int l = 0, int r = MAXN * 2) {
    if (qr <= ql || qr <= l || r <= ql) return;
    if (ql <= l && r <= qr) {
        lz[id] = 1 - lz[id];
        seg[id] = (r - l) - seg[id];
        return;
    }
    shift(id, l, r);
    int mid = l + r >> 1;
    flip(ql, qr, id << 1, l, mid);
    flip(ql, qr, id << 1 | 1, mid, r);
    seg[id] = seg[id << 1] + seg[id << 1 | 1];
}

int get(int x, int id = 1, int l = 0, int r = MAXN * 2) {
    if (r - l == 1) return seg[id];
    shift(id, l, r);
    int mid = l + r >> 1;
    if (x < mid) return get(x, id << 1, l, mid);
    return get(x, id << 1 | 1, mid, r);
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    fill(lz, lz + MAXN * 8, -1);

    cin >> n >> q;
    for (ll i = 1; i <= n; i++) cin >> A[i];

    while (q--) {
        string s;
        ll x;
        cin >> s >> x;
        if (s == "<") {
            ll t = 1;
            if (x < 0) t = 0;
            modify(0, MAXN - abs(x) + t, 1);
            modify(MAXN + abs(x) + 1 - t, MAXN * 2, 0);
            flip(MAXN - x + 1, MAXN + x);
        }
        if (s == ">") {
            ll t = 0;
            if (x < 0) t = 1;
            modify(0, MAXN - abs(x) + t, 0);
            modify(MAXN + abs(x) + 1 - t, MAXN * 2, 1);
            flip(MAXN + x + 1, MAXN - x);
        }
    }
    for (ll i = 1; i <= n; i++) cout << (get(A[i] + MAXN) ? -1 : 1) * A[i] << sep;

    return 0;
}
/*

*/