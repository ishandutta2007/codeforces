/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n, dp[MAXN][3];
vector<ll> adj[MAXN];

void DFS(ll v, ll p = -1) {
    ll mn = INF;
    dp[v][0] = (p != -1 && p != 1);
    for (ll u : adj[v]) {
        if (u != p) {
            DFS(u, v);
            dp[v][0] += dp[u][2];
            dp[v][1] += dp[u][1];
            dp[v][2] += dp[u][1];
            mn = min(mn, dp[u][0] - dp[u][1]);
        }
    }
    if (mn == INF) {
        if (v != 1 && p != 1) {
            dp[v][0] = dp[v][1] = 1;
        }
        return;
    }
    dp[v][1] += mn;
    dp[v][1] = min(dp[v][1], dp[v][0]);
    dp[v][2] = min(dp[v][2], dp[v][1]);
}

int main() {
    fast_io;

    cin >> n;
    for (ll i = 1; i < n; i++) {
        ll v, u;
        cin >> v >> u;
        adj[v].push_back(u);
        adj[u].push_back(v);
    }

    DFS(1);
    cout << dp[1][0] << endl;

    return 0;
}
/*

*/