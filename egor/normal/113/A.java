import java.util.InputMismatchException;
import java.math.BigInteger;
import java.io.*;

/**
 * Generated by Contest helper plug-in
 * Actual solution is at the bottom
 */
public class Main {
	public static void main(String[] args) {
		InputReader in = new StreamInputReader(System.in);
		PrintWriter out = new PrintWriter(System.out);
		run(in, out);
	}

	public static void run(InputReader in, PrintWriter out) {
		Solver solver = new TaskA();
		solver.solve(1, in, out);
		Exit.exit(in, out);
	}
}

abstract class InputReader {
	private boolean finished = false;

	public abstract int read();

	public String readString() {
		int c = read();
		while (isSpaceChar(c))
			c = read();
		StringBuffer res = new StringBuffer();
		do {
			res.appendCodePoint(c);
			c = read();
		} while (!isSpaceChar(c));
		return res.toString();
	}

	private boolean isSpaceChar(int c) {
		return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
	}

	private String readLine0() {
		StringBuffer buf = new StringBuffer();
		int c = read();
		while (c != '\n' && c != -1) {
			if (c != '\r')
				buf.appendCodePoint(c);
			c = read();
		}
		return buf.toString();
	}

	public String readLine() {
		String s = readLine0();
		while (s.trim().length() == 0)
			s = readLine0();
		return s;
	}

	public void setFinished(boolean finished) {
		this.finished = finished;
	}

	public abstract void close();
}

class StreamInputReader extends InputReader {
	private InputStream stream;
	private byte[] buf = new byte[1024];
	private int curChar, numChars;

	public StreamInputReader(InputStream stream) {
		this.stream = stream;
	}

	public int read() {
		if (numChars == -1)
			throw new InputMismatchException();
		if (curChar >= numChars) {
			curChar = 0;
			try {
				numChars = stream.read(buf);
			} catch (IOException e) {
				throw new InputMismatchException();
			}
			if (numChars <= 0)
				return -1;
		}
		return buf[curChar++];
	}

	public void close() {
		try {
			stream.close();
		} catch (IOException ignored) {
		}
	}
}

class Exit {
	private Exit() {
	}

	public static void exit(InputReader in, PrintWriter out) {
		in.setFinished(true);
		in.close();
		out.close();
	}
}

interface Solver {
	public void solve(int testNumber, InputReader in, PrintWriter out);
}

class TaskA implements Solver {
	public void solve(int testNumber, InputReader in, PrintWriter out) {
		String[] words = in.readLine().split(" ");
		String[] first = {"lios", "liala"};
		String[] second = {"etr", "etra"};
		String[] third = {"initis", "inites"};
		int type = -1;
		int index = 0;
		while (index != words.length) {
			boolean found = false;
			for (int i = 0; i < 2; i++) {
				if (words[index].endsWith(first[i])) {
					found = true;
					if (type == -1)
						type = i;
					else if (type != i) {
						out.println("NO");
						return;
					}
				}
			}
			if (!found)
				break;
			index++;
		}
		int countSecond = 0;
		while (index != words.length) {
			boolean found = false;
			for (int i = 0; i < 2; i++) {
				if (words[index].endsWith(second[i])) {
					found = true;
					if (type == -1)
						type = i;
					else if (type != i) {
						out.println("NO");
						return;
					}
				}
			}
			if (!found)
				break;
			countSecond++;
			index++;
		}
		while (index != words.length) {
			boolean found = false;
			for (int i = 0; i < 2; i++) {
				if (words[index].endsWith(third[i])) {
					found = true;
					if (type == -1)
						type = i;
					else if (type != i) {
						out.println("NO");
						return;
					}
				}
			}
			if (!found)
				break;
			index++;
		}
		if (index != words.length || words.length != 1 && countSecond != 1)
			out.println("NO");
		else
			out.println("YES");
	}
}