/* Generated by powerful Codeforces Tool
 * You can download the binary file in here https://github.com/xalanq/cf-tool (Windows, macOS, Linux)
 * Author: alireza_kaviani
 * Time: 2020-04-15 19:05:03
**/
#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll LOG = 40;
const ll LOG2 = 16;
const ll INF = 8e18;
const ll MOD = 998244353; // 1e9 + 9;

ll n , m , A[MAXN] , C = 1 , cnt[LOG * 3] , mark[LOG] , ans[MAXN] , dp[LOG][(1 << LOG2)];
vector<ll> vec , v;

int main() {
    ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);

    cin >> n >> m;
    for(ll i = 1 ; i <= n ; i++){
        cin >> A[i];
        for(ll j : vec){
            ll x = (j & (-j));
            if(A[i] & x)    A[i] ^= j;
        }
        if(A[i] == 0){
            C = C * 2 % MOD;
            continue;
        }
        ll x = (A[i] & (-A[i]));
        for(ll j = 0 ; j < vec.size() ; j++){
            if(vec[j] & x)  vec[j] ^= A[i];
        }
        vec.push_back(A[i]) , mark[__builtin_ctzll(A[i])] = 1;
    }

    for(ll i : vec){
        ll val = 0 , C = 1;
        for(ll j = 0 ; j < LOG ; j++)   if(!mark[j]){
            val += C * ((i & (1ll << j)) ? 1 : 0);
            C *= 2;
        }
        v.push_back(val);
    }
    if(SZ(vec) <= 20){
        ll S = SZ(vec);
        for(ll i = 0 ; i < (1 << S) ; i++){
            ll cur = 0;
            for(ll j = 0 ; j < S ; j++) if(i & (1 << j))    cur ^= vec[j];
            cnt[__builtin_popcountll(cur)]++;
        }
    }
    else{
        dp[0][0] = 1;
        for(ll i = 0 ; i < SZ(v) ; i++){
            //cout << vec[i] << sep << v[i] << endl;
            for(ll j = LOG - 1 ; j >= 1 ; j--){
                for(ll k = 0 ; k < (1 << LOG2) ; k++){
                    dp[j][k] = (dp[j][k] + dp[j - 1][k ^ v[i]]) % MOD;
                }
            }
        }
        for(ll i = 0 ; i < LOG ; i++){
            for(ll j = 0 ; j < (1 << LOG2) ; j++){
                cnt[__builtin_popcountll(j) + i] += dp[i][j];
            }
        }
    }
    for(ll i = 0 ; i <= m ; i++)    cout << cnt[i] % MOD * C % MOD << sep;

    return 0;
}
/*

*/