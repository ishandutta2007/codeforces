/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

// Actual solution is at the bottom

#undef NDEBUG

#include <algorithm>
#include <array>
#include <bitset>
#include <cassert>
#include <climits>
#include <cstdint>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <memory>
#include <numeric>
#include <queue>
#include <random>
#include <set>
#include <stack>
#include <string>
#include <unordered_set>
#include <unordered_map>
#include <vector>
// AtCoder library from https://github.com/atcoder/ac-library
// #include "../atcoder/all"

#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()

using namespace std;

typedef int64_t int64;
typedef pair<int, int> ii;

class EBloknotexe {
 public:
  void solveOne() {
    int n;
    cin >> n;
    int left = n - 1 + n - 1;
    int right = n - 1 + 2000 * n;
    while (right - left > 1) {
      int middle = (left + right) / 2;
      cout << "? " << middle << "\n";
      cout.flush();
      int h;
      cin >> h;
      if (h == 1) {
        right = middle;
      } else {
        left = middle;
      }
    }
    int res = right;
    int sumlen = res - (n - 1);
    for (int h = 2; h <= n; ++h) {
      int min = sumlen + (n - h);
      min = (min + h - 1) / h;
      int max = (res - 1) / h;
      for (int i = max; i >= min; --i) {
        cout << "? " << i << "\n";
        cout.flush();
        int got;
        cin >> got;
        if (got == h) {
          res = i * h;
        } else {
          break;
        }
      }
    }
    cout << "! " << res << "\n";
  }

  void solve() {
    int nt = 1;
    for (int it = 0; it < nt; ++it) {
      // cout << "Case #" << (it + 1) << ": ";
      solveOne();
    }
  }
};

// #define st_mtimespec st_mtim

int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(0);
    EBloknotexe solver;


    solver.solve();
    return 0;
}