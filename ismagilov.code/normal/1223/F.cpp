/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Azat Ismagilov
 */

#include <fstream>

#include <iostream>
#include <algorithm>
#include <vector>
#include <queue>
#include <numeric>
#include <set>
#include <map>
#include <random>
#include <ext/pb_ds/assoc_container.hpp>

#define int long long
#define ll long long
#define ld long double
#define fs first
#define sc second
#define pb push_back
#define ppb pop_back
#define pf push_front
#define ppf pop_front
#define mp make_pair
#define len(v) ((int)v.size())
#define vc vector
#define pr pair
#define all(v) v.begin(), v.end()
#pragma GCC optimize("O3")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,tune=native")
#pragma GCC optimize("unroll-loops")

using namespace std;

template<typename T, typename U>
inline ostream &operator<<(ostream &_out, const pair<T, U> &_p) {
    _out << _p.first << ' ' << _p.second;
    return _out;
}

template<typename T, typename U>
inline istream &operator>>(istream &_in, pair<T, U> &_p) {
    _in >> _p.first >> _p.second;
    return _in;
}

template<typename T>
inline ostream &operator<<(ostream &_out, const vector<T> &_v) {
    if (_v.empty()) { return _out; }
    _out << _v.front();
    for (auto _it = ++_v.begin(); _it != _v.end(); ++_it) { _out << ' ' << *_it; }
    return _out;
}

template<typename T>
inline istream &operator>>(istream &_in, vector<T> &_v) {
    for (auto &_i : _v) { _in >> _i; }
    return _in;
}

const int MAXN = 3e5;
const ll INF = 1e9;
const int MOD = 1e9 + 7;
const int MOD1 = 1e9 + 9;
const int P = 1231;
const int P1 = 4233;

mt19937 rnd(228);

int sum(int a, int b) {
    if (a + b >= MOD) {
        return a + b - MOD;
    }
    return a + b;
}

int mul(int a, int b) {
    if ((ll) a * b >= MOD) {
        return ((ll) a * b) % MOD;
    }
    return a * b;
}

int sqr(int a) {
    return ((ll) a * a) % MOD;
}

int bin_pow(int a, int b) {
    if (b == 0) {
        return 1;
    }
    if (b % 2) {
        return mul(a, bin_pow(a, b - 1));
    }
    return sqr(bin_pow(a, b / 2));
}

int sum1(int a, int b) {
    if (a + b >= MOD1) {
        return a + b - MOD1;
    }
    return a + b;
}

int mul1(int a, int b) {
    if ((ll) a * b >= MOD1) {
        return ((ll) a * b) % MOD1;
    }
    return a * b;
}

int sqr1(int a) {
    return ((ll) a * a) % MOD1;
}

int bin_pow1(int a, int b) {
    if (b == 0) {
        return 1;
    }
    if (b % 2) {
        return mul1(a, bin_pow1(a, b - 1));
    }
    return sqr1(bin_pow1(a, b / 2));
}

int UNP = bin_pow(P, MOD - 2);
int UNP1 = bin_pow1(P1, MOD1 - 2);

vc<int> b;

ll process(int l, int r) {
    if (r <= l) {
        return 0;
    }
    int mid = (l + r) / 2;
    ll ans = process(l, mid - 1) + process(mid + 1, r);
    __gnu_pbds::gp_hash_table<ll, int> dds;
    {
        vc<int> kleks;
        int p = 1;
        int p1 = 1;
        int sums = 0;
        int sums1 = 0;
        for (int i = mid; i <= r; i++) {
            if (len(kleks) == 0 || b[i] != kleks.back()) {
                sums = sum(sums, mul(b[i], p));
                sums1 = sum1(sums1, mul1(b[i], p1));
                p = mul(p, P);
                p1 = mul1(p1, P1);
                kleks.pb(b[i]);
            } else {
                kleks.pop_back();
                p = mul(p, UNP);
                p1 = mul1(p1, UNP1);
                sums = sum(sums, MOD - mul(b[i], p));
                sums1 = sum1(sums1, MOD1 - mul1(b[i], p1));
            }
            dds[INF * sums + sums1]++;
        }
    }
    {
        vc<int> kleks;
        int p = 1;
        int p1 = 1;
        int sums = 0;
        int sums1 = 0;
        for (int i = mid; i >= l; i--) {
            if (i < mid) {
                if (len(kleks) == 0 || b[i] != kleks.back()) {
                    sums = sum(sums, mul(b[i], p));
                    sums1 = sum1(sums1, mul1(b[i], p1));
                    p = mul(p, P);
                    p1 = mul1(p1, P1);
                    kleks.pb(b[i]);
                } else {
                    kleks.pop_back();
                    p = mul(p, UNP);
                    p1 = mul1(p1, UNP1);
                    sums = sum(sums, MOD - mul(b[i], p));
                    sums1 = sum1(sums1, MOD1 - mul1(b[i], p1));
                }
            }
            ans += dds[INF * sums + sums1];
        }
    }
    //cout << l << ' ' << r << ' ' << mid << ' ' << ans - ans1 << endl;
    return ans;

}

class FStekUnichtozhimieMassivi {
public:
    void solve(std::istream &in, std::ostream &out) {
        int n;
        in >> n;
        vc<int> a(n);
        in >> a;
        map<int, int> keks;
        for (auto v : a) {
            keks[v] = 0;
        }
        set<int> hasone;
        for (auto &v : keks) {
            v.sc = rnd();
            while (hasone.find(v.sc) != hasone.end()) {
                v.sc = rnd();
            }
            hasone.insert(v.sc);
        }
        b.resize(n);
        for (int i = 0; i < n; i++) {
            b[i] = keks[a[i]];
        }
        out << process(0, n - 1) << '\n';
    }
};


signed main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    FStekUnichtozhimieMassivi solver;
    std::istream &in(std::cin);
    std::ostream &out(std::cout);
    int n;
    in >> n;
    for (int i = 0; i < n; ++i) {
        solver.solve(in, out);
    }

    return 0;
}