/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Azat Ismagilov
 */

#include <fstream>

#include <iostream>
#include <algorithm>
#include <vector>
#include <queue>
#include <numeric>
#include <set>
#include <map>

#define int long long
#define ld long double
#define fs first
#define sc second
#define pb push_back
#define ppb pop_back
#define pf push_front
#define ppf pop_front
#define mp make_pair
#define len(v) ((int)v.size())
#define vc vector
#define pr pair
#define all(v) v.begin(), v.end()
//#pragma GCC optimize("Ofast")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,tune=native")
//#pragma GCC optimize("unroll-loops")

using namespace std;

template<typename T, typename U>
inline ostream &operator<<(ostream &_out, const pair<T, U> &_p) {
    _out << _p.first << ' ' << _p.second;
    return _out;
}

template<typename T, typename U>
inline istream &operator>>(istream &_in, pair<T, U> &_p) {
    _in >> _p.first >> _p.second;
    return _in;
}

template<typename T>
inline ostream &operator<<(ostream &_out, const vector<T> &_v) {
    if (_v.empty()) { return _out; }
    _out << _v.front();
    for (auto _it = ++_v.begin(); _it != _v.end(); ++_it) { _out << ' ' << *_it; }
    return _out;
}

template<typename T>
inline istream &operator>>(istream &_in, vector<T> &_v) {
    for (auto &_i : _v) { _in >> _i; }
    return _in;
}

const int MAXN = 3e5;
const int INF = 1e9;
const int MOD = 1e9 + 7;

class DSortirovkaPosledovatelnosti {
public:
    void solve(std::istream &in, std::ostream &out) {
        int n;
        in >> n;
        vc<int> a(n);
        in >> a;
        map<int, int> keks;
        int lasts = 0;
        for (auto v : a) {
            keks[v] = 0;
        }
        for (auto &v : keks) {
            v.sc = lasts++;
        }
        for (auto &v : a) {
            v = keks[v];
        }
        vc<int> starts(lasts, INF);
        vc<int> finish(lasts, -INF);
        for (int i = 0; i < n; i++) {
            starts[a[i]] = min(starts[a[i]], i);
            finish[a[i]] = max(finish[a[i]], i);
        }
        int ans = INF;
        int togo = 0;
        for (int i = 0; i < lasts; i++) {
            if (togo < i) {
                togo = i;
            }
            while (togo + 1 < lasts && finish[togo] < starts[togo + 1]) {
                togo++;
            }
            ans = min(ans, i + (lasts - 1 - togo));
        }
        out << ans << '\n';
    }
};


signed main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    DSortirovkaPosledovatelnosti solver;
    std::istream &in(std::cin);
    std::ostream &out(std::cout);
    int n;
    in >> n;
    for (int i = 0; i < n; ++i) {
        solver.solve(in, out);
    }

    return 0;
}