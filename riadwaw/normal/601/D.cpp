/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author RiaD
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <set>
#include <algorithm>
#include <tuple>


#include <iterator>


#include <string>
#include <stdexcept>

#ifndef SPCPPL_ASSERT
	#ifdef SPCPPL_DEBUG
		#define SPCPPL_ASSERT(condition) \
		if(!(condition)) { \
			throw std::runtime_error(std::string() + #condition + " in line " + std::to_string(__LINE__) + " in " + __PRETTY_FUNCTION__); \
		}
	#else
		#define SPCPPL_ASSERT(condition)
	#endif
#endif


/**
* Support decrementing and multi-passing, but not declared bidirectional(or even forward) because
* it's reference type is not a reference.
*
* It doesn't return reference because
* 1. Anyway it'll not satisfy requirement [forward.iterators]/6
*   If a and b are both dereferenceable, then a == b if and only if *a and
*   b are bound to the same object.
* 2. It'll not work with reverse_iterator that returns operator * of temporary which is temporary for this iterator
*
* Note, reverse_iterator is not guaranteed to work  now too since it works only with bidirectional iterators,
* but it's seems to work at least on my implementation.
*
* It's not really useful anywhere except iterating anyway.
*/
template <typename T>
class IntegerIterator: public std::iterator<std::input_iterator_tag, T, std::ptrdiff_t, T*, T> {
public:
	explicit IntegerIterator(int value): value(value) {

	}

	IntegerIterator& operator++() {
		++value;
		return *this;
	}

	IntegerIterator operator++(int) {
		IntegerIterator copy = *this;
		++value;
		return copy;
	}

	IntegerIterator& operator--() {
		--value;
		return *this;
	}

	IntegerIterator operator--(int) {
		IntegerIterator copy = *this;
		--value;
		return copy;
	}

	T operator*() const {
		return value;
	}

	bool operator==(IntegerIterator rhs) {
		return value == rhs.value;
	}

	bool operator!=(IntegerIterator rhs) {
		return !(*this == rhs);
	}

private:
	T value;
};

template <typename T>
class IntegerRange {
public:
	IntegerRange(T begin, T end): begin_(begin), end_(end) {

	}

	IntegerIterator<T> begin() const {
		return IntegerIterator<T>(begin_);
	}

	IntegerIterator<T> end() const {
		return IntegerIterator<T>(end_);
	}

private:
	T begin_;
	T end_;
};

template <typename T>
class ReversedIntegerRange {
	typedef std::reverse_iterator<IntegerIterator<T>> IteratorType;
public:
	ReversedIntegerRange(T begin, T end): begin_(begin), end_(end) {

	}

	IteratorType begin() const {
		return IteratorType(IntegerIterator<T>(begin_));
	}

	IteratorType end() const {
		return IteratorType(IntegerIterator<T>(end_));
	}

private:
	T begin_;
	T end_;
};

template <typename T>
IntegerRange<T> range(T to) {
	SPCPPL_ASSERT(to >= 0);
	return IntegerRange<T>(0, to);
}

template <typename T>
IntegerRange<T> range(T from, T to) {
	SPCPPL_ASSERT(from <= to);
	return IntegerRange<T>(from, to);
}

template <typename T>
IntegerRange<T> inclusiveRange(T to) {
	SPCPPL_ASSERT(to >= 0);
	return IntegerRange<T>(0, to + 1);
}

template <typename T>
IntegerRange<T> inclusiveRange(T from, T to) {
	SPCPPL_ASSERT(from <= to);
	return IntegerRange<T>(from, to + 1);
}

template <typename T>
ReversedIntegerRange<T> downrange(T from) {
	SPCPPL_ASSERT(from >= 0);
	return ReversedIntegerRange<T>(from, 0);
}

template <typename T>
ReversedIntegerRange<T> downrange(T from, T to) {
	SPCPPL_ASSERT(from >= to);
	return ReversedIntegerRange<T>(from, to);
}

template <typename T>
ReversedIntegerRange<T> inclusiveDownrange(T from) {
	SPCPPL_ASSERT(from >= 0);
	return ReversedIntegerRange<T>(from + 1, 0);
}

template <typename T>
ReversedIntegerRange<T> inclusiveDownrange(T from, T to) {
	SPCPPL_ASSERT(from >= to);
	return ReversedIntegerRange<T>(from + 1, to);
}



#include <random>


typedef std::mt19937 impl__Random;

impl__Random& random_engine() {
	static std::random_device device;
	static impl__Random engine(device());
	return engine;
}

int randomInteger(int to) {
	SPCPPL_ASSERT(to > 0);
	std::uniform_int_distribution<int> d(0, to - 1);
	return d(random_engine());
}

int randomInteger(int from, int to) {
	return from + randomInteger(to - from);
}


#include <vector>
#include <cstddef>


bool isPrime(int n) {
	for (int i = 2; i * i <= n; ++i) {
		if (n % i == 0) {
			return false;
		}
	}
	return n >= 2;
}

struct Bool {
	/* implicit */ Bool(bool value): value(value) {

	}

	operator bool() const {
		return value;
	}

private:
	bool value;
};

std::vector<Bool> primeMap(std::size_t maxN) {
	std::vector<Bool> prime(maxN + 1, true);

	prime[0] = false;
	prime[1] = false;

	for (std::size_t i = 2; i * i <= maxN; ++i) {
		if (prime[i]) {
			if (i * 1ULL * i <= maxN) {
				for (std::size_t j = i * i; j <= maxN; j += i) {
					prime[j] = false;
				}
			}
		}
	}
	return prime;
}

std::vector<int> allPrimes(int maxN) {
	std::vector<int> result;
	result.reserve(maxN);
	std::vector<Bool> map = primeMap(maxN);
	for (int i: range(maxN + 1)) {
		if (map[i]) {
			result.push_back(i);
		}
	}
	return result;
}

int nextPrime(int n) {
	while (!isPrime(n)) {
		++n;
	}
	return n;
}


using namespace std;

class TaskD {
public:

	vector<vector<int>> g;
	constexpr static int mod = 1000000007;

	unsigned int coef[2];
	struct Hash {
		unsigned int values[2];
		bool operator < (Hash hash) const {
			return tie(values[0], values[1]) < tie(hash.values[0], hash.values[1]);
		}
	};
	struct HashSet {
		HashSet() {
			mult[0] = 1;
			mult[1] = 1;
			added[0] = 0;
			added[1] = 0;
		}
		set<Hash> s;
		unsigned int mult[2];
		unsigned int added[2];
	};

	vector<int> ans;

	unsigned int mul(unsigned int a, unsigned int b) {
		return (unsigned int) (a * 1ULL * b % mod);
	}
	unsigned int add(unsigned int a, unsigned int b) {
		a += b;
		if(a >= mod) {
			a -= mod;
		}
		return a;
	}
	unsigned int sub(int a, int b) {
		a -= b;
		if(a < mod) {
			a += mod;
		}
		return (unsigned int) a;
	}
	unsigned int binpow(unsigned int a, unsigned int n) {
		unsigned int res = 1;
		while(n) {
			if(n & 1) {
				res = mul(res, a);
			}
			a = mul(a, a);
			n >>= 1;
		}
		return res;
	}

	HashSet dfs(int v, int p) {
		HashSet res;
		unsigned int rev[2] = {1, 1};
		for (int to: g[v]) {
			if(to == p) {
				continue;
			}
			auto cur = dfs(to, v);
			if(cur.s.size() > res.s.size()) {
				swap(cur, res);
				for (int i: range(2)) {
					rev[i] = binpow(res.mult[i], mod - 2);
				}
			}
			if(cur.s.empty()) {
				continue;
			}

			for (Hash h: cur.s) {
				Hash ha;
				for(int i: range(2)) {
					ha.values[i] = add(mul(h.values[i], cur.mult[i]), cur.added[i]);
					ha.values[i] = sub(ha.values[i], res.added[i]);
					ha.values[i] = mul(ha.values[i], rev[i]);
				}
				res.s.insert(ha);
			}
		}

		Hash empty = {0, 0};

		for(int i: range(2)) {
			empty.values[i] = sub(empty.values[i], res.added[i]);
			empty.values[i] = mul(empty.values[i], rev[i]);
		}

		res.s.insert(empty);

		for (int i: range(2)) {
			res.mult[i] = mul(res.mult[i], coef[i]);
			res.added[i] = add(mul(res.added[i], coef[i]), (unsigned int) s[v]);
		}
		ans[v] += (int) res.s.size();
		return res;
	}

	string s;
	void solve(std::istream& in, std::ostream& out) {
		int n;

		n = 300000;
		in >> n;
		for(int i: range(2)) {
			coef[i] = (unsigned int) randomInteger(30, 1000000005);
		}

		ans.resize(n);
		for (int i = 0; i < n; ++i) {
			in >> ans[i];
		}

		in >> s;
		//s.resize(n);
		//for (int i: range(n)) {
		//	s[i] = 'a' + randomInteger(0, 25);
		//}

		g.resize(n);
		for (int i: range(n - 1)) {
			int a, b;
			in >> a >> b;
			--a, --b;
			g[a].push_back(b);
			g[b].push_back(a);
		}

		dfs(0, -1);

		int mx = *max_element(ans.begin(), ans.end());
		out << mx << '\n' << count(ans.begin(), ans.end(), mx);
	}
};


int main() {
	std::ios_base::sync_with_stdio(false);
	TaskD solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	in.tie(0);
	out << std::fixed;
	out.precision(20);
	solver.solve(in, out);
	return 0;
}