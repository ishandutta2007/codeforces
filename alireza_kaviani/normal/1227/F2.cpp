/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 2e5 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 998244353; // 1e9 + 9;

ll n, k, cnt, fact[MAXN], inv[MAXN], Inv[MAXN], H[MAXN], ans;

ll C(ll n, ll r) {
    if (r < 0 || r > n) return 0;
    return fact[n] * inv[r] % MOD * inv[n - r] % MOD;
}

int main() {
    fast_io;
    fact[0] = 1;
    inv[0] = 1;
    Inv[1] = 1;
    for (ll i = 2; i < MAXN; i++) Inv[i] = (-MOD / i + MOD) % MOD * Inv[MOD % i] % MOD;
    for (ll i = 1; i < MAXN; i++) fact[i] = fact[i - 1] * i % MOD;
    for (ll i = 1; i < MAXN; i++) inv[i] = inv[i - 1] * Inv[i] % MOD;

    cin >> n >> k;
    if (k == 1) return cout << 0 << endl, 0;
    for (ll i = 0; i < n; i++) cin >> H[i];
    for (ll i = 0; i < n; i++) cnt += (H[i] == H[(i + 1) % n]);

    for (ll i = cnt; i < n; i++) {
        ll x = n - i;
        ans = (ans +
               C(n - cnt, i - cnt) * (poww(2, x, MOD) - (x % 2 == 0 ? C(x, x / 2) : 0) + MOD) % MOD * inv[2] % MOD *
               poww(k, cnt, MOD) % MOD * poww(k - 2, i - cnt, MOD) % MOD) % MOD;
    }
    cout << ans << endl;

    return 0;
}
/*

*/