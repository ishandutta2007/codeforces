/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author marX
 */

#include <iostream>
#include <fstream>

#include <bits/stdc++.h>

using namespace std;

class FDIYGarland {
public:
    void solve(std::istream &in, std::ostream &out) {
        int n;
        in >> n;

        vector<vector<int>> tree(n + 1);

        auto add_edge = [&](int x, int y) {
            tree[x].push_back(y);
            tree[y].push_back(x);
        };

        int p = 0;

        vector<int> seen(n + 1);

        int w = n;

        for (int i = 1; i < n; ++i) {
            int u;
            in >> u;

            if (seen[u]) {
                add_edge(p, w);
                seen[w] = true;
                p = u;
            } else {
                add_edge(p, u);
                p = u;
                seen[u] = true;
            }

            while (seen[w]) w--;
        }

        add_edge(p, w);

        out << tree[0][0] << '\n';

        for (int i = 1; i <= n; ++i) {
            for (auto v : tree[i]) {
                if (i < v)
                    out << i << " " << v << '\n';
            }
        }
    }
};


int main() {
    FDIYGarland solver;
    std::istream &in(std::cin);
    std::ostream &out(std::cout);
    solver.solve(in, out);
    return 0;
}