/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Majk
 */

#include <vector>
#include <iostream>
#include <unordered_map>
#include <map>
#include <iomanip>
#include <set>
#include <functional>
#include <fstream>
#include <algorithm>
#include <cassert>
#include <cmath>
#include <string>
#include <sstream>
#include <queue>
using namespace std;

#define x first
#define y second
constexpr int MOD = 1000000007;

typedef std::pair<int,int> pii;
typedef long long ll;
typedef unsigned int ui;

template<typename T>std::istream&operator>>(std::istream&i,vector<T>&t) {for(auto&v:t){i>>v;}return i;}
template<typename T>std::ostream&operator<<(std::ostream&o,const vector<T>&t) {for(size_t i=0;i<t.size();++i){o<<t[i]<<" \n"[i == t.size()-1];}return o;}
template <typename T, typename U> std::istream&operator>>(std::istream&i, pair<T,U>&p) {i >> p.x >> p.y; return i;}
template<typename T> using minheap = priority_queue<T, vector<T>, greater<T>>;
template<typename T> using maxheap = priority_queue<T, vector<T>, less<T>>;
auto fraclt = [](const pii&a,const pii&b) { return (ll)a.x * b.y < (ll)b.x * a.y; };
struct cmpfrac { bool operator()(const pii&a,const pii&b)const { return (ll)a.x * b.y < (ll)b.x * a.y; }};


struct input {
	std::istream &cin;
	explicit input(std::istream &cin) :cin(cin){}
	template <typename T> operator T() { T t; cin >> t; return t; }
};
#define $ input{cin}

int logceil(ll x) {int b=0;while(x){x>>=1;++b;}return b;}

namespace std {
    template<typename T,typename U>struct hash<pair<T,U>>{hash<T>t;hash<U>u;size_t operator()(const pair<T,U>&p)const{return t(p.x)^(u(p.y)<<7);}};
}
template<typename T,typename F>T bsh(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){l=m+1;r=m;}else{h=m-1;}}return r;}
template<typename T,typename F>T bsl(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){h=m-1;r=m;}else{l=m+1;}}return r;}
template<typename T> T gcd(T a,T b) { if (a<b) swap(a,b); return b?gcd(b,a%b):a; }

template<typename T>class vector2:public vector<vector<T>>{public:vector2(){} vector2(size_t a,size_t b,T t=T()):vector<vector<T>>(a,vector<T>(b,t)){}};
template<typename T>class vector3:public vector<vector<vector<T>>>{public:vector3(){} vector3(size_t a,size_t b,size_t c,T t=T()):vector<vector<vector<T>>>(a,vector<vector<T>>(b,vector<T>(c,t))){}};

// #include "../l/mod.h"

class TaskD {
public:
    void solve(istream& cin, ostream& cout) {
		int N=$,M=$,K=$;
		vector<vector<int>> E(N);
		vector<bool> F(N, false);
		for (int j = 0; j < K; ++j) {
			int f=$; --f; F[f]= true;
		}
		for (int i = 0; i < M; ++i) {
			int a=$,b=$; --a; --b;
			E[a].push_back(b);
			E[b].push_back(a);
		}

		vector<pii> R(N, {0,0});
		multimap<pii, int, cmpfrac> Q;
		for (int k = 0; k < N; ++k) {
			if (!F[k]) {
				R[k].y = E[k].size();
				for (int v: E[k]) {
					R[k].x += !F[v];
				}
				Q.insert({R[k], k});
//				cerr << "A" << k+1 << ' ' <<  R[k].x << ' ' << R[k].y << endl;
			}
		}

		pii best = {0,1};
		int bestcnt = 0;
		vector<int> D;
		while (!Q.empty()) {
//			for (auto it = Q.begin(); it != Q.end(); ++it) {
//				cerr << "I" << it->y+1 << ' ' << it->x.x << ' ' << it->x.y << endl;
//			}

//			cerr << "R" << Q.begin()->y+1 << ' ' << Q.begin()->x.x << ' ' << Q.begin()->x.y << endl;
			int k = Q.begin()->y;
			pii v = Q.begin()->x;
			Q.erase(Q.begin());
			if (R[k] == v) {
//				cerr << "O" << endl;

				if (fraclt(best, v)) {
					best = v;
					bestcnt = D.size();
				}
				for (int u: E[k]) {
					if (R[u].x > 0) {
						--R[u].x;
						Q.insert({R[u], u});
					}
				}
				R[k].x = -1;
				D.push_back(k);
			}
		}

		for (int l = 0; l < bestcnt; ++l) {
			F[D[l]] = true;
		}
		cout << N - K - bestcnt << endl;
		for (int i = 0; i < N; ++i) {
			if (!F[i]) cout << i+1 << ' ';
		}
    }
};


int main() {
	ios_base::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr);
	TaskD solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}