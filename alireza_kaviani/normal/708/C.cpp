/* Generated by powerful Codeforces Tool
 * You can download the binary file in here https://github.com/xalanq/cf-tool (Windows, macOS, Linux)
 * Author: alireza_kaviani
 * Time: 2020-04-04 19:56:30
**/
#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 4e5 + 10;
const ll LOG = 22;
const ll INF = 1e9;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

int n , timer , ans[MAXN] , sz[MAXN] , st[MAXN] , seg[MAXN << 2];
vector<int> adj[MAXN];

void modify(int x , int val , int id = 1 , int l = 0 , int r = MAXN){
    if(r - l == 1){
        seg[id] = (val <= n / 2 ? val: -INF);
        return;
    }
    int mid = l + r >> 1;
    if(x < mid) modify(x , val , id << 1 , l , mid);
    else    modify(x , val , id << 1 | 1 , mid , r);
    seg[id] = max(seg[id << 1] , seg[id << 1 | 1]);
}

int get(int ql , int qr , int id = 1 , int l = 0 , int r = MAXN){
    if(qr <= l || r <= ql || qr <= ql)  return -INF;
    if(ql <= l && r <= qr)  return seg[id];
    int mid = l + r >> 1;
    return max(get(ql , qr , id << 1 , l , mid) , get(ql , qr , id << 1 | 1 , mid , r));
}

void PreDFS(int v , int p = -1){
    st[v] = ++timer;
    sz[v] = 1;
    for(int u : adj[v]) if(u != p)  PreDFS(u , v) , sz[v] += sz[u];
    modify(st[v] , sz[v]);
}

void SolveDFS(int v , int p = -1){
    for(int u : adj[v]){
        if(u == p)  continue;
        modify(st[v] , n - sz[u]);
        SolveDFS(u , v);
    }
    modify(st[v] , sz[v]);
    ans[v] = 1;
    //cout << n - sz[v] - max(get(0 , st[v]) , get(st[v] + sz[v] , MAXN)) << endl;
    if(n - sz[v] - max(get(0 , st[v]) , get(st[v] + sz[v] , MAXN)) > n / 2) ans[v] = 0;
    for(int u : adj[v]){
        if(u == p)  continue;
        if(sz[u] > n / 2 && sz[u] - get(st[u] , st[u] + sz[u]) > n / 2) ans[v] = 0;
    }
}

int main() {
    ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);

    cin >> n;
    for(int i = 1 ; i < n ; i++){
        int v , u;
        cin >> v >> u;
        adj[v].push_back(u);
        adj[u].push_back(v);
    }
    PreDFS(1);
    SolveDFS(1);
    for(ll i = 1 ; i <= n ; i++)    cout << ans[i] << sep;

    return 0;
}
/*

*/