/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Azat Ismagilov
 */

#include <fstream>

#include <iostream>
#include <algorithm>
#include <vector>
#include <queue>
#include <numeric>
#include <set>
#include <map>

#define ld long double
#define fs first
#define sc second
#define pb push_back
#define ppb pop_back
#define pf push_front
#define ppf pop_front
#define mp make_pair
#define len(v) ((int)v.size())
#define vc vector
#define pr pair
#define all(v) v.begin(), v.end()
#pragma GCC optimize("O3")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,tune=native")
#pragma GCC optimize("unroll-loops")

using namespace std;

template<typename T, typename U>
inline ostream &operator<<(ostream &_out, const pair<T, U> &_p) {
    _out << _p.first << ' ' << _p.second;
    return _out;
}

template<typename T, typename U>
inline istream &operator>>(istream &_in, pair<T, U> &_p) {
    _in >> _p.first >> _p.second;
    return _in;
}

template<typename T>
inline ostream &operator<<(ostream &_out, const vector<T> &_v) {
    if (_v.empty()) { return _out; }
    _out << _v.front();
    for (auto _it = ++_v.begin(); _it != _v.end(); ++_it) { _out << ' ' << *_it; }
    return _out;
}

template<typename T>
inline istream &operator>>(istream &_in, vector<T> &_v) {
    for (auto &_i : _v) { _in >> _i; }
    return _in;
}

const int MAXN = 3e5;
const int INF = 1e9;
const int MOD = 1e9 + 7;

int ans[MAXN];
int d[MAXN];
vc<int> g[MAXN];
vc<int> g1[MAXN];
int mems[MAXN];
long long anss = 0;
int pos[MAXN];


class CKonradIOcenkaKompanii {
public:
    void solve(std::istream &in, std::ostream &out) {
        int n, m;
        in >> n >> m;
        for (int i = 0; i < m; i++) {
            int a, b;
            in >> a >> b;
            a--, b--;
            if (a > b) {
                swap(a, b);
            }
            g1[a].pb(b);
            g[b].pb(a);
            mems[b]++;
        }
        int q;
        in >> q;
        for (int i = 0; i < n; i++) {
            pos[i] = i;
            for (auto to : g[i]) {
                anss += mems[to];
            }
        }
        out << anss << '\n';
        for (int i = 0; i < q; i++) {
            int v;
            in >> v;
            v--;
            int v1 = v;
            v = pos[v1];
            anss -= (long long) len(g1[v]) * mems[v];
            mems[i + n] = len(g1[v]) + mems[v];
            for (auto to1 : g1[v]) {
                int to = pos[to1];
                mems[to]--;
                anss -= len(g1[to]);
                anss += mems[to];
                g1[to].pb(v1);
            }
            g1[v] = {};
            mems[v] = 0;
            pos[v1] = i + n;
            out << anss << '\n';
        }
    }
};


signed main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    CKonradIOcenkaKompanii solver;
    std::istream &in(std::cin);
    std::ostream &out(std::cout);
    solver.solve(in, out);
    return 0;
}