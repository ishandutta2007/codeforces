/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author marX
 */

#include <iostream>
#include <fstream>

#include <bits/stdc++.h>


using namespace std;


struct disjoint_set {
    vector<int> ds;

    disjoint_set(int n) {
        ds = vector<int>(n, -1);
    }

    int root(int a) {
        return ds[a] < 0 ? a : ds[a] = root(ds[a]);
    }

    bool join(int a, int b) {
        a = root(a), b = root(b);
        if (a == b) return false;
        if (ds[a] < ds[b]) swap(a, b);
        ds[b] += ds[a];
        ds[a] = b;
        return true;
    }
};

using namespace std;

class DSecretPasswords {
public:
    void solve(std::istream &in, std::ostream &out) {
        int n;
        in >> n;
        disjoint_set ds(n + 26);

        vector<bool> used(26);

        for (int i = 0; i < n; ++i) {
            string s;
            in >> s;

            for (auto x : s) {
                ds.join(x - 'a', i + 26);
                used[x - 'a'] = true;
            }
        }

        set<int> answer;

        for (int i = 0; i < 26; ++i) {
            if (used[i]) answer.insert(ds.root(i));
        }

        out << answer.size() << endl;
    }
};


int main() {
    DSecretPasswords solver;
    std::istream &in(std::cin);
    std::ostream &out(std::cout);
    solver.solve(in, out);
    return 0;
}