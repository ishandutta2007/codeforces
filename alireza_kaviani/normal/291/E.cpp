/* Generated by powerful Codeforces Tool
 * You can download the binary file in here https://github.com/xalanq/cf-tool (Windows, macOS, Linux)
 * Author: AmShZ6
 * Time: 2020-05-18 17:51:41
**/
#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 3e5 + 10;
const ll LOG = 22;
const ll ALPHA = 26;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

int n , m , ans , lps[MAXN] , dp[MAXN][ALPHA];
vector<int> adj[MAXN];
string s[MAXN] , t;

void DFS(int v , int k = 0){
    //cout << v << sep << k << endl;
    for(int u : adj[v]){
        int k2 = k;
        for(int j = 0 ; j < SZ(s[u]) ; j++){
            k2 = dp[k2][s[u][j] - 97];
            if(k2 == m) ans++ , k2 = lps[k2 - 1];
        }
        DFS(u , k2);
    }
}

int main() {
    ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);

    cin >> n;
    for(int i = 2 , p ; i <= n ; i++){
        cin >> p >> s[i];
        adj[p].push_back(i);
    }
    cin >> t; m = SZ(t);
    for(int i = 1 , k = 0 ; i < m ; i++){
        while(k && t[k] != t[i])    k = lps[k - 1];
        if(t[k] == t[i])    k++;
        lps[i] = k;
        //cout << i << sep << lps[i] << endl;
    }
    dp[0][t[0] - 97] = 1;
    for(int i = 1 ; i < m ; i++){
        for(int j = 0 ; j < ALPHA ; j++){
            if(j + 97 == t[i])  dp[i][j] = i + 1;
            else    dp[i][j] = dp[lps[i - 1]][j];
            //cout << i << sep << j << sep << dp[i][j] << endl;
        }
    }
    DFS(1);
    cout << ans << endl;

    return 0;
}
/*

*/