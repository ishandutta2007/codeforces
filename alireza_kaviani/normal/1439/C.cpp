/* Generated by powerful Codeforces Tool
 * You can download the binary file in here https://github.com/xalanq/cf-tool (Windows, macOS, Linux)
 * Author: alireza_kaviani
 * Time: 2020-11-17 18:05:02
**/
#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<int, int> pii;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())
#define lc							id << 1
#define rc							lc | 1

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 2e5 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

int n , q , A[MAXN] , mn[MAXN * 4] , mx[MAXN * 4] , lz[MAXN * 4];
ll sum[MAXN * 4];

void build(int id = 1 , int l = 0 , int r = MAXN){
	if(r - l == 1){
		mn[id] = mx[id] = sum[id] = A[l];
		return;
	}
	int mid = l + r >> 1;
	build(lc , l , mid);
	build(rc , mid , r);
	mn[id] = min(mn[lc] , mn[rc]);
	mx[id] = max(mx[lc] , mx[rc]);
	sum[id] = sum[lc] + sum[rc];
}

void shift(int id , int l , int mid , int r){
	if(lz[id] == 0)	return;
	lz[lc] = lz[rc] = lz[id];
	mn[lc] = mn[rc] = lz[id];
	mx[lc] = mx[rc] = lz[id];
	sum[lc] = 1ll * (mid - l) * lz[id];
	sum[rc] = 1ll * (r - mid) * lz[id];
	lz[id] = 0;
}

void update(int ql , int qr , int val , int id = 1 , int l = 0 , int r = MAXN){
	if(r <= ql || qr <= l)	return;
	if(ql <= l && r <= qr && mn[id] >= val)	return;
	if(ql <= l && r <= qr && mx[id] < val){
		mn[id] = mx[id] = val;
		sum[id] = 1ll * (r - l) * val;
		lz[id] = val;
		return;
	}
	int mid = l + r >> 1;
	shift(id , l , mid , r);
	update(ql , qr , val , lc , l , mid);
	update(ql , qr , val , rc , mid , r);
	mn[id] = min(mn[lc] , mn[rc]);
	mx[id] = max(mx[lc] , mx[rc]);
	sum[id] = sum[lc] + sum[rc];
}

pii get(int ql , int val , int id = 1 , int l = 0 , int r = MAXN){
	if(r <= ql || n < l)	return {0 , 0};
	if(ql <= l && r <= n + 1 && mn[id] > val)	return {0 , 0};
	if(ql <= l && r <= n + 1 && sum[id] <= val)	return {r - l , sum[id]};
	int mid = l + r >> 1;
	shift(id , l , mid , r);
	pii A = get(ql , val , lc , l , mid);
	pii B = get(ql , val - A.Y , rc , mid , r);
	return {A.X + B.X , A.Y + B.Y};
}

int main() {
	ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);

	cin >> n >> q;
	for(int i = 1 ; i <= n ; i++){
		cin >> A[i];
	}
	build();
	while(q--){
		int t , x , y;
		cin >> t >> x >> y;
		if(t == 1){
			update(1 , x + 1 , y);
		}
		else{
			cout << get(x , y).X << endl;
		}
	}

    return 0;
}
/*

*/