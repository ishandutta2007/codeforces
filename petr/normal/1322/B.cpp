/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <bits/stdc++.h>

#define pb push_back
#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()
#define mp make_pair

using namespace std;

typedef long long int64;
typedef vector<int> vi;
typedef pair<int, int> ii;

class TaskB {
 public:
  void solveOne(istream &in, ostream &out) {
    int n;
    in >> n;
    vector<int> a(n);
    for (int i = 0; i < n; ++i) {
      in >> a[i];
    }
    sort(a.begin(), a.end());
    int res = 0;
    for (int bit = 0; bit < 30; ++bit) {
      vector<int> b(n);
      int half = 1 << bit;
      for (int i = 0; i < n; ++i) {
        b[i] = a[i] & (2 * half - 1);
      }
      sort(b.begin(), b.end());
      int p1 = 0;
      int p2 = 0;
      int p3 = 0;
      int pairs = 0;
      for (int i = b.size() - 1; i >= 0; --i) {
        while (p1 < b.size() && b[p1] + b[i] < half) ++p1;
        while (p2 < b.size() && b[p2] + b[i] < 2 * half) ++p2;
        while (p3 < b.size() && b[p3] + b[i] < 3 * half) ++p3;
        pairs += p2 - p1;
        pairs += b.size() - p3;
        if ((2 * b[i] >= half && 2 * b[i] < 2 * half) || (2 * b[i] >= 3 * half)) {
          --pairs;
        }
      }
      assert(pairs % 2 == 0);
      pairs /= 2;
      if (pairs % 2) {
        res += half;
      }
    }
    out << res << "\n";
  }

  void solve(std::istream &in, std::ostream &out) {
    int nt;
    nt = 1;
    for (int it = 0; it < nt; ++it) {
      solveOne(in, out);
    }
  }
};


int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  TaskB solver;
  std::istream& in(std::cin);
  std::ostream& out(std::cout);
  solver.solve(in, out);
  return 0;
}