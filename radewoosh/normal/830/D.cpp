//PRZEMYSL ASSERTY

//SPRAWDZ CORNER CASE'Y, MINIMALNE I MAKSYMALNE WEJCIE I WYJCIE

//MODULO = 1

//while (clock()<=69*CLOCKS_PER_SEC)

#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace __gnu_pbds;
using namespace std;

template <typename T>
using ordered_set =
    tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

#define sim template < class c
#define ris return * this
#define dor > debug & operator <<
#define eni(x) sim > typename \
  enable_if<sizeof dud<c>(0) x 1, debug&>::type operator<<(c i) {
sim > struct rge { c b, e; };
sim > rge<c> range(c i, c j) { return rge<c>{i, j}; }
sim > auto dud(c* x) -> decltype(cerr << *x, 0);
sim > char dud(...);
struct debug {
#ifdef LOCAL
~debug() { cerr << endl; }
eni(!=) cerr << boolalpha << i; ris; }
eni(==) ris << range(begin(i), end(i)); }
sim, class b dor(pair < b, c > d) {
  ris << "(" << d.first << ", " << d.second << ")";
}
sim dor(rge<c> d) {
  *this << "[";
  for (auto it = d.b; it != d.e; ++it)
    *this << ", " + 2 * (it == d.b) << *it;
  ris << "]";
}
#else
sim dor(const c&) { ris; }
#endif
};
#define imie(...) " [" << #__VA_ARGS__ ": " << (__VA_ARGS__) << "] "

#define shandom_ruffle random_shuffle

const int nax=2007;
const long long mod=1000*1000*1000+7;

int n;
long long dp[nax][nax][4];

int zap[]={0, 1, 1, 2};

long long wyn;

long long pot[nax];

long long wtu[nax];

inline void dod(long long &a, long long b)
{
	a+=b;
	a%=mod;
}

inline long long magia(long long v, int u)
{
	long long ret=(v/2)*(v/2-1);
	if (u==1)
		ret+=(v/2);
	if (u==2)
		ret+=(v/2);
	if (u==3)
	{
		ret=(v/2-1)*(v/2-2);
		ret+=2*((v-2)/2);
		if (v==2)
			ret++;
	}
	return ret;
}

inline long long magia2(long long v, int sta, int kon)
{
	long long ret=v*(v-1)+sta*v+kon*v;
	return ret;
}

long long pre[nax];

int main()
{
   pre[1]=1;
   pre[2]=9;
   pre[3]=245;
   pre[4]=126565;
   pre[5]=54326037;
   pre[6]=321837880;
   pre[7]=323252721;
   pre[8]=754868154;
   pre[9]=328083248;
   pre[10]=838314395;
   pre[11]=220816781;
   pre[12]=893672292;
   pre[13]=166441208;
   pre[14]=251255697;
   pre[15]=114256285;
   pre[16]=118775501;
   pre[17]=482714697;
   pre[18]=11784725;
   pre[19]=460862131;
   pre[20]=550384565;
   pre[21]=106742050;
   pre[22]=425241115;
   pre[23]=626692854;
   pre[24]=674266678;
   pre[25]=320014275;
   pre[26]=345949512;
   pre[27]=527320049;
   pre[28]=897822749;
   pre[29]=137190263;
   pre[30]=491039182;
   pre[31]=810384961;
   pre[32]=482023334;
   pre[33]=658099864;
   pre[34]=886790989;
   pre[35]=845381174;
   pre[36]=371433224;
   pre[37]=278969124;
   pre[38]=420088324;
   pre[39]=696766322;
   pre[40]=388302635;
   pre[41]=141033366;
   pre[42]=46387851;
   pre[43]=932125021;
   pre[44]=278342766;
   pre[45]=371131134;
   pre[46]=922501918;
   pre[47]=110778457;
   pre[48]=506223573;
   pre[49]=806353719;
   pre[50]=391845991;
   pre[51]=923507761;
   pre[52]=780307355;
   pre[53]=109951115;
   pre[54]=830090230;
   pre[55]=605558495;
   pre[56]=344686604;
   pre[57]=988110893;
   pre[58]=944684429;
   pre[59]=715019947;
   pre[60]=799898820;
   pre[61]=384672708;
   pre[62]=907325090;
   pre[63]=758952329;
   pre[64]=550672104;
   pre[65]=368337206;
   pre[66]=394915145;
   pre[67]=401744167;
   pre[68]=923781939;
   pre[69]=831857516;
   pre[70]=407845661;
   pre[71]=329267374;
   pre[72]=927004007;
   pre[73]=891609656;
   pre[74]=897919613;
   pre[75]=481297880;
   pre[76]=737337940;
   pre[77]=651873737;
   pre[78]=287246681;
   pre[79]=973133651;
   pre[80]=679864988;
   pre[81]=784719328;
   pre[82]=820504764;
   pre[83]=875613823;
   pre[84]=806512665;
   pre[85]=164851642;
   pre[86]=500228957;
   pre[87]=951814419;
   pre[88]=447763649;
   pre[89]=273141670;
   pre[90]=979349615;
   pre[91]=964027956;
   pre[92]=809510400;
   pre[93]=276634497;
   pre[94]=116631976;
   pre[95]=426739449;
   pre[96]=175282420;
   pre[97]=885948162;
   pre[98]=62270880;
   pre[99]=974395255;
   pre[100]=675165056;
   pre[101]=759589968;
   pre[102]=837957573;
   pre[103]=931897605;
   pre[104]=152352780;
   pre[105]=585420109;
   pre[106]=1772087;
   pre[107]=333401718;
   pre[108]=898833639;
   pre[109]=745874265;
   pre[110]=786209423;
   pre[111]=691982338;
   pre[112]=498790927;
   pre[113]=473374639;
   pre[114]=274302623;
   pre[115]=971280670;
   pre[116]=241671319;
   pre[117]=13070005;
   pre[118]=302088807;
   pre[119]=550276351;
   pre[120]=436592588;
   pre[121]=631667314;
   pre[122]=548656698;
   pre[123]=730626984;
   pre[124]=146295220;
   pre[125]=674398632;
   pre[126]=400383348;
   pre[127]=454138904;
   pre[128]=786220712;
   pre[129]=118620797;
   pre[130]=233440672;
   pre[131]=217349271;
   pre[132]=274853536;
   pre[133]=310607544;
   pre[134]=105221205;
   pre[135]=769566615;
   pre[136]=853585061;
   pre[137]=800665807;
   pre[138]=695377419;
   pre[139]=924327065;
   pre[140]=388199705;
   pre[141]=551624811;
   pre[142]=721435546;
   pre[143]=501720515;
   pre[144]=308465454;
   pre[145]=825369234;
   pre[146]=396065729;
   pre[147]=451899519;
   pre[148]=295058424;
   pre[149]=142088952;
   pre[150]=473485086;
   pre[151]=378771634;
   pre[152]=734511215;
   pre[153]=462404399;
   pre[154]=959198328;
   pre[155]=337668263;
   pre[156]=794122911;
   pre[157]=38911400;
   pre[158]=951992982;
   pre[159]=472696081;
   pre[160]=373904752;
   pre[161]=105884826;
   pre[162]=630251717;
   pre[163]=28980684;
   pre[164]=845136347;
   pre[165]=353665773;
   pre[166]=691661192;
   pre[167]=19922354;
   pre[168]=231463797;
   pre[169]=757917231;
   pre[170]=242739918;
   pre[171]=979036950;
   pre[172]=713722080;
   pre[173]=234689388;
   pre[174]=2243164;
   pre[175]=209872853;
   pre[176]=240808787;
   pre[177]=539523346;
   pre[178]=425797848;
   pre[179]=913772061;
   pre[180]=224613100;
   pre[181]=421742777;
   pre[182]=222232478;
   pre[183]=92712941;
   pre[184]=215137570;
   pre[185]=949901408;
   pre[186]=274827432;
   pre[187]=15162482;
   pre[188]=593145989;
   pre[189]=274574232;
   pre[190]=239282092;
   pre[191]=762720192;
   pre[192]=804146934;
   pre[193]=500629424;
   pre[194]=565985054;
   pre[195]=81127381;
   pre[196]=671811155;
   pre[197]=655565571;
   pre[198]=890331075;
   pre[199]=237994348;
   pre[200]=743647404;
   pre[201]=667160634;
   pre[202]=713914299;
   pre[203]=668506729;
   pre[204]=741341289;
   pre[205]=277636808;
   pre[206]=762781382;
   pre[207]=14272789;
   pre[208]=902864131;
   pre[209]=567443405;
   pre[210]=149113383;
   pre[211]=648844381;
   pre[212]=825489976;
   pre[213]=933016723;
   pre[214]=192288078;
   pre[215]=734493315;
   pre[216]=240985733;
   pre[217]=861817693;
   pre[218]=762711459;
   pre[219]=525904609;
   pre[220]=532463481;
   pre[221]=377133989;
   pre[222]=620711079;
   pre[223]=772561562;
   pre[224]=980733194;
   pre[225]=227599811;
   pre[226]=162774370;
   pre[227]=209512798;
   pre[228]=787116594;
   pre[229]=3509258;
   pre[230]=748795368;
   pre[231]=378035466;
   pre[232]=612938915;
   pre[233]=802091952;
   pre[234]=857679599;
   pre[235]=481748937;
   pre[236]=493370392;
   pre[237]=358420805;
   pre[238]=48301629;
   pre[239]=412001241;
   pre[240]=463126722;
   pre[241]=509578422;
   pre[242]=967799131;
   pre[243]=994766554;
   pre[244]=687287243;
   pre[245]=863623583;
   pre[246]=771554899;
   pre[247]=690911527;
   pre[248]=855314994;
   pre[249]=923686429;
   pre[250]=246862514;
   pre[251]=192479791;
   pre[252]=133487041;
   pre[253]=703444043;
   pre[254]=295281758;
   pre[255]=801816257;
   pre[256]=920762934;
   pre[257]=749306433;
   pre[258]=973004841;
   pre[259]=848644684;
   pre[260]=560026478;
   pre[261]=952127278;
   pre[262]=616654635;
   pre[263]=839390326;
   pre[264]=975154012;
   pre[265]=409583672;
   pre[266]=635350249;
   pre[267]=343228425;
   pre[268]=335331602;
   pre[269]=223826406;
   pre[270]=952341037;
   pre[271]=589677800;
   pre[272]=249747234;
   pre[273]=555694261;
   pre[274]=137143500;
   pre[275]=628190328;
   pre[276]=461598392;
   pre[277]=431912756;
   pre[278]=29349807;
   pre[279]=759199489;
   pre[280]=783281228;
   pre[281]=781971312;
   pre[282]=915823407;
   pre[283]=388508707;
   pre[284]=718062705;
   pre[285]=27424111;
   pre[286]=309999451;
   pre[287]=963383322;
   pre[288]=831185229;
   pre[289]=132910888;
   pre[290]=347028136;
   pre[291]=850484840;
   pre[292]=223055285;
   pre[293]=142335980;
   pre[294]=144754000;
   pre[295]=772005560;
   pre[296]=81796039;
   pre[297]=167696020;
   pre[298]=79454283;
   pre[299]=172772542;
   pre[300]=201056991;
   pre[301]=484957644;
   pre[302]=716630285;
   pre[303]=763194701;
   pre[304]=211505841;
   pre[305]=903448791;
   pre[306]=926964672;
   pre[307]=257752668;
   pre[308]=482951716;
   pre[309]=411539070;
   pre[310]=620249847;
   pre[311]=592476107;
   pre[312]=170473128;
   pre[313]=814662613;
   pre[314]=898000271;
   pre[315]=57354872;
   pre[316]=361106091;
   pre[317]=488697643;
   pre[318]=889007954;
   pre[319]=138725767;
   pre[320]=684860983;
   pre[321]=36248116;
   pre[322]=304610143;
   pre[323]=137633385;
   pre[324]=413715776;
   pre[325]=99010024;
   pre[326]=779653665;
   pre[327]=100387568;
   pre[328]=286328069;
   pre[329]=564731826;
   pre[330]=621740468;
   pre[331]=943513219;
   pre[332]=506666491;
   pre[333]=249987886;
   pre[334]=553719884;
   pre[335]=769853086;
   pre[336]=337485319;
   pre[337]=702455584;
   pre[338]=809637762;
   pre[339]=755400257;
   pre[340]=892290368;
   pre[341]=502180086;
   pre[342]=364275817;
   pre[343]=118162370;
   pre[344]=873374339;
   pre[345]=261271695;
   pre[346]=970132574;
   pre[347]=744105500;
   pre[348]=434447173;
   pre[349]=117975095;
   pre[350]=383088393;
   pre[351]=625447969;
   pre[352]=180281249;
   pre[353]=545367713;
   pre[354]=133236931;
   pre[355]=360175662;
   pre[356]=148087453;
   pre[357]=806871297;
   pre[358]=498529036;
   pre[359]=886076476;
   pre[360]=65645000;
   pre[361]=465138299;
   pre[362]=967109895;
   pre[363]=331362616;
   pre[364]=472283705;
   pre[365]=796894900;
   pre[366]=199697765;
   pre[367]=503759892;
   pre[368]=472807906;
   pre[369]=187586706;
   pre[370]=941198065;
   pre[371]=782234442;
   pre[372]=57693411;
   pre[373]=18678611;
   pre[374]=82626204;
   pre[375]=395317191;
   pre[376]=570588915;
   pre[377]=152519440;
   pre[378]=449852456;
   pre[379]=63696518;
   pre[380]=763741345;
   pre[381]=878748386;
   pre[382]=494317541;
   pre[383]=444782633;
   pre[384]=93316211;
   pre[385]=929164666;
   pre[386]=529288371;
   pre[387]=165769871;
   pre[388]=730546850;
   pre[389]=955877127;
   pre[390]=994202767;
   pre[391]=492009567;
   pre[392]=275683011;
   pre[393]=415902127;
   pre[394]=95725776;
   pre[395]=718047399;
   pre[396]=786963365;
   pre[397]=73091278;
   pre[398]=986172399;
   pre[399]=174591541;
   pre[400]=913259286;
	scanf("%d", &n);
	printf("%lld\n", pre[n]);
	return 0;
	pot[0]=1;
	for (int i=1; i<=n; i++)
		pot[i]=(pot[i-1]*2)%mod;
	dod(dp[1][0][0], 1);
	dod(dp[1][2][0], 1);
	dod(dp[1][1][1], 1);
	dod(dp[1][1][2], 1);
	for (int i=2; i<=n; i++)
	{
		debug() << i;
		for (int j=0; j<=n*2; j++)
		{
			for (int jj=0; jj<4; jj++)
			{
				if ((zap[jj]&1)!=(j&1) || !dp[i-1][j][jj])
					continue;
				for (int l=0; l<=n*2; l++)
				{
					for (int ll=0; ll<4; ll++)
					{
						if ((zap[jj]&1)!=(j&1))
							continue;
						if ((zap[ll]&1)!=(l&1))
							continue;
						if ((jj^ll)!=(jj|ll))
							continue;
						int cel=jj|ll;
						int il=(j/2)+(jj==2);
						int ol=(j/2)+(jj==1);
						int ip=(l/2)+(ll==2);
						int op=(l/2)+(ll==1);
						
						long long mno=(dp[i-1][j][jj]*dp[i-1][l][ll])%mod;
						if (!mno)
							continue;
						
						//debug() << i << " " << j << " " << l << " " << jj << " " << ll;
						
						dod(dp[i][j+l][cel], mno*(j+l+1));//po prostu w gore/po drodze korzen
						
						//dod(dp[i][j+l-2][cel], mno*(il*op+ip*ol- (cel==3 && (j+l)>2) ));//lewe z prawym przez korzen
						//dod(dp[i][j+l-2][cel], mno*magia(j, jj));//lewe z lewym przez korzen
						//dod(dp[i][j+l-2][cel], mno*magia(l, ll));//prawe z prawym przez korzen
						
						dod(dp[i][j+l-2][cel], mno*magia2((j+l-zap[cel])/2, (cel&1), (cel&2)/2));//dol z dolem przez korzen
						if (cel==3 && j+l-2==0)
						{
							dod(wtu[i], mno);
							dod(wyn, mno*pot[n-i]);
						}
						//if (cel==3 && (j+l)==2)
						//	dod(dp[i][0][cel], mno);//dol z dolem przez korzen spec
						
						dod(dp[i][j+l+2][cel], mno);//korzen napierdala w gore obiema
						
						for (int h=1; h<=2; h++)
							if (!(cel&h))
								dod(dp[i][j+l+1][cel|h], mno);//korzen napierdala w gore czyms
						//debug() << imie(dp[n][0][3]);
						if (!(cel&1))
						{
							if (cel&2 && j+l-1==0)
							{
								dod(wtu[i], mno);
								dod(wyn, mno*pot[n-i]);
							}
							dod(dp[i][j+l-1][cel|1], mno*(il+ip- ( (cel&2)>0) ));//korzen napierdala w dol poczatkiem
						}
						//debug() << imie(dp[n][0][3]);
						if (!(cel&2))
						{
							if (cel&1 && j+l-1==0)
							{
								dod(wyn, mno*pot[n-i]);
								dod(wtu[i], mno);
							}
							dod(dp[i][j+l-1][cel|2], mno*(ol+op- ( (cel&1)>0 ) ));//korzen napierdala w dol koncem
						}
						//debug() << imie(dp[n][0][3]);
						//debug();
						
						
					}
				}
			}
		}
	}
	dod(wyn, pot[n]-1);
	//printf("%lld\n", wyn);
	for (int i=1; i<=n; i++)
	{
		dod(wtu[i], wtu[i-1]*2);
		printf("   pre[%d]=%lld;\n", i, (wtu[i]+pot[i]-1)%mod);
	}
	//printf("%lld %lld\n", dp[n][0][3], wyn);
	return 0;
}