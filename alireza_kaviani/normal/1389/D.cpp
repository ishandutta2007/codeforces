/* Generated by powerful Codeforces Tool
 * You can download the binary file in here https://github.com/xalanq/cf-tool (Windows, macOS, Linux)
 * Author: alireza_kaviani
 * Time: 2020-07-29 19:05:01
**/
#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<int, int> pii;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll q , n , k , l1 , r1 , l2 , r2 , x , y;

int check(ll A){
    ll cnt = 0;
    ll m = k;
    while(m > 0 && cnt < n){
        if(cnt == 0 || (m > x && A > 2 * x)){
            A -= x;
            ll mn = min(m , y);
            m -= mn;
            A -= mn;
            cnt++;
            continue;
        }
        break;
    }
    A -= 2 * m;
    return (A >= 0);
}

int main() {
    ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);

    cin >> q;
    while(q--){
        cin >> n >> k >> l1 >> r1 >> l2 >> r2;
        if(r1 > r2) swap(l1 , l2) , swap(r1 , r2);
        if(l2 <= r1){
            x = 0;
            y = r2 - min(l1 , l2) - (r1 - max(l2 , l1));
            k -= (r1 - max(l2 , l1)) * n;
            k = max(k , 0ll);
            cout << max(k , 2 * k - y * n) << endl;
            continue;
        }
        else{
            x = l2 - r1;
            y = r2 - l1;
        }
        //cout << x << sep << y << endl;
        k = max(k , 0ll);
        ll L = -1 , R = MOD * 10;
        while(R - L > 1){
            ll mid = (L + R) / 2;
            if(check(mid))  R = mid;
            else    L = mid;
        }
        cout << R << endl;
    }

    return 0;
}
/*

*/