/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

set_random;

const ll MAXN = 3e5 + 10;
const ll INF = 8e18;
const ll MOD = 1e9 + 9; // 998244353; // 1e9 + 9;

template<ll Mod>
struct ModInt {
    ll val;

    ModInt() : val(0) {}
    template <class U> ModInt(const U& x){
        val = (-Mod < x && x < Mod) ? x : x % Mod;
        val = (val < 0) ? val + Mod : val;
    }

    friend ostream &operator<<(ostream &os, ModInt x) { return os << x.val;}
    friend istream &operator>>(istream &is, ModInt &x) { return is >> x.val;}

    friend ModInt operator+(ModInt x, ModInt y) { return ModInt(x.val + y.val);}
    friend ModInt operator-(ModInt x, ModInt y) { return ModInt(x.val - y.val);}
    friend ModInt operator*(ModInt x, ModInt y) { if (Mod > ll(2e9)) return x.LogMul(x, y); return ModInt(x.val * y.val);}
    friend ModInt operator/(ModInt x, ModInt y) { return x * x.inv(y); }
    friend ModInt operator^(ModInt x, ll y) {
        ModInt ans = 1;
        for(; y ; y /= 2 , x *= x)  if(y & 1)   ans *= x;
        return ans;
    }

    template<class T> ModInt operator+=(T x) { return (*this) = (*this) + x;}
    template<class T> ModInt operator-=(T x) { return (*this) = (*this) - x;}
    template<class T> ModInt operator*=(T x) { return (*this) = (*this) * x;}
    template<class T> ModInt operator/=(T x) { return (*this) = (*this) / x;}
    template<class T> ModInt operator^=(T x) { return (*this) = (*this) ^ x;}

    ModInt inv(ModInt x) { return ModInt(x.val) ^ (Mod - 2); }

    ModInt LogMul(ModInt x, ModInt y) {
        if (y.val == 1) return x;
        return LogMul(ModInt(2 * x.val), ModInt(y.val / 2)) + (y.val % 2 == 1 ? x.val : 0);
    }
};

template <ll T = MOD> using mll = ModInt<T>;

template<class T , ll SZ>
struct Mat {
    ll n, m;
    T mat[SZ][SZ];

    Mat(ll N = 0 , ll M = 0) {
        n = N;
        m = M;
        Fill(0);
    }

    template <class U> Mat(const initializer_list<initializer_list<U>>& vec) {
        auto u = vec.begin();
        n = vec.size() ; m = (*u).size();
        for (ll i = 0; i < n; i++, u++) {
            auto v = u->begin();
            for (ll j = 0; j < n; j++, v++) {
                mat[i][j] = (*v);
            }
        }
    }

    void Fill(T x) {
        for (ll i = 0; i < n; i++) {
            for (ll j = 0; j < m; j++) {
                mat[i][j] = x;
            }
        }
    }

    void zero(){
        Fill(0);
        for(ll i = 0 ; i < n ; i++) mat[i][i] = 1;
    }

    friend Mat operator+(const Mat &x ,const Mat &y) {
        //assert(x.n == y.n && x.m == y.m);
        Mat ans = Mat(x.n , x.m);
        for (ll i = 0; i < x.n; i++) {
            for (ll j = 0; j < x.m; j++) {
                ans.mat[i][j] = (x.mat[i][j] + y.mat[i][j]);
            }
        }
        return ans;
    }

    friend Mat operator*(const Mat &x ,const Mat &y) {
        //assert(x.m == y.n);
        Mat ans = Mat(x.n , y.m);
        for (ll i = 0; i < x.n; i++) {
            for (ll j = 0; j < x.m; j++) {
                for (ll k = 0; k < y.m; k++) {
                    ans.mat[i][k] += (x.mat[i][j] * y.mat[j][k]);
                }
            }
        }
        return ans;
    }

    friend Mat operator^(Mat t , ll x) {
        //assert(t.n == t.m);
        Mat ans = Mat(t.n , t.m);
        for(ll i = 0 ; i < t.n ; i++)   ans.mat[i][i] = 1;
        while (x != 0) {
            if (x % 2 == 1) ans = ans * t;
            x >>= 1;
            t = t * t;
        }
        return ans;
    }
};

Mat<mll<> , 3> step[MAXN] , prefix[MAXN] , fib[MAXN] , base = {{1} , {0}};

struct Node{
    ll lzy = 0;
    mll<> val = 0;
    Mat<mll<> , 3> lazy = Mat<mll<> , 3>(2 , 1);
    Node(mll<> v = 0){
        val = v;
    }

    friend Node merge(const Node &x , const Node &y){
        return Node(x.val + y.val);
    }
};

template<class T , ll N>
struct LazySegTree {
    T seg[4 * N];

    void Build(int id, int l, int r, int arr[]) {
        if (l == r) {
            seg[id] = Node(arr[l]);
            return;
        }
        int mid = (l + r) >> 1;
        Build((id << 1), l, mid, arr);
        Build((id << 1) | 1, mid + 1, r, arr);
        seg[id] = merge(seg[(id << 1)], seg[(id << 1) | 1]);
    }

    void Shift(int id, int l, int r) {
        if(seg[id].lzy == 0)    return;
        seg[id].val += (prefix[r - l] * seg[id].lazy).mat[0][0];
        if (l != r) {
            int mid = (l + r >> 1) + 1;
            seg[(id << 1)].lazy = seg[(id << 1)].lazy + seg[id].lazy;
            seg[(id << 1) | 1].lazy = seg[(id << 1) | 1].lazy + (step[mid - l] * seg[id].lazy);
            seg[(id << 1)].lzy = 1;
            seg[(id << 1) | 1].lzy = 1;
        }
        seg[id].lazy.Fill(0);
        seg[id].lzy = 0;
    }

    void Update(int id, int l, int r, int ql, int qr) {
        Shift(id, l, r);
        if (qr < l || r < ql || l > r)  return;
        if (ql <= l && r <= qr) {
            seg[id].lazy = seg[id].lazy + fib[l - ql];
            seg[id].lzy = 1;
            Shift(id, l, r);
            return;
        }

        int mid = (l + r) >> 1;
        Update((id << 1), l, mid, ql, qr);
        Update((id << 1) | 1, mid + 1, r, ql, qr);
        seg[id] = merge(seg[(id << 1)], seg[(id << 1) | 1]);
    }

    Node Get(int id, int l, int r, int ql, int qr) {
        Shift(id, l, r);
        if (qr < l || r < ql || l > r)  return Node();
        if (ql <= l && r <= qr) return seg[id];

        int mid = (l + r) >> 1;
        return merge(Get((id << 1), l, mid, ql, qr), Get((id << 1) | 1, mid + 1, r, ql, qr));
    }

    void build(int arr[]) {
        Build(1, 0, N - 1, arr);
    }
    void update(int ql, int qr) {
        Update(1, 0, N - 1, ql, qr);
    }
    Node get(int ql, int qr) {
        return Get(1, 0, N - 1, ql, qr);
    }
};

ll n , q , type , l , r;
int a[MAXN];
LazySegTree<Node , MAXN> seg;

int main() {
    fast_io;

    step[0] = Mat<mll<> , 3>(2 , 2);
    step[0].zero();
    step[1] = {{1 , 1} , {1 , 0}};

    for(ll i = 2 ; i < MAXN ; i++)  step[i] = step[i - 1] * step[1];
    prefix[0] = step[0];
    for(ll i = 1 ; i < MAXN ; i++)  prefix[i] = prefix[i - 1] + step[i];
    for(ll i = 0 ; i < MAXN ; i++)  fib[i] = step[i] * base;

    cin >> n >> q;
    for(ll i = 1 ; i <= n ; i++)    cin >> a[i];
    seg.build(a);

    while(q--){
        cin >> type >> l >> r;
        if(type == 1){
            seg.update(l , r);
        }
        else{
            cout << seg.get(l , r).val << endl;
        }
    }

    return 0;
}
/*

*/