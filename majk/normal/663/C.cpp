/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Majk
 */

#include <vector>
#include <iostream>
#include <unordered_map>
#include <map>
#include <iomanip>
#include <functional>
#include <algorithm>
#include <cassert>
#include <cmath>
#include <string>
#include <sstream>
#include <queue>
using namespace std;

#define x first
#define y second
constexpr int MOD = 1000000007;

typedef std::pair<int,int> pii;
typedef long long ll;

template<typename T>std::istream&operator>>(std::istream&i,vector<T>&t) {for(auto&v:t){i>>v;}return i;}
template<typename T>std::ostream&operator<<(std::ostream&o,const vector<T>&t) {for(size_t i=0;i<t.size();++i){o<<t[i]<<" \n"[i == t.size()-1];}return o;}

namespace std {
    template<typename T,typename U>struct hash<pair<T,U>>{hash<T>t;hash<U>u;size_t operator()(const pair<T,U>&p)const{return t(p.x)^(u(p.y)<<7);}};
}
template<typename T,typename F>T bsh(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){l=m+1;r=m;}else{h=m-1;}}return r;}
template<typename T,typename F>T bsl(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){h=m-1;r=m;}else{l=m+1;}}return r;}
template<typename T> T gcd(T a,T b) { if (a<b) swap(a,b); return b?gcd(b,a%b):a; }

// #include "../l/mod.h"

class TaskC {
public:
	vector<vector<pair<int,bool>>> E;
	vector<bool> V,W;
	vector<bool> R;
	vector<bool> V2;
	int N,M;

	int calc(int u, int par, bool parentColour, bool targetColour, vector<bool> &V, vector<int>&O) {
		bool shallRecolour = parentColour ^ targetColour;
		if (V[u]) {
			if (shallRecolour != R[u]) return MOD;
			else return 0;
		}

		V[u] = true;
		R[u] = shallRecolour;
		int ans = shallRecolour;
		if (shallRecolour) O.push_back(u+1);
		for (auto v : E[u]) {
			if (v.x != par) {
				int out = calc(v.x, u, v.y ^ shallRecolour, targetColour, V, O);
				if (out == MOD) return MOD;
				else ans += out;
			}
		}
		return ans;
	}

	int solve(bool targetColour, vector<int> &O) {
		fill(V2.begin(), V2.end(), false);
		fill(V.begin(), V.end(), false);
		fill(R.begin(), R.end(), false);
		int ans = 0;
		for (int i = 0; i < N; ++i) {
			if (!V[i]) {
				vector<int> O1, O2;
				int res = calc(i, -1, true, targetColour, V, O1);
				int res2 = calc(i, -1, false, targetColour, V2, O2);
				if (min(res, res2) == MOD) return MOD;
				int best = min(res, res2);
				for (int x : (best == res ? O1 : O2)) {
					O.push_back(x);
				}
				ans += best;
			}
		}
		return ans;
	}

	void solve(istream& cin, ostream& cout) {
		cin >> N >> M;
		E.resize(N);
		V.resize(N);
		V2.resize(N);
		R.resize(N);

		for (int i = 0; i < M; ++i) {
			int A, B; char C; cin >> A >> B >> C;
			--A; --B;
			E[A].push_back({B, C=='R'});
			E[B].push_back({A, C=='R'});
		}

		vector<int> O1,O2;
		int R1 = solve(true, O1);
		int R2 = solve(false, O2);
		if (R1 < R2) {
			cout << R1 << endl << O1;
		} else if (R2 == MOD) {
			cout << -1 << endl;
		} else {
			cout << R2 << endl << O2;
		}
	}
};


int main() {
	ios_base::sync_with_stdio(false);
	TaskC solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}