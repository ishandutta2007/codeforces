/* Generated by powerful Codeforces Tool
 * You can download the binary file in here https://github.com/xalanq/cf-tool (Windows, macOS, Linux)
 * Author: alireza_kaviani
 * Time: 2020-04-04 18:43:11
**/
#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1000 + 10;
const ll MAXM = 1e6 + 10;
const ll LOG = 22;
const ll INF = 1e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n , m , k , b , A[MAXN] , dist[MAXN][MAXN] , mark[MAXN] , match[MAXN]; 
vector<ll> adj[MAXN];

ll DFS(ll v){
    if(v == 0)  return 1;
    if(mark[v]) return 0;
    mark[v] = 1;
    for(ll u : adj[v]){
        if(u != match[v] && DFS(match[u])){
            match[v] = u;
            match[u] = v;
            return 1;
        }
    }
    return 0;
}

ll check(ll x){
    fill(match , match + MAXN , 0);
    fill(adj , adj + MAXN , vector<ll>());
    ll ans = 0;
    for(ll i = 1 ; i <= k ; i++){
        for(ll j = 1 ; j <= n ; j++){
            if(dist[A[i]][j] <= x)
                adj[i].push_back(k + j);
        }
    }
    for(ll i = 1 ; i <= k ; i++){
        fill(mark , mark + MAXN , 0);
        if(!match[i])   ans += DFS(i);
    }
    //cout << x << sep << ans << endl;
    return ans >= b;
}

int main() {
    ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);

    for(ll i = 0 ; i < MAXN ; i++)  fill(dist[i] , dist[i] + MAXN , INF) , dist[i][i] = 0;

    cin >> n >> m >> k >> b;
    for(ll i = 1 ; i <= k ; i++)    cin >> A[i];
    for(ll i = 0 ; i < m ; i++){
        ll v , u , w;
        cin >> v >> u >> w;
        dist[v][u] = min(dist[v][u] , w);
        dist[u][v] = min(dist[u][v] , w);
    }

    for(ll k = 1 ; k <= n ; k++){
        for(ll i = 1 ; i <= n ; i++){
            for(ll j = 1 ; j <= n ; j++){
                dist[i][j] = min(dist[i][j] , dist[i][k] + dist[k][j]);
            }
        }
    }
    //for(ll i = 1 ; i <= n ; i++ , cout << endl) for(ll j = 1 ; j <= n ; j++)    cout << dist[i][j] << sep;

    ll l = -1 , r = 2e6 + 10;
    while(r - l > 1){
        ll mid = l + r >> 1;
        if(check(mid))  r = mid;
        else    l = mid;
    }
    if(r == ll(2e6 + 10))   return cout << -1 << endl , 0;
    cout << r << endl;

    return 0;
}
/*

*/