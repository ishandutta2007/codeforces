/* Generated by powerful Codeforces Tool
 * You can download the binary file in here https://github.com/xalanq/cf-tool (Windows, macOS, Linux)
 * Author: alireza_kaviani
 * Time: 2020-04-23 19:15:03
**/
#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll q , n , P[MAXN] , ind[MAXN];

int main() {
    ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);

    cin >> q;
    while(q--){
        set<ll> st;
        set<pll> st2;
        cin >> n;
        for(ll i = 1 ; i <= n ; i++)    cin >> P[i] , ind[P[i]] = i , st2.insert({1 , i});
        for(ll i = 0 ; i <= n ; i++)    st.insert(i);
        ll ok = 1;
        for(ll i = 1 ; i <= n ; i++){
            auto it = st.lower_bound(ind[i]);
            auto it2 = prev(it);
            if((*it) - (*it2) < (*prev(st2.end())).X){
                ok = 0; break;
            }
            ll x = *it , y = *it2;
            //cout << x << sep << y << endl;
            st2.erase({x - y , x});
            if(it != prev(st.end())){
                auto it3 = next(it);
                ll z = *it3;
                st2.insert({z - y , z});
            }
            st.erase(it);
        }
        if(ok)  cout << "Yes" << endl;
        else    cout << "No" << endl;
    }

    return 0;
}
/*

*/