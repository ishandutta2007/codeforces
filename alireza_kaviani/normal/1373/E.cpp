/* Generated by powerful Codeforces Tool
 * You can download the binary file in here https://github.com/xalanq/cf-tool (Windows, macOS, Linux)
 * Author: alireza_kaviani
 * Time: 2020-06-25 19:05:02
**/
#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<int, int> pii;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll LOG = 22;
const ll INF = 9e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll q , n , k;

ll f(ll x){
    ll sum = 0;
    while(x){
        sum += x % 10;
        x /= 10;
    }
    return sum;
}

int main() {
    ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);

    cin >> q;
    while(q--){
        ll ans = INF;
        cin >> n >> k;
        for(int i = 0 ; i < 17 ; i++){
            ll val = 0;
            for(int j = 0 ; j < i ; j++)    val = val * 10 + 9;
            for(int j = 0 ; j < 10 ; j++){
                ll x = val * 10 + j;
                ll sum = 0;
                for(int l = 0 ; l <= k ; l++)   sum += f(x + l);
                if(sum > n) continue;
                ll A = n - sum;
                if(A % (k + 1) != 0)    continue;
                A /= (k + 1);
                ll y;
                if(A <= 8)  y = A;
                else{
                    y = (A - 8) % 9;
                    for(int l = 0 ; l < (A - 8) / 9 ; l++)  y = y * 10 + 9;
                    y = y * 10 + 8;
                }
                if(y == 0 || INF / y >= (val + 1) * 10) ans = min(ans , y * (val + 1) * 10 + x);
            }
        }
        if(ans == INF)  cout << -1 << endl;
        else    cout << ans << endl;
    }

    return 0;
}
/*

*/