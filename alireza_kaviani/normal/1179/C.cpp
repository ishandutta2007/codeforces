/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll LOG = 22;
const ll INF = 1e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n, m, q, A[MAXN], B[MAXN], cnt[MAXN], seg[MAXN << 2], lz[MAXN << 2];

void shift(int id) {
    lz[id << 1] += lz[id];
    lz[id << 1 | 1] += lz[id];
    seg[id << 1] += lz[id];
    seg[id << 1 | 1] += lz[id];
    lz[id] = 0;
}

void update(int ql, int qr, ll x, int id = 1, int l = 0, int r = MAXN) {
    if (qr <= l || r <= ql) return;
    if (ql <= l && r <= qr) {
        lz[id] += x;
        seg[id] += x;
        return;
    }
    shift(id);
    int mid = l + r >> 1;
    update(ql, qr, x, id << 1, l, mid);
    update(ql, qr, x, id << 1 | 1, mid, r);
    seg[id] = max(seg[id << 1], seg[id << 1 | 1]);
}

int get(int id = 1, int l = 0, int r = MAXN) {
    if (r - l == 1) return l;
    shift(id);
    int mid = l + r >> 1;
    if (seg[id << 1 | 1] > 0) return get(id << 1 | 1, mid, r);
    return get(id << 1, l, mid);
}

void addA(int A, int val) {
    if (cnt[A] == 0) update(A, A + 1, INF);
    update(0, A + 1, val);
    cnt[A] += val;
    if (cnt[A] == 0) update(A, A + 1, -INF);
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    fill(seg, seg + MAXN * 4, -INF);

    cin >> n >> m;
    for (ll i = 1; i <= n; i++) {
        cin >> A[i];
        addA(A[i], 1);
    }
    for (ll i = 1; i <= m; i++) {
        cin >> B[i];
        update(0, B[i] + 1, -1);
    }

    cin >> q;
    while (q--) {
        ll t, x, y;
        cin >> t >> x >> y;
        if (t == 1) {
            addA(A[x], -1);
            A[x] = y;
            addA(A[x], 1);
        }
        if (t == 2) {
            update(0, B[x] + 1, 1);
            B[x] = y;
            update(0, B[x] + 1, -1);
        }
        ll ans = get();
        cout << (ans == 0 ? -1 : ans) << endl;
    }

    return 0;
}
/*

*/