/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author RiaD
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <vector>
#include <assert.h>


#include <iterator>

#include <string>
#include <stdexcept>
#ifdef SPCPPL_DEBUG
	#define SPCPPL_ASSERT(condition) \
	if(!(condition)) { \
		throw std::runtime_error(std::string() + #condition + " in line " + std::to_string(__LINE__) + " in " + __PRETTY_FUNCTION__); \
	}
#else
	#define SPCPPL_ASSERT(condition)
#endif



/**
* Support decrementing and multi-passing, but not declared bidirectional(or even forward) because
* it's reference type is not a reference.
*
* It doesn't return reference because
* 1. Anyway it'll not satisfy requirement [forward.iterators]/6
*   If a and b are both dereferenceable, then a == b if and only if *a and
*   b are bound to the same object.
* 2. It'll not work with reverse_iterator that returns operator * of temporary which is temporary for this iterator
*
* Note, reverse_iterator is not guaranteed to work  now too since it works only with bidirectional iterators,
* but it's seems to work at least on my implementation.
*
* It's not really useful anywhere except iterating anyway.
*/
template <typename T>
class IntegerIterator : public std::iterator<std::input_iterator_tag, T, std::ptrdiff_t, T*, T> {
public:
	explicit IntegerIterator(int value): value(value) {

	}

	IntegerIterator& operator++ () {
		++value;
		return *this;
	}

	IntegerIterator operator++ (int) {
		IntegerIterator copy = *this;
		++value;
		return copy;
	}

	IntegerIterator& operator-- () {
		--value;
		return *this;
	}

	IntegerIterator operator-- (int) {
		IntegerIterator copy = *this;
		--value;
		return copy;
	}

	T operator * () const {
		return value;
	}

	bool operator == (IntegerIterator rhs) {
		return value == rhs.value;
	}

	bool operator != (IntegerIterator rhs) {
		return !(*this == rhs);
	}
private:
	T value;
};

template <typename T>
class IntegerRange {
public:
	IntegerRange(T begin, T end): begin_(begin), end_(end) {

	}

	IntegerIterator<T> begin() const {
		return IntegerIterator<T>(begin_);
	}

	IntegerIterator<T> end() const {
		return IntegerIterator<T>(end_);
	}

private:
	T begin_;
	T end_;
};

template <typename T>
class ReversedIntegerRange {
	typedef std::reverse_iterator<IntegerIterator<T>> IteratorType;
public:
	ReversedIntegerRange(T begin, T end): begin_(begin), end_(end) {

	}

	IteratorType begin() const {
		return IteratorType(IntegerIterator<T>(begin_));
	}

	IteratorType end() const {
		return IteratorType(IntegerIterator<T>(end_));
	}

private:
	T begin_;
	T end_;
};

template <typename T>
IntegerRange<T> range(T to) {
	SPCPPL_ASSERT(to >= 0);
	return IntegerRange<T>(0, to);
}

template <typename T>
IntegerRange<T> range(T from, T to) {
	SPCPPL_ASSERT(from <= to);
	return IntegerRange<T>(from, to);
}

template <typename T>
ReversedIntegerRange<T> downrange(T from) {
	SPCPPL_ASSERT(from >= 0);
	return ReversedIntegerRange<T>(from, 0);
}

template <typename T>
ReversedIntegerRange<T> downrange(T from, T to) {
	SPCPPL_ASSERT(from >= to);
	return ReversedIntegerRange<T>(from, to);
}




template <typename T>
T gcd(T a, T b) {
	while (b) {
		T tmp = a % b;
		a = b;
		b = tmp;
	}
	return a;
}

template <typename T>
T lcm(const T& a, const T& b) {
	return a / gcd(a, b) * b;
}

using namespace std;
#define int long long
class TaskA {
public:
	void solve(std::istream& in, std::ostream& out) {
		int m;
		in >> m;
		assert(m <= 1000000);
		vector<long long> h(2), a(2), x(2), y(2);
		for(int i: range(2)) {
			in >> h[i] >> a[i] >> x[i] >> y[i];
			assert(h[i] != a[i]);
		}


		vector<long long> f(2, -1), s(2, -1);

		for (int i: range(2)) {
			for (int j: range(3000000)) {
				if(h[i] == a[i]) {
					if(f[i] == -1) {
						f[i] = j;
					}
					else {
						s[i] = j;
						break;
					}
				}

				h[i] = (x[i] * h[i] + y[i]) % m;
			}

		}

		if(f[0] == -1 || f[1] == -1) {
			out << -1;
			return;
		}

		if(f[0] == f[1]) {
			out << f[0];
			return;
		}

		if(s[0] == -1 && s[1] == -1) {
			out << -1;
			return;
		}

		if(s[0] == -1) {
			if(f[0] >= f[1] && f[0] % (s[1] - f[1]) == f[1] % (s[1] - f[1])) {
				out << f[0];
				return;
			}
			out << -1;
			return;
		}
		if(s[1] == -1) {
			if(f[1] >= f[0] && f[0] % (s[0] - f[0]) == f[1] % (s[0] - f[0])) {
				out << f[1];
				return;
			}
			out << -1;
			return;
		}


		long long period = lcm(s[1] - f[1], s[0] - f[0]);
		long long iter = 0;

		for (long long cur = f[0] % period; ; cur += (s[0] - f[0])) {
			cur %= period;
			//out << "c = " << cur << endl;
			++iter;
			if(iter > 3000000) {
				out << -1;
				return;
			}
		//	assert()
			if(cur % (s[1] - f[1]) == f[1] % (s[1] - f[1])) {
				//ok;
				//out << cur << ' ' << endl;
				long long cp = cur;
				while (cp < f[1] || cp < f[0]) {
					cp += period;
				}
				out << cp;
				return;
			}
		}


	}
};

#undef int


int main() {
	std::cin.sync_with_stdio(false);
	std::cin.tie(0);
	std::cout << std::fixed;
	std::cout.precision(20);
	TaskA solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}