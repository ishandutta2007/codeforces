//,,,,,,,,,,,,,,,,,,,,,,,,,,,,,@@@@@@@@@@@@@@@@@%@@@@@@@@@@@@@%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,,,,,,,,,,@@@@@@@@@@@@@@@@@@@%@@@@@%@@@@@@@@@%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,,,,,,&@@@@@@@@@@@@@@@@@@@@@%@@@@@%@@@@@@%@@@%&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,,@@@@,,,,@@@@@@@@@@@@@@@@@%@@@@@%@@@@@@%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,,,,,,,,@@@@@@@@@@@@@@@@@%%@@@@@%@@@@@@%%&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,,,,,@@@@@@@@@@@@@@@@@@@%%@@@@@%%@@@@@%%%&@@@@@@@@@@@@%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,#@,,*@@@@@@@@@@@@@@@@@%%%@@@@@%@@@@@%%%%&@@@@@@%@@@@@%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,,,,@@@@@@@@@@@@@@@@@@%%%@@@@@%%@@@@&%%%%%@@%@@@@&@@@@%%&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,,,@@@@@@@@@@@@@@@@@@%%%@@@@@%%%@@@@%%%%%%@@%@@@@%@@@@%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,,@@@@@@@@@@@@@@@@@@@%%%@@@@@%%%@@@%%%%%%%@@%@@@@%%@@@%%%&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,@@@@@@@@@@%@@@@@@@@%%%@@@@%@%%%@@@%%%%%%%@&%&%@@&%@@&%%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,@@@@@@%@@@%@@@@@@@@%%%%@@@@%%%%%@@%%%%%%%%%%%%%%@@%%@%%%%%@@@@@@@@@@@@@@@@@@@%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,@@@@@@%@@@%@@@@@@@@%%%%@@@%%%%%%@@%%%%%%%%%%%%%%&@%%@%%%%%@@@@@@@@&@@@@%@@@@@@%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,@@@@@@%@@@%%@@@&@@@%%%%@@@@%%%%%%%%%%%%%%%%%%%%%%%@%%%%%%%%&@@&%@@@@@@@@%%&@@@@@%%@@@@%%@@@@@&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,@@@,@@%%@@@%%@@@%@@@%%%%@@@@%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%&@@@%&@@@@@@@%%%%@@@@%%%@@@%%%@@@%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,@@@,*@@%%@@%%@@@%%@@%%%%%@@@%%%%%%%%%%%%#%%%%%%%%%%%%%%%%%%%%@@@@%%@@@&@@@#%%%%@@@@%%@@@%%%%@@%%%@@@@%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,@,@(,@@@%&@@%%@@@%%@@%%%%%@@@%%%%%%%%%%%%/%%%%%%%%%%%%%%%%%%%%@@@@%%%@@%@@@//%%%%@@@@%%@@%%%%@@%%%@@@@%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,(,,,@,,@@%%@@%%%@%%%%@@%%%%%@@@%%%%%%%%%%%///%%%/(%%%%%%%%%%%%%%@@@@@%%%@%@@@&//#%#&@@@%%%%%%%%%@%%%%@@@%%@@@@%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,/,,@@%%@@%%%%%%%%@%%%%%%%@@%%%%#/%%%%%///%%%//(%(%%%%%%%%%%/&@@@@(%%&%%@@@////%/@@@@%%%%%%%%&%%%%@@@%%@@@@%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,@@%%%&%%%%%%%%@%%%%%%%@%%%%%///%%%%///%%%///#(/%%%%%%%///%@@@@/%%%%%@@.     ( .@@%%%%%%%%%%%%%%@%%%@@@@%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,@@%%%%%%%%%%%%@%%%%%%%@%#%%#///#%%%/////%#///#//%%%%%#///&@@@@//&%%*@            %%%%%%%%%%%%%%@%%%%%@@%%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,#%%%%%%%%%%%%%%%%%%%%%%//#%/////%*%*/////////////%%/%////@@@/@@@@ %(     ,,       %%( #%%%%%%%%%%%%%%%@%%%@%@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,,%%%%%%%%%%%%%%%%%%%%%%///%  (((((((((((, ///////(%//////@@///@@@        ,,       %% //%%%%%%%%%%%%%%%%%%%@@%@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,,,%%%%%%%%%%%%%%%%%%%%%/* %((@@@@@./(.@@@@#( /////#//////(////@@@                 #//@/%%%%%%%%%%%%%%%%%%%@@@%@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,,,,%%%%%%%%%%%%%%%%%%%%// ((@@@@@@@@.%@@@@@@(/////////@///#@@#/////@@@        %////@@@/%%%%%%%%%%%%%%%%%%@@@@%@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,,,#%%%%%%%%%%%%%%%%%%/%///@@(@@@@@@@@@@@@(@@@/@@@/////@@/@@@@@@////////(@@@@@@@@@@@@@@@%%%%%%%%%%%%%%%%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,,%%%,%%,%%%%%%%%%%%%%#////@@@@@@@@@@@&#///////////////#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%%%%%%//%%%%%%%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,(,,,%,,,%%%%%%%%%%%%%%/@@/@@&//////////////////////////@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%%@%%%%///%%%%%%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,,,*,,,,,%%%%%%#%%%%%%%@@@@@@//////////////////////////@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%@@/%#%/////%%%%%%&@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,,,,,,,,,%,%%%%//%%%%%%%@@@@@//////////////////////////&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@//////@@@@@%%%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,,,,,,,,,%,%%%/////%/%%@%@@@@@(/////////////////////////@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@////%@@@@@@@@@%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,,,,,,,,,#,%%%,,////////@@@@@@@@////////////////////////%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@(/&@@@/#@@@@@@@@@@%@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,///////@@@@@@@@////////////////////////@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@//////@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,/////@@@@@@@@@///////////////////////@@@@@@@@@@@@@@@@@@@#@@@@@@@@@@/%%%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,##////@@@@@@@@@@@@@//////////////////@@@@@@@@@@@@@@@@@(/@@@@@@@@@#(%%@@&%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,(#,,,##,*@@@@@@@@@///////////////////////////////////@@@@@@@@@@@@/%%%%@@@@%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,##,,,@@@@@@@&//////////@@@@@@@@@@@@@&//@@@@@@@@@@@@@@@@@@@/%%%%%%@@@@@@&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,#,,,#%@@@@@@(//////////////@@@@@@@@@@@@@@@@@@@@@@@@@@@@/%%%%%%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,#,,,####@@@@@@/////////////////%%#///////@@@@@@@@@@@@///%%%%@@@%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,#,#####@@@@@/////////////////(@@@@@@@@@@@@@@@@(/////%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,*,,#####(//@@@@//////////////@@@@@@@@@@@@@@&////////% %         &@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,           # ###//////@@&///////////@@@@@@@@@@@///////////.% #              @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,            ###/////////@/////////@@@@@@@/////////////// %              @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,                 , ////////////////////////////////,  ///                /@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,  .                                                                        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,                                                                        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,                                                                       @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,                                                                        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,                                                                         @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,                                                                                 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,,,,,,,,,,,,,,                                                                                           @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,,,,,,,,,,,                                                                                                 @@@@@@@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,,,,,,,                                                                                                          %@@@@@@@@@@@@@@@@@@@@@
//,,,,,,,,,,,,,,,,,,                                                                                                                  *@@@@@@@@@@@@@@@@@
//,                                                                                                                                          .@@@@@@@@@@
//                                                                                                                                                      
//                                                                                                                                                      
//                                                                                                                                                                                                                                                                                                      
#include <iostream>
#include <complex>
#include <vector>
#include <string>
#include <algorithm>
#include <cstdio>
#include <numeric>
#include <cstring>
#include <ctime>
#include <cstdlib>
#include <set>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <list>
#include <cmath>
#include <bitset>
#include <cassert>
#include <queue>
#include <stack>
#include <deque>
#include <random>
 
using namespace std;
template<typename T1, typename T2> inline void chkmin(T1 &a, T2 b) {if (a > b) a = b;}
template<typename T1, typename T2> inline void chkmax(T1 &a, T2 b) {if (a < b) a = b;}
#define files(FILENAME) read(FILENAME); write(FILENAME)
#define read(FILENAME) freopen((FILENAME + ".in").c_str(), "r", stdin)
#define write(FILENAME) freopen((FILENAME + ".out").c_str(), "w", stdout)
#define all(c) (c).begin(), (c).end()
#define sz(c) (int)(c).size()
#define left left228
#define right right228
#define y1 y1228
#define mp make_pair
#define pb push_back
#define y2 y2228
#define rank rank228
using ll = long long;
using ld = long double; 
const string FILENAME = "input";
const int MAXN = 200228;


int n;
vector<int> g[MAXN];
int used[MAXN];
int uk = 0;
int whos[MAXN];
mt19937 as(228);
    vector<vector<int> > who;


bool comp(int a, int b) {
    return sz(who[a]) > sz(who[b]);
}


bool bad[MAXN];


const unsigned long long kekT = 18446744073709551615ULL;


struct mybitset
{
    vector<unsigned long long> st;
    void init(int n) {
        st.resize(((n + 63) >> 6), 0);
    } 
    void reinit(int n) {
        while (sz(st) < n) {
            st.pb(0);
        }
    }
    bool getbit(int i) {
        return (st[i >> 6] & (1ULL << (i & 63)));
    }
    void flip(int i) {
        st[i >> 6] ^= (1ULL << (i & 63));
    }
    void flip(int l, int r) {
        l--, r--;
        for (int i = (l >> 6); i <= (r >> 6); i++) {
            if (i != (l >> 6) && i != (r >> 6)) {
                st[i] ^= kekT;
            } else {
                if (i == (l >> 6) && i == (r >> 6)) { 
                    for (int j = (l & 63); j <= (r & 63); j++) {
                        st[i] ^= (1ULL << j);
                    }
                } else {
                    if (i == (l >> 6)) {
                        for (int j = (l & 63); j < 64; j++) {
                            st[i] ^= (1ULL << j);
                        }
                    } else if (i == (r >> 6)) {
                        for (int j = 0; j <= (r & 63); j++) {
                            st[i] ^= (1ULL << j);
                        }
                    }
                }
            }
        }
    }
    int count() {
        int res = 0;
        for (int i = 0; i < sz(st); i++) {
            res += __builtin_popcountll(st[i]);
        }   
        return res;
    }
};  


mybitset operator >>(const mybitset &a, int k) {
    mybitset c;
    c.init(sz(a.st) * 64);
    for (int i = 0; i < sz(a.st); i++) {
        c.st[i] = (a.st[i] >> k);
        if (i + 1 < sz(a.st)) {
            c.st[i] |= (a.st[i + 1] << (64 - k));
        }
    }
    return c;
}


mybitset operator <<(const mybitset &a, int k) {
    mybitset c;
    c.init(sz(a.st) * 64);
    for (int i = sz(a.st) - 1; i >= 0; i--) {
        c.st[i] = (a.st[i] << k);
        if (i) {
            c.st[i] |= (a.st[i - 1] >> (64 - k));
        }
    }
    return c;
}


mybitset operator ^(const mybitset &a, const mybitset &b) {
    mybitset c;
    c.init(sz(a.st) * 64);
    for (int i = 0; i < sz(a.st); i++) {
        c.st[i] = a.st[i] ^ b.st[i];
    }
    return c;
}



mybitset operator |(const mybitset &a, const mybitset &b) {
    mybitset c;
    c.init(sz(a.st) * 64);
    for (int i = 0; i < min(sz(a.st), sz(b.st)); i++) {
        c.st[i] = a.st[i] | b.st[i];
    }
    return c;
}


mybitset operator &(const mybitset &a, const mybitset &b) {
    mybitset c;
    c.init(min(sz(a.st), sz(b.st)) * 64);
    for (int i = 0; i < min(sz(a.st), sz(b.st)); i++) {
        c.st[i] = a.st[i] & b.st[i];
    }
    return c;
}


bool operator ==(const mybitset &a, const mybitset &b) {
    for (int i = 0; i < sz(a.st); i++) {
        if (a.st[i] != b.st[i]) {
            return false;
        }
    }
    return true;
}



const int BLOCK = 500;
int dt[MAXN];




void solve() {
    cin >> n;
    vector<int> st;
    for (int i = 0; i < n; i++) {
        int k;
        cin >> k;
        g[i].clear();
        g[i].reserve(k);
        for (int j = 0; j < k; j++) {
            int a;
            cin >> a;
            g[i].pb(a);
            st.pb(a);
        }
    }
    sort(all(st));
    st.resize(distance(st.begin(), unique(all(st))));
    who.clear();
    who.resize(sz(st));
    int cnt = 0;
    vector<mybitset> heiter;
    for (int i = 0; i < n; i++) {
        for (auto &x: g[i]) {
            x = lower_bound(all(st), x) - st.begin();
            who[x].pb(i);
        }
        if (sz(g[i]) >= BLOCK) {
            dt[i] = cnt;
            bad[i] = true;
           // assert(cnt < 10023);
            heiter.pb(mybitset());
            heiter[cnt].init(sz(st));
            for (auto x: g[i]) {
                heiter[cnt].flip(x); 
            }
            cnt++;
        } else {
            bad[i] = false;
        }
    }
    vector<int> order;
    for (int x = 0; x < sz(st); x++) {
        order.pb(x);
        shuffle(all(who[x]), as);
    }
    shuffle(all(order), as);
    for (auto x: order) {
        if (sz(who[x]) == 1) {
            continue;
        }
        uk++;
        mybitset kek;
        kek.init(sz(st));
        for (auto y: who[x]) {
            if (bad[y]) {
                if ((kek & heiter[dt[y]]).count() >= 2) {
                    int pt = -1;
                    for (int t = 0; t < sz(st); t++) {
                        if (t != x && kek.getbit(t) && heiter[dt[y]].getbit(t)) {
                            pt = t;
                        }
                    }
                    vector<int> gg;
                    for (auto y: who[x]) {
                        for (auto f: g[y]) {
                            if (f == pt) {
                                gg.pb(y);
                            }
                        }
                    }
                    cout << gg[0] + 1 << ' ' << gg[1] + 1 << '\n';
                    return;
                }
                kek = kek | heiter[dt[y]];
                continue;
            }
            for (auto f: g[y]) {
                if (f == x) {
                    if (!kek.getbit(f)) {
                        kek.flip(f);
                    }
                    continue;
                }
                if (used[f] == uk || kek.getbit(f)) {
                    if (used[f] == uk) {
                        cout << y + 1 << ' ' << whos[f] << '\n';
                    } else {
                        int pt = f;
                        vector<int> gg;
                        for (auto y: who[x]) {
                            for (auto ff: g[y]) {
                                if (ff == pt) {
                                    gg.pb(y);
                                }
                            }
                        }
                        cout << gg[0] + 1 << ' ' << gg[1] + 1 << '\n';
                    }
                    return;  
                } else {
                    used[f] = uk;
                    whos[f] = y + 1;
                }
                 if (!kek.getbit(f)) {
                        kek.flip(f);
                    }
            }
        }
    }
    cout << -1 << '\n';
}


int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    //read(FILENAME);
    int t = 1;
    cin >> t;
    while (t--) {
        solve();
    }
    return 0;
}