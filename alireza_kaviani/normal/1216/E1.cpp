/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll q, k, ans[MAXN], ans2[MAXN];

ll f(ll x) {
    ll cnt = 0, y = x;
    while (y > 0) {
        y /= 10;
        cnt++;
    }
    ll res = ans2[cnt - 1];
    ll c = (x - poww(10, cnt - 1, INF) + 1);
    res += c * (ans[cnt - 1] * 2 + c * cnt + cnt) / 2;
    return res;
}

ll check(ll mid) {
    return f(mid) >= k;
}

int main() {
    fast_io;

    for (ll i = 1; i < MAXN; i++) ans[i] = ans[i - 1] + i * 9 * poww(10, i - 1, INF);
    for (ll i = 1; i < MAXN; i++) ans2[i] = ans2[i - 1] + 9 * poww(10, i - 1, INF) * (ans[i] + ans[i - 1] + i) / 2;

    cin >> q;
    while (q--) {
        cin >> k;
        ll l = 0, r = 1e9;
        while (r - l > 1) {
            ll mid = l + r >> 1;
            if (check(mid)) r = mid;
            else l = mid;
        }
        ll x = k - f(l), ind = 0;
        while (ans[ind] < x) {
            ind++;
        }
        x -= ans[ind - 1];
        ll c = poww(10, ind - 1, INF) + (x - 1) / ind;
        ll t = x - (x - 1) / ind * ind;

        string A = "";
        while (c > 0) {
            A = string(1, c % 10 + 48) + A;
            c /= 10;
        }
        cout << A[t - 1] << endl;
    }

    return 0;
}
/*

*/