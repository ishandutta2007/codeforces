/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

set_random;

const ll MAXN = 2e2 + 10;
const ll MAXK = 6e3 + 10;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n , k , x , ans , dp[MAXN][MAXK];
pll a[MAXN];

int main() {
    fast_io;
    memset(dp , -63 , sizeof(dp));

    cin >> n >> k;
    for(ll i = 1 ; i <= n ; i++){
        cin >> x;
        while(x % 2 == 0){
            x /= 2;
            a[i].X++;
        }
        while(x % 5 == 0){
            x /= 5;
            a[i].Y++;
        }
    }

    dp[0][0] = 0;
    for(ll i = 1 ; i <= n ; i++){
        for(ll j = i ; j >= 1 ; j--){
            for(ll l = a[i].Y ; l <= j * 30 ; l++){
                dp[j][l] = max(dp[j][l] , dp[j - 1][l - a[i].Y] + a[i].X);
            }
        }
    }

    for(ll i = 0 ; i < MAXK ; i++)  ans = max(ans , min(i , dp[k][i]));
    cout << ans << endl;

    return 0;
}
/*

*/