/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author gainullin.ildar
 */

#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <set>
#include <map>
#include <list>
#include <time.h>
#include <math.h>
#include <random>
#include <deque>
#include <queue>
#include <cassert>

using namespace std;

typedef long long ll;

class TaskJ
{
public:
	void solve(std::istream& in, std::ostream& out)
	{
		int n;
		in >> n;
		int g[n][n];
		for (int i = 0; i < n; i++)
		{
			for (int j = 0; j < n; j++)
			{
				if (i != j)
				{
					g[i][j] = 1e9;
				}
				else
				{
					g[i][j] = 0;
				}
			}
		}
		for (int i = 1; i < n; i++)
		{
			int u, v, c;
			in >> u >> v >> c;
			g[u][v] = g[v][u] = c;
		}
		for (int k = 0; k < n; k++)
		{
			for (int i = 0; i < n; i++)
			{
				for (int j = 0; j < n; j++)
				{
					g[i][j] = min(g[i][j], g[i][k] + g[k][j]);
				}
			}
		}
		int ans = 0;
		for (int i = 0; i < n; i++)
		{
			ans = max(ans, g[0][i]);
		}
		out << ans << '\n';
	}
};


int main()
{
    ios::sync_with_stdio(0);
	TaskJ solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}