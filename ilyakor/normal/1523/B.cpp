/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <algorithm>
#include <queue>
#include <vector>
#include <set>
#include <map>
#include <cassert>
#include <functional>
#include <sstream>
#include <cmath>

#include <cstring>
#include <cstdio>

using namespace std;

typedef pair<int, int> ii;
typedef long long int64;
typedef vector<int> vi;

#define pb push_back
#define mp make_pair
#define all(v) (v).begin(),(v).end()
#define sz(v) ((int)(v).size())

template<class T> T abs(T x) { return x >= 0 ? x : -x; }
template<class T> T sqr(T x) { return x * x; }

class TaskB {
public:
	void solve(std::istream& in, std::ostream& out) {
	    int n;
	    in >> n;
	    vi a(n);
	    for (int i = 0; i < n; ++i)
	        in >> a[i];
	    vi b = a;
	    vector<pair<int, ii>> res;
	    for (int i = 0; i < n; i += 2) {
	        res.emplace_back(2, ii(i + 1, i + 2));
            res.emplace_back(1, ii(i + 1, i + 2));
            res.emplace_back(1, ii(i + 1, i + 2));
            res.emplace_back(2, ii(i + 1, i + 2));
            res.emplace_back(1, ii(i + 1, i + 2));
            res.emplace_back(1, ii(i + 1, i + 2));
	    }
//	    for (auto e : res) {
//	        int x = e.second.first - 1, y = e.second.second - 1;
//	        if (e.first == 1) b[x] += b[y];
//	        else b[y] -= b[x];
//	    }
//	    for (int i = 0; i < n; ++i)
//	        assert(a[i] == -b[i]);
	    out << sz(res) << "\n";
        for (auto e : res) {
            out << e.first << " " << e.second.first << " " << e.second.second << "\n";
        }
	}
};


int main() {
	TaskB solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	int n;
in >> n;
for(int i = 0; i < n; ++i) {
	solver.solve(in, out);
}

	return 0;
}