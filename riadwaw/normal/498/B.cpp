/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author RiaD
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <vector>   
#include <cmath>

class B {
public:
	void solve(std::istream& in, std::ostream& out) {
		int n, maxt;
		in >> n >> maxt;

		std::vector<double> dp(maxt + 1, 0);
		dp[0] = 1;
		double res = 0;
		for(int i = 0; i < n; ++i) {
			int P;
			int t;
			in >> P >> t;
			double p = P / 100.0;
			std::vector<double> newdp(maxt + 1, 0);
			double cur = p * dp[0];
			double MAGIC = std::pow(1-p, t);
			for(int j = 1; j <= maxt; ++j) {
				newdp[j] += cur;
				if(j >= t) {
					newdp[j] += dp[j - t] * MAGIC;
				}
				cur *= 1 - p;
				//out << j << ' '  << dp[j] << std::endl;
				cur += p * dp[j];
				if(j - t + 1 >= 0)
					cur -= p * (MAGIC) * dp[j - t];
				if(cur < 1e-12) {
					cur = 0;
				}

			}

			for(int j = 0; j <= maxt; ++j) {
				res += newdp[j];
			}


			dp.swap(newdp);
		}
		out << res;
	}
};


int main() {
	std::cin.sync_with_stdio(false);
	std::cin.tie(0);
	std::cout << std::fixed;
	std::cout.precision(20);
	B solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}