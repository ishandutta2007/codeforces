/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author RiaD
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <set>

using namespace std;

class TaskA {
public:
	void solve(std::istream& in, std::ostream& out) {
		int w, h, n;
		in >> w >> h >> n;
		set<int> W, H;
		multiset<int> diffW, diffH;
		W.insert(0);
		W.insert(w);

		diffW.insert(w);

		H.insert(0);
		H.insert(h);

		diffH.insert(h);


		for(int i = 0; i < n; ++i) {
			char c;
			in >> c;
			int x;
			in >> x;
			set<int>& cur = (c == 'H') ? H : W;
			multiset<int>& curdiff = (c == 'H') ? diffH : diffW;
			auto it = cur.lower_bound(x);
			auto nex = it;
			--it;
			auto prev = it;
			curdiff.erase(curdiff.find(*nex - *prev));
			curdiff.insert(x - *prev);
			curdiff.insert(*nex - x);

			cur.insert(x);
			out << *diffW.rbegin() * 1LL * (*diffH.rbegin()) << "\n";
		}
	}
};


int main() {
	std::cin.sync_with_stdio(false);
	std::cin.tie(0);
	std::cout << std::fixed;
	std::cout.precision(20);
	TaskA solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}