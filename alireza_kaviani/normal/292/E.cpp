/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e5 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n, q, A[MAXN], B[MAXN], L1[MAXN], L2[MAXN], K[MAXN];
int seg[MAXN << 2], lazy[MAXN << 2];

void Shift(int id, int l, int r) {
    if (lazy[id] == 0) return;
    lazy[id << 1] = lazy[id << 1 | 1] = seg[id << 1] = seg[id << 1 | 1] = lazy[id];
    lazy[id] = 0;
}

void Update(int ql, int qr, int x, int id = 1, int l = 0, int r = MAXN) {
    if (r <= ql || qr <= l || l >= r || ql >= qr) return;
    if (ql <= l && r <= qr) {
        lazy[id] = seg[id] = x;
        return;
    }
    Shift(id, l, r);
    int mid = l + r >> 1;
    Update(ql, qr, x, id << 1, l, mid);
    Update(ql, qr, x, id << 1 | 1, mid, r);
}

int get(int x, int id = 1, int l = 0, int r = MAXN) {
    if (r - l == 1) return seg[id];
    Shift(id, l, r);
    int mid = l + r >> 1;
    if (x < mid) return get(x, id << 1, l, mid);
    if (x >= mid) return get(x, id << 1 | 1, mid, r);
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    fill(seg, seg + MAXN * 4, 0);
    fill(lazy, lazy + MAXN * 4, 0);

    cin >> n >> q;
    for (ll i = 1; i <= n; i++) cin >> A[i];
    for (ll i = 1; i <= n; i++) cin >> B[i];

    for (ll i = 1; i <= q; i++) {
        ll t, x;
        cin >> t;
        if (t == 1) {
            cin >> L1[i] >> L2[i] >> K[i];
            Update(L2[i], L2[i] + K[i], i);
        }
        if (t == 2) {
            cin >> x;
            ll y = get(x);
            cout << (y == 0 ? B[x] : A[L1[y] + x - L2[y]]) << endl;
        }
    }

    return 0;
}
/*

*/