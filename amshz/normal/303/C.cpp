/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Parsa Bahrami
 */
 
#pragma GCC optimize("O2")
 
#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>
 
using namespace std;
using namespace __gnu_pbds;
 
typedef long long int ll;
typedef long double ld;
typedef pair<ll, ll> pll;
 
template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
 
#define sz(x)                       (ll) x.size()
#define all(x)                      (x).begin(),(x).end()
#define F                           first
#define S                           second
 
ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}
 
const ll MAXN = 1e6 + 10;
const ll INF = 8e18;
const ll MOD = 1e9 + 7;
 
ll n, a[MAXN], cnt[MAXN], k, ans = INF, Mark[MAXN];
vector<int> adj[MAXN];
set<int> st;
 
 
void check(ll m) {
    if (!m) return;
    memset(cnt, 0, sizeof cnt);
    int t = 0;
    for (int i = 0; i < n; i++){
    	cnt[a[i] % m] ++;
    	if (cnt[a[i] % m] > 1) t ++;
    	if (t > k) return;
	}
	ans = min(ans, m);
}
 
 
int main() {
    cin >> n >> k;
    for (int i = 0; i < n; i++) cin >> a[i];
 
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < i; j++) {
            Mark[abs(a[i] - a[j])]++;
        }
    }
 
    for (ll i = 1; i < MAXN; i++) {
        for (ll j = i + i; j < MAXN; j += i) Mark[i] += Mark[j];
    }
 
    int kk = ((k + 1) * k) / 2;
 
    for (int i = 1; i <= 1e6 + 1; i++) {
        if (Mark[i] <= kk) {
            check(i);
            if (ans < INF) {
                cout << ans << endl;
                return 0;
            }
        }
    }
    return 0;
}