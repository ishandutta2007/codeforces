import java.util.ArrayList;
import java.util.List;
import java.util.InputMismatchException;
import java.math.BigInteger;
import java.util.Iterator;
import java.io.*;
import java.util.Comparator;
import java.util.Arrays;
import java.util.Collection;

/**
 * Generated by Contest helper plug-in
 * Actual solution is at the bottom
 */
public class Main {
	public static void main(String[] args) {
		InputReader in = new StreamInputReader(System.in);
		PrintWriter out = new PrintWriter(System.out);
		run(in, out);
	}

	public static void run(InputReader in, PrintWriter out) {
		Solver solver = new TaskC();
		solver.solve(1, in, out);
		Exit.exit(in, out);
	}
}

abstract class InputReader {
	private boolean finished = false;

	public abstract int read();

	public int readInt() {
		int c = read();
		while (isSpaceChar(c))
			c = read();
		int sgn = 1;
		if (c == '-') {
			sgn = -1;
			c = read();
		}
		int res = 0;
		do {
			if (c < '0' || c > '9')
				throw new InputMismatchException();
			res *= 10;
			res += c - '0';
			c = read();
		} while (!isSpaceChar(c));
		return res * sgn;
	}

	public String readString() {
		int c = read();
		while (isSpaceChar(c))
			c = read();
		StringBuffer res = new StringBuffer();
		do {
			res.appendCodePoint(c);
			c = read();
		} while (!isSpaceChar(c));
		return res.toString();
	}

	private boolean isSpaceChar(int c) {
		return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
	}

	public char readCharacter() {
		int c = read();
		while (isSpaceChar(c))
			c = read();
		return (char) c;
	}

	public void setFinished(boolean finished) {
		this.finished = finished;
	}

	public abstract void close();
}

class StreamInputReader extends InputReader {
	private InputStream stream;
	private byte[] buf = new byte[1024];
	private int curChar, numChars;

	public StreamInputReader(InputStream stream) {
		this.stream = stream;
	}

	public int read() {
		if (numChars == -1)
			throw new InputMismatchException();
		if (curChar >= numChars) {
			curChar = 0;
			try {
				numChars = stream.read(buf);
			} catch (IOException e) {
				throw new InputMismatchException();
			}
			if (numChars <= 0)
				return -1;
		}
		return buf[curChar++];
	}

	public void close() {
		try {
			stream.close();
		} catch (IOException ignored) {
		}
	}
}

class Exit {
	private Exit() {
	}

	public static void exit(InputReader in, PrintWriter out) {
		in.setFinished(true);
		in.close();
		out.close();
	}
}

interface Solver {
	public void solve(int testNumber, InputReader in, PrintWriter out);
}

class IOUtils {

	public static char[] readCharArray(InputReader in, int size) {
		char[] array = new char[size];
		for (int i = 0; i < size; i++)
			array[i] = in.readCharacter();
		return array;
	}

	public static char[][] readTable(InputReader in, int rowCount, int columnCount) {
		char[][] table = new char[rowCount][];
		for (int i = 0; i < rowCount; i++)
			table[i] = readCharArray(in, columnCount);
		return table;
	}

	}

class TaskC implements Solver {
	public void solve(int testNumber, InputReader in, PrintWriter out) {
		int rowCount = in.readInt();
		int columnCount = in.readInt();
		char[][] field = IOUtils.readTable(in, rowCount, columnCount);
		int answer = 0;
		int count = 0;
		Node[][] sample = new Node[rowCount][columnCount];
		Node[][] table = new Node[rowCount][columnCount];
		for (int i = 0; i < rowCount; i++) {
			for (int j = 0; j < columnCount; j++) {
				if (field[i][j] == '.')
					continue;
				int left = -1;
				for (int k = j - 1; k >= 0; k--) {
					if (field[i][k] != '.') {
						left = k;
						break;
					}
				}
				int right = -1;
				for (int k = j + 1; k < columnCount; k++) {
					if (field[i][k] != '.') {
						right = k;
						break;
					}
				}
				int up = -1;
				for (int k = i - 1; k >= 0; k--) {
					if (field[k][j] != '.') {
						up = k;
						break;
					}
				}
				int down = -1;
				for (int k = i + 1; k < rowCount; k++) {
					if (field[k][j] != '.') {
						down = k;
						break;
					}
				}
				sample[i][j] = new Node(up, down, left, right);
				table[i][j] = new Node(up, down, left, right);
			}
		}
		for (int i = 0; i < rowCount; i++) {
			for (int j = 0; j < columnCount; j++) {
				if (field[i][j] == '.')
					continue;
				for (int k = 0; k < rowCount; k++) {
					for (int l = 0; l < columnCount; l++) {
						if (table[k][l] != null)
							table[k][l].fix(sample[k][l]);
					}
				}
				int score = 0;
				int row = i;
				int column = j;
				while (row != -1 && column != -1) {
					score++;
					Node node = table[row][column];
					if (node.left != -1)
						table[row][node.left].right = node.right;
					if (node.right != -1)
						table[row][node.right].left = node.left;
					if (node.up != -1)
						table[node.up][column].down = node.down;
					if (node.down != -1)
						table[node.down][column].up = node.up;
					switch (field[row][column]) {
						case 'L': {
							column = node.left;
							break;
						}
						case 'R': {
							column = node.right;
							break;
						}
						case 'D': {
							row = node.down;
							break;
						}
						default: {
							row = node.up;
							break;
						}
					}
				}
				if (score > answer) {
					answer = score;
					count = 1;
				} else if (score == answer)
					count++;
			}
		}
		out.println(answer + " " + count);
	}

	private static class Node {
		private int up;
		private int down;
		private int left;
		private int right;

		private Node(int up, int down, int left, int right) {
			this.up = up;
			this.down = down;
			this.left = left;
			this.right = right;
		}

		private void fix(Node node) {
			left = node.left;
			right = node.right;
			up = node.up;
			down = node.down;
		}
	}
}