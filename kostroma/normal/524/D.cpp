/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author RiaD
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <bits/stdc++.h>

using namespace std;

class TaskD {
public:
	void solve(std::istream& in, std::ostream& out) {
		int n, m, T;
		in >> n >> m >> T;



		bool hadN = false;
		vector<int> ans;

		deque<int> ends;


		int lastId = 0;
		for(int i = 0; i < n; ++i) {
			string s;
			in >> s;
			int time = (s[0] - '0') * 10 * 60 * 60 + (s[1] - '0') * 3600 + (s[3] - '0') * 10 * 60 + (s[4] - '0') * 60 + (s[6] - '0') * 10 + s[7] - '0';
			while (!ends.empty() && ends.front() <= time) {
				ends.pop_front();
			}
			if(ends.size() == m) {
				ends.pop_back();
			}
			else
				++lastId;
			ends.push_back(time + T);
			if(ends.size() == m)
				hadN = true;


			ans.push_back(lastId);
		}


		if(!hadN) {
			out << "No solution\n";
			return;
		}
		out << lastId << "\n";
		for(int x: ans) {
			out << x << "\n";
		}




	}
};


int main() {
	std::cin.sync_with_stdio(false);
	std::cin.tie(0);
	std::cout << std::fixed;
	std::cout.precision(20);
	TaskD solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}