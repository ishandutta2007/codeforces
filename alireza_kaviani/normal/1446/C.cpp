/* Generated by powerful Codeforces Tool
 * You can download the binary file in here https://github.com/xalanq/cf-tool (Windows, macOS, Linux)
 * Author: alireza_kaviani
 * Time: 2020-11-15 18:05:01
**/
#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<int, int> pii;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll SIZ = 8e6 + 10;
const ll LOG = 30;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

int n , trieInd , A[MAXN] , par[MAXN] , sz[MAXN] , nxt[SIZ][2] , cnt[SIZ] , dp[SIZ];
set<int> st;

void insert(int x , int index){
	int cur = 0;
	for(int i = LOG - 1 ; i >= 0 ; i--){
		int c = 0;
		if(x & (1 << i))	c = 1;
		if(nxt[cur][c] == 0)	nxt[cur][c] = ++trieInd;
		cnt[cur]++;
		cur = nxt[cur][c];
	}
	cnt[cur]++;
}

/*int get(int x){
	int cur = 0;
	for(int i = LOG - 1 ; i >= 0 ; i--){
		int c = 0;
		if(x & (1 << i))	c = 1;
		if(cnt[nxt[cur][c]] >= 2){
			cur = nxt[cur][c];
		}
		else{
			cur = nxt[cur][1 - c];
		}
	}
	return val[cur];
}

int Find(int v){
	return (par[v] == -1 ? v : par[v] = Find(par[v]));
}

void Union(int v , int u){
	v = Find(v); u = Find(u);
	if(v == u)	return;
	if(sz[v] < sz[u])	swap(v , u);
	par[u] = v;
	sz[v] += sz[u];
}
*/
int main() {
	ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
	// fill(par , par + MAXN , -1);
	// fill(sz , sz + MAXN , 1);

	cin >> n;
	for(int i = 1 ; i <= n ; i++){
		cin >> A[i];
		//st.insert(__builtin_clz(A[i]));
		insert(A[i] , i);
	}
	//cout << n - SZ(st) << endl;
	/*for(int i = 1 ; i <= n ; i++){
		int ind = get(A[i]);
		cout << i << sep << ind << endl;
		Union(i , ind);
	}*/
	int ans = 0;
	for(int i = trieInd - 1 ; i >= 0 ; i--){
		if(nxt[i][0] == 0 && nxt[i][1] == 0){
			dp[i] = 1;
			continue;
		}
		if(nxt[i][0] == 0)	dp[i] = dp[nxt[i][1]];
		else if(nxt[i][1] == 0)	dp[i] = dp[nxt[i][0]];
		else	dp[i] = max(dp[nxt[i][1]] + 1 , dp[nxt[i][0]] + 1);
		// cout << i << sep << dp[i] << endl;
	}
	cout << n - dp[0] << endl;

    return 0;
}
/*

*/