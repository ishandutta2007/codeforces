/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll q, n, p[MAXN], cnt[MAXN], val[MAXN], cnt2[MAXN], x, a, y, b, k;

ll check(ll m) {
    cnt2[x] = 0;
    cnt2[y] = 0;
    cnt2[x + y] = 0;
    for (ll i = 1; i <= m; i++) cnt2[val[i]]++;
    ll ind = 110, sum = 0;
    for (ll i = 1; i <= m; i++) {
        while (ind > 0 && cnt2[ind] == 0) ind--;
        sum += p[i] / 100 * ind;
        cnt2[ind]--;
    }
    return (sum >= k);
}

int main() {
    fast_io;

    cin >> q;
    while (q--) {
        cin >> n;
        for (ll i = 1; i <= n; i++) cin >> p[i];
        cin >> x >> a >> y >> b >> k;
        fill(val, val + n + 10, 0);
        fill(cnt, cnt + 110, 0);
        fill(cnt2, cnt2 + 110, 0);
        for (ll i = a; i <= n; i += a) val[i] += x;
        for (ll i = b; i <= n; i += b) val[i] += y;
        for (ll i = 1; i <= n; i++) cnt[val[i]]++;

        sort(p + 1, p + n + 1, greater<ll>());
        ll l = 0, r = n + 1;
        while (r - l > 1) {
            ll mid = (l + r) / 2;
            if (check(mid)) r = mid;
            else l = mid;
        }
        cout << (r == n + 1 ? -1 : r) << endl;
    }

    return 0;
}
/*

*/