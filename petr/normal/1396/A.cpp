/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <algorithm>
#include <array>
#include <bitset>
#include <cassert>
#include <climits>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <functional>
#include <iostream>
#include <map>
#include <memory>
#include <numeric>
#include <queue>
#include <random>
#include <set>
#include <stack>
#include <string>
#include <unordered_set>
#include <unordered_map>
#include <vector>

#define pb push_back
#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()
#define mp make_pair

using namespace std;

typedef long long int64;
typedef vector<int> vi;
typedef pair<int, int> ii;

class TaskA {
 public:
  void solveOne(istream &in, ostream &out) {
    int n;
    in >> n;
    vector<int64> a(n);
    for (auto& x : a) in >> x;
    out << 1 << " " << n << "\n";
    for (auto& x : a) {
      int64 whole = -x / n;
      x += whole * n;
      int64 extra = -x * n;
      x += extra * n;
      out << (whole + extra) * n << " ";
    }
    out << "\n";
    if (n == 1) {
      for (auto x : a) {
        assert(x == 0);
      }
      out << "1 1\n0\n";
      out << "1 1\n0\n";
    } else {
      out << 1 << " " << (n - 1) << "\n";
      for (int i = 0; i < n - 1; ++i) {
        auto& x = a[i];
        assert(x % (n - 1) == 0);
        out << -x << " ";
      }
      out << "\n";
      out << n << " " << n << "\n";
      out << -a[n - 1] << "\n";
    }
  }

  void solve(std::istream &in, std::ostream &out) {
    int nt = 1;
    for (int it = 0; it < nt; ++it) {
      solveOne(in, out);
    }
  }
};


int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  TaskA solver;
  std::istream& in(std::cin);
  std::ostream& out(std::cout);
  solver.solve(in, out);
  return 0;
}