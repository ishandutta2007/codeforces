/* Generated by powerful Codeforces Tool
 * You can download the binary file in here https://github.com/xalanq/cf-tool (Windows, macOS, Linux)
 * Author: alireza_kaviani
 * Time: 2020-10-10 18:20:02
**/
#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<int, int> pii;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

int n , P[MAXN];
vector<int> ans[MAXN];

int main() {
	ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);

	cin >> n;
	for(int i = 1 ; i <= n ; i++){
		cin >> P[i];
	}
	int cur = 0 , rev = 0;
	for(int i = 1 ; i < n ; i++){
		int pos = -1;
		for(int j = 1 ; j <= n ; j++){
			if(P[j] == i){
				pos = j;
			}
		}
		if(pos == i){
			continue;
		}
		for(int j = pos ; j > i ; j--){
			swap(P[j] , P[j - 1]);
		}
		reverse(P + i + 1 , P + pos + 1);
		reverse(P + pos + 1 , P + n + 1);
		//cout << i << sep << pos << endl;
		vector<int> res;
		for(int j = 1 ; j < i ; j++){
			res.push_back(1);
		}
		res.push_back(pos - i + 1);
		res.push_back(n - pos);
		for(int j : res){
			if(j){
				ans[cur].push_back(j);
			}
		}
		if(SZ(ans[cur]) == 1){
			ans[cur] = {};
		}
		else{
			if(rev){
				reverse(all(ans[cur]));
			}
			cur++;
		}
		rev ^= 1;
	}
	if(rev){
		for(int i = 1 ; i <= n ; i++){
			ans[cur].push_back(1);
		}
		cur++;
	}
	cout << cur << endl;
	for(int i = 0 ; i < cur ; i++){
		cout << SZ(ans[i]) << sep;
		for(int j : ans[i]){
			cout << j << sep;
		}
		cout << endl;
	}

    return 0;
}
/*

*/