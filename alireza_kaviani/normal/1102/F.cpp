/* Generated by powerful Codeforces Tool
 * You can download the binary file in here https://github.com/xalanq/cf-tool (Windows, macOS, Linux)
 * Author: alireza_kaviani
 * Time: 2020-04-01 18:23:27
**/
#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 17;
const ll MAXM = 1e4 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n , m , ans , A[MAXN][MAXM] , dp[1 << MAXN][MAXN] , cost[MAXN][MAXN];

int main() {
    ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);

    cin >> n >> m;
    for(ll i = 0 ; i < n ; i++) for(ll j = 0 ; j < m ; j++) cin >> A[i][j];

    for(ll i = 0 ; i < n ; i++){
        for(ll j = 0 ; j < n ; j++){
            if(i == j)  continue;
            cost[i][j] = INF;
            for(ll k = 0 ; k < m ; k++) cost[i][j] = min(cost[i][j] , abs(A[i][k] - A[j][k]));
        }
    }

    for(ll i = 0 ; i < n ; i++){
        memset(dp , 0 , sizeof(dp));
        dp[(1 << i)][i] = INF;
        for(ll j = 0 ; j < (1 << n) ; j++){
            if((j & (1 << i)) == 0 || j == (1 << i)) continue;
            for(ll k = 0 ; k < n ; k++){
                if(j & (1 << k)){
                    for(ll l = 0 ; l < n ; l++){
                        if(j & (1 << l)){
                            dp[j][k] = max(dp[j][k] , min(cost[k][l] , dp[j ^ (1 << k)][l]));
                        }
                    }
                }
            }
        }
        for(ll j = 0 ; j < n ; j++){
            ll cur = dp[(1 << n) - 1][j];
            for(ll k = 1 ; k < m ; k++) cur = min(cur , abs(A[i][k] - A[j][k - 1]));
            ans = max(ans , cur);
        }
    }
    cout << ans << endl;

    return 0;
}
/*

*/