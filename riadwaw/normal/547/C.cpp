/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author RiaD
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <vector>
#include <assert.h>


#include <iterator>

#include <string>
#include <stdexcept>
#ifdef SPCPPL_DEBUG
	#define SPCPPL_ASSERT(condition) \
	if(!(condition)) { \
		throw std::runtime_error(std::string() + #condition + " in line " + std::to_string(__LINE__) + " in " + __PRETTY_FUNCTION__); \
	}
#else
	#define SPCPPL_ASSERT(condition)
#endif



/**
* Support decrementing and multi-passing, but not declared bidirectional(or even forward) because
* it's reference type is not a reference.
*
* It doesn't return reference because
* 1. Anyway it'll not satisfy requirement [forward.iterators]/6
*   If a and b are both dereferenceable, then a == b if and only if *a and
*   b are bound to the same object.
* 2. It'll not work with reverse_iterator that returns operator * of temporary which is temporary for this iterator
*
* Note, reverse_iterator is not guaranteed to work  now too since it works only with bidirectional iterators,
* but it's seems to work at least on my implementation.
*
* It's not really useful anywhere except iterating anyway.
*/
template <typename T>
class IntegerIterator : public std::iterator<std::input_iterator_tag, T, std::ptrdiff_t, T*, T> {
public:
	explicit IntegerIterator(int value): value(value) {

	}

	IntegerIterator& operator++ () {
		++value;
		return *this;
	}

	IntegerIterator operator++ (int) {
		IntegerIterator copy = *this;
		++value;
		return copy;
	}

	IntegerIterator& operator-- () {
		--value;
		return *this;
	}

	IntegerIterator operator-- (int) {
		IntegerIterator copy = *this;
		--value;
		return copy;
	}

	T operator * () const {
		return value;
	}

	bool operator == (IntegerIterator rhs) {
		return value == rhs.value;
	}

	bool operator != (IntegerIterator rhs) {
		return !(*this == rhs);
	}
private:
	T value;
};

template <typename T>
class IntegerRange {
public:
	IntegerRange(T begin, T end): begin_(begin), end_(end) {

	}

	IntegerIterator<T> begin() const {
		return IntegerIterator<T>(begin_);
	}

	IntegerIterator<T> end() const {
		return IntegerIterator<T>(end_);
	}

private:
	T begin_;
	T end_;
};

template <typename T>
class ReversedIntegerRange {
	typedef std::reverse_iterator<IntegerIterator<T>> IteratorType;
public:
	ReversedIntegerRange(T begin, T end): begin_(begin), end_(end) {

	}

	IteratorType begin() const {
		return IteratorType(IntegerIterator<T>(begin_));
	}

	IteratorType end() const {
		return IteratorType(IntegerIterator<T>(end_));
	}

private:
	T begin_;
	T end_;
};

template <typename T>
IntegerRange<T> range(T to) {
	SPCPPL_ASSERT(to >= 0);
	return IntegerRange<T>(0, to);
}

template <typename T>
IntegerRange<T> range(T from, T to) {
	SPCPPL_ASSERT(from <= to);
	return IntegerRange<T>(from, to);
}

template <typename T>
ReversedIntegerRange<T> downrange(T from) {
	SPCPPL_ASSERT(from >= 0);
	return ReversedIntegerRange<T>(from, 0);
}

template <typename T>
ReversedIntegerRange<T> downrange(T from, T to) {
	SPCPPL_ASSERT(from >= to);
	return ReversedIntegerRange<T>(from, to);
}

using namespace std;
//#define int long long
class TaskC {
public:
	void solve(std::istream& in, std::ostream& out) {
		int n, q;
		in >> n >> q;

		int N = 500000;

		vector<int> a(n);
		vector<vector<int>> divisors(n);
		for (int j: range(n)) {
			in >> a[j];
			assert(1 <= a[j] && a[j] <= N);
			for (int i = 1; i * i <= a[j]; ++i) {
				if (a[j] % i == 0) {
					divisors[j].push_back(i);
					if (i * i != a[j]) {
						divisors[j].push_back(a[j] / i);
					}
				}
			}
		}
		vector<int> lp(N + 1);
		vector<int> pr;

		for (int i = 2; i <= N; ++i) {
			if (lp[i] == 0) {
				lp[i] = i;
				pr.push_back(i);
			}
			for (int j = 0; j < (int) pr.size() && pr[j] <= lp[i] && i * pr[j] <= N; ++j) {
				lp[i * pr[j]] = pr[j];
			}
		}

		vector<int> cnt(N + 1);
		for (int i = 2; i <= N; ++i) {
			//assert(i % lp[i] == 0);
			if(i / lp[i] % lp[i] == 0) {
				cnt[i] = 0;
				continue;
			}
			if(lp[i] == i) {
				cnt[i] = 1;
			}
			else
				cnt[i] = -cnt[i / lp[i]];
		}


		vector<int> used(n);

		vector<int> cntDivisors(N + 1);

		long long curCnt = 0;

		int chosen = 0;

		for (int i = 0; i < q; ++i) {
			int x;
			in >> x;
			--x;
			assert(x >= 0 && x < n);
			int add = 1;
			if(used[x]) {
				add = -1;
			}

			used[x] = !used[x];

			int cur = 0;

			for (int d: divisors[x]) {

				if(add < 0)
					cntDivisors[d] += add;
				cur += cntDivisors[d] * cnt[d];
				if(add > 0)
					cntDivisors[d] += add;
			}
			//out << "cur = " << cur << endl;
			if(add == 1) {
				curCnt += chosen - cur;
			}
			else {
				curCnt -= chosen - 1 - cur;
			}
			chosen += add;

			out << curCnt << "\n";

		}

	}
};
//#undef int

int main() {
	std::cin.sync_with_stdio(false);
	std::cin.tie(0);
	std::cout << std::fixed;
	std::cout.precision(20);
	TaskC solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}