/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <algorithm>
#include <queue>
#include <vector>
#include <set>
#include <map>
#include <cassert>
#include <functional>
#include <sstream>
#include <cmath>

#include <cstring>
#include <cstdio>
#include <unordered_map>

using namespace std;

typedef pair<int, int> ii;
typedef long long int64;
typedef vector<int> vi;

#define pb push_back
#define mp make_pair
#define all(v) (v).begin(),(v).end()
#define sz(v) ((int)(v).size())

template<class T> T abs(T x) { return x >= 0 ? x : -x; }
template<class T> T sqr(T x) { return x * x; }

class TaskB {
public:
	void solve(std::istream& in, std::ostream& out) {
	    int n;
	    in >> n;
	    unordered_map<int, int> ch;
        unordered_map<int64, int> chw;
	    int64 res = 0;
	    for (int i = 0; i < n; ++i) {
	        int x, y;
	        in >> x >> y;
	        res += ch[x];
	        if (x != y) {
                res += ch[y];
                res -= chw[encode(x, y)];
            }
	        ch[x] += 1;
	        if (x != y) ch[y] += 1;
	        chw[encode(x, y)] += 1;
	        if (x != y) chw[encode(y, x)] += 1;
	    }
	    out << res << "\n";
	}

	int64 encode(int x, int y) {
	    int64 res = x;
	    res *= (int64) (2e9);
	    res += y;
	    return res;
	}
};


int main() {
	TaskB solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}