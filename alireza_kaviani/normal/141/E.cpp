/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n, m, cnt, v[MAXN], u[MAXN], par[MAXN], sz[MAXN], comp[MAXN];
char c[MAXN];
vector<ll> A, B;
vector<ll> ans;

ll Find(ll v) {
    return (par[v] == -1 ? v : par[v] = Find(par[v]));
}

void Union(ll v, ll u) {
    v = Find(v);
    u = Find(u);
    if (u == v) return;
    if (sz[v] < sz[u]) swap(v, u);
    par[u] = v;
    sz[v] += sz[u];
    cnt++;
}

int main() {
    fast_io;
    fill(par, par + MAXN, -1);
    fill(sz, sz + MAXN, 1);

    cin >> n >> m;
    if (n % 2 == 0) return cout << -1 << endl, 0;
    for (ll i = 0; i < m; i++) {
        cin >> v[i] >> u[i] >> c[i];
        if (c[i] == 'S') A.push_back(i);
        else B.push_back(i);
    }

    for (ll i : A) {
        Union(v[i], u[i]);
    }
    for (ll i = 1; i <= n; i++) comp[i] = Find(i);
    for (ll i : B) {
        if (Find(v[i]) != Find(u[i])) {
            Union(v[i], u[i]);
            ans.push_back(i);
        }
    }
    if (cnt != n - 1) return cout << -1 << endl, 0;
    if (SZ(ans) > (n - 1) / 2) return cout << -1 << endl, 0;

    fill(par, par + MAXN, -1);
    fill(sz, sz + MAXN, 1);

    for (ll i : ans) Union(v[i], u[i]);
    for (ll i : B) {
        if (ans.size() < (n - 1) / 2) {
            if (Find(v[i]) != Find(u[i])) {
                ans.push_back(i);
                Union(v[i], u[i]);
            }
        }
    }
    if (SZ(ans) < (n - 1) / 2) return cout << -1 << endl, 0;
    for (ll i : A) {
        if (Find(v[i]) != Find(u[i])) {
            Union(v[i], u[i]);
            ans.push_back(i);
        }
    }

    cout << ans.size() << endl;
    for (ll i : ans) cout << i + 1 << sep;

    return 0;
}
/*

*/