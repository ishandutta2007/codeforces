/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <bits/stdc++.h>

#define pb push_back
#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()
#define mp make_pair

using namespace std;

typedef long long int64;
typedef vector<int> vi;
typedef pair<int, int> ii;

bool wins[2][100][100];

class TaskB {
 public:
  void solveOne(istream &in, ostream &out) {
    /*for (int z = 0; z < 10; ++z) {
      for (int o = 0; o < 10; ++o) {
        for (int goal = 0; goal < 2; ++goal) {
          if (z + o == 0) {
            wins[goal][z][o] = goal == 0;
          } else {
            if (z > 0 && !wins[(o + 1 - goal) % 2][z - 1][o]) {
              wins[goal][z][o] = true;
            }
            if (o > 0 && !wins[(o + 1 - goal) % 2][z][o - 1]) {
              wins[goal][z][o] = true;
            }
          }
          if (o % 2 != 0 && goal == 1) {
            out << o << " " << z << " " << wins[goal][z][o] << "\n";
          }
        }
      }
    }*/
    int n;
    in >> n;
    vector<int> a(n);
    for (int& x : a) in >> x;
    int all = 0;
    for (int x : a) all ^= x;
    for (int bit = 30; bit >= 0; --bit) {
      if (all & (1 << bit)) {
        int count = 0;
        for (int x : a) if (x & (1 << bit)) {
          ++count;
        }
        if (count % 4 == 1 || (n - count) % 2 != 0) {
          out << "WIN\n";
        } else {
          out << "LOSE\n";
        }
        return;
      }
    }
    out << "DRAW\n";
  }

  void solve(std::istream &in, std::ostream &out) {
    int nt;
    in >> nt;
    for (int it = 0; it < nt; ++it) {
      solveOne(in, out);
    }
  }
};


int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  TaskB solver;
  std::istream& in(std::cin);
  std::ostream& out(std::cout);
  solver.solve(in, out);
  return 0;
}