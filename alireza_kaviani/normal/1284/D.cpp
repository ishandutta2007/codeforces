/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 4e5 + 10;
const ll LOG = 22;
const ll INF = 1e9;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

int n, l[MAXN], r[MAXN], L[MAXN], R[MAXN], lg[MAXN];
int mn1[LOG][MAXN], mn2[LOG][MAXN], mx1[LOG][MAXN], mx2[LOG][MAXN];
vector<ll> vec;

ll getMax1(ll l, ll r) {
    ll t = lg[r - l + 1];
    return max(mx1[t][l], mx1[t][r - (1ll << t) + 1]);
}

ll getMax2(ll l, ll r) {
    ll t = lg[r - l + 1];
    return max(mx2[t][l], mx2[t][r - (1ll << t) + 1]);
}

ll getMin1(ll l, ll r) {
    ll t = lg[r - l + 1];
    return min(mn1[t][l], mn1[t][r - (1ll << t) + 1]);
}

ll getMin2(ll l, ll r) {
    ll t = lg[r - l + 1];
    return min(mn2[t][l], mn2[t][r - (1ll << t) + 1]);
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    fill(mn1[0], mn1[0] + MAXN, INF);
    fill(mn2[0], mn2[0] + MAXN, INF);
    fill(mx1[0], mx1[0] + MAXN, -INF);
    fill(mx2[0], mx2[0] + MAXN, -INF);

    for (ll i = 2; i < MAXN; i++) lg[i] = lg[i / 2] + 1;
    cin >> n;
    for (ll i = 1; i <= n; i++) {
        cin >> l[i] >> r[i] >> L[i] >> R[i];
        vec.push_back(l[i]);
        vec.push_back(r[i]);
        vec.push_back(L[i]);
        vec.push_back(R[i]);
    }
    Sort(vec);
    vec.resize(unique(all(vec)) - vec.begin());
    for (ll i = 1; i <= n; i++) {
        l[i] = lower_bound(all(vec), l[i]) - vec.begin();
        r[i] = lower_bound(all(vec), r[i]) - vec.begin();
        L[i] = lower_bound(all(vec), L[i]) - vec.begin();
        R[i] = lower_bound(all(vec), R[i]) - vec.begin();
        mx1[0][l[i]] = max(mx1[0][l[i]], L[i]);
        mx1[0][r[i]] = max(mx1[0][r[i]], L[i]);
        mn1[0][l[i]] = min(mn1[0][l[i]], R[i]);
        mn1[0][r[i]] = min(mn1[0][r[i]], R[i]);

        mx2[0][L[i]] = max(mx2[0][L[i]], l[i]);
        mx2[0][R[i]] = max(mx2[0][R[i]], l[i]);
        mn2[0][L[i]] = min(mn2[0][L[i]], r[i]);
        mn2[0][R[i]] = min(mn2[0][R[i]], r[i]);
    }

    for (ll i = 1; i < LOG; i++) {
        for (ll j = 0; j + (1ll << i) < MAXN; j++) {
            mx1[i][j] = max(mx1[i - 1][j], mx1[i - 1][j + (1ll << (i - 1))]);
            mx2[i][j] = max(mx2[i - 1][j], mx2[i - 1][j + (1ll << (i - 1))]);
            mn1[i][j] = min(mn1[i - 1][j], mn1[i - 1][j + (1ll << (i - 1))]);
            mn2[i][j] = min(mn2[i - 1][j], mn2[i - 1][j + (1ll << (i - 1))]);
        }
    }

    for (ll i = 1; i <= n; i++) {
        ll x = getMax1(l[i], r[i]), y = getMin1(l[i], r[i]);
        ll xx = getMax2(L[i], R[i]), yy = getMin2(L[i], R[i]);
        if (x > R[i] || y < L[i] || xx > r[i] || yy < l[i]) return cout << "NO" << endl, 0;
    }
    cout << "YES" << endl;


    return 0;
}
/*

*/