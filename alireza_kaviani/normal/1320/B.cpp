/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n, m, k, p[MAXN], dist[MAXN], cnt[MAXN];
set<ll> par[MAXN];
vector<ll> adj[MAXN];

void BFS(ll v) {
    fill(dist, dist + MAXN, INF);
    queue<ll> q;
    q.push(v);
    dist[v] = 0;
    cnt[v] = 1;
    while (!q.empty()) {
        ll v = q.front();
        q.pop();
        for (ll u : adj[v]) {
            if (dist[u] == dist[v] + 1) cnt[u]++, par[u].insert(v);
            if (dist[u] == INF) {
                dist[u] = dist[v] + 1;
                cnt[u] = 1;
                par[u].insert(v);
                q.push(u);
            }
        }
    }
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    cin >> n >> m;
    for (ll i = 0; i < m; i++) {
        ll v, u;
        cin >> v >> u;
        adj[u].push_back(v);
    }
    cin >> k;
    for (ll i = 1; i <= k; i++) cin >> p[i];
    BFS(p[k]);

    ll L = 0, R = 0;
    for (ll i = 1; i <= k; i++) {
        if (dist[p[i]] != k - i && par[p[i]].find(p[i + 1]) == par[p[i]].end()) L++;
        if (dist[p[i]] != k - i && !(cnt[p[i]] == 1 && *par[p[i]].begin() == p[i + 1])) R++;
        if (dist[p[i]] == k - i && cnt[p[i]] != 1) R++;
    }
    cout << L << sep << R << endl;

    return 0;
}
/*

*/