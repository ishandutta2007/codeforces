/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author majk
 */

#ifndef MAJK_LIB
#define MAJK_LIB

#include <vector>
#include <stack>
#include <iostream>
#include <unordered_map>
#include <unordered_set>
#include <map>
#include <iomanip>
#include <set>
#include <functional>
#include <fstream>
#include <algorithm>
#include <cassert>
#include <cmath>
#include <string>
#include <sstream>
#include <queue>
#include <bitset>
using namespace std;

#define x first
#define y second
typedef std::pair<int,int> pii; typedef long long ll; typedef unsigned long long ull; typedef unsigned int ui; typedef pair<ui,ui> puu;

template <typename T, typename U> std::istream&operator>>(std::istream&i, pair<T,U>&p) {i >> p.x >> p.y; return i;}
template<typename T>std::istream&operator>>(std::istream&i,vector<T>&t) {for(auto&v:t){i>>v;}return i;}
template <typename T, typename U> std::ostream&operator<<(std::ostream&o, const pair<T,U>&p) {o << p.x << ' ' << p.y; return o;}
template<typename T>std::ostream&operator<<(std::ostream&o,const vector<T>&t) {if(t.empty())o<<'\n';for(size_t i=0;i<t.size();++i){o<<t[i]<<" \n"[i == t.size()-1];}return o;}
template<typename T> using minheap = priority_queue<T, vector<T>, greater<T>>;
template<typename T> using maxheap = priority_queue<T, vector<T>, less<T>>;
template <typename T> bool in(T a, T b, T c) { return a <= b && b < c; }
ui logceil(int x) { return 8*sizeof(int)-__builtin_clz(x); }

namespace std { template<typename T,typename U>struct hash<pair<T,U>>{hash<T>t;hash<U>u;size_t operator()(const pair<T,U>&p)const{return t(p.x)^(u(p.y)<<7);}}; }
template<typename T,typename F>T bsh(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){l=m+1;r=m;}else{h=m-1;}}return r;}
template<typename F> double bshd(double l,double h,const F&f,double p=1e-9){ui r=3+(ui)log2((h-l)/p);while(r--){double m=(l+h)/2;if(f(m)){l=m;}else{h=m;}}return (l+h)/2;}
template<typename T,typename F>T bsl(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){h=m-1;r=m;}else{l=m+1;}}return r;}
template<typename F> double bsld(double l,double h,const F&f,double p=1e-9){ui r=3+(ui)log2((h-l)/p);while(r--){double m=(l+h)/2;if(f(m)){h=m;}else{l=m;}}return (l+h)/2;}
template<typename T> T gcd(T a,T b) { if (a<b) swap(a,b); return b?gcd(b,a%b):a; }

template<typename T>class vector2:public vector<vector<T>>{public:vector2(){} vector2(size_t a,size_t b,T t=T()):vector<vector<T>>(a,vector<T>(b,t)){}};
template<typename T>class vector3:public vector<vector2<T>>{public:vector3(){} vector3(size_t a,size_t b,size_t c,T t=T()):vector<vector2<T>>(a,vector2<T>(b,c,t)){}};
template<typename T>class vector4:public vector<vector3<T>>{public:vector4(){} vector4(size_t a,size_t b,size_t c,size_t d,T t=T()):vector<vector3<T>>(a,vector3<T>(b,c,d,t)){}};
template<typename T>class vector5:public vector<vector4<T>>{public:vector5(){} vector5(size_t a,size_t b,size_t c,size_t d,size_t e,T t=T()):vector<vector4<T>>(a,vector4<T>(b,c,d,e,t)){}};


#endif
// #include "../l/mod.h"

class numbertransformation {
public:
    vector<vector<int>> E;

    void addEdge(int i, int lo, int hi, int from, int to, int tar) {
        if (lo >= to || hi <= from) return;
        if (lo >= from && hi <= to) {
            E[i].push_back(tar);
            return;
        }

        addEdge(2*i, lo, (lo+hi)/2, from, to, tar);
        addEdge(2*i+1, (lo+hi)/2, hi, from, to, tar);
    }

    void solve(istream& cin, ostream& cout) {
        int N; cin >> N;
        vector<int> X(N);
        cin >> X;
        sort(X.begin(),X.end());
        X.erase(unique(X.begin(),X.end()),X.end());

        int A, B; cin >> A >> B;
        vector<vector<int>> V(A-B+1);
        for (int x:X) {
            int p = (B+x-1)/x*x;
            if (p <= A) V[p-B].push_back(x);
        }

        int ans = 0, R = B;
        vector<int> S = V[0];
        while (R < A) {
            ++ans;
            int s = R+1;
            for (int x:S) s = max(s, R + x - (R % x) - 1);
            for (int j = R+1; j <= min(A,s); ++j) for (int v:V[j-B]) S.push_back(v);
            R = s;
        }

        cout << ans << '\n';


//        int W = 1<<logceil(A-B+1);
//        E.resize(2*W);
//        for (int i = 2; i < 2*W; ++i) E[i].push_back(i/2);
//        for (int i = W+1; i <= W+A-B; ++i) E[i].push_back(i-1);
//        for (int x:X) {
//            for (int j = (B+x-1)/x*x; j < A; j += x) {
////                cerr << x << ' ' << j+1 << ' ' << min(A,j+x) << endl;
//                addEdge(1, 0, W, j+1-B, min(W,j+x-B), W+j-B);
//            }
//        }
//
//
//
//        vector<bool> V(2*W, false);
//        vector<int> S{W+A-B}, T;
//        int ans = 0;
//        while (true) {
//            for (int s = 0; s < S.size(); ++s) {
//                if (S[s] == W) {
//                    cout << ans << endl;
//                    return;
//                }
//                for (int v:E[S[s]]) {
//                    if (!V[v]) {
//                        V[v] = true;
//                        if (v >= W) T.push_back(v);
//                        else S.push_back(v);
//                    }
//                }
//            }
//            swap(S,T);
//            T.clear();
//            ++ans;
//        }
//


    }
};


int main() {
	ios_base::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr);
	numbertransformation solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
    return 0;
}