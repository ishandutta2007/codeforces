/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#ifndef MAJK_LIB
#define MAJK_LIB

#include <vector>
#include <stack>
#include <iostream>
#include <unordered_map>
#include <map>
#include <iomanip>
#include <set>
#include <functional>
#include <fstream>
#include <algorithm>
#include <cassert>
#include <cmath>
#include <string>
#include <sstream>
#include <queue>
#include <bitset>
using namespace std;

#define x first
#define y second
constexpr int MOD = 1000000007;

typedef std::pair<int,int> pii;
typedef long long ll;
typedef unsigned long long ull;
typedef unsigned int ui;


template<typename T, typename F> T foo(T t, T g, F f) {
	return t;
}


template <typename T, typename U> std::istream&operator>>(std::istream&i, pair<T,U>&p) {i >> p.x >> p.y; return i;}
template<typename T>std::istream&operator>>(std::istream&i,vector<T>&t) {for(auto&v:t){i>>v;}return i;}
template<typename T>std::ostream&operator<<(std::ostream&o,const vector<T>&t) {for(size_t i=0;i<t.size();++i){o<<t[i]<<" \n"[i == t.size()-1];}return o;}
template<typename T> using minheap = priority_queue<T, vector<T>, greater<T>>;
template<typename T> using maxheap = priority_queue<T, vector<T>, less<T>>;
auto fraclt = [](const pii&a,const pii&b) { return (ll)a.x * b.y < (ll)b.x * a.y; };
struct cmpfrac { bool operator()(const pii&a,const pii&b)const { return (ll)a.x * b.y < (ll)b.x * a.y; }};
template <typename T> bool in(T a, T b, T c) { return a <= b && b < c; }
int logceil(ll x) {int b=0;while(x){x>>=1;++b;}return b;}

namespace std {
    template<typename T,typename U>struct hash<pair<T,U>>{hash<T>t;hash<U>u;size_t operator()(const pair<T,U>&p)const{return t(p.x)^(u(p.y)<<7);}};
}
template<typename T,typename F>T bsh(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){l=m+1;r=m;}else{h=m-1;}}return r;}
template<typename T,typename F>T bsl(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){h=m-1;r=m;}else{l=m+1;}}return r;}
template<typename T> T gcd(T a,T b) { if (a<b) swap(a,b); return b?gcd(b,a%b):a; }

template<typename T>class vector2:public vector<vector<T>>{public:vector2(){} vector2(size_t a,size_t b,T t=T()):vector<vector<T>>(a,vector<T>(b,t)){}};
template<typename T>class vector3:public vector<vector<vector<T>>>{public:vector3(){} vector3(size_t a,size_t b,size_t c,T t=T()):vector<vector<vector<T>>>(a,vector<vector<T>>(b,vector<T>(c,t))){}};
template <typename T> struct bounded_priority_queue {
	inline bounded_priority_queue(ui X) : A(X), B(0) {}
	inline void push(ui L, T V) { B = max(B, L); A[L].push(V); }
	inline const T &top() const { return A[B].front(); }
	inline void pop() { A[B].pop(); while (B > 0 && A[B].empty()) --B; }
	inline bool empty() const { return A[B].empty(); }
	inline void clear() { B = 0; for (auto &a: A) a = queue<T>(); }
private:
	vector<queue<T>> A; ui B;
};


#endif
#ifndef MAJK_RANDOM_H
#define MAJK_RANDOM_H

#include <random>
#include <chrono>
seed_seq seed{(ll)std::random_device{}(), std::chrono::duration_cast<std::chrono::nanoseconds>(std::chrono::high_resolution_clock::now().time_since_epoch()).count(),(ll)time(NULL)};
std::mt19937 rng{seed};
using random_int = std::uniform_int_distribution<int>;
using random_ll = std::uniform_int_distribution<ll>;

#endif //MAJK_RANDOM_H



constexpr int brute = 1990;
constexpr int samples = 1000;
class TaskB {
public:
    void solve(istream& cin, ostream& cout) {
		int N, start, X; cin >> N >> start >> X;
		cout << "? " << start << endl;
		fflush(stdout);
		int Next, value; cin >> value >> Next;
		if (value >= X) {
			cout << "! " << value << endl;
			return;
		}

		if (N < brute) {
			while (Next != -1 && value < X) {
				cout << "? " << Next << endl;
				fflush(stdout);
				cin >> value >> Next;
			}
			if (value >= X) {
				cout << "! " << value << endl;
			} else {
				cout << "! -1" << endl;
			}
			return;
		}

		int from = value;
		int ptr = Next;

		random_int RNG(1, N);
		int totAsked = 0;
		vector<bool> Asked(N+1, false);
		Asked[start] = true;
		while (totAsked < samples) {
			int idx = RNG(rng);
			if (!Asked[idx]) {
				Asked[idx] = true;
				++totAsked;
				cout << "? " << idx << endl;
				fflush(stdout);
				cin >> value >> Next;

				if (value == X) {
					cout << "! " << X << endl;
					return;
				}

				if (value > from && value < X) {
					from = value;
					ptr = Next;
				}

			}
		}

		while (ptr != -1 && from < X) {
			cout << "? " << ptr << endl;
			fflush(stdout);
			cin >> from >> ptr;
		}

		if (from >= X) {
			cout << "! " << from << endl;
		} else {
			cout << "! -1" << endl;
		}
    }
};


int main() {
	ios_base::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr);
	TaskB solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
    return 0;
}