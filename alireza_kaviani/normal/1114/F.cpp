/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;
typedef pair<ld, ld> pld;
typedef pair<string, string> pss;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define file_io                     freopen("in.txt" , "r" , stdin) ; freopen("out.txt" , "w" , stdout);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

inline ll input() {
    ll n;
    cin >> n;
    return n;
}

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

set_random;

const ll MAXN = 4e5 + 10;
const ll MAXX = 310;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

template<ll Mod>
struct ModInt {
    ll val;

    ModInt() : val(0) {}
    template <class U> ModInt(const U& x){
        val = (-Mod < x && x < Mod) ? x : x % Mod;
        val = (val < 0) ? val + Mod : val;
    }

    friend ostream &operator<<(ostream &os, ModInt x) { return os << x.val;}
    friend istream &operator>>(istream &is, ModInt &x) { return is >> x.val;}

    friend ModInt operator+(ModInt x, ModInt y) { return ModInt(x.val + y.val);}
    friend ModInt operator-(ModInt x, ModInt y) { return ModInt(x.val - y.val);}
    friend ModInt operator*(ModInt x, ModInt y) { if (Mod > ll(2e9)) return x.LogMul(x, y); return ModInt(x.val * y.val);}
    friend ModInt operator/(ModInt x, ModInt y) { return x * x.inv(y); }
    friend ModInt operator^(ModInt x, ll y) {
        ModInt ans = 1;
        for(; y ; y /= 2 , x *= x)  if(y & 1)   ans *= x;
        return ans;
    }

    template<class T> ModInt operator+=(T x) { return (*this) = (*this) + x;}
    template<class T> ModInt operator-=(T x) { return (*this) = (*this) - x;}
    template<class T> ModInt operator*=(T x) { return (*this) = (*this) * x;}
    template<class T> ModInt operator/=(T x) { return (*this) = (*this) / x;}
    template<class T> ModInt operator^=(T x) { return (*this) = (*this) ^ x;}

    ModInt inv(ModInt x) { return ModInt(x.val) ^ (Mod - 2); }

    ModInt LogMul(ModInt x, ModInt y) {
        if (y.val == 1) return x;
        return LogMul(ModInt(2 * x.val), ModInt(y.val / 2)) + (y.val % 2 == 1 ? x.val : 0);
    }
};

template <ll T = MOD> using mll = ModInt<T>;

struct Node{
    mll<> val = 1 , lazy = 1;
    bitset<MAXX> Primes = 0 , PrimesLazy = 0;
    Node(mll<> v = 1 , bitset<MAXX> pr = 0 , mll<> lzy = 1 , bitset<MAXX> prlzy = 0){
        val = v;
        lazy = lzy;
        Primes = pr;
        PrimesLazy = prlzy;
    }

    friend Node merge(const Node &x , const Node &y){
        return Node(x.val * y.val , x.Primes | y.Primes);
    }
};

template<class T , ll N>
struct LazySegTree {
    T seg[4 * N];

    void Build(ll id, ll l, ll r, ll arr[] , bitset<MAXX> pr[]) {
        if (l == r) {
            seg[id].val = arr[l];
            seg[id].Primes = pr[l];
            return;
        }
        ll mid = (l + r) >> 1;
        Build(id * 2, l, mid, arr , pr);
        Build(id * 2 | 1, mid + 1, r, arr , pr);
        seg[id] = merge(seg[id * 2], seg[id * 2 | 1]);
    }

    void Shift(ll id, ll l, ll r) {
        seg[id].val = (seg[id].val * (seg[id].lazy ^ (r - l + 1)));
        seg[id].Primes |= seg[id].PrimesLazy;
        if (l != r) {
            seg[id * 2].lazy = seg[id * 2].lazy * seg[id].lazy;
            seg[id * 2 | 1].lazy = seg[id * 2 | 1].lazy * seg[id].lazy;
            seg[id * 2].PrimesLazy |= seg[id].PrimesLazy;
            seg[id * 2 | 1].PrimesLazy |= seg[id].PrimesLazy;
        }
        seg[id].lazy = 1;
        seg[id].PrimesLazy = 0;
    }

    void Add(ll id, ll l, ll r, ll ql, ll qr, ll val , const bitset<MAXX> &pr) {
        Shift(id, l, r);
        if (qr < l || r < ql || l > r)  return;
        if (ql <= l && r <= qr) {
            seg[id].lazy = seg[id].lazy * val;
            seg[id].PrimesLazy |= pr;
            Shift(id, l, r);
            return;
        }

        ll mid = (l + r) >> 1;
        Add(id * 2, l, mid, ql, qr, val , pr);
        Add(id * 2 | 1, mid + 1, r, ql, qr, val , pr);
        seg[id] = merge(seg[id * 2], seg[id * 2 | 1]);
    }

    Node Get(ll id, ll l, ll r, ll ql, ll qr) {
        Shift(id, l, r);
        if (qr < l || r < ql || l > r)  return Node();
        if (ql <= l && r <= qr) return seg[id];

        ll mid = (l + r) >> 1;
        return merge(Get(id * 2, l, mid, ql, qr), Get(id * 2 | 1, mid + 1, r, ql, qr));
    }

    void build(ll arr[] , bitset<MAXX> pr[]) {
        Build(1, 0, N - 1, arr , pr);
    }

    void add(ll ql, ll qr, ll val , const bitset<MAXX> &pr) {
        Add(1, 0, N - 1, ql, qr, val , pr);
    }
    Node get(ll ql, ll qr) {
        return Get(1, 0, N - 1, ql, qr);
    }
};

ll n , q , l , r , val , a[MAXN];
string type;
mll<> inv[MAXX];
bitset<MAXX> primeDivisors[MAXX] , A[MAXN];
LazySegTree<Node , MAXN> seg;

mll<> phi(mll<> val , bitset<MAXX> pr){
    mll<> ans = val;
    for(ll i = 0 ; i < MAXX ; i++){
        if(pr[i] == 1){
            ans *= i - 1;
            ans *= inv[i];
        }
    }
    return ans;
}

int main() {
    fast_io;
    for(ll i = 1 ; i < MAXX ; i++){
        inv[i] = mll<>(1) / i;
        ll x = i;
        for(ll j = 2 ; j * j <= i ; j++){
            while(x % j == 0){
                x /= j;
                primeDivisors[i][j] = 1;
            }
        }
        if(x != 1){
            primeDivisors[i][x] = 1;
        }
    }

    cin >> n >> q;
    for(ll i = 1 ; i <= n ; i++){
        cin >> a[i];
        A[i] = primeDivisors[a[i]];
    }
    seg.build(a , A);

    while(q--){
        cin >> type >> l >> r;
        if(type[0] == 'M'){
            cin >> val;
            seg.add(l , r , val , primeDivisors[val]);
        }
        else{
            Node t = seg.get(l , r);
            cout << phi(t.val , t.Primes) << endl;
        }
    }

    return 0;
}
/*

*/