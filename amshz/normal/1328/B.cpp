/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */
 
#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>
 
using namespace std;
using namespace __gnu_pbds;
 
template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;
 
typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;
 
#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())
 
ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}
 
const ll MAXN = 1e6 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;
 
ll q , n , k;
 
int main() {
    ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
 
    cin >> q;
    while(q--){
        cin >> n >> k;
        ll l = 0 , r = n;
        k = (n) * (n - 1) / 2 - k + 1;
        while(r - l > 1){
            ll mid = l + r >> 1;
            if(n * (n - 1) / 2 - (mid) * (mid - 1) / 2 >= k)    l = mid;
            else    r = mid;
        }
        for(ll i = 0 ; i < n ; i++){
            if(n * (n - 1) / 2 - l * (l - 1) / 2 - (n - i - 1) == k)  cout << "b";
            else if(i == n - l - 1)  cout << "b";
            else    cout << "a";
        }
        cout << endl;
    }
 
    return 0;
}