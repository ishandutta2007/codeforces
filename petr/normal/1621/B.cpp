/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

// Actual solution is at the bottom

#undef NDEBUG

#include <algorithm>
#include <array>
#include <bitset>
#include <cassert>
#include <climits>
#include <cstdint>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <memory>
#include <numeric>
#include <queue>
#include <random>
#include <set>
#include <stack>
#include <string>
#include <unordered_set>
#include <unordered_map>
#include <vector>
// AtCoder library from https://github.com/atcoder/ac-library
// #include "../atcoder/all"

#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()

using namespace std;

typedef int64_t int64;
typedef pair<int, int> ii;

class BMagazinTselikhChisel {
 public:
  void solveOne() {
    int n;
    cin >> n;
    int64 mn = (int64) 1e18;
    int64 mx = (int64) -1e18;
    int64 minBest = 0;
    int64 maxBest = 0;
    int64 minmaxBest = 0;
    for (int i = 0; i < n; ++i) {
      int64 l, r, c;
      cin >> l >> r >> c;
      if (l < mn) {
        mn = l;
        minBest = minmaxBest = (int64) 1e18;
      }
      if (r > mx) {
        mx = r;
        maxBest = minmaxBest = (int64) 1e18;
      }
      if (l == mn) {
        minBest = min(minBest, c);
      }
      if (r == mx) {
        maxBest = min(maxBest, c);
      }
      if (l == mn && r == mx) {
        minmaxBest = min(minmaxBest, c);
      }
      cout << min(minBest + maxBest, minmaxBest) << "\n";
    }
  }

  void solve() {
    int nt;
    cin >> nt;
    for (int it = 0; it < nt; ++it) {
      // cout << "Case #" << (it + 1) << ": ";
      solveOne();
    }
  }
};

// #define st_mtimespec st_mtim

int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(0);
    BMagazinTselikhChisel solver;


    solver.solve();
    return 0;
}