#include<bits/stdc++.h>
using namespace std;
const int N=105;

int read()
{
	int s=0;
	char c=getchar(),lc='+';
	while (c<'0'||'9'<c) lc=c,c=getchar();
	while ('0'<=c&&c<='9') s=s*10+c-'0',c=getchar();
	return lc=='-'?-s:s;
}
void write(int x)
{
	if (x<0) putchar('-'),x=-x;
	if (x<10) putchar(x+'0');
	else write(x/10),putchar(x%10+'0');
}
void print(int x=-1,char c='\n')
{
	write(x);
	putchar(c);
}
int a[N];
int tot[N][26],d[26];
struct edge {int to,x,y;};
vector<edge>e[N];
int q[N],h=1,t=0;
void Query(int l,int r)
{
	memset(d,0,sizeof(d));
	memset(tot,0,sizeof(tot));
	printf("? %d %d\n",l,r);
	fflush(stdout);
	string s;
	for (int i=l;i<=r;i++)
	for (int j=i;j<=r;j++)
	{
		cin>>s;
		int len=(int)s.size();
		for (char k:s) tot[len][k-'a']++;
	}
	int mid1=(l+r)/2,mid2=(l+r+1)/2,len=(r-l+2)/2;
	if ((r-l+1)&1)
	for (int i=0;i<26;i++)
	if (tot[len][i]>tot[len-1][i])
	{
		q[++t]=mid1;
		a[mid1]=i;
		d[i]++;
	}
	for (int i=(r-l+1)&1;mid2+i<=r;i++)
	{
		vector<int>tmp(0);
		for (int j=0;j<26;j++) tot[len-i][j]-=tot[len-i-1][j];
		for (int j=0;j<26;j++) tot[len-i][j]-=d[j];
		for (int j=0;j<26;j++) while (tot[len-i][j]--) tmp.push_back(j);
		int x=tmp[0],y=tmp[1];
		d[x]++,d[y]++;
		int u=mid1-i,v=mid2+i;
		e[u].push_back((edge){v,x,y});
		e[v].push_back((edge){u,x,y});
	}
}
void solve()
{
//	for (int i=1;i<=4;i++)
//	for (edge j:e[i])
//	{
//		print(i,',');
//		print(j.to,':');
//		print(j.x,' ');
//		print(j.y);
//	}
	while (h<=t)
	{
		int now=q[h++];
		for (edge i:e[now])
		{
			if (!~a[i.to]) q[++t]=i.to;
			a[i.to]=i.x^i.y^a[now];
		}
	}
}

signed main(signed Recall,char *_902_[])
{
	memset(a,-1,sizeof(a));
	(void)Recall,(void)_902_;
	int n=read(),l1,r1,l2,r2,l3,r3;
	if (n<=2)
	{
		string s="";
		for (int i=1;i<=n;i++)
		{
			printf("? %d %d\n",i,i);
			char c;
			cin>>c;
			s+=c;
		}
		cout<<"! "+s<<endl;
		return 0;
	}
	else if (n%3==2)
	{
		l1=1,r1=n/3*2+1;
		l2=n/3+2,r2=n-1;
		l3=n/3+2,r3=n;
	}
	else if (n%3==1)
	{
		l1=1,r1=n/3*2;
		l2=n/3+1,r2=n-1;
		l3=n/3+1,r3=n;
	}
	else
	{
		l1=1,r1=n/3*2;
		l2=n/3+1,r2=n;
		l3=n/3+2,r3=n;
	}
	Query(l1,r1);
	Query(l2,r2);
	Query(l3,r3);
	solve();
	cout<<"! ";
	for (int i=1;i<=n;i++) putchar(a[i]+'a');
	cout<<endl;
	
	return 0;
}
//....................  ..                        .    . . ..   .                                          .........
//...................  ....,]]]]]]`.   . .         . .,@@@@@@`.. .                                          ........
//................... ,@@@@@@@@@@@@@@@@@@\].,]]]]]`,@@@@@@@@@@@. .                                          ........
//....................@^...[@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@`                                            .......
//...................,@`......\@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@`.                                          .......
//...................=@......../@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@`.                                         .......
//...................=@....../@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@.                                         .......
//...................=@....=@@@@@@/[[[[[@@@@@@@@@@@@@@@@@/`...[@@@@^                                         .......
//...................=@.../@@@/`...........\@@@@@@@@@@@`........,@@@.                                     . ........
//......,/@@@@@@@O\]`.@`.=@@@`...............\@@@@@@@@`...........@@^                                       ........
//....,@^........,/@@@@^,@@/..................,@@@@@@^............,@@.                                     .........
//....//......,/@[=OOOOO=@@....................,@@@@@...]O@@]......=@^                                     .........
//....@`....]@OO^.=OOO/@@@^.../@@@@@@@`.........=@@@@.=@@@@@@@@....=@^                                     .........
//...=@...,@OOO/.......=@@^.,@@@@@@@@@@@........=@@@@,@@@@@@@@@@...=@^                                    ..........
//...=@..=@`............\@^,@@@@@@@@@@@@@........@@@@=@@@@@@@@@@^..=@.                                 .............
//...=@.=@@OO@@]........@@@=@@@@@@@@@@@@@^......=@@@@O@@@@@@@@@@^..//.                                  ............
//...=@,@`.   .,\@`....=@\@@@@@@@@@@@@@@@^......O@@@@@@@@@@@@@@@..=@.  ......  .  . .......            .............
//...=@@/ ........\@`..=@.\@@@@@@@@@@@@@@^.....=@@@@@@@@@@@@@@@^./@`...,/@O[[...[[[O@@/.=/ .  ...... ...............
//....@@^   /@OOOO@@@\.=@  =@@@@@@@@@@@@@...../@@@@@@@@@@@@@@/]/@/...,@`...............[@@[[O@\`,[[@]...............
//....\@^  =@OOOOOOOO@\.@. OO@@@@@@@@@@/...,@@@@@@@@@@@@@@@@@@@@` .,@`.......,^...........,`...,\@`..,@.............
//....,@^ .=OOOOOOOOOO@\O^.\OOOO@@@@@@@@@@@@@@@@@@@@@@@@@@@@@/... ,@........=/..../@/[............\@...@`...........
//.....=@. =@OOOOOOOOOO@/@.,@OOOO@@@@@@@@@@@@@@@@@@@@@@@/[...    .@`...........,@`.................,@..=O...........
//......@\..\OOOOOOOOOO@^=@.,@OO@@@@@@@@@@@@@@@@@@@@@^         . .O......@O@^.,@....................=\..@*..........
//.......\@..\@OOOOOOOO@O.,@`..@@@@@@@@@@@@@@@@@@@@@@O    .     .,O......=@@`.=^.....................@..@@@]`.......
//........,@\..\@@OOOO@@^...\@@@@@@@@@@@@@@@@@@@@@@@@@.  ..,/@@@@@@..=@`......=O.........../^........@]@@O\*,O@`....
//..........,O@O]....,/@......@@@@@@@@@@@@@@@@@@@@@@@@^../@`*****=@@/@[....,[@`\@.......,@` .......,@/*********@\...
//..............,[\O@@@@@@@O@@@@@@@@@@@@@@@@@@@@@@@@@@@.=O*******[[[[O@@O]`]]]/@`@@@O@@O[[[***[[[\@@`*********,O@^..
//.................**O@...../@@@@@@@@@@@@@@@@@@@@@@@@@@@`*****************,\@*****[[`**************************=@...
//................****,@@@@@/*,@@@@@@@@@@@@@@@@@@@@@@@@O*******************************************************O/*..
//...................************[[\OO@@@@@@O/[[[[[[[*,@@\]**************************************************,@@*...
//..............................**********************.***[[@@O]]`***************************************]]@@[**....
//..........................................................*****,[[[OOOOOOOOOOOOOO@@@@@@@@@@@@O@OOOOO[[[****.......
//................................................................................******************................