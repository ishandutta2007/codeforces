#include "bits/stdc++.h"
using namespace std;

typedef string::const_iterator State;
#define eps 1e-8L
#define MAX_MOD 1000000007LL
#define GYAKU 500000004LL
#define MOD 998244353LL
#define pb push_back
#define mp make_pair
typedef long long ll;
typedef long double ld;
#define REP(a, b) for (long long(a) = 0; (a) < (b); ++(a))
#define ALL(x) (x).begin(), (x).end()

#define int long long

void solve()
{
  int n;
  cin >> n;
  vector<vector<int>> inputs(2 * n, vector<int>(2 * n, 0));
  REP(i, 2 * n)
  {
    REP(q, 2 * n)
    {
      cin >> inputs[i][q];
    }
  }
  int ans = 0;
  vector<vector<int>> dist(2 * n, vector<int>(2 * n, 1e18));
  priority_queue<pair<int, pair<int, int>>> nexts;
  REP(i, n)
  {
    REP(q, n)
    {
      ans += inputs[i + n][q + n];
      inputs[i + n][q + n] = 0;
      dist[i][q] = 0;
      nexts.push({0, {i, q}});
    }
  }
  while (!nexts.empty())
  {
    pair<int, pair<int, int>> now = nexts.top();
    nexts.pop();
    pair<int, int> zahyo = now.second;
    if (now.first != -1 * inputs[zahyo.first][zahyo.second])
      continue;
    const int dx[4] = {1, -1, 0, 0};
    REP(i, 4)
    {
      int x = zahyo.first + dx[i] + 2 * n;
      int y = zahyo.second + dx[3 - i] + 2 * n;
      x %= 2 * n;
      y %= 2 * n;
      int cost = -now.first + inputs[x][y];
      if (dist[x][y] > cost)
      {
        dist[x][y] = cost;
        nexts.push({-cost, {x, y}});
      }
    }
  }
  int now = 1e18;
  now = min({inputs[n][0], inputs[n][n - 1], inputs[2 * n - 1][0], inputs[2 * n - 1][n - 1], inputs[0][n], inputs[0][2 * n - 1], inputs[n - 1][n], inputs[n - 1][2 * n - 1]});
  ans += now;
  cout << ans << endl;
}
#undef int

// generated by oj-template v4.7.2
// (https://github.com/online-judge-tools/template-generator)
int main()
{
  // Fasterize input/output script
  ios::sync_with_stdio(false);
  cin.tie(nullptr);
  cout << fixed << setprecision(100);
  // scanf/printf user should delete this fasterize input/output script

  int t = 1;
  cin >> t; // comment out if solving multi testcase
  for (int testCase = 1; testCase <= t; ++testCase)
  {
    solve();
  }
  return 0;
}