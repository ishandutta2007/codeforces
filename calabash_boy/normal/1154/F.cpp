/* Generated by powerful Codeforces Tool
 * Author: calabash_boy_love_15 
 * Time: 2019-04-26 14:43:14
 * Personal Code Template: https://github.com/4thcalabash/ACM-Code-Library
**/
#pragma GCC optimize(3)
#include <bits/stdc++.h>
using namespace std;
#ifdef __LOCAL_DEBUG__
# define _debug(fmt, ...) fprintf(stderr, "\033[91m[%s %3d]: " fmt "\n\033[0m", \
  __func__,__LINE__, ##__VA_ARGS__)
#else
# define _debug(...) (void(0))
#endif
#define PB(x) push_back(x)
#define rep(i,l,r) for (int i = l,_ = r;i< _;i++)
#define REP(i,l,r) for (int i=l,_=r;i<=_;i++)
#define leave(x) do {cout<<#x<<endl;fflush(stdout);return 0;}while (0);
#define untie do{ios::sync_with_stdio(false);cin.tie(nullptr);cout.tie(nullptr);}while (0)
#define range(x) x.begin(),x.end()
typedef long long LL;
typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef long double db;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;
const int inf = 0x3f3f3f3f;
const ll inf_ll = 0x3f3f3f3f3f3f3f3fLL;
/************* header ******************/

const int maxn = 2e5+100;
int a[maxn];
int max_y[maxn];
int n,m,k;
int sum[maxn];
int dp[maxn];
int get_sum(int l,int r){
    return sum[r] - sum[l-1];
}
int main(){
    untie;
    cin>>n>>m>>k;
    for (int i=1;i<=n;i++){
        cin>>a[i];
    }
    sort(a+1,a+1+n);
    n = min(n,k);
    for (int i=1;i<=n;i++){
        sum[i] = sum[i-1] + a[i];
        dp[i] = INT_MAX;
    }
    for (int i=0;i<m;i++){
        int x,y;
        cin>>x>>y;
        if (x > n)continue;
        max_y[x] = max(max_y[x],y);
    }
    vector<pair<int,int> > offers(0);
    for (int i=1;i<=n;i++){
        if (max_y[i]){
            offers.PB(make_pair(i,max_y[i]));
        }
    }
    for (int i=1;i<=n;i++){
        dp[i] = dp[i-1] + a[i];
        for (auto pr : offers){
            int x,y;
            tie(x,y) = pr;
            if (x > i)continue;
            int z = x - y;
            dp[i] = min(dp[i],dp[i-x] + get_sum(i - z + 1,i));
        }
    }
    cout<<dp[n]<<endl;
    return 0;
}