/* Generated by powerful Codeforces Tool
 * You can download the binary file in here https://github.com/xalanq/cf-tool (Windows, macOS, Linux)
 * Author: alireza_kaviani
 * Time: 2020-08-28 11:14:27
**/
#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<int, int> pii;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n , c , x , y;

ll get(ll k){
	ll ans = 0 , l = 2 * k + 1;
	ans = (k + 1) * (k + 1) + k * k;
//	cout << k << sep << ans << endl;
	ll a = max(0ll , l - 2 * x);
	ll b = max(0ll , l - 2 * y);
	ll c = max(0ll , l - 2 * (n + 1 - x));
	ll d = max(0ll , l - 2 * (n + 1 - y));
	a = (a + 1) / 2; b = (b + 1) / 2;
	c = (c + 1) / 2; d = (d + 1) / 2;
//	cout << a << sep << b << sep << c << sep << d << endl;
	ans -= a * a + b * b + c * c + d * d;
//	cout << k << sep << ans << endl;
	a = max(0ll , k + 2 - x - y);
	b = max(0ll , k + 2 - (n + 1 - x) - y);
	c = max(0ll , k + 2 - x - (n + 1 - y));
	d = max(0ll , k + 2 - (n + 1 - x) - (n + 1 - y));
	//cout << a << sep << b << sep << c << sep << d << endl;
	ans += a * (a - 1) / 2 + b * (b - 1) / 2;
	ans += c * (c - 1) / 2 + d * (d - 1) / 2;
	//cout << k << sep << ans << endl;
	return ans;
}

int main() {
	ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);

	cin >> n >> x >> y >> c;
	ll l = -1 , r = n + n;
	while(r - l > 1){
		ll mid = (l + r) / 2;
		if(get(mid) >= c)	r = mid;
		else	l = mid;
	}
	cout << r << endl;
	//cout << 50 << endl;

    return 0;
}
/*

*/