import java.util.Collections;
import java.util.InputMismatchException;
import java.math.BigInteger;
import java.util.*;
import java.util.Collection;
import java.util.ArrayList;
import java.util.List;
import java.util.Comparator;
import java.io.*;
import java.util.Iterator;
import java.util.Arrays;

/**
 * Generated by Contest helper plug-in
 * Actual solution is at the bottom
 */
public class Main {
	public static void main(String[] args) {
		InputReader in = new StreamInputReader(System.in);
		PrintWriter out = new PrintWriter(System.out);
		run(in, out);
	}

	public static void run(InputReader in, PrintWriter out) {
		Solver solver = new TaskC();
		solver.solve(1, in, out);
		Exit.exit(in, out);
	}
}

abstract class InputReader {
	private boolean finished = false;

	public abstract int read();

	public int readInt() {
		int c = read();
		while (isSpaceChar(c))
			c = read();
		int sgn = 1;
		if (c == '-') {
			sgn = -1;
			c = read();
		}
		int res = 0;
		do {
			if (c < '0' || c > '9')
				throw new InputMismatchException();
			res *= 10;
			res += c - '0';
			c = read();
		} while (!isSpaceChar(c));
		return res * sgn;
	}

	public String readString() {
		int c = read();
		while (isSpaceChar(c))
			c = read();
		StringBuffer res = new StringBuffer();
		do {
			res.appendCodePoint(c);
			c = read();
		} while (!isSpaceChar(c));
		return res.toString();
	}

	private boolean isSpaceChar(int c) {
		return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
	}

	public void setFinished(boolean finished) {
		this.finished = finished;
	}

	public abstract void close();
}

class StreamInputReader extends InputReader {
	private InputStream stream;
	private byte[] buf = new byte[1024];
	private int curChar, numChars;

	public StreamInputReader(InputStream stream) {
		this.stream = stream;
	}

	public int read() {
		if (numChars == -1)
			throw new InputMismatchException();
		if (curChar >= numChars) {
			curChar = 0;
			try {
				numChars = stream.read(buf);
			} catch (IOException e) {
				throw new InputMismatchException();
			}
			if (numChars <= 0)
				return -1;
		}
		return buf[curChar++];
	}

	public void close() {
		try {
			stream.close();
		} catch (IOException ignored) {
		}
	}
}

class Exit {
	private Exit() {
	}

	public static void exit(InputReader in, PrintWriter out) {
		in.setFinished(true);
		in.close();
		out.close();
	}
}

interface Solver {
	public void solve(int testNumber, InputReader in, PrintWriter out);
}

class Pair<U, V> implements Comparable<Pair<U, V>> {
	public final U first;
	public final V second;

	public static<U, V> Pair<U, V> makePair(U first, V second) {
		return new Pair<U, V>(first, second);
	}

	private Pair(U first, V second) {
		this.first = first;
		this.second = second;
	}

	public boolean equals(Object o) {
		if (this == o) return true;
		if (o == null || getClass() != o.getClass()) return false;

		Pair pair = (Pair) o;

		return !(first != null ? !first.equals(pair.first) : pair.first != null) && !(second != null ? !second.equals(pair.second) : pair.second != null);

	}

	public int hashCode() {
		int result = first != null ? first.hashCode() : 0;
		result = 31 * result + (second != null ? second.hashCode() : 0);
		return result;
	}

	public String toString() {
		return "(" + first + "," + second + ")";
	}

	public int compareTo(Pair<U, V> o) {
		int value = ((Comparable<U>)first).compareTo(o.first);
		if (value != 0)
			return value;
		return ((Comparable<V>)second).compareTo(o.second);
	}
}

class MiscUtils {

	public static<T extends Comparable<T>> T min(T first, T second) {
		if (first.compareTo(second) <= 0)
			return first;
		return second;
	}

	}

class TaskC implements Solver {
	public void solve(int testNumber, InputReader in, PrintWriter out) {
		in.readInt();
		int toReplace = in.readInt();
		char[] number = in.readString().toCharArray();
		Pair<Integer, String> result = Pair.makePair(Integer.MAX_VALUE, "");
		for (char digit = '0'; digit <= '9'; digit++)
			result = MiscUtils.min(result, processDigit(number, digit, toReplace));
		out.println(result.first);
		out.println(result.second);
	}

	private Pair<Integer, String> processDigit(char[] number, char digit, int toReplace) {
		number = number.clone();
		Set<Replacement> replacements = new TreeSet<Replacement>(new Comparator<Replacement>() {
			public int compare(Replacement o1, Replacement o2) {
				int value = Math.abs(o1.from - o1.to) - Math.abs(o2.from - o2.to);
				if (value != 0)
					return value;
				if (o1.from != o2.from)
					return o2.from - o1.from;
				if (o1.from > o1.to)
					return o1.position - o2.position;
				else
					return o2.position - o1.position;
			}
		});
		for (int i = 0; i < number.length; i++) {
			char c = number[i];
			if (c == digit)
				toReplace--;
			else
				replacements.add(new Replacement(number[i], digit, i));
		}
		int index = 0;
		int score = 0;
		for (Replacement replacement : replacements) {
			if (index++ >= toReplace)
				break;
			score += replacement.replace(number);
		}
		return Pair.makePair(score, new String(number));
	}
}

class Replacement {
	public final char from;
	public final char to;
	public final int position;

	Replacement(char from, char to, int position) {
		this.from = from;
		this.to = to;
		this.position = position;
	}

	public int replace(char[] number) {
		number[position] = to;
		return Math.abs(to - from);
	}
}