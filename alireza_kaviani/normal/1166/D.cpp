/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;
typedef pair<ld, ld> pld;
typedef pair<string, string> pss;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define file_io                     freopen("in.txt" , "r" , stdin) ; freopen("out.txt" , "w" , stdout);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

inline ll input() {
    ll n;
    cin >> n;
    return n;
}

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

set_random;

const ll MAXN = 50 + 10;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll q , a , b , m , x[MAXN];

int main() {
    fast_io;

    cin >> q;
    while(q--){
        fill(x , x + MAXN , 0);
        ll k = 0 , sum;
        cin >> a >> b >> m;
        x[0] = a;
        sum = a;
        while(sum + 1 <= b){
            x[++k] = sum + 1;
            sum += x[k];
        }

        for(ll i = 1 ; i <= k ; i++){
            ll factor = (i == k ? 1 : poww(2 , k - i - 1 , INF));
            ll t = min(m - 1 , (b - x[k]) / factor);
            for(ll j = i ; j <= k ; j++){
                ll f = (i == j ? 1 : poww(2 , j - i - 1 , INF));
                x[j] += f * t;
            }
        }

        if(x[k] != b){
            cout << -1 << endl;
            continue;
        }
        cout << k + 1 << sep;
        for(ll i = 0 ; i <= k ; i++)    cout << x[i] << sep;
        cout << endl;
    }

    return 0;
}
/*

*/