/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

// Actual solution is at the bottom

#include <algorithm>
#include <array>
#include <bitset>
#include <cassert>
#include <climits>
#include <cstdint>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <memory>
#include <numeric>
#include <queue>
#include <random>
#include <set>
#include <stack>
#include <string>
#include <unordered_set>
#include <unordered_map>
#include <vector>
//#include "../atcoder/all"

#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()

using namespace std;

typedef int64_t int64;
typedef pair<int, int> ii;

class E3SortirovkaSliyaniem {
 public:
  int n;
  string log;
  int logPtr;
  vector<int> a, b;
  //vector<unordered_map<int, short>> jumpCache;
  vector<vector<short>> jumpCache;
  vector<int> onesBefore;
  vector<int> zerosBefore;
  vector<int> ones;
  vector<int> zeros;

  bool mergeSort(int l, int r, bool compute) {
    if (r - l <= 1) {
      return true;
    }
    int len = r - l;
    int startPtr = logPtr;
    if (!compute && len < jumpCache.size()) {
      int cached = jumpCache[len][startPtr];
      if (cached != 0) {
        if (cached < 0) return false;
        logPtr += cached;
        return true;
      }
    }
    int m = (l + r) >> 1;
    if (!mergeSort(l, m, compute)) {
      if (len < jumpCache.size()) {
        jumpCache[len][startPtr] = -1;
      }
      return false;
    }
    if (!mergeSort(m, r, compute)) {
      if (len < jumpCache.size()) {
        jumpCache[len][startPtr] = -1;
      }
      return false;
    }
    int i = l, j = m, k = l;
    if (compute) {
      while (i < m && j < r) {
        if (logPtr >= log.size()) {
          if (len < jumpCache.size()) {
            jumpCache[len][startPtr] = -1;
          }
          return false;
        }
        if (log[logPtr++] == '0') {
          b[k] = a[i];
          i += 1;
        } else {
          b[k] = a[j];
          j += 1;
        }
        k += 1;
      }
      while (i < m) {
        b[k] = a[i];
        i += 1;
        k += 1;
      }
      while (j < r) {
        b[k] = a[j];
        j += 1;
        k += 1;
      }
      for (int p = l; p < r; ++p) {
        a[p] = b[p];
      }
    } else {
      int relevantZero = zerosBefore[logPtr] + (m - l) - 1;
      int relevantOne = onesBefore[logPtr] + (r - m) - 1;
      int dest = (int) 1e9;
      if (relevantZero < zeros.size()) {
        dest = min(dest, zeros[relevantZero] + 1);
      }
      if (relevantOne < ones.size()) {
        dest = min(dest, ones[relevantOne] + 1);
      }
      if (dest == (int) 1e9) {
        if (len < jumpCache.size()) {
          jumpCache[len][startPtr] = -1;
        }
        return false;
      }
      logPtr = dest;
    }
    if (len < jumpCache.size()) {
      jumpCache[len][startPtr] = logPtr - startPtr;
    }
    return true;
  }


  void solveOne() {
    cin >> log;
    //jumpCache.resize(1e5 + 1);
    jumpCache.assign(0, vector<short>(log.size() + 1, 0));
    zerosBefore.clear();
    onesBefore.clear();
    zeros.clear();
    ones.clear();
    for (int i = 0; i < log.size(); ++i) {
      zerosBefore.push_back(zeros.size());
      onesBefore.push_back(ones.size());
      if (log[i] == '0') zeros.push_back(i); else ones.push_back(i);
    }
    zerosBefore.push_back(zeros.size());
    onesBefore.push_back(ones.size());
    int left = 1;
    int right = (int) 1e5 + 1;
    while (right - left > 1) {
      int n = (left + right) / 2;
      logPtr = 0;
      if (mergeSort(0, n, false)) {
        if (logPtr == log.size()) {
          logPtr = 0;
          a.resize(n);
          b.resize(n);
          for (int i = 0; i < n; ++i) a[i] = i;
          mergeSort(0, n, true);
          cout << n << "\n";
          vector<int> src(n);
          for (int i = 0; i < n; ++i) src[a[i]] = i + 1;
          for (int x : src) cout << x << " ";
          cout << "\n";
          return;
        } else {
          left = n;
        }
      } else {
        right = n;
      }
    }
    assert(false);
    for (int delta = 0;; ++delta) {
      for (int sgn = -1; sgn <= 1; sgn += 2) {
        int n = left + delta * sgn;
        if (n >= 1 && n <= 1e5) {
          logPtr = 0;
          if (mergeSort(0, n, false)) {
            if (logPtr == log.size()) {
              logPtr = 0;
              a.resize(n);
              b.resize(n);
              for (int i = 0; i < n; ++i) a[i] = i;
              mergeSort(0, n, true);
              cout << n << "\n";
              vector<int> src(n);
              for (int i = 0; i < n; ++i) src[a[i]] = i + 1;
              for (int x : src) cout << x << " ";
              cout << "\n";
              return;
            }
          }
        }
      }
    }
  }

  void solve() {
    int nt = 1;
    for (int it = 0; it < nt; ++it) {
      solveOne();
    }
  }
};


int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(0);
    E3SortirovkaSliyaniem solver;


    solver.solve();
    return 0;
}