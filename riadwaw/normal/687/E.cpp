/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author RiaD
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <vector>


#include <iterator>


#include <string>
#include <stdexcept>

#ifndef SPCPPL_ASSERT
	#ifdef SPCPPL_DEBUG
		#define SPCPPL_ASSERT(condition) \
		if(!(condition)) { \
			throw std::runtime_error(std::string() + #condition + " in line " + std::to_string(__LINE__) + " in " + __PRETTY_FUNCTION__); \
		}
	#else
		#define SPCPPL_ASSERT(condition)
	#endif
#endif


/**
* Support decrementing and multi-passing, but not declared bidirectional(or even forward) because
* it's reference type is not a reference.
*
* It doesn't return reference because
* 1. Anyway it'll not satisfy requirement [forward.iterators]/6
*   If a and b are both dereferenceable, then a == b if and only if *a and
*   b are bound to the same object.
* 2. It'll not work with reverse_iterator that returns operator * of temporary which is temporary for this iterator
*
* Note, reverse_iterator is not guaranteed to work  now too since it works only with bidirectional iterators,
* but it's seems to work at least on my implementation.
*
* It's not really useful anywhere except iterating anyway.
*/
template <typename T>
class IntegerIterator: public std::iterator<std::input_iterator_tag, T, std::ptrdiff_t, T*, T> {
public:
	explicit IntegerIterator(T value): value(value) {

	}

	IntegerIterator& operator++() {
		++value;
		return *this;
	}

	IntegerIterator operator++(int) {
		IntegerIterator copy = *this;
		++value;
		return copy;
	}

	IntegerIterator& operator--() {
		--value;
		return *this;
	}

	IntegerIterator operator--(int) {
		IntegerIterator copy = *this;
		--value;
		return copy;
	}

	T operator*() const {
		return value;
	}

	bool operator==(IntegerIterator rhs) {
		return value == rhs.value;
	}

	bool operator!=(IntegerIterator rhs) {
		return !(*this == rhs);
	}

private:
	T value;
};

template <typename T>
class IntegerRange {
public:
	IntegerRange(T begin, T end): begin_(begin), end_(end) {
		SPCPPL_ASSERT(begin <= end);
	}

	IntegerIterator<T> begin() const {
		return IntegerIterator<T>(begin_);
	}

	IntegerIterator<T> end() const {
		return IntegerIterator<T>(end_);
	}

private:
	T begin_;
	T end_;
};

template <typename T>
class ReversedIntegerRange {
	typedef std::reverse_iterator<IntegerIterator<T>> IteratorType;
public:
	ReversedIntegerRange(T begin, T end): begin_(begin), end_(end) {
		SPCPPL_ASSERT(begin >= end);
	}

	IteratorType begin() const {
		return IteratorType(IntegerIterator<T>(begin_));
	}

	IteratorType end() const {
		return IteratorType(IntegerIterator<T>(end_));
	}

private:
	T begin_;
	T end_;
};

template <typename T>
IntegerRange<T> range(T to) {
	return IntegerRange<T>(0, to);
}

template <typename T>
IntegerRange<T> range(T from, T to) {
	return IntegerRange<T>(from, to);
}

template <typename T>
IntegerRange<T> inclusiveRange(T to) {
	return IntegerRange<T>(0, to + 1);
}

template <typename T>
IntegerRange<T> inclusiveRange(T from, T to) {
	return IntegerRange<T>(from, to + 1);
}

template <typename T>
ReversedIntegerRange<T> downrange(T from) {
	return ReversedIntegerRange<T>(from, 0);
}

template <typename T>
ReversedIntegerRange<T> downrange(T from, T to) {
	return ReversedIntegerRange<T>(from, to);
}

template <typename T>
ReversedIntegerRange<T> inclusiveDownrange(T from) {
	return ReversedIntegerRange<T>(from + 1, 0);
}

template <typename T>
ReversedIntegerRange<T> inclusiveDownrange(T from, T to) {
	return ReversedIntegerRange<T>(from + 1, to);
}




#include <queue>
template <typename Graph>
std::vector<int> bfsDistances(const Graph& graph, const typename Graph::Vertex& from) {
	auto result = graph.getCollection(-1);
	std::queue<typename Graph::Vertex> q;
	q.push(from);
	result[from] = 0;
	while (!q.empty()) {
		const auto& v = q.front();
		for (const auto& e: graph.outgoingEdges(v)) {
			const auto& to = graph.endOfEdge(v, e);
			if (result[to] == -1) {
				result[to] = result[v] + 1;
				q.push(to);
			}
		}
		q.pop();
	}
	return result;
}








template <typename T>
class VectorVectorBaseGraph {
public:
	using Edge = T;
	using Vertex = std::size_t;

	explicit VectorVectorBaseGraph(std::size_t n): g(n) {
	}

	template <typename U>
	using Collection = std::vector<U>;

	template <typename U>
	Collection<U> getCollection(const U& defaultValue) const {
		return Collection<U>(g.size(), defaultValue);
	}

	IntegerRange<std::size_t> vertices() const {
		return range(g.size());
	}

	const std::vector<Edge>& outgoingEdges(Vertex vertex) const {
		return g[vertex];
	}
protected:
	std::vector<std::vector<Edge>> g;
};


class SimpleGraph: public VectorVectorBaseGraph<std::size_t> {
public:
	explicit SimpleGraph(size_t n): VectorVectorBaseGraph(n) {}

	Vertex endOfEdge(Vertex, Edge edge) const {
		return edge;
	}

	void addEdge(Vertex from, Vertex to) {
		g[from].push_back(to);
	}
};


using namespace std;

vector <vector<int>> g, gr;
vector<char> used;
vector<int> order, component;

void dfs1(int v) {
	used[v] = true;
	for (size_t i = 0; i < g[v].size(); ++i) {
		if (!used[g[v][i]]) {
			dfs1(g[v][i]);
		}
	}
	order.push_back(v);
}

void dfs2(int v) {
	used[v] = true;
	component.push_back(v);
	for (size_t i = 0; i < gr[v].size(); ++i) {
		if (!used[gr[v][i]]) {
			dfs2(gr[v][i]);
		}
	}
}

class TaskE {
public:
	void solve(std::istream& in, std::ostream& out) {
		int n, m;
		in >> n >> m;
		g.clear();
		g.resize(n);
		gr.clear();
		gr.resize(n);
		order.clear();
		component.clear();

		SimpleGraph sg(n);
		for (int i: range(m)) {
			int a, b;
			in >> a >> b;
			--a, --b;
			g[a].push_back (b);
			gr[b].push_back (a);
			sg.addEdge(a, b);
		}

		used.assign (n, false);
		for (int i=0; i<n; ++i)
			if (!used[i])
				dfs1 (i);
		used.assign (n, false);
		vector<int> comp(n);

		vector<vector<int>> compa;
		int comps = 0;
		for (int i=0; i<n; ++i) {
			int v = order[n-1-i];
			if (!used[v]) {
				dfs2 (v);

				for (int x: component) {
					comp[x] = comps;
				}
				compa.push_back(component);
				++comps;
				component.clear();
			}
		}

		vector<char> intr_comp(n, true);
		for (int i: range(n)) {
			for (int j: g[i]) {
				if (comp[i] != comp[j]) {
					intr_comp[comp[i]] = false;
				}
			}
		}

		int ans = n;
		for (int i: range(comps)) {
			if (intr_comp[i] && compa[i].size() > 1) {
				++ans;

				int curans = 100000;
				for (int s: compa[i]) {
					auto d = bfsDistances(sg, s);
					for (int t: gr[s]) {
						if (comp[t] == comp[s]) {
							curans = min(curans, d[t] + 1);
						}
					}
				}
				//cerr << cur_ans << endl;
				ans += 998 * curans;
			}

		}

		out << ans << "\n";
	}
};


int main() {
	std::ios_base::sync_with_stdio(false);
	TaskE solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	in.tie(0);
	out << std::fixed;
	out.precision(20);
	solver.solve(in, out);
	return 0;
}