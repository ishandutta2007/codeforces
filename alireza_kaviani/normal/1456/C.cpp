/* Generated by powerful Codeforces Tool
 * You can download the binary file in here https://github.com/xalanq/cf-tool (Windows, macOS, Linux)
 * Author: alireza_kaviani
 * Time: 2020-11-29 10:35:01
**/
#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<int, int> pii;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll LOG = 22;
const ll INF = 4e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n , k , ans = -INF , sum , val , ps[MAXN] , C[MAXN] , ps2[MAXN];
vector<ll> vec , pos;

int main() {
	ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);

	cin >> n >> k; k++;
	for(int i = 0 ; i < n ; i++){
		cin >> C[i];
		if(C[i] < 0){
			vec.push_back(C[i]);
		}
		else{
			pos.push_back(C[i]);
			sum += C[i];
		}
	}
	sort(all(pos));
	for(int i = 0 ; i < SZ(pos) ; i++){
		val += i * pos[i];
	}
	vec.push_back(sum);
	sort(all(vec));
	for(int i = SZ(vec) - 1; i >= 0 ; i--){
		ps[i] = ps[i + 1] + vec[i];
	}
	for(int i = SZ(vec) - 1 ; i >= 0 ; i--){
		ps2[i] = ps2[i + 1] + ps[i];
	}
	ll cur = 0;
	for(int i = 0 ; i < SZ(vec) ; i++){
		cur += vec[i] * (i / k);
		ans = max(ans , cur + ps2[i + 1] + ps[i + 1] * (i / k));
		// cout << i << sep << cur << sep << cur + ps2[i + 1] + ps[i + 1] * (i / k) << endl;
		// cout << ps[i + 1] << sep << ps2[i + 1] << endl;
	}
	cout << ans + val << endl;

    return 0;
}
/*

*/