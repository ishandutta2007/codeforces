import java.util.NavigableSet;
import java.util.InputMismatchException;
import java.math.BigInteger;
import java.util.Stack;
import java.util.TreeSet;
import java.util.*;
import java.util.Collection;
import java.util.ArrayList;
import java.util.List;
import java.io.*;
import java.util.Comparator;
import java.util.Iterator;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.Arrays;

/**
 * Generated by Contest helper plug-in
 * Actual solution is at the bottom
 */
public class Main {
	public static void main(String[] args) {
		InputReader in = new StreamInputReader(System.in);
		PrintWriter out = new PrintWriter(System.out);
		run(in, out);
	}

	public static void run(InputReader in, PrintWriter out) {
		Solver solver = new TaskC();
		solver.solve(1, in, out);
		Exit.exit(in, out);
	}
}

abstract class InputReader {
	private boolean finished = false;

	public abstract int read();

	public int readInt() {
		int c = read();
		while (isSpaceChar(c))
			c = read();
		int sgn = 1;
		if (c == '-') {
			sgn = -1;
			c = read();
		}
		int res = 0;
		do {
			if (c < '0' || c > '9')
				throw new InputMismatchException();
			res *= 10;
			res += c - '0';
			c = read();
		} while (!isSpaceChar(c));
		return res * sgn;
	}

	public String readString() {
		int c = read();
		while (isSpaceChar(c))
			c = read();
		StringBuffer res = new StringBuffer();
		do {
			res.appendCodePoint(c);
			c = read();
		} while (!isSpaceChar(c));
		return res.toString();
	}

	private boolean isSpaceChar(int c) {
		return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
	}

	public void setFinished(boolean finished) {
		this.finished = finished;
	}

	public abstract void close();
}

class StreamInputReader extends InputReader {
	private InputStream stream;
	private byte[] buf = new byte[1024];
	private int curChar, numChars;

	public StreamInputReader(InputStream stream) {
		this.stream = stream;
	}

	public int read() {
		if (numChars == -1)
			throw new InputMismatchException();
		if (curChar >= numChars) {
			curChar = 0;
			try {
				numChars = stream.read(buf);
			} catch (IOException e) {
				throw new InputMismatchException();
			}
			if (numChars <= 0)
				return -1;
		}
		return buf[curChar++];
	}

	public void close() {
		try {
			stream.close();
		} catch (IOException ignored) {
		}
	}
}

class Exit {
	private Exit() {
	}

	public static void exit(InputReader in, PrintWriter out) {
		in.setFinished(true);
		in.close();
		out.close();
	}
}

interface Solver {
	public void solve(int testNumber, InputReader in, PrintWriter out);
}

class GraphUtils {
	public static int[][] buildGraph(int vertexCount, int[] from, int[] to) {
		int edgeCount = from.length;
		int[] degree = new int[vertexCount];
		for (int i = 0; i < edgeCount; i++) {
			degree[from[i]]++;
			degree[to[i]]++;
		}
		int[][] graph = new int[vertexCount][];
		for (int i = 0; i < vertexCount; i++)
			graph[i] = new int[degree[i]];
		for (int i = 0; i < edgeCount; i++) {
			graph[from[i]][--degree[from[i]]] = i;
			graph[to[i]][--degree[to[i]]] = i;
		}
		return graph;
	}

	public static int otherVertex(int vertex, int from, int to) {
		return from + to - vertex;
	}

	}

class IOUtils {

	public static void readIntArrays(InputReader in, int[]... arrays) {
		for (int i = 0; i < arrays[0].length; i++) {
			for (int j = 0; j < arrays.length; j++)
				arrays[j][i] = in.readInt();
		}
	}

	}

class IntegerUtils {

	public static int longCompare(long a, long b) {
		if (a < b)
			return -1;
		if (a > b)
			return 1;
		return 0;
	}

	}

class TaskC implements Solver {
	public void solve(int testNumber, InputReader in, PrintWriter out) {
		int intersectionCount = in.readInt();
		int roadCount = in.readInt();
		int[] from = new int[roadCount];
		int[] to = new int[roadCount];
		int[] weight = new int[roadCount];
		int source = in.readInt() - 1;
		int destination = in.readInt() - 1;
		IOUtils.readIntArrays(in, from, to, weight);
		for (int i = 0; i < roadCount; i++) {
			from[i]--;
			to[i]--;
		}
		int[] maxDistance = new int[intersectionCount];
		int[] cost = new int[intersectionCount];
		IOUtils.readIntArrays(in, maxDistance, cost);
		int[][] graph = GraphUtils.buildGraph(intersectionCount, from, to);
		long[][] costGraph = new long[intersectionCount][intersectionCount];
		for (int i = 0; i < intersectionCount; i++) {
			final long[] distance = new long[intersectionCount];
			Arrays.fill(distance, Long.MAX_VALUE / 2);
			distance[i] = 0;
			NavigableSet<Integer> queue = new TreeSet<Integer>(new Comparator<Integer>() {
				public int compare(Integer o1, Integer o2) {
					int value = IntegerUtils.longCompare(distance[o1], distance[o2]);
					if (value != 0)
						return value;
					return o1 - o2;
				}
			});
			queue.add(i);
			while (!queue.isEmpty()) {
				int vertex = queue.pollFirst();
				for (int edge : graph[vertex]) {
					int nextVertex = GraphUtils.otherVertex(vertex, from[edge], to[edge]);
					long nextDistance = distance[vertex] + weight[edge];
					if (nextDistance < distance[nextVertex]) {
						queue.remove(nextVertex);
						distance[nextVertex] = nextDistance;
						queue.add(nextVertex);
					}
				}
			}
			for (int j = 0; j < intersectionCount; j++) {
				if (maxDistance[i] >= distance[j])
					costGraph[i][j] = cost[i];
				else
					costGraph[i][j] = Long.MAX_VALUE / 2;
			}
		}
		long[] result = new long[intersectionCount];
		Arrays.fill(result, Long.MAX_VALUE / 2);
		result[source] = 0;
		boolean[] used = new boolean[intersectionCount];
		for (int i = 0; i < intersectionCount; i++) {
			int bestIndex = -1;
			long bestValue = Long.MAX_VALUE;
			for (int j = 0; j < intersectionCount; j++) {
				if (!used[j] && result[j] < bestValue) {
					bestValue = result[j];
					bestIndex = j;
				}
			}
			if (bestIndex == -1)
				break;
			used[bestIndex] = true;
			for (int j = 0; j < intersectionCount; j++)
				result[j] = Math.min(result[j], bestValue + costGraph[bestIndex][j]);
		}
		out.println(result[destination] == Long.MAX_VALUE / 2 ? -1 : result[destination]);
	}
}