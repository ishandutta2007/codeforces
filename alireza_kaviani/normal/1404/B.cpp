/* Generated by powerful Codeforces Tool
 * You can download the binary file in here https://github.com/xalanq/cf-tool (Windows, macOS, Linux)
 * Author: alireza_kaviani
 * Time: 2020-09-06 19:05:01
**/
#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<int, int> pii;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

int q , n , a , b , da , db , dist[MAXN];
vector<int> adj[MAXN];

void DFS(int v , int p = -1){
	dist[v] = (p == -1 ? 0 : dist[p] + 1);
	for(int u : adj[v]){
		if(u == p)	continue;
		DFS(u , v);
	}
}

int main() {
	ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);

	cin >> q;
	while(q--){
		cin >> n >> a >> b >> da >> db;
		fill(adj , adj + n + 2 , vector<int>());
		for(int i = 1 ; i < n ; i++){
			int v , u;
			cin >> v >> u;
			adj[v].push_back(u);
			adj[u].push_back(v);
		}
		DFS(a);
		if(dist[b] <= da){
			cout << "Alice" << endl;
			continue;
		}
		int v = max_element(dist , dist + n + 1) - dist;
		DFS(v);
		int r = (*max_element(dist , dist + n + 1));
		r = (r + 1) / 2;
		if(r <= da){
			cout << "Alice" << endl;
			continue;
		}
		if(db <= 2 * da){
			cout << "Alice" << endl;
			continue;
		}
		cout << "Bob" << endl;
	}

    return 0;
}
/*

*/