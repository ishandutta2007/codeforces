/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author RiaD
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <cassert>


#include <vector>
#include <type_traits>

template <typename T, std::size_t N>
struct MakeVector {
	template <
			typename... Args,
			typename R = std::vector<decltype(MakeVector<T, N - 1>::make_vector(std::declval<Args>()...))>
	>
	static R make_vector(std::size_t first, Args... sizes) {
		auto inner = MakeVector<T, N - 1>::make_vector(sizes...);
		return R(first, inner);
	}
};

template <typename T>
struct MakeVector<T, 1> {
	/*
	 * This template is to fool CLion.
	 * Without it CLion thinks that make_vector always returns std::vector<T> and marks code like
	 *
	 * auto dp = make_vector<int>(n, m, 0);
	 * dp[0][0] = 1 as error because it suppose that dp[0] is int
	 *
	 * TODO: Consider removing it once https://youtrack.jetbrains.com/issue/CPP-3340 is fixed
	 */
	template <typename R = std::vector<T>>
	static R make_vector(std::size_t size, const T& value) {
		return R(size, value);
	}
};

template <typename T, typename... Args>
auto make_vector(Args... args) -> decltype(MakeVector<T, sizeof...(Args) - 1>::make_vector(args...)) {
	return MakeVector<T, sizeof...(Args) - 1>::make_vector(args...);
}



#include <iterator>


#include <string>
#include <stdexcept>

#ifndef SPCPPL_ASSERT
	#ifdef SPCPPL_DEBUG
		#define SPCPPL_ASSERT(condition) \
		if(!(condition)) { \
			throw std::runtime_error(std::string() + #condition + " in line " + std::to_string(__LINE__) + " in " + __PRETTY_FUNCTION__); \
		}
	#else
		#define SPCPPL_ASSERT(condition)
	#endif
#endif


/**
* Support decrementing and multi-passing, but not declared bidirectional(or even forward) because
* it's reference type is not a reference.
*
* It doesn't return reference because
* 1. Anyway it'll not satisfy requirement [forward.iterators]/6
*   If a and b are both dereferenceable, then a == b if and only if *a and
*   b are bound to the same object.
* 2. It'll not work with reverse_iterator that returns operator * of temporary which is temporary for this iterator
*
* Note, reverse_iterator is not guaranteed to work  now too since it works only with bidirectional iterators,
* but it's seems to work at least on my implementation.
*
* It's not really useful anywhere except iterating anyway.
*/
template <typename T>
class IntegerIterator: public std::iterator<std::input_iterator_tag, T, std::ptrdiff_t, T*, T> {
public:
	explicit IntegerIterator(T value): value(value) {

	}

	IntegerIterator& operator++() {
		++value;
		return *this;
	}

	IntegerIterator operator++(int) {
		IntegerIterator copy = *this;
		++value;
		return copy;
	}

	IntegerIterator& operator--() {
		--value;
		return *this;
	}

	IntegerIterator operator--(int) {
		IntegerIterator copy = *this;
		--value;
		return copy;
	}

	T operator*() const {
		return value;
	}

	bool operator==(IntegerIterator rhs) const {
		return value == rhs.value;
	}

	bool operator!=(IntegerIterator rhs) const {
		return !(*this == rhs);
	}

private:
	T value;
};

template <typename T>
class IntegerRange {
public:
	IntegerRange(T begin, T end): begin_(begin), end_(end) {
		SPCPPL_ASSERT(begin <= end);
	}

	IntegerIterator<T> begin() const {
		return IntegerIterator<T>(begin_);
	}

	IntegerIterator<T> end() const {
		return IntegerIterator<T>(end_);
	}

private:
	T begin_;
	T end_;
};

template <typename T>
class ReversedIntegerRange {
	using IteratorType = std::reverse_iterator<IntegerIterator<T>>;
public:
	ReversedIntegerRange(T begin, T end): begin_(begin), end_(end) {
		SPCPPL_ASSERT(begin >= end);
	}

	IteratorType begin() const {
		return IteratorType(IntegerIterator<T>(begin_));
	}

	IteratorType end() const {
		return IteratorType(IntegerIterator<T>(end_));
	}

private:
	T begin_;
	T end_;
};

template <typename T>
IntegerRange<T> range(T to) {
	return IntegerRange<T>(0, to);
}

template <typename T>
IntegerRange<T> range(T from, T to) {
	return IntegerRange<T>(from, to);
}

template <typename T>
IntegerRange<T> inclusiveRange(T to) {
	return IntegerRange<T>(0, to + 1);
}

template <typename T>
IntegerRange<T> inclusiveRange(T from, T to) {
	return IntegerRange<T>(from, to + 1);
}

template <typename T>
ReversedIntegerRange<T> downrange(T from) {
	return ReversedIntegerRange<T>(from, 0);
}

template <typename T>
ReversedIntegerRange<T> downrange(T from, T to) {
	return ReversedIntegerRange<T>(from, to);
}

template <typename T>
ReversedIntegerRange<T> inclusiveDownrange(T from) {
	return ReversedIntegerRange<T>(from + 1, 0);
}

template <typename T>
ReversedIntegerRange<T> inclusiveDownrange(T from, T to) {
	return ReversedIntegerRange<T>(from + 1, to);
}



#include <algorithm>



template <typename R>
void sort(R& range) {
	std::sort(range.begin(), range.end());
}

template <typename R, typename Comp>
void sort(R& range, Comp comp) {
	std::sort(range.begin(), range.end(), comp);
}

template <typename R>
void reverse(R& range) {
	std::reverse(range.begin(), range.end());
}

template <typename R, typename T>
auto lower_bound(const R& range, const T& value) -> decltype(range.begin()) {
	return std::lower_bound(range.begin(), range.end(), value);
}

template <typename R, typename T, typename Comp>
auto lower_bound(const R& range, const T& value, Comp comp) -> decltype(range.begin()) {
	return std::lower_bound(range.begin(), range.end(), value, comp);
}

template <typename R, typename T>
auto upper_bound(const R& range, const T& value) -> decltype(range.begin()) {
	return std::upper_bound(range.begin(), range.end(), value);
}

template <typename R, typename T, typename Comp>
auto upper_bound(const R& range, const T& value, Comp comp) -> decltype(range.begin()) {
	return std::upper_bound(range.begin(), range.end(), value, comp);
}

template <typename R>
auto min_element(const R& range) -> decltype(range.begin()) {
	return std::min_element(range.begin(), range.end());
}

template <typename R>
auto max_element(const R& range) -> decltype(range.begin()) {
	return std::max_element(range.begin(), range.end());
}

template <typename R>
bool next_permutation(R& range) {
	return std::next_permutation(range.begin(), range.end());
}

template <typename T>
void unique(std::vector<T>& range) {
	range.erase(std::unique(range.begin(), range.end()), range.end());
}

template <typename R>
R sorted(R range) {
	sort(range);
	return range;
}

template <typename R, typename Comp>
R sorted(R range, Comp comp) {
	sort(range, comp);
	return range;
}

template <typename R>
R reversed(R range) {
	reverse(range);
	return range;
}

//#define PROBLEM "problem_name.h"
//#include PROBLEM
//#include <message.h>
//#include <spcppl/dgcj.h>

using namespace std;

class TaskE {
public:
	int n, m;

	void solve(std::istream& in, std::ostream& out) {
		//static int testnumber = 0;
		//out << "Case #" << ++testnumber << ": ";


		in >> n >> m;


		vector<vector<string>> s = make_vector<string>(n, m, std::string());
		vector<vector<string>> t = make_vector<string>(n, m, std::string());

		for (int i: range(n)) {
			for (int j: range(m)) {
				in >> s[i][j];
			}
		}
		for (int i: range(n)) {
			for (int j: range(m)) {
				in >> t[i][j];
			}
		}
		auto scopy = s;
		auto tcopy = t;

		for (int i: range(n)) {
			for (int j: range(m)) {
				reverse(s[i][j].begin(), s[i][j].end());
			}
		}
		vector<Query> r1 = go(s);
		vector<Query> r2 = go(t);

		assert(s == t);
		cerr << r1.size() << ' ' << r2.size() << endl;
		cout << r1.size() + r2.size() << endl;

		auto apply = [&](const Query& q) -> void{
			out << q.fx + 1 << ' ' << q.fy + 1 << ' ' << q.tx + 1 << ' ' << q.ty + 1 << "\n";

			//cerr << q.fx << ' ' << q.fy << ' ' << ' ' << q.tx << ' ' << q.ty << endl;
			//assert(!scopy[q.fx][q.fy].empty());
			//char c = scopy[q.fx][q.fy].back();
			//scopy[q.fx][q.fy].pop_back();
			//scopy[q.tx][q.ty] = c + scopy[q.tx][q.ty];

			//for (int i: range(n)) {
			//	for (int j: range(m)) {
			//		out << scopy[i][j] << " ";
			//	}
			//	out << "\n";
			//}
			//out << "\n";

		};

		for (auto x: r1) {
			apply(x);
		}
		for (auto x: reversed(r2)) {
			swap(x.fx, x.tx);
			swap(x.fy, x.ty);
			apply(x);
			//out << x.fx + 1 << ' ' << x.fy + 1 << ' ' << x.tx + 1 << ' ' << x.ty + 1 << "\n";
		}
		//assert(scopy == tcopy);

	}

	struct Query {
		int fx, fy, tx, ty;
	};

	vector<Query> go(vector<vector<string>>& s) {
		vector<Query> result;
		for (auto i: range(s[0][0].size())) {
			result.push_back({0, 0, 0, m - 1});
		}
		for (auto i: range(s.back().back().size())) {
			result.push_back({n - 1, m - 1, 0, m - 1});
		}

		s[0].back() += s[0][0];
		s[0].back() += s.back().back();

		s[0][0].clear();
		s.back().back().clear();

		//cerr << "go\n";
		for (int i: range(n)) {
			for (int j: range(m)) {
				if (i == n - 1 && j == m - 1) {
					continue;
				}
				for (char c: s[i][j]) {
					if (c == '0') {
						if (i == 0 || j == 0) {
							result.push_back({i, j, 0, 0});
						}
						else {
							result.push_back({i, j, 0, j});
							assert(s[0][j].empty());
							result.push_back({0, j, 0, 0});
						}
						s[0][0] += c;
					}
					else if (c == '1') {
						if (i == n - 1 || j == m - 1 ) {
							result.push_back({i, j, n - 1, m - 1});
							s[n - 1][m - 1] += c;
						}
						else {
							result.push_back({i, j, i, m - 1});
							s[i][m - 1] += c;
						}
					}
					else {
						assert(false);
					}
				}
				s[i][j].clear();

				//for (int i: range(n)) {
				//	for (int j: range(m)) {
				//		cerr << s[i][j] << " ";
				//	}
				//	cerr << "\n";
				//}
				//cerr << "\n";
			}
		}

		return result;
	}
};


int main() {
	std::ios_base::sync_with_stdio(false);
	TaskE solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	in.tie(nullptr);
	out << std::fixed;
	out.precision(20);
	solver.solve(in, out);
	return 0;
}