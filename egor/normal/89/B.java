import java.util.ArrayList;
import java.util.InputMismatchException;
import java.math.BigInteger;
import java.util.Map;
import java.io.*;
import java.util.List;
import java.util.TreeMap;

/**
 * Generated by Contest helper plug-in
 * Actual solution is at the bottom
 */
public class Main {
	public static void main(String[] args) {
		InputReader in = new StreamInputReader(System.in);
		PrintWriter out = new PrintWriter(System.out);
		run(in, out);
	}

	public static void run(InputReader in, PrintWriter out) {
		Solver solver = new TaskB();
		solver.solve(1, in, out);
		Exit.exit(in, out);
	}
}

abstract class InputReader {
	private boolean finished = false;

	public abstract int read();

	public int readInt() {
		int c = read();
		while (isSpaceChar(c))
			c = read();
		int sgn = 1;
		if (c == '-') {
			sgn = -1;
			c = read();
		}
		int res = 0;
		do {
			if (c < '0' || c > '9')
				throw new InputMismatchException();
			res *= 10;
			res += c - '0';
			c = read();
		} while (!isSpaceChar(c));
		return res * sgn;
	}

	public String readString() {
		int c = read();
		while (isSpaceChar(c))
			c = read();
		StringBuffer res = new StringBuffer();
		do {
			res.appendCodePoint(c);
			c = read();
		} while (!isSpaceChar(c));
		return res.toString();
	}

	private boolean isSpaceChar(int c) {
		return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
	}

	private String readLine0() {
		StringBuffer buf = new StringBuffer();
		int c = read();
		while (c != '\n' && c != -1) {
			if (c != '\r')
				buf.appendCodePoint(c);
			c = read();
		}
		return buf.toString();
	}

	public String readLine() {
		String s = readLine0();
		while (s.trim().length() == 0)
			s = readLine0();
		return s;
	}

	public void setFinished(boolean finished) {
		this.finished = finished;
	}

	public abstract void close();
}

class StreamInputReader extends InputReader {
	private InputStream stream;
	private byte[] buf = new byte[1024];
	private int curChar, numChars;

	public StreamInputReader(InputStream stream) {
		this.stream = stream;
	}

	public int read() {
		if (numChars == -1)
			throw new InputMismatchException();
		if (curChar >= numChars) {
			curChar = 0;
			try {
				numChars = stream.read(buf);
			} catch (IOException e) {
				throw new InputMismatchException();
			}
			if (numChars <= 0)
				return -1;
		}
		return buf[curChar++];
	}

	public void close() {
		try {
			stream.close();
		} catch (IOException ignored) {
		}
	}
}

class Exit {
	private Exit() {
	}

	public static void exit(InputReader in, PrintWriter out) {
		in.setFinished(true);
		in.close();
		out.close();
	}
}

interface Solver {
	public void solve(int testNumber, InputReader in, PrintWriter out);
}

class StringInputReader extends InputReader {
	private Reader stream;
	private char[] buf = new char[1024];
	private int curChar, numChars;

	public StringInputReader(String stream) {
		this.stream = new StringReader(stream);
	}

	public int read() {
		if (numChars == -1)
			throw new InputMismatchException();
		if (curChar >= numChars) {
			curChar = 0;
			try {
				numChars = stream.read(buf);
			} catch (IOException e) {
				throw new InputMismatchException();
			}
			if (numChars <= 0)
				return -1;
		}
		return buf[curChar++];
	}

	public void close() {
		try {
			stream.close();
		} catch (IOException ignored) {
		}
	}
}

class TaskB implements Solver {
	public void solve(int testNumber, InputReader in, PrintWriter out) {
		int commandCount = in.readInt();
		Map<String, Widget> map = new TreeMap<String, Widget>();
		for (int i = 0; i < commandCount; i++) {
			String command = in.readLine();
			command = command.replace('.', ' ').replace('(', ' ').replace(')', ' ').replace(',', ' ');
			InputReader reader = new StringInputReader(command);
			String first = reader.readString();
			if ("Widget".equals(first)) {
				String name = reader.readString();
				int width = reader.readInt();
				int height = reader.readInt();
				map.put(name, new Widget(width, height));
			} else if ("HBox".equals(first))
				map.put(reader.readString(), new Widget(Alignment.HORIZONTAL));
			else if ("VBox".equals(first))
				map.put(reader.readString(), new Widget(Alignment.VERTICAL));
			else {
				String method = reader.readString();
				if ("set_border".equals(method))
					map.get(first).border = reader.readInt();
				else if ("set_spacing".equals(method))
					map.get(first).spacing = reader.readInt();
				else
					map.get(first).children.add(map.get(reader.readString()));
			}
		}
		for (Map.Entry<String, Widget> entry : map.entrySet()) {
			entry.getValue().pack();
			out.println(entry.getKey() + " " + entry.getValue().width + " " + entry.getValue().height);
		}
	}

	private static class Widget {
		private long width = 0;
		private long height = 0;
		private Alignment alignment = Alignment.VERTICAL;
		private long border = 0;
		private long spacing = 0;
		private List<Widget> children = new ArrayList<Widget>();
		private boolean packed = false;

		private Widget(int width, int height) {
			this.width = width;
			this.height = height;
		}

		private Widget(Alignment alignment) {
			this.alignment = alignment;
		}

		public void pack() {
			if (packed)
				return;
			packed = true;
			if (children.isEmpty())
				return;
			for (Widget child : children) {
				child.pack();
				if (alignment == Alignment.VERTICAL) {
					width = Math.max(width, child.width);
					height += child.height;
				} else {
					height = Math.max(height, child.height);
					width += child.width;
				}
			}
			if (alignment == Alignment.VERTICAL)
				height += (children.size() - 1) * spacing;
			else
				width += (children.size() - 1) * spacing;
			height += 2 * border;
			width += 2 * border;
		}
	}

	private enum Alignment {
		VERTICAL, HORIZONTAL
	}
}