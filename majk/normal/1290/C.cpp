/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author majk
 */

#ifndef MAJK_LIB
#define MAJK_LIB

#include <vector>
#include <stack>
#include <iostream>
#include <fstream>
#include <unordered_map>
#include <unordered_set>
#include <map>
#include <iomanip>
#include <set>
#include <functional>
#include <algorithm>
#include <numeric>
#include <cassert>
#include <cmath>
#include <string>
#include <queue>
#include <array>
#include <bitset>
using namespace std;

#define x first
#define y second
typedef std::pair<int,int> pii; typedef long long ll; typedef unsigned long long ull; typedef unsigned int ui; typedef pair<ui,ui> puu;

template <typename T, typename U> std::istream&operator>>(std::istream&i, pair<T,U>&p) {i >> p.x >> p.y; return i;}
template<typename T>std::istream&operator>>(std::istream&i,vector<T>&t) {for(auto&v:t){i>>v;}return i;}
template <typename T, typename U> std::ostream&operator<<(std::ostream&o, const pair<T,U>&p) {o << p.x << ' ' << p.y; return o;}
template<typename T>std::ostream&operator<<(std::ostream&o,const vector<T>&t) {if(t.empty())o<<'\n';for(size_t i=0;i<t.size();++i){o<<t[i]<<" \n"[i == t.size()-1];}return o;}
template<typename T> using minheap = priority_queue<T, vector<T>, greater<T>>;
template<typename T> using maxheap = priority_queue<T, vector<T>, less<T>>;
ui logceil(ll x) { return x?8*sizeof(ll)-__builtin_clzll(x):0; }

namespace std { template<typename T,typename U>struct hash<pair<T,U>>{hash<T>t;hash<U>u;size_t operator()(const pair<T,U>&p)const{return t(p.x)^(u(p.y)<<7);}}; }
template<typename T,typename F>T bsh(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){l=m+1;r=m;}else{h=m-1;}}return r;}
template<typename F> double bshd(double l,double h,const F&f,double p=1e-9){ui r=3+(ui)log2((h-l)/p);while(r--){double m=(l+h)/2;if(f(m)){l=m;}else{h=m;}}return (l+h)/2;}
template<typename T,typename F>T bsl(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){h=m-1;r=m;}else{l=m+1;}}return r;}
template<typename F> double bsld(double l,double h,const F&f,double p=1e-9){ui r=3+(ui)log2((h-l)/p);while(r--){double m=(l+h)/2;if(f(m)){h=m;}else{l=m;}}return (l+h)/2;}
template<typename T> T gcd(T a,T b) { if (a<b) swap(a,b); return b?gcd(b,a%b):a; }


template<typename T>class vector2:public vector<vector<T>>{public:vector2(){} vector2(size_t a,size_t b,T t=T()):vector<vector<T>>(a,vector<T>(b,t)){}};
template<typename T>class vector3:public vector<vector2<T>>{public:vector3(){} vector3(size_t a,size_t b,size_t c,T t=T()):vector<vector2<T>>(a,vector2<T>(b,c,t)){}};
template<typename T>class vector4:public vector<vector3<T>>{public:vector4(){} vector4(size_t a,size_t b,size_t c,size_t d,T t=T()):vector<vector3<T>>(a,vector3<T>(b,c,d,t)){}};
template<typename T>class vector5:public vector<vector4<T>>{public:vector5(){} vector5(size_t a,size_t b,size_t c,size_t d,size_t e,T t=T()):vector<vector4<T>>(a,vector4<T>(b,c,d,e,t)){}};


#endif

class CPrefixEnlightenment {
public:
    struct Group {
        vector<int> A[2];
        bool Req[2];
    };
    int sz(const Group&g) {
        return g.A[0].size() + g.A[1].size();
    }
    int cnt(const Group&g) {
        if (g.Req[0]) return g.A[0].size();
        else if (g.Req[1]) return g.A[1].size();
        else return min(g.A[0].size(), g.A[1].size());
    }

    void solve(istream& cin, ostream& cout) {
        int N, K; cin >> N >> K;
        string I; cin >> I;
        vector<vector<int>> S(K);
        vector<vector<int>> G(N);
        for (int i = 0; i < K; ++i) {
            int c; cin >> c;
            S[i].resize(c); cin >> S[i];
            for (int s: S[i]) G[s-1].push_back(i);
        }

        K = max(K, N);
        vector<Group> GR(K);
        vector<pii> W(K);
        for (int i = 0; i < K; ++i) {
            W[i] = {i, 0};
            GR[i].A[0].push_back(i);
        }

        int ans = 0;
        for (int i = 0; i < N; ++i) {
            if (G[i].size() == 1) {
                int j = G[i][0];
                ans -= cnt(GR[W[j].x]);
                if (I[i] == '0') {
                    GR[W[j].x].Req[W[j].y] = true;
                } else {
                    GR[W[j].x].Req[1-W[j].y] = true;
                }
                ans += cnt(GR[W[j].x]);
            } else if (G[i].size() == 2) {
                bool disj = I[i] == '1';
                int a = G[i][0], b = G[i][1];
                if (W[a].x != W[b].x) {
                    int g = W[a].x, h = W[b].x;
                    if (sz(GR[g]) < sz(GR[h])) swap(g,h);
                    ans -= cnt(GR[g]);
                    ans -= cnt(GR[h]);
                    if (W[a].y == W[b].y) disj = !disj;
                    for (int j = 0; j < 2; ++j) {
                        int k = j;
                        if (disj) k = 1-k;
                        for (int v: GR[h].A[j]) {
                            GR[g].A[k].push_back(v);
                            W[v] = {g, k};
                        }

                        GR[g].Req[k] |= GR[h].Req[j];

                        GR[h].A[j].clear();
                    }
                    ans += cnt(GR[W[a].x]);
                }
            }


            cout << ans << '\n';
        }
    }
};


int main() {
	ios_base::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr);
	CPrefixEnlightenment solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
    return 0;
}