/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;
typedef pair<ld, ld> pld;
typedef pair<string, string> pss;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define file_io                     freopen("in.txt" , "r" , stdin) ; freopen("out.txt" , "w" , stdout);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

inline ll input() {
    ll n;
    cin >> n;
    return n;
}

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

set_random;

const ll MAXN = 1e5 + 10;
const ll MAXK = 1e4 + 10;
const ll SQ = 300;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n , m , l , r , x , a[MAXN] , lucky[MAXK];
vector<ll> luckyNumbers;
string type;

struct SQRT{
    ll A[MAXN] , B[MAXN / SQ + 10][MAXK] , add[MAXN / SQ + 10] , cnt[MAXN / SQ + 10];

    void build(ll arr[]){
        for(ll i = 0 ; i < MAXN ; i++){
            A[i] = arr[i];
            B[i / SQ][A[i]]++;
            cnt[i / SQ] += lucky[A[i]];
        }
    }

    ll count(ll l , ll r){
        ll ans = 0;
        for(ll i = l ; i <= r ; ){
            if(i % SQ == 0 && i + SQ - 1 <= r){
                ans += cnt[i / SQ];
                i += SQ;
            }
            else{
                ans += lucky[A[i] + add[i / SQ]];
                i++;
            }
        }
        return ans;
    }

    void Add(ll l , ll r , ll x){
        for(ll i = l ; i <= r ; ){
            if(i % SQ == 0 && i + SQ - 1 <= r){
                add[i / SQ] += x;
                cnt[i / SQ] = 0;
                for(ll j : luckyNumbers){
                    ll t = j - add[i / SQ];
                    if(t >= 0){
                        cnt[i / SQ] += B[i / SQ][t];
                    }
                }
                i += SQ;
            }
            else{
                B[i / SQ][A[i]]--;
                if(lucky[A[i] + add[i / SQ]])   cnt[i / SQ]--;
                A[i] += x;
                B[i / SQ][A[i]]++;
                if(lucky[A[i] + add[i / SQ]])   cnt[i / SQ]++;
                i++;
            }
        }
    }
};

ll isLucky(ll x){
    while(x != 0){
        if(x % 10 != 4 && x % 10 != 7)  return 0;
        x /= 10;
    }
    return 1;
}

SQRT sq;

int main() {
    fast_io;
    for(ll i = 1 ; i < MAXK ; i++){
        lucky[i] = isLucky(i);
        if(lucky[i])    luckyNumbers.push_back(i);
    }

    cin >> n >> m;
    for(ll i = 1 ; i <= n ; i++)    cin >> a[i];
    sq.build(a);

    while(m--){
        cin >> type >> l >> r;
        if(type[0] == 'c'){
            cout << sq.count(l , r) << endl;
        }
        else{
            cin >> x;
            sq.Add(l , r , x);
        }
    }

    return 0;
}
/*
todo :
    1- set constants
    2- check TimeLimit and MemoryLimit
    3- check special test cases
    4- don't forget BS can help you that is good idea(use for loop for floats)
    5- don't forget printf and scanf can help you in your code speed
*/