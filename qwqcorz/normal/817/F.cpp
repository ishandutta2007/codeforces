#include<bits/stdc++.h>
#define ll long long
using namespace std;
const int N=4e5+5;

ll read()
{
	ll s=0;
	char c=getchar(),lc='+';
	while (c<'0'||'9'<c) lc=c,c=getchar();
	while ('0'<=c&&c<='9') s=s*10+c-'0',c=getchar();
	return lc=='-'?-s:s;
}
void write(ll x)
{
	if (x<0) putchar('-'),x=-x;
	if (x<10) putchar(x+'0');
	else write(x/10),putchar(x%10+'0');
}
void print(ll x=-1,char c='\n')
{
	write(x);
	putchar(c);
}
#define ls (w*2)
#define rs (w*2+1)
#define mid ((l+r)/2)
int cnt=1;
struct node
{
	int len,tot,tag;
	void cov(int x)
	{
		tot=x?0:len;
		tag=x;
	}
	void rev()
	{
		tot=len-tot;
		if (tag==-1) tag=2;
		else if (tag<=1) tag^=1;
		else tag=-1;
	}
}t[N*4];
void build(int w,int l,int r)
{
	t[w]=(node){r-l+1,r-l+1,-1};
	if (l==r) return;
	build(ls,l,mid);
	build(rs,mid+1,r);
}
void push_up(int w){t[w].tot=t[ls].tot+t[rs].tot;}
void push_down(int w)
{
	if (t[w].tag<0) return;
	if (t[w].tag<=1) t[ls].cov(t[w].tag),t[rs].cov(t[w].tag);
	if (t[w].tag==2) t[ls].rev(),t[rs].rev();
	t[w].tag=-1;
}
void cover(int w,int l,int r,int ql,int qr,int x)
{
	if (qr<l||r<ql) return;
	if (ql<=l&&r<=qr) return t[w].cov(x);
	push_down(w);
	cover(ls,l,mid,ql,qr,x);
	cover(rs,mid+1,r,ql,qr,x);
	push_up(w);
}
void rever(int w,int l,int r,int ql,int qr)
{
	if (qr<l||r<ql) return;
	if (ql<=l&&r<=qr) return t[w].rev();
	push_down(w);
	rever(ls,l,mid,ql,qr);
	rever(rs,mid+1,r,ql,qr);
	push_up(w);
}
int querymex(int w,int l,int r)
{
	if (l==r) return l;
	push_down(w);
	if (t[ls].tot) return querymex(ls,l,mid);
			  else return querymex(rs,mid+1,r);
}
#undef ls
#undef rs
#undef mid
ll opt[N],l[N],r[N],b[N];

signed main(signed Goodbye,char *Wangang[])
{
	(void)Goodbye,(void)Wangang;
	int Q=read(),cnt=0;b[++cnt]=1;
	for (int i=1;i<=Q;i++) opt[i]=read(),l[i]=read(),r[i]=read();
	for (int i=1;i<=Q;i++) b[++cnt]=l[i],b[++cnt]=l[i]+1,b[++cnt]=r[i],b[++cnt]=r[i]+1;
	sort(b+1,b+1+cnt);
	cnt=unique(b+1,b+1+cnt)-b-1;
	build(1,1,cnt);
	for (int i=1;i<=Q;i++) l[i]=lower_bound(b+1,b+1+cnt,l[i])-b;
	for (int i=1;i<=Q;i++) r[i]=lower_bound(b+1,b+1+cnt,r[i])-b;
	for (int i=1;i<=Q;i++)
	{
		if (opt[i]==1) cover(1,1,cnt,l[i],r[i],1);
		if (opt[i]==2) cover(1,1,cnt,l[i],r[i],0);
		if (opt[i]==3) rever(1,1,cnt,l[i],r[i]);
		print(b[querymex(1,1,cnt)]);
	}
	
	return 0;
}
//...................  ..                        .    . . ..   .                                          .........
//..................  ....,]]]]]]`.   . .         . .,@@@@@@`.. .                                          ........
//.................. ,@@@@@@@@@@@@@@@@@@\].,]]]]]`,@@@@@@@@@@@. .                                          ........
//...................@^...[@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@`                                            .......
//..................,@`......\@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@`.                                          .......
//..................=@......../@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@`.                                         .......
//..................=@....../@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@.                                         .......
//..................=@....=@@@@@@/[[[[[@@@@@@@@@@@@@@@@@/`...[@@@@^                                         .......
//..................=@.../@@@/`...........\@@@@@@@@@@@`........,@@@.                                     . ........
//.....,/@@@@@@@O\]`.@`.=@@@`...............\@@@@@@@@`...........@@^                                       ........
//...,@^........,/@@@@^,@@/..................,@@@@@@^............,@@.                                     .........
//...//......,/@[=OOOOO=@@....................,@@@@@...]O@@]......=@^                                     .........
//...@`....]@OO^.=OOO/@@@^.../@@@@@@@`.........=@@@@.=@@@@@@@@....=@^                                     .........
//..=@...,@OOO/.......=@@^.,@@@@@@@@@@@........=@@@@,@@@@@@@@@@...=@^                                    ..........
//..=@..=@`............\@^,@@@@@@@@@@@@@........@@@@=@@@@@@@@@@^..=@.                                 .............
//..=@.=@@OO@@]........@@@=@@@@@@@@@@@@@^......=@@@@O@@@@@@@@@@^..//.                                  ............
//..=@,@`.   .,\@`....=@\@@@@@@@@@@@@@@@^......O@@@@@@@@@@@@@@@..=@.  ......  .  . .......            .............
//..=@@/ ........\@`..=@.\@@@@@@@@@@@@@@^.....=@@@@@@@@@@@@@@@^./@`...,/@O[[...[[[O@@/.=/ .  ...... ...............
//...@@^   /@OOOO@@@\.=@  =@@@@@@@@@@@@@...../@@@@@@@@@@@@@@/]/@/...,@`...............[@@[[O@\`,[[@]...............
//...\@^  =@OOOOOOOO@\.@. OO@@@@@@@@@@/...,@@@@@@@@@@@@@@@@@@@@` .,@`.......,^...........,`...,\@`..,@.............
//...,@^ .=OOOOOOOOOO@\O^.\OOOO@@@@@@@@@@@@@@@@@@@@@@@@@@@@@/... ,@........=/..../@/[............\@...@`...........
//....=@. =@OOOOOOOOOO@/@.,@OOOO@@@@@@@@@@@@@@@@@@@@@@@/[...    .@`...........,@`.................,@..=O...........
//.....@\..\OOOOOOOOOO@^=@.,@OO@@@@@@@@@@@@@@@@@@@@@^         . .O......@O@^.,@....................=\..@*..........
//......\@..\@OOOOOOOO@O.,@`..@@@@@@@@@@@@@@@@@@@@@@O    .     .,O......=@@`.=^.....................@..@@@]`.......
//.......,@\..\@@OOOO@@^...\@@@@@@@@@@@@@@@@@@@@@@@@@.  ..,/@@@@@@..=@`......=O.........../^........@]@@O\*,O@`....
//.........,O@O]....,/@......@@@@@@@@@@@@@@@@@@@@@@@@^../@`*****=@@/@[....,[@`\@.......,@` .......,@/*********@\...
//.............,[\O@@@@@@@O@@@@@@@@@@@@@@@@@@@@@@@@@@@.=O*******[[[[O@@O]`]]]/@`@@@O@@O[[[***[[[\@@`*********,O@^..
//................**O@...../@@@@@@@@@@@@@@@@@@@@@@@@@@@`*****************,\@*****[[`**************************=@...
//...............****,@@@@@/*,@@@@@@@@@@@@@@@@@@@@@@@@O*******************************************************O/*..
//..................************[[\OO@@@@@@O/[[[[[[[*,@@\]**************************************************,@@*...
//.............................**********************.***[[@@O]]`***************************************]]@@[**....
//.........................................................*****,[[[OOOOOOOOOOOOOO@@@@@@@@@@@@O@OOOOO[[[****.......
//...............................................................................******************................