/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

// Actual solution is at the bottom

#undef NDEBUG

#include <algorithm>
#include <array>
#include <bitset>
#include <cassert>
#include <climits>
#include <cstdint>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <memory>
#include <numeric>
#include <queue>
#include <random>
#include <set>
#include <stack>
#include <string>
#include <unordered_set>
#include <unordered_map>
#include <vector>
// AtCoder library from https://github.com/atcoder/ac-library
// #include "../atcoder/all"

#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()

using namespace std;

typedef int64_t int64;
typedef pair<int, int> ii;

int BUBEN = 1000;

class BDifferenceArray {
 public:
  void solveOne() {
    int n;
    cin >> n;
    vector<int> a(n);
    for (auto& x : a) cin >> x;
    int nzero = 0;
    while (a.size() + nzero > 1) {
      if (a.empty()) {
        cout << 0 << "\n";
        return;
      }
      vector<int> b;
      int nnzero = 0;
      if (nzero > 0) {
        nnzero = nzero - 1;
        if (a[0] == 0) {
          ++nnzero;
        } else {
          b.push_back(a[0]);
        }
      }
      for (int i = 0; i + 1 < a.size(); ++i) {
        int x = a[i + 1] - a[i];
        if (x == 0) {
          ++nnzero;
        } else {
          b.push_back(x);
        }
      }
      sort(all(b));
      nzero = nnzero;
      a = b;
    }
    if (a.empty()) {
      cout << 0 << "\n";
      return;
    } else {
      cout << a[0] << "\n";
      return;
    }
  }

  void solve() {
    int nt;
    cin >> nt;
    for (int it = 0; it < nt; ++it) {
      // cout << "Case #" << (it + 1) << ": ";
      solveOne();
    }
  }
};

// #define st_mtimespec st_mtim

int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(0);
    BDifferenceArray solver;


    solver.solve();
    return 0;
}