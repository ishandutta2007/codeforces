/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef long double ld;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;
typedef pair<ld, ld> pld;
typedef pair<string, string> pss;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define tab                         '\t'
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define file_io                     freopen("in.txt" , "r+" , stdin) ; freopen("out.txt" , "w+" , stdout);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

inline ll input() {
    ll n;
    cin >> n;
    return n;
}

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

set_random;

const ll MAXN = 2e5 + 10;
const ll INF = 8e18;
const ll MOD1 = 998244353;
const ll MOD2 = 1e9 + 7;
const ll MOD3 = 1e9 + 9;

map<ll, ll> cnt, primeCnt;
ll n, ans = 1, p[MAXN];

ll Sqrt(ll x , ll y)
{
    ll t = pow(x , 1./y);
    for(ll i = max(0LL , t - 10) ; i <= t + 10 ; i++)
    {
        if(poww(i , y , INF) == x)  return i;
    }
    return -1;
}

int main() {
    fast_io;

    cin >> n;
    for (ll i = 0; i < n; i++) cin >> p[i];

    for (ll i = 0; i < n; i++) {
        ll s1 = Sqrt(p[i] , 2) , s2 = Sqrt(p[i] , 4);
        if (s1 * s1 == p[i]) {
            if (s2 * s2 == s1) {
                primeCnt[s2] += 4;
            } else {
                primeCnt[s1] += 2;
            }
            continue;
        }

        ll s3 = Sqrt(p[i] , 3);
        if(s3 * s3 * s3 == p[i])
        {
            primeCnt[s3] += 3;
            continue;
        }

        ll factorized = 0;
        for (ll j = 0; j < n ; j++) {
            ll g = __gcd(p[i], p[j]);
            if (g != 1 && p[j] != p[i]) {
                primeCnt[g]++;
                primeCnt[p[i] / g]++;
                factorized = 1;
                break;
            }
        }
        if(factorized) continue;
        cnt[p[i]]++;
    }

    for (auto &i : cnt) {
        ans = ans * (i.Y + 1) % MOD1 * (i.Y + 1) % MOD1;
    }

    for (auto &i : primeCnt) {
        ans = ans * (i.Y + 1) % MOD1;
    }
    cout << ans << endl;

    return 0;
}
/*
todo :
    1- set constants
    2- check TimeLimit and MemoryLimit
    3- check special test cases
    4- don't forget BS can help you that is good idea(use for loop for floats)
    5- don't forget printf and scanf can help you in your code speed
*/