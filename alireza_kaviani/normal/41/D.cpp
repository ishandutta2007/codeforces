/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;
typedef pair<ld, ld> pld;
typedef pair<string, string> pss;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define file_io                     freopen("in.txt" , "r+" , stdin) ; freopen("out.txt" , "w+" , stdout);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

inline ll input() {
    ll n;
    cin >> n;
    return n;
}

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

set_random;

const ll MAXN = 1e2 + 10;
const ll MAXK = 1e3 + 10;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n , m , t , x;
pll mx = {-INF , -INF};
char dp[MAXN][MAXN][MAXK];
string ans , board[MAXN];

int main() {
    fast_io;
    for(ll i = 0 ; i < MAXN ; i++){
        for(ll j = 0 ; j < MAXN ; j++){
            for(ll k = 0 ; k < MAXK ; k++){
                dp[i][j][k] = '.';
            }
        }
    }

    cin >> n >> m >> t; t++;
    for(ll i = 1 ; i <= n ; i++)    cin >> board[n - i + 1] , board[n - i + 1] = "." + board[n - i + 1];
    for(ll i = 1 ; i <= m ; i++)    dp[1][i][board[1][i] - 48] = 'E';

    for(ll i = 2 ; i <= n ; i++){
        for(ll j = 1 ; j <= m ; j++){
            ll val = board[i][j] - 48;
            for(ll k = val ; k < MAXK ; k++){
                if(dp[i - 1][j - 1][k - val] != '.')    dp[i][j][k] = 'R';
                if(dp[i - 1][j + 1][k - val] != '.')    dp[i][j][k] = 'L';
            }
        }
    }

    for(ll i = 1 ; i <= m ; i++){
        for(ll j = 0 ; j < MAXK ; j += t){
            if(dp[n][i][j] != '.')
                mx = max(mx , pll({j , i}));
        }
    }

    if(mx.X < 0)    return cout << -1 << endl , 0;
    cout << mx.X << endl;
    x = mx.Y;

    for(ll i = n ; i >= 2 ; i--){
        ans = string(1 , dp[i][x][mx.X]) + ans;
        if(dp[i][x][mx.X] == 'R')   mx.X -= board[i][x] - 48 , x--;
        else    mx.X -= board[i][x] - 48 , x++;
    }
    cout << x << endl << ans << endl;

    return 0;
}
/*
todo :
    1- set constants
    2- check TimeLimit and MemoryLimit
    3- check special test cases
    4- don't forget BS can help you that is good idea(use for loop for floats)
    5- don't forget printf and scanf can help you in your code speed
*/