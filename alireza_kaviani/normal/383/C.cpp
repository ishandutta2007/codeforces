/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

struct BITree {
    ll fen[MAXN];

    BITree() {
        fill(fen, fen + MAXN, 0);
    }

    void add(ll x, ll val) {
        for (; x < MAXN; x += x & -x) fen[x] += val;
    }

    ll get(ll x) {
        ll ans = 0;
        for (; x > 0; x -= x & -x) ans += fen[x];
        return ans;
    }
};

ll n, q, timer, A[MAXN], H[MAXN], st[MAXN], fn[MAXN];
vector<ll> adj[MAXN];
BITree bit;

void DFS(ll v, ll p = 0) {
    H[v] = H[p] + 1;
    st[v] = ++timer;
    for (ll u : adj[v]) if (u != p) DFS(u, v);
    fn[v] = timer;
}

int main() {
    fast_io;

    cin >> n >> q;
    for (ll i = 1; i <= n; i++) cin >> A[i];
    for (ll i = 1; i < n; i++) {
        ll v, u;
        cin >> v >> u;
        adj[v].push_back(u);
        adj[u].push_back(v);
    }

    DFS(1);

    while (q--) {
        ll t, v, x;
        cin >> t >> v;
        if (t == 1) {
            cin >> x;
            bit.add(st[v], (H[v] % 2 == 1 ? x : -x));
            bit.add(fn[v] + 1, (H[v] % 2 == 1 ? -x : x));
        } else {
            cout << A[v] + (H[v] % 2 == 1 ? 1 : -1) * bit.get(st[v]) << endl;
        }
    }

    return 0;
}
/*

*/