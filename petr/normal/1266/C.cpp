/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <bits/stdc++.h>

#define pb push_back
#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()
#define mp make_pair

using namespace std;

typedef long long int64;
typedef vector<int> vi;
typedef pair<int, int> ii;

class TaskC {
 public:
  int gcd(int x, int y) {
    while (y > 0) {
      int t = x % y;
      x = y;
      y = t;
    }
    return x;
  }

  int lcm(int x, int y) {
    return x / gcd(x, y) * y;
  }

  void solve(std::istream &in, std::ostream &out) {
    int r;
    int c;
    in >> r >> c;
    if (r == 1 && c == 1) {
      out << 0 << "\n";
      return;
    }
    vector<int> rv(r);
    vector<int> cv(c);
    int v = 1;
    if (r < c) {
      for (int& a : rv) a = v++;
      for (int& a : cv) a = v++;
    } else {
      for (int& a : cv) a = v++;
      for (int& a : rv) a = v++;
    }
    for (int x : rv) {
      for (int y : cv) {
        out << lcm(x, y) << " ";
      }
      out << "\n";
    }
  }
};


int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  TaskC solver;
  std::istream& in(std::cin);
  std::ostream& out(std::cout);
  solver.solve(in, out);
  return 0;
}