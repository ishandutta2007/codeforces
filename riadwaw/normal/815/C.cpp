/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author RiaD
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <vector>


#include <iterator>


#include <string>
#include <stdexcept>

#ifndef SPCPPL_ASSERT
	#ifdef SPCPPL_DEBUG
		#define SPCPPL_ASSERT(condition) \
		if(!(condition)) { \
			throw std::runtime_error(std::string() + #condition + " in line " + std::to_string(__LINE__) + " in " + __PRETTY_FUNCTION__); \
		}
	#else
		#define SPCPPL_ASSERT(condition)
	#endif
#endif


/**
* Support decrementing and multi-passing, but not declared bidirectional(or even forward) because
* it's reference type is not a reference.
*
* It doesn't return reference because
* 1. Anyway it'll not satisfy requirement [forward.iterators]/6
*   If a and b are both dereferenceable, then a == b if and only if *a and
*   b are bound to the same object.
* 2. It'll not work with reverse_iterator that returns operator * of temporary which is temporary for this iterator
*
* Note, reverse_iterator is not guaranteed to work  now too since it works only with bidirectional iterators,
* but it's seems to work at least on my implementation.
*
* It's not really useful anywhere except iterating anyway.
*/
template <typename T>
class IntegerIterator: public std::iterator<std::input_iterator_tag, T, std::ptrdiff_t, T*, T> {
public:
	explicit IntegerIterator(T value): value(value) {

	}

	IntegerIterator& operator++() {
		++value;
		return *this;
	}

	IntegerIterator operator++(int) {
		IntegerIterator copy = *this;
		++value;
		return copy;
	}

	IntegerIterator& operator--() {
		--value;
		return *this;
	}

	IntegerIterator operator--(int) {
		IntegerIterator copy = *this;
		--value;
		return copy;
	}

	T operator*() const {
		return value;
	}

	bool operator==(IntegerIterator rhs) const {
		return value == rhs.value;
	}

	bool operator!=(IntegerIterator rhs) const {
		return !(*this == rhs);
	}

private:
	T value;
};

template <typename T>
class IntegerRange {
public:
	IntegerRange(T begin, T end): begin_(begin), end_(end) {
		SPCPPL_ASSERT(begin <= end);
	}

	IntegerIterator<T> begin() const {
		return IntegerIterator<T>(begin_);
	}

	IntegerIterator<T> end() const {
		return IntegerIterator<T>(end_);
	}

private:
	T begin_;
	T end_;
};

template <typename T>
class ReversedIntegerRange {
	typedef std::reverse_iterator<IntegerIterator<T>> IteratorType;
public:
	ReversedIntegerRange(T begin, T end): begin_(begin), end_(end) {
		SPCPPL_ASSERT(begin >= end);
	}

	IteratorType begin() const {
		return IteratorType(IntegerIterator<T>(begin_));
	}

	IteratorType end() const {
		return IteratorType(IntegerIterator<T>(end_));
	}

private:
	T begin_;
	T end_;
};

template <typename T>
IntegerRange<T> range(T to) {
	return IntegerRange<T>(0, to);
}

template <typename T>
IntegerRange<T> range(T from, T to) {
	return IntegerRange<T>(from, to);
}

template <typename T>
IntegerRange<T> inclusiveRange(T to) {
	return IntegerRange<T>(0, to + 1);
}

template <typename T>
IntegerRange<T> inclusiveRange(T from, T to) {
	return IntegerRange<T>(from, to + 1);
}

template <typename T>
ReversedIntegerRange<T> downrange(T from) {
	return ReversedIntegerRange<T>(from, 0);
}

template <typename T>
ReversedIntegerRange<T> downrange(T from, T to) {
	return ReversedIntegerRange<T>(from, to);
}

template <typename T>
ReversedIntegerRange<T> inclusiveDownrange(T from) {
	return ReversedIntegerRange<T>(from + 1, 0);
}

template <typename T>
ReversedIntegerRange<T> inclusiveDownrange(T from, T to) {
	return ReversedIntegerRange<T>(from + 1, to);
}

#include <algorithm>

template <typename T>
void updateMin(T& oldValue, const T& newValue) {
	if (newValue < oldValue) {
		oldValue = newValue;
	}
}

template <typename T>
void updateMax(T& oldValue, const T& newValue) {
	if (oldValue < newValue) {
		oldValue = newValue;
	}
}

#include <cassert>
//#define PROBLEM "problem_name.h"
//#include PROBLEM
//#include <message.h>
//#include <spcppl/dgcj.h>

using namespace std;

class TaskC {
public:
	vector<vector<int>> allow;
	vector<vector<int>> not_allow;
	vector<vector<int>> g;
	vector<int> c;
	vector<int> d;
	int inf;
	void dfs(int v) {
		for (int to: g[v]) {
			dfs(to);
		}

		vector<int> cur_allow = {inf, d[v]};
		for (int to: g[v]) {
			vector<int> nxt(cur_allow.size() + allow[to].size() - 1, inf);
			for (auto x: range(cur_allow.size())) {
				for (auto y: range(allow[to].size())) {
					updateMin(nxt[x + y], cur_allow[x] + allow[to][y]);
				}
			}
			cur_allow = move(nxt);
		}
		vector<int> cur_not_allow = {0, c[v]};
		for (int to: g[v]) {
			vector<int> nxt(cur_not_allow.size() + not_allow[to].size() - 1, inf);
			for (auto x: range(cur_not_allow.size())) {
				for (auto y: range(not_allow[to].size())) {
					updateMin(nxt[x + y], cur_not_allow[x] + not_allow[to][y]);
				}
			}
			cur_not_allow = move(nxt);
		}

		assert(cur_allow.size() == cur_not_allow.size());
		for (int i:range(cur_allow.size())) {
			updateMin(cur_allow[i], cur_not_allow[i]);
		}
		allow[v] = move(cur_allow);
		not_allow[v] = move(cur_not_allow);
	}
	void solve(std::istream& in, std::ostream& out) {
		int n, b;
		in >> n >> b;
		inf = 1000000111;

		allow.resize(n);
		not_allow.resize(n);
		g.resize(n);
		c.resize(n);
		d.resize(n);
		for (int i: range(n)) {
			in >> c[i];
			in >> d[i];
			d[i] = c[i] - d[i];
			if (i) {
				int x;
				in >> x;
				--x;
				g[x].push_back(i);
			}
		}

		dfs(0);

		int ans = -1;
		for (int i: range(allow[0].size())) {
			//cerr << allow[0][i] << ' ';
			if (allow[0][i] <= b) {
				ans = i;
			}
		}
		//cerr << endl;
		out << ans << "\n";
	}
};


int main() {
	std::ios_base::sync_with_stdio(false);
	TaskC solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	in.tie(nullptr);
	out << std::fixed;
	out.precision(20);
	solver.solve(in, out);
	return 0;
}