/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n , m , ans , val[MAXN];
vector<ll> ind , adj[MAXN];

ll cmp(ll x , ll y){
    return val[x] < val[y];
}

void solve(ll x){
    ll last = -1;
    vector<ll> vec;
    //cout << x << sep << SZ(ind) << sep;
    for(ll i : ind){
        //cout << i << sep;
        if(adj[i].size() == x){
            ans += SZ(ind) * (SZ(ind) - 1) / 2;
            return;
        }
        val[i] = adj[i][x];
    }
    //cout << endl;
    //cout << "===========" << endl;
    sort(all(ind) , cmp);
    for(ll i : ind){
        if(val[i] != last){
            ind.swap(vec);
            solve(x + 1);
            ind.swap(vec);
            vec = {};
        }
        vec.push_back(i);
        last = val[i];
    }
    if(SZ(vec)) {
        ind.swap(vec);
        solve(x + 1);
        ind.swap(vec);
    }
}

int main() {
    ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);

    cin >> n >> m;
    for(ll i = 1 ; i <= n ; i++)    ind.push_back(i);
    for(ll i = 0 , v , u; i < m ; i++){
        cin >> v >> u;
        adj[v].push_back(u);
        adj[u].push_back(v);
    }
    for(ll i = 1 ; i <= n ; i++){
        Sort(adj[i]);
        adj[i].push_back((SZ(adj[i]) + 1) * MAXN);
    }
    solve(0);
    ind = {};
    for(ll i = 1 ; i <= n ; i++)    ind.push_back(i);
    for(ll i = 1 ; i <= n ; i++){
        adj[i].push_back(i);
        Sort(adj[i]);
        /*for(ll j : adj[i])  cout << j << sep;
        cout << endl;*/
    }
    //cout << ans << endl;
    solve(0);
    cout << ans << endl;

    return 0;
}
/*

*/