/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author gainullin.ildar
 */

#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <set>
#include <map>
#include <list>
#include <time.h>
#include <math.h>
#include <random>
#include <deque>
#include <queue>
#include <cassert>

using namespace std;

typedef long long ll;


const int N = 2200 + 7;

ll dp[N][N];
int cnt[N][N];
int n, k;
int a[N], b[N];

pair<ll, int> f(ll ly)
{
    for (int i = 0; i <= n; i++)
    {
        for (int j = 0; j <= n; j++)
        {
            dp[i][j] = 1e18;
            cnt[i][j] = -1;
        }
    }
    dp[0][0] = 0;
    cnt[0][0] = 0;
    for (int i = 0; i <= n; i++)
    {
        for (int j = 0; j <= n; j++)
        {
            if (dp[i][j] < dp[i + 1][j])
            {
                dp[i + 1][j] = dp[i][j];
                cnt[i + 1][j] = cnt[i][j];
            }
            if (dp[i][j] < dp[i][j + 1])
            {
                dp[i][j + 1] = dp[i][j];
                cnt[i][j + 1] = cnt[i][j];
            }
            if (i > j || i == n || j == n)
            {
                continue;
            }
            ll s = dp[i][j] + a[i] + b[j] + ly;
            if (s < dp[i + 1][j + 1])
            {
                dp[i + 1][j + 1] = s;
                cnt[i + 1][j + 1] = cnt[i][j] + 1;
            }
        }
    }
    return {dp[n][n], cnt[n][n]};
}

class TaskN
{
public:
    void solve(std::istream &in, std::ostream &out)
    {
        in >> n >> k;
        for (int i = 0; i < n; i++)
        {
            in >> a[i];
        }
        for (int i = 0; i < n; i++)
        {
            in >> b[i];
        }
        ll l = -1e10, r = 1e10;
        while (l < r - 1)
        {
            ll m = (l + r) / 2;
            if (f(m).second <= k)
            {
                r = m;
            }
            else
            {
                l = m;
            }
        }
        auto a = f(r);
        out << a.first - k * (ll) r << '\n';
    }
};


int main()
{
    ios::sync_with_stdio(0);
    TaskN solver;
    std::istream &in(std::cin);
    std::ostream &out(std::cout);
    solver.solve(in, out);
    return 0;
}