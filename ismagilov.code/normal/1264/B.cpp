/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Azat Ismagilov
 */

#include <fstream>

#include <iostream>
#include <algorithm>
#include <vector>
#include <queue>
#include <numeric>
#include <set>
#include <map>

#define int long long
#define ld long double
#define fs first
#define sc second
#define pb push_back
#define ppb pop_back
#define pf push_front
#define ppf pop_front
#define mp make_pair
#define len(v) ((int)v.size())
#define vc vector
#define pr pair
#define all(v) v.begin(), v.end()
//#pragma GCC optimize("Ofast")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,tune=native")
//#pragma GCC optimize("unroll-loops")

using namespace std;

template<typename T, typename U>
inline ostream &operator<<(ostream &_out, const pair<T, U> &_p) {
    _out << _p.first << ' ' << _p.second;
    return _out;
}

template<typename T, typename U>
inline istream &operator>>(istream &_in, pair<T, U> &_p) {
    _in >> _p.first >> _p.second;
    return _in;
}

template<typename T>
inline ostream &operator<<(ostream &_out, const vector<T> &_v) {
    if (_v.empty()) { return _out; }
    _out << _v.front();
    for (auto _it = ++_v.begin(); _it != _v.end(); ++_it) { _out << ' ' << *_it; }
    return _out;
}

template<typename T>
inline istream &operator>>(istream &_in, vector<T> &_v) {
    for (auto &_i : _v) { _in >> _i; }
    return _in;
}

const int MAXN = 3e5;
const int INF = 1e9;
const int MOD = 1e9 + 7;

class BKrasivayaPosledovatelnost {
public:
    void solve(std::istream &in, std::ostream &out) {
        int a, b, c, d;
        in >> a >> b >> c >> d;
        if (abs((a + c) - (b + d)) > 1) {
            out << "NO";
            return;
        }
        int n = a + b + c + d;
        for (int i = 0; i < 2; i++) {
            vc<int> as(n);
            for (int j = 0; j < n; j++) {
                as[j] = (i + j) % 2;
            }
            int a1 = a, b1 = b, c1 = c, d1 = d;
            if (as.front() == 0) {
                for (int i = 0; i < n; i += 2) {
                    if (a1 > 0) {
                        as[i] = 0;
                        a1--;
                    } else {
                        as[i] = 2;
                        c1--;
                    }
                }
                for (int i = 1; i < n; i += 2) {
                    if (b1 > 0) {
                        as[i] = 1;
                        b1--;
                    } else {
                        as[i] = 3;
                        d1--;
                    }
                }
            } else {
                for (int i = 0; i < n; i += 2) {
                    if (d1 > 0) {
                        as[i] = 3;
                        d1--;
                    } else {
                        as[i] = 1;
                        b1--;
                    }
                }
                for (int i = 1; i < n; i += 2) {
                    if (c1 > 0) {
                        as[i] = 2;
                        c1--;
                    } else {
                        as[i] = 0;
                        a1--;
                    }
                }
            }
            if (a1 == 0 && b1 == 0 && c1 == 0 && d1 == 0) {
                bool prav = 1;
                for (int i = 1; i < n; i++) {
                    if (abs(as[i] - as[i - 1]) != 1) {
                        prav = 0;
                    }
                }
                if (prav) {
                    out << "YES\n";
                    for (auto v : as) {
                        out << v << ' ';
                    }
                    return;
                }
            }
        }
        out << "NO";
    }
};


signed main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    BKrasivayaPosledovatelnost solver;
    std::istream &in(std::cin);
    std::ostream &out(std::cout);
    solver.solve(in, out);
    return 0;
}