/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;
typedef pair<ld, ld> pld;
typedef pair<string, string> pss;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define tab                         '\t'
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define file_io                     freopen("in.txt" , "r+" , stdin) ; freopen("out.txt" , "w+" , stdout);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

inline ll input() {
    ll n;
    cin >> n;
    return n;
}

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

set_random;

const ll MAXN = 2e5 + 10;
const ll INF = 8e18;
const ll MOD1 = 998244353;
const ll MOD2 = 1e9 + 7;
const ll MOD3 = 1e9 + 9;

vector<ll> ts, g[MAXN], gr[MAXN] , adj[MAXN];
ll n, m, s, ans, mark[MAXN], comp[MAXN], indeg[MAXN];

void DFS1(ll v) {
    mark[v] = 1;
    for (ll u : g[v])
        if (!mark[u])
            DFS1(u);
    ts.push_back(v);
}

void DFS2(ll v, ll cmp) {
    comp[v] = cmp;
    for (ll u : gr[v])
        if (!comp[u])
            DFS2(u, cmp);
}

void DFS3(ll v) {
    mark[v] = 1;
    for (ll u : adj[v])
        if (!mark[u])
            DFS3(u);
}

void SCC() {
    for (ll i = 1; i <= n; i++) {
        if (!mark[i])
            DFS1(i);
    }

    while (ts.size()) {
        ll v = ts.back();
        ts.pop_back();
        if (!comp[v]) {
            DFS2(v, v);
        }
    }
}

int main() {
    fast_io;

    cin >> n >> m >> s;
    for (ll i = 0; i < m; i++) {
        ll v, u;
        cin >> v >> u;
        g[v].push_back(u);
        gr[u].push_back(v);
    }

    SCC();

    for(ll i = 1 ; i <= n ; i++)
    {
        for(ll u : g[i])
        {
            if(comp[u] == comp[i]) continue;
            adj[comp[i]].push_back(comp[u]);
            indeg[comp[u]]++;
        }
    }

    fill(mark , mark + MAXN , 0);
    DFS3(comp[s]);
    for(ll i = 1 ; i <= n ; i++)
    {
        if(comp[i] == i && mark[comp[i]] == 0 && indeg[comp[i]] == 0)
        {
            DFS3(comp[i]);
            ans++;
        }
    }
    cout << ans << endl;

    return 0;
}
/*
todo :
    1- set constants
    2- check TimeLimit and MemoryLimit
    3- check special test cases
    4- don't forget BS can help you that is good idea(use for loop for floats)
    5- don't forget printf and scanf can help you in your code speed
*/