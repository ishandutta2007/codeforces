/* Generated by powerful Codeforces Tool
 * You can download the binary file in here https://github.com/xalanq/cf-tool (Windows, macOS, Linux)
 * Author: alireza_kaviani
 * Time: 2020-07-25 10:25:10
**/
#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<int, int> pii;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())
#define lc                          id << 1
#define rc                          lc | 1

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

int n , k , A[MAXN] , seg[MAXN << 2] , lz[MAXN << 2] , st[MAXN] , fn[MAXN] , LGS[MAXN] , timer;
vector<int> adj[MAXN];

void DFS(int v , int h = 1){
    st[v] = timer++;
    LGS[st[v]] = h - (v <= n - k ? MOD : 0);
    for(int u : adj[v]) DFS(u , h + 1);
    fn[v] = timer;
}

void build(int id = 1 , int l = 0 , int r = MAXN){
    if(r - l == 1){
        seg[id] = LGS[l];
        return;
    }
    int mid = l + r >> 1;
    build(lc , l , mid);
    build(rc , mid , r);
    seg[id] = max(seg[lc] , seg[rc]);
}

void shift(int id){
    lz[lc] += lz[id];
    lz[rc] += lz[id];
    seg[lc] += lz[id];
    seg[rc] += lz[id];
    lz[id] = 0;
}

void update(int ql , int qr , int x , int id = 1 , int l = 0 , int r = MAXN){
    if(qr <= l || r <= ql)  return;
    if(ql <= l && r <= qr){
        lz[id] += x;
        seg[id] += x;
        return;
    }
    shift(id);
    int mid = l + r >> 1;
    update(ql , qr , x , lc , l , mid);
    update(ql , qr , x , rc , mid , r);
    seg[id] = max(seg[lc] , seg[rc]);
}

int main() {
    ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);

    cin >> n >> k;
    for(int i = 0 ; i < n ; i++)    cin >> A[i];
    vector<int> vec; A[n] = MOD;
    for(int i = n ; i >= 0 ; i--){
        while(SZ(vec) && A[vec.back()] <= A[i])  vec.pop_back();
        if(SZ(vec)) adj[vec.back()].push_back(i);
        vec.push_back(i);
    }
    DFS(n);
    build();
    //for(int i = 0 ; i <= n ; i++)   cout << LGS[st[i]] << sep;
    //cout << endl;
    vector<int> ans;
    for(int i = n ; i >= k ; i--){
        update(st[i] , fn[i] , -1);
        update(st[i] , st[i] + 1 , -MOD);
        update(st[i - k] , st[i - k] + 1 , MOD);
        ans.push_back(seg[1]);
    }
    reverse(all(ans));
    for(int i : ans)    cout << i << sep;

    return 0;
}
/*

*/