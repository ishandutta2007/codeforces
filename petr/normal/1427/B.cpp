/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <algorithm>
#include <array>
#include <bitset>
#include <cassert>
#include <climits>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <functional>
#include <iostream>
#include <map>
#include <memory>
#include <numeric>
#include <queue>
#include <random>
#include <set>
#include <stack>
#include <string>
#include <unordered_set>
#include <unordered_map>
#include <vector>

#define pb push_back
#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()
#define mp make_pair

using namespace std;

typedef long long int64;
typedef vector<int> vi;
typedef pair<int, int> ii;

class TaskB {
 public:
  void solveOne(istream &in, ostream &out) {
    int n, k;
    in >> n >> k;
    string s;
    in >> s;
    vector<int> blocks;
    int startBlock = 0;
    int endBlock = 0;
    int start = 0;
    int score = 0;
    for (int i = 0; i < s.size(); ++i) {
      if (s[i] == 'W') {
        if (i > 0 && s[i - 1] == 'W') score += 2; else ++score;
        int end = i - 1;
        if (start <= end) {
          if (start == 0) {
            startBlock = end - start + 1;
          } else {
            blocks.push_back(end - start + 1);
          }
        }
        start = i + 1;
      }
    }
    if (start == 0) {
      assert(score == 0);
      score += max(0, 2 * k - 1);
    } else {
      endBlock = s.size() - start;
      sort(all(blocks));
      for (int x : blocks) {
        for (int i = 0; i < x && k > 0; ++i) {
          score += 2;
          --k;
          if (i == x - 1) {
            ++score;
          }
        }
      }
      for (int i = 0; i < endBlock + startBlock && k > 0; ++i) {
        score += 2;
        --k;
      }
    }
    out << score << "\n";
  }

  void solve(std::istream &in, std::ostream &out) {
    int nt;
    in >> nt;
    for (int it = 0; it < nt; ++it) {
      solveOne(in, out);
    }
  }
};


int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  TaskB solver;
  std::istream& in(std::cin);
  std::ostream& out(std::cout);
  solver.solve(in, out);
  return 0;
}