#include <bits/stdc++.h>
using namespace std;

int n, n2;
int t, a[12][12];
int x, y, z;

bool I() {
    scanf("%d", &a[t/n][t%n]);
    ++t;
    return t == n2 ? 0 : 1;
}

bool Y() {
    a[x][y] > a[x][z] + a[z][y] ? a[x][y] = a[x][z] + a[z][y] : 0;
    ++y;
    return y == n ? 0 : 1;
}

bool X() {
    y = 0;
    Y() ? Y() ? Y() ? Y() ? Y() ? Y() ? Y() ? Y() ? Y() ? Y() ? Y() ?
    0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0;
    ++x;
    return x == n ? 0 : 1;
}

bool Z() {
    x = 0;
    X() ? X() ? X() ? X() ? X() ? X() ? X() ? X() ? X() ? X() ? X() ?
    0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0;
    ++z;
    return z == n ? 0 : 1;
}

int rlt;
int p, q;
bool P() {
    rlt < a[p][q] ? rlt = a[p][q] : 0;
    p++;
    return p == n ? 0 : 1;
}
bool Q() {
    p = 0;
    P() ? P() ? P() ? P() ? P() ? P() ? P() ? P() ? P() ? P() ? P() ?
    0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0;
    q++;
    return q == n ? 0 : 1;
}
void solve() {
    q = 0;
    Q() ? Q() ? Q() ? Q() ? Q() ? Q() ? Q() ? Q() ? Q() ? Q() ? Q() ?
    0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0;
    return;
}

int main() {
    scanf("%d", &n);
    n2 = n * n;
    I() ? I() ? I() ? 0 : 0 : 0 : 0;
    I() ? I() ? I() ? I() ? I() ? I() ? I() ? I() ? I() ? I() ?
    I() ? I() ? I() ? I() ? I() ? I() ? I() ? I() ? I() ? I() ?
    I() ? I() ? I() ? I() ? I() ? I() ? I() ? I() ? I() ? I() ?
    I() ? I() ? I() ? I() ? I() ? I() ? I() ? I() ? I() ? I() ?
    I() ? I() ? I() ? I() ? I() ? I() ? I() ? I() ? I() ? I() ?
    I() ? I() ? I() ? I() ? I() ? I() ? I() ? I() ? I() ? I() ?
    I() ? I() ? I() ? I() ? I() ? I() ? I() ? I() ? I() ? I() ?
    I() ? I() ? I() ? I() ? I() ? I() ? I() ? I() ? I() ? I() ?
    I() ? I() ? I() ? I() ? I() ? I() ? I() ? I() ? I() ? I() ?
    I() ? I() ? I() ? I() ? I() ? I() ? I() ? I() ? I() ? I() ?
    I() ? I() ? I() ? I() ? I() ? I() ? I() ? I() ? I() ? I() ?
    I() ? I() ? I() ? I() ? I() ? I() ? I() ? I() ? I() ? I() ?
    0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 :
    0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 :
    0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 :
    0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 :
    0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 :
    0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0;

    z = 0;
    Z() ? Z() ? Z() ? Z() ? Z() ? Z() ? Z() ? Z() ? Z() ? Z() ? Z() ?
    0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0 : 0;

    solve();
    printf("%d\n", rlt);
    return 0;
}