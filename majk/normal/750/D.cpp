/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Majk
 */

#include <vector>
#include <iostream>
#include <unordered_map>
#include <map>
#include <iomanip>
#include <functional>
#include <algorithm>
#include <cassert>
#include <cmath>
#include <string>
#include <sstream>
#include <queue>
using namespace std;

#define x first
#define y second
constexpr int MOD = 1000000007;

typedef std::pair<int,int> pii;
typedef long long ll;

template<typename T>std::istream&operator>>(std::istream&i,vector<T>&t) {for(auto&v:t){i>>v;}return i;}
template<typename T>std::ostream&operator<<(std::ostream&o,const vector<T>&t) {for(size_t i=0;i<t.size();++i){o<<t[i]<<" \n"[i == t.size()-1];}return o;}

namespace std {
    template<typename T,typename U>struct hash<pair<T,U>>{hash<T>t;hash<U>u;size_t operator()(const pair<T,U>&p)const{return t(p.x)^(u(p.y)<<7);}};
}
template<typename T,typename F>T bsh(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){l=m+1;r=m;}else{h=m-1;}}return r;}
template<typename T,typename F>T bsl(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){h=m-1;r=m;}else{l=m+1;}}return r;}
template<typename T> T gcd(T a,T b) { if (a<b) swap(a,b); return b?gcd(b,a%b):a; }

// #include "../l/mod.h"


#include <set>
#include <unordered_set>

class TaskD {
public:
	pair<pii,pii> dir1(int dx, int dy) {
		if (dx == 0) {
			return {{1,dy},{-1,dy}};
		} else if (dy == 0) {
			return {{dx,1},{dx,-1}};
		} else {
			return {{dx,0},{0,dy}};
		}
	}


	void solve(istream& cin, ostream& cout) {
		int N; cin >> N;
		vector<int> T(N); cin >> T;
		unordered_set<pii> X;
		unordered_set<pair<pii,pii>> S, U;
		S.insert({{0,0},{0,1}});
		// X.insert({0,0});
		for (int i = 0; i < N; ++i) {
			int x,y,dx,dy;
			for (auto s: S) {
				x = s.x.x; y = s.x.y; dx = s.y.x; dy = s.y.y;
				for (int j = 0; j < T[i]; ++j) {
					x += dx;
					y += dy;
					X.insert({x,y});
				}
				auto t = dir1(dx, dy);
				U.insert({{x,y},t.x});
				U.insert({{x,y},t.y});
			}
			S.clear();
			swap(S,U);
		}
		cout << X.size() << endl;
	}
};


int main() {
	ios_base::sync_with_stdio(false);
	TaskD solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}