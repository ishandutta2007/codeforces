/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Parsa Bahrami
 */

#pragma GCC optimize("O2")

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

typedef long long int ll;
typedef long double ld;
typedef pair<ll, ll> pll;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

#define sz(x)                       (ll) x.size()
#define all(x)                      (x).begin(),(x).end()
#define F                           first
#define S                           second

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll INF = 8e18;
const ll MOD = 1e9 + 7;
ll dp[MAXN], K[MAXN], n, St;
vector<ll> adj[MAXN];

void DFS(ll v, ll par = -1) {
    if (par != -1) K[v]--;
    dp[v] = 1;
    vector<ll> Dps;
    ll sum = 0;
    for (ll u : adj[v]) {
        if (u != par) {
            DFS(u, v);
            Dps.push_back(dp[u]);
            sum += K[u];
        }
    }
    sort(all(Dps), greater<ll>());
    for (ll i = 0; i < sz(Dps) && K[v] > 0; i++) {
        K[v]--;
        dp[v] += Dps[i] + 1;
    }
    dp[v] += min(sum, K[v]) * 2;
    K[v] -= min(sum, K[v]);
}

int main() {
    scanf("%lld", &n);
    for (ll i = 1; i <= n; i++) {
        scanf("%lld", &K[i]);
    }
    for (ll i = 1; i <= n - 1; i++) {
        ll u, v;
        scanf("%lld%lld", &u, &v);
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    scanf("%lld", &St);
    DFS(St);
    printf("%lld\n", dp[St] - 1);
    return 0;
}