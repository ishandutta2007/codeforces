/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n, m, q, A, B, par[MAXN], sz[MAXN], comp[MAXN];
vector<pll> E;

ll Find(ll v) {
    return (par[v] == -1 ? v : par[v] = Find(par[v]));
}

void Union(ll v, ll u) {
    v = Find(v), u = Find(u);
    if (v == u) return;
    if (sz[v] < sz[u]) swap(v, u);
    par[u] = v;
    sz[v] += sz[u];
}

void reset() {
    fill(par, par + n + 10, -1);
    fill(sz, sz + n + 10, 1);
}

int main() {
    fast_io;

    cin >> q;
    while (q--) {
        cin >> n >> m >> A >> B;
        ll ans = n * (n - 1) / 2;
        E = {};
        for (ll i = 0; i < m; i++) {
            ll v, u;
            cin >> v >> u;
            E.push_back({v, u});
        }

        reset();
        fill(comp, comp + n + 10, -1);
        for (pll i : E) {
            ll v = i.X, u = i.Y;
            if (v == A || u == A) continue;
            Union(v, u);
        }

        for (ll i = 1; i <= n; i++) {
            comp[i] = Find(i);
            if (comp[i] == i) ans -= sz[i] * (sz[i] - 1) / 2;
        }
        ans -= n - sz[Find(B)];
        reset();
        for (pll i : E) {
            ll v = i.X, u = i.Y;
            if (v == B || u == B) continue;
            Union(v, u);
        }
        ans -= n - 1 - sz[Find(A)];
        map<pll, ll> cnt;
        for (ll i = 1; i <= n; i++) {
            if (Find(i) == i) ans -= sz[i] * (sz[i] - 1) / 2;
            cnt[{comp[i], Find(i)}]++;
        }

        for (auto &i : cnt) ans += i.Y * (i.Y - 1) / 2;
        cout << ans << endl;

    }

    return 0;
}
/*

*/