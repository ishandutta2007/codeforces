/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n, p, k, comps, par[MAXN], sz[MAXN];

ll Find(ll v) {
    return (par[v] == -1 ? v : par[v] = Find(par[v]));
}

void Union(ll v, ll u) {
    v = Find(v), u = Find(u);
    //cout << v << sep << u << endl;
    if (v == u) return;
    if (sz[v] < sz[u]) swap(v, u);
    par[v] = u;
    sz[v] += sz[u];
    comps--;
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    fill(par, par + MAXN, -1);
    fill(sz, sz + MAXN, 1);

    cin >> p >> k;
    ll x = 0;
    comps = p - 1;
    for (ll i = 0; i < p; i++) if (i * k % p == i) x++;
    for (ll i = 1; i < p; i++) Union(i, i * k % p);
    if (k == 0) comps = p - 1;
    cout << x * poww(p, comps, MOD) % MOD << endl;

    return 0;
}
/*

*/