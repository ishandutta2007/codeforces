/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

// Actual solution is at the bottom

#include <algorithm>
#include <array>
#include <bitset>
#include <cassert>
#include <climits>
#include <cstdint>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <memory>
#include <numeric>
#include <queue>
#include <random>
#include <set>
#include <stack>
#include <string>
#include <unordered_set>
#include <unordered_map>
#include <vector>
//#include "../atcoder/all"

#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()

using namespace std;

typedef int64_t int64;
typedef pair<int, int> ii;

class CPogonya {
 public:
  void solveOne() {
    int n;
    cin >> n;
    multiset<int> ahi, alo, bhi, blo;
    int as = 0;
    int bs = 0;
    for (int i = 0; i < n; ++i) {
      int a;
      cin >> a;
      ahi.insert(a);
      as += a;
    }
    for (int i = 0; i < n; ++i) {
      int a;
      cin >> a;
      bhi.insert(a);
      bs += a;
    }
    int extra = 0;
    while (true) {
      int d = n / 4;
      while (alo.size() < d) {
        as -= *ahi.begin();
        alo.insert(*ahi.begin());
        ahi.erase(ahi.begin());
      }
      while (alo.size() > d) {
        auto it = alo.end();
        --it;
        as += *it;
        ahi.insert(*it);
        alo.erase(it);
      }
      while (blo.size() < d) {
        bs -= *bhi.begin();
        blo.insert(*bhi.begin());
        bhi.erase(bhi.begin());
      }
      while (blo.size() > d) {
        auto it = blo.end();
        --it;
        bs += *it;
        bhi.insert(*it);
        blo.erase(it);
      }
      if (as >= bs) {
        cout << extra << "\n";
        return;
      }
      ahi.insert(100);
      as += 100;
      blo.insert(0);
      ++extra;
      ++n;
    }
  }

  void solve() {
    int nt;
    cin >> nt;
    for (int it = 0; it < nt; ++it) {
      solveOne();
    }
  }
};


int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(0);
    CPogonya solver;


    solver.solve();
    return 0;
}