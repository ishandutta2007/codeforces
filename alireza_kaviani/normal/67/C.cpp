/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 4e3 + 10;
const ll LOG = 22;
const ll INF = 2e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n, m, TI, TD, TR, TS, dp[MAXN][MAXN], prv[26], prv2[MAXN][26], p[26];
string s, t;

ll cost(ll i, ll j) {
    return (s[i] != t[j] ? TR : 0);
}

void update(ll i, ll j, ll x, ll y) {
    if (x <= 0 || y <= 0 || x > n || y > m) return;
    dp[i][j] = min(dp[i][j], dp[y - 1][x - 1] + (i - y - 1) * TD + (j - x - 1) * TI + TS + cost(i, x) + cost(y, j));
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    for (ll i = 0; i < MAXN; i++) {
        for (ll j = 0; j < MAXN; j++) dp[i][j] = INF;
    }

    cin >> TI >> TD >> TR >> TS;
    cin >> s >> t;
    n = s.size(), m = t.size();
    s = "." + s, t = "." + t;

    for (ll i = 0; i < 26; i++) {
        prv2[0][i] = -1;
        for (ll j = 1; j <= n; j++) {
            prv2[j][i] = prv2[j - 1][i];
            if (s[j] - 97 == i) prv2[j][i] = j;
        }
    }

    TR = min(TR, TI + TD);
    for (ll i = 0; i <= m; i++) dp[0][i] = i * TI;
    for (ll i = 0; i <= n; i++) dp[i][0] = i * TD;
    for (ll i = 1; i <= n; i++) {
        fill(prv, prv + 26, -1);
        for (ll j = 0; j < 26; j++) p[j] = prv2[i - 1][j];
        for (ll j = 1; j <= m; j++) {
            dp[i][j] = min({dp[i - 1][j] + TD, dp[i][j - 1] + TI, dp[i - 1][j - 1] + cost(i, j)});
            update(i, j, prv[s[i] - 97], p[t[j] - 97]);
            prv[t[j] - 97] = j;
        }
    }
    cout << dp[n][m] << endl;

    return 0;
}
/*

*/