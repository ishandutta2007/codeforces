/* Generated by powerful Codeforces Tool
 * You can download the binary file in here https://github.com/xalanq/cf-tool (Windows, macOS, Linux)
 * Author: alireza_kaviani
 * Time: 2020-04-17 13:36:08
**/
#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<int , int> pii;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

int n , k;
set<pii> ans;
vector<pii> vec;

int solve(int l , int r){
    int x = vec[l].X + vec[r - 1].X , y = vec[l].Y + vec[r - 1].Y , ans = 0;
    for(int i = l ; i < r ; i++){
        int x2 = x - vec[i].X , y2 = y - vec[i].Y;
        int ind = lower_bound(all(vec) , pii(x2 , y2)) - vec.begin();
        if(ind < l || ind >= r || vec[ind].X != x2 || vec[ind].Y != y2) ans++;
    }
    //cout << l << sep << r << sep << ans << endl;
    return ans;
}

int main() {
    ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);

    cin >> n >> k;
    if(k >= n)  return cout << -1 << endl , 0;
    for(int i = 0 , x , y ; i < n ; i++)    cin >> x >> y , vec.push_back({x , y});
    sort(all(vec));
    for(int i = 0 ; i <= k ; i++){
        for(int j = 0 ; j + i <= k ; j++){
            if(solve(i , n - j) + i + j <= k){
                ans.insert({vec[i].X + vec[n - j - 1].X , vec[i].Y + vec[n - j - 1].Y});
            }
        }
    }
    cout << SZ(ans) << endl;
    for(auto &i : ans)  cout << fixed << setprecision(20) << double(i.X) / 2.0 << sep << double(i.Y) / 2.0 << endl;

    return 0;
}
/*

*/