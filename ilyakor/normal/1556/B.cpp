/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <algorithm>
#include <queue>
#include <vector>
#include <set>
#include <map>
#include <cassert>
#include <functional>
#include <sstream>
#include <cmath>

#include <cstring>
#include <cstdio>

using namespace std;

typedef pair<int, int> ii;
typedef long long int64;
typedef vector<int> vi;

#define pb push_back
#define mp make_pair
#define all(v) (v).begin(),(v).end()
#define sz(v) ((int)(v).size())

template<class T> T abs(T x) { return x >= 0 ? x : -x; }
template<class T> T sqr(T x) { return x * x; }

class TaskB {
public:
	void solve(std::istream& in, std::ostream& out) {
	    int n;
	    in >> n;
	    vi v(n);
	    int num0 = 0, num1 = 0;
	    vi pos;
	    for (int i = 0; i < n; ++i) {
	        in >> v[i];
	        v[i] %= 2;
	        if (v[i] == 0) ++num0;
	        else ++num1;
	        if (v[i] == 1) pos.pb(i);
	    }
	    if (abs(num0 - num1) > 1) {
	        out << "-1\n";
	        return;
	    }
	    int64 res = (int64)(1e18);
        {
            int x0 = num0, x1 = num1;
            int64 cur = 0;
            int prev = -1;
            vi cp;
            for (int i = 0; i < n; ++i) {
                if (x0 > x1) {
                    --x0;
                    prev = 0;
                } else if (x0 < x1) {
                    --x1;
                    cp.pb(i);
                    prev = 1;
                } else {
                    if (prev == 0) {
                        --x1;
                        prev = 1;
                        cp.pb(i);
                    } else {
                        --x0;
                        prev = 0;
                    }
                }
            }
            for (int i = 0; i < sz(pos); ++i) {
                cur += abs(pos[i] - cp[i]);
            }
            res = min(res, cur);
        }
        {
            int x0 = num0, x1 = num1;
            int64 cur = 0;
            int prev = -1;
            vi cp;
            for (int i = 0; i < n; ++i) {
                if (x0 > x1) {
                    --x0;
                    prev = 0;
                } else if (x0 < x1) {
                    --x1;
                    cp.pb(i);
                    prev = 1;
                } else {
                    if (prev == 1) {
                        --x0;
                        prev = 0;
                    } else {
                        --x1;
                        prev = 1;
                        cp.pb(i);
                    }
                }
            }
            for (int i = 0; i < sz(pos); ++i) {
                cur += abs(pos[i] - cp[i]);
            }
            res = min(res, cur);
        }
        out << res << "\n";
	}
};


int main() {
	TaskB solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	int n;
in >> n;
for(int i = 0; i < n; ++i) {
	solver.solve(in, out);
}

	return 0;
}