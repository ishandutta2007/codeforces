/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <algorithm>
#include <array>
#include <bitset>
#include <cassert>
#include <climits>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <functional>
#include <iostream>
#include <map>
#include <memory>
#include <numeric>
#include <queue>
#include <random>
#include <set>
#include <stack>
#include <string>
#include <unordered_set>
#include <unordered_map>
#include <vector>

#define pb push_back
#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()
#define mp make_pair

using namespace std;

typedef long long int64;
typedef vector<int> vi;
typedef pair<int, int> ii;

constexpr int BUBEN = 50;

class TaskC {
 public:
  void solveOne(istream &in, ostream &out) {
    int n, k;
    in >> n >> k;
    vector<vector<int64>> a(n);
    vector<int64> asum(n);
    for (int i = 0; i < n; ++i) {
      int m;
      in >> m;
      for (int j = 0; j < m; ++j) {
        int64 x;
        in >> x;
        a[i].push_back(x);
        asum[i] += x;
      }
    }
    int64 res = 0;
    for (int i = 0; i < n;) {
      int j = min(n, i + BUBEN);
      vector<int64> best(k + 1, 0);
      for (int v = 0; v < n; ++v) {
        if (v >= i && v < j) continue;
        int cnt = a[v].size();
        int64 score = asum[v];
        for (int old = k - cnt; old >= 0; --old) {
          best[old + cnt] = max(best[old + cnt], best[old] + score);
        }
      }
      vector<int64> cbest(k + 1, 0);
      for (int u = i; u < j; ++u) {
        for (int t = 0; t <= k; ++t) cbest[t] = best[t];
        for (int v = i; v < j; ++v) if (v != u) {
          int cnt = a[v].size();
          int64 score = asum[v];
          for (int old = k - cnt; old >= 0; --old) {
            cbest[old + cnt] = max(cbest[old + cnt], cbest[old] + score);
          }
        }
        int64 sofar = 0;
        for (int take = 0; take <= k && take <= a[u].size(); ++take) {
          res = max(res, sofar + cbest[k - take]);
          if (take < a[u].size()) {
            sofar += a[u][take];
          }
        }
      }
      i = j;
    }
    out << res << "\n";
  }

  void solve(std::istream &in, std::ostream &out) {
    int nt = 1;
    for (int it = 0; it < nt; ++it) {
      solveOne(in, out);
    }
  }
};


int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  TaskC solver;
  std::istream& in(std::cin);
  std::ostream& out(std::cout);
  solver.solve(in, out);
  return 0;
}