/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

set_random;

const ll MAXN = 1e6 + 10;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll q , n , k , ans , dp[MAXN][3];
string s;
char c[3] = {'R' , 'G' , 'B'};

int main() {
    fast_io;

    cin >> q;
    while(q--){
        ans = 0;
        cin >> n >> k >> s;

        for(ll i = 0 ; i <= n + 10 ; i++)   dp[i][0] = dp[i][1] = dp[i][2] = 0;

        for(ll i = 0 ; i < 3 ; i++){
            for(ll j = 0 ; j < k ; j++){
                dp[0][i] += (s[j] == c[(i + j) % 3]);
            }
        }

        for(ll i = 1 ; i + k - 1 < n ; i++){
            dp[i][0] = dp[i - 1][2] - (s[i - 1] == 'B') + (s[i + k - 1] == c[(k + 2) % 3]);
            dp[i][1] = dp[i - 1][0] - (s[i - 1] == 'R') + (s[i + k - 1] == c[(k + 0) % 3]);
            dp[i][2] = dp[i - 1][1] - (s[i - 1] == 'G') + (s[i + k - 1] == c[(k + 1) % 3]);
        }

        for(ll i = 0 ; i <= n + 10 ; i++)   ans = max(ans , *max_element(dp[i] , dp[i] + 3));
        cout << k - ans << endl;
    }

    return 0;
}
/*

*/