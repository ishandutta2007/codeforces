/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

// Actual solution is at the bottom

#undef NDEBUG

#include <algorithm>
#include <array>
#include <bitset>
#include <cassert>
#include <climits>
#include <cstdint>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <memory>
#include <numeric>
#include <queue>
#include <random>
#include <set>
#include <stack>
#include <string>
#include <unordered_set>
#include <unordered_map>
#include <vector>
// AtCoder library from https://github.com/atcoder/ac-library
// #include "../atcoder/all"

#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()

using namespace std;

typedef int64_t int64;
typedef pair<int, int> ii;

class HSquidGame {
 public:
  int n, l;
  vector<vector<int>> adj;

  int timer;
  vector<int> tin, tout;
  vector<vector<int>> up;

  void dfs(int v, int p)
  {
    tin[v] = ++timer;
    up[v][0] = p;
    for (int i = 1; i <= l; ++i)
      up[v][i] = up[up[v][i-1]][i-1];

    for (int u : adj[v]) {
      if (u != p)
        dfs(u, v);
    }

    tout[v] = ++timer;
  }

  bool is_ancestor(int u, int v)
  {
    return tin[u] <= tin[v] && tout[u] >= tout[v];
  }

  int lca(int u, int v)
  {
    if (is_ancestor(u, v))
      return u;
    if (is_ancestor(v, u))
      return v;
    for (int i = l; i >= 0; --i) {
      if (!is_ancestor(up[u][i], v))
        u = up[u][i];
    }
    return up[u][0];
  }

  int pre_ancestor(int u, int v) {
    assert(is_ancestor(v, u));
    assert(u != v);
    for (int i = l; i >= 0; --i) {
      if (!is_ancestor(up[u][i], v))
        u = up[u][i];
    }
    return u;
  }

  void preprocess(int root) {
    tin.resize(n);
    tout.resize(n);
    timer = 0;
    l = ceil(log2(n));
    up.assign(n, vector<int>(l + 1));
    dfs(root, root);
  }

  void solveOne() {
    int m;
    cin >> n >> m;

    adj.assign(n, vector<int>());

    vector<int> parent(n, -1);
    for (int i = 1; i < n; ++i) {
      int j;
      cin >> j;
      --j;
      parent[i] = j;
      adj[i].push_back(j);
      adj[j].push_back(i);
    }

    preprocess(0);

    vector<vector<int>> greaters(n);
    vector<ii> gPairs;

    for (int i = 0; i < m; ++i) {
      int a, b;
      cin >> a >> b;
      --a; --b;
      if (a > b) swap(a, b);
      int c = lca(a, b);
      assert(c <= a);
      if (c == a) {
        if (parent[b] == a) {
          cout << -1 << "\n";
          return;
        }
        int d = pre_ancestor(b, a);
        greaters[d].push_back(b);
      } else {
        gPairs.emplace_back(a, b);
      }
    }

    vector<int> s(n);
    for (int i = n - 1; i >= 0; --i) {
      bool ok = true;
      for (int x : greaters[i]) if (s[x] == s[i]) ok = false;
      if (!ok) ++s[i];
      if (i > 0) {
        s[parent[i]] += s[i];
      }
    }
    bool ok = true;
    for (auto p : gPairs) {
      if (s[p.first] + s[p.second] == s[0]) ok = false;
    }
    if (!ok) ++s[0];
    cout << s[0] << "\n";
  }

  void solve() {
    int nt = 1;
    for (int it = 0; it < nt; ++it) {
      solveOne();
    }
  }
};


int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(0);
    HSquidGame solver;


    solver.solve();
    return 0;
}