/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

// Actual solution is at the bottom

#include <algorithm>
#include <array>
#include <bitset>
#include <cassert>
#include <climits>
#include <cstdint>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <memory>
#include <numeric>
#include <queue>
#include <random>
#include <set>
#include <stack>
#include <string>
#include <unordered_set>
#include <unordered_map>
#include <vector>
//#include "../atcoder/all"

#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()

using namespace std;

typedef int64_t int64;
typedef pair<int, int> ii;

class EMinimaks {
 public:
  void solveOne() {
    string s;
    cin >> s;
    vector<int> cnt(26);
    for (char c : s) {
      ++cnt[c - 'a'];
    }

    auto dump = [&] {
      for (int j = 0; j < 26; ++j) {
        for (int k = 0; k < cnt[j]; ++k) {
          cout << (char) ('a' + j);
        }
      }
      cout << "\n";
    };
    int nonzero = 0;
    int first = -1;
    int second = -1;
    int third = -1;
    for (int i = 0; i < 26; ++i) {
      if (cnt[i]) {
        ++nonzero;
        if (first < 0) first = i; else if (second < 0) second = i; else if (third < 0) third = i;
      }
      if (cnt[i] == 1) {
        cout << (char) ('a' + i);
        --cnt[i];
        dump();
        return;
      }
    }
    if (nonzero == 1) {
      dump();
      return;
    }
    if (2 * (cnt[first] - 1) <= s.size()) {
      cout << (char) ('a' + first);
      --cnt[first];
      for (int j = first + 1; j < 26; ++j) {
        for (int k = 0; k < cnt[j]; ++k) {
          if (cnt[first] > 0) {
            cout << (char) ('a' + first);
            --cnt[first];
          }
          cout << (char) ('a' + j);
        }
        cnt[j] = 0;
      }
      dump();
      return;
    } else {
      cout << (char) ('a' + first);
      --cnt[first];
      cout << (char) ('a' + second);
      --cnt[second];
      if (third >= 0) {
        for (int k = 0; k < cnt[first]; ++k) {
          cout << (char) ('a' + first);
        }
        cnt[first] = 0;
        cout << (char) ('a' + third);
        --cnt[third];
        dump();
      } else {
        for (int k = 0; k < cnt[second]; ++k) {
          cout << (char) ('a' + second);
        }
        cnt[second] = 0;
        dump();
      }
      return;
    }
  }

  void solve() {
    int nt;
    cin >> nt;
    for (int it = 0; it < nt; ++it) {
      solveOne();
    }
  }
};


int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(0);
    EMinimaks solver;


    solver.solve();
    return 0;
}