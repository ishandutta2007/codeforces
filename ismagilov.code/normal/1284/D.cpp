/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Azat Ismagilov
 */

#include <fstream>

#include <iostream>
#include <algorithm>
#include <vector>
#include <queue>
#include <numeric>
#include <set>
#include <map>
#include <random>

#define int long long
#define ld long double
#define fs first
#define sc second
#define pb push_back
#define ppb pop_back
#define pf push_front
#define ppf pop_front
#define mp make_pair
#define len(v) ((int)v.size())
#define vc vector
#define pr pair
#define all(v) v.begin(), v.end()
//#pragma GCC optimize("Ofast")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,tune=native")
//#pragma GCC optimize("unroll-loops")

using namespace std;

template<typename T, typename U>
inline ostream &operator<<(ostream &_out, const pair<T, U> &_p) {
    _out << _p.first << ' ' << _p.second;
    return _out;
}

template<typename T, typename U>
inline istream &operator>>(istream &_in, pair<T, U> &_p) {
    _in >> _p.first >> _p.second;
    return _in;
}

template<typename T>
inline ostream &operator<<(ostream &_out, const vector<T> &_v) {
    if (_v.empty()) { return _out; }
    _out << _v.front();
    for (auto _it = ++_v.begin(); _it != _v.end(); ++_it) { _out << ' ' << *_it; }
    return _out;
}

template<typename T>
inline istream &operator>>(istream &_in, vector<T> &_v) {
    for (auto &_i : _v) { _in >> _i; }
    return _in;
}

const int MAXN = 3e5;
const int INF = 1e9;
const int MOD = 1e9 + 7;

int sum(int a, int b) {
    if (a + b >= MOD) {
        return a + b - MOD;
    }
    return a + b;
}

int mul(int a, int b) {
    if (a * b >= MOD) {
        return (a * b) % MOD;
    }
    return a * b;
}

int sqr(int a) {
    return (a * a) % MOD;
}

int bin_pow(int a, int b) {
    if (b == 0) {
        return 1;
    }
    if (b % 2) {
        return mul(a, bin_pow(a, b - 1));
    }
    return sqr(bin_pow(a, b / 2));
}

int koeff[MAXN];

vc<int> mems(vc<pr<pr<int, int>, int>> a) {
    int n = len(a);
    vc<int> ans(n);
    vc<pr<int, int>> mes(n);
    int sumx = 0;
    for (int i = 0; i < n; i++) {
        mes[i] = {a[i].fs.sc, koeff[i]};
    }
    sort(all(mes));
    for (int i = 1; i < n; i++) {
        mes[i].sc = sum(mes[i].sc, mes[i - 1].sc);
    }
    for (int i = 0; i < n; i++) {
        auto it = lower_bound(all(mes), mp(a[i].fs.fs, 0ll));
        if (it != mes.begin()) {
            ans[a[i].sc] = sum(ans[a[i].sc], (*prev(it)).sc);
        }
    }
    for (int i = 0; i < n; i++) {
        mes[i] = {a[i].fs.fs, koeff[i]};
    }
    sort(all(mes));
    for (int i = n - 1; i >= 1; i--) {
        mes[i - 1].sc = sum(mes[i - 1].sc, mes[i].sc);
    }
    for (int i = 0; i < n; i++) {
        auto it = upper_bound(all(mes), mp(a[i].fs.sc, INF));
        if (it != mes.end()) {
            ans[a[i].sc] = sum(ans[a[i].sc], (*it).sc);
        }
    }
    return ans;
}


mt19937 rnd(228);

class DNoviiGodIKonferentsiya {
public:
    void solve(std::istream &in, std::ostream &out) {
        int n;
        in >> n;
        vc<pr<pr<int, int>, int>> a(n), b(n);
        set<int> keks;
        for (int i = 0; i < n; i++) {
            koeff[i] = rnd() % MOD;
            while (keks.find(koeff[i]) != keks.end()) {
                koeff[i] = rnd() % MOD;
            }
            keks.insert(koeff[i]);
            in >> a[i].fs;
            a[i].sc = i;
            in >> b[i].fs;
            b[i].sc = i;
        }
        vc<int> as = mems(a);
        vc<int> bs = mems(b);
        for (int i = 0; i < n; i++) {
            if (as[i] != bs[i]) {
                out << "NO\n";
                return;
            }
        }
        out << "YES";
    }
};


signed main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    DNoviiGodIKonferentsiya solver;
    std::istream &in(std::cin);
    std::ostream &out(std::cout);
    solver.solve(in, out);
    return 0;
}