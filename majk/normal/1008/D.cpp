/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author majk
 */

#ifndef MAJK_LIB
#define MAJK_LIB

#include <vector>
#include <stack>
#include <iostream>
#include <fstream>
#include <unordered_map>
#include <unordered_set>
#include <map>
#include <iomanip>
#include <set>
#include <functional>
#include <algorithm>
#include <numeric>
#include <cassert>
#include <cmath>
#include <string>
#include <queue>
#include <array>
#include <bitset>
using namespace std;

#define x first
#define y second
typedef std::pair<int,int> pii; typedef long long ll; typedef unsigned long long ull; typedef unsigned int ui; typedef pair<ui,ui> puu;

template <typename T, typename U> std::istream&operator>>(std::istream&i, pair<T,U>&p) {i >> p.x >> p.y; return i;}
template<typename T>std::istream&operator>>(std::istream&i,vector<T>&t) {for(auto&v:t){i>>v;}return i;}
template <typename T, typename U> std::ostream&operator<<(std::ostream&o, const pair<T,U>&p) {o << p.x << ' ' << p.y; return o;}
template<typename T>std::ostream&operator<<(std::ostream&o,const vector<T>&t) {if(t.empty())o<<'\n';for(size_t i=0;i<t.size();++i){o<<t[i]<<" \n"[i == t.size()-1];}return o;}
template<typename T> using minheap = priority_queue<T, vector<T>, greater<T>>;
template<typename T> using maxheap = priority_queue<T, vector<T>, less<T>>;
ui logceil(ll x) { return x?8*sizeof(ll)-__builtin_clzll(x):0; }

namespace std { template<typename T,typename U>struct hash<pair<T,U>>{hash<T>t;hash<U>u;size_t operator()(const pair<T,U>&p)const{return t(p.x)^(u(p.y)<<7);}}; }
template<typename T,typename F>T bsh(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){l=m+1;r=m;}else{h=m-1;}}return r;}
template<typename F> double bshd(double l,double h,const F&f,double p=1e-9){ui r=3+(ui)log2((h-l)/p);while(r--){double m=(l+h)/2;if(f(m)){l=m;}else{h=m;}}return (l+h)/2;}
template<typename T,typename F>T bsl(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){h=m-1;r=m;}else{l=m+1;}}return r;}
template<typename F> double bsld(double l,double h,const F&f,double p=1e-9){ui r=3+(ui)log2((h-l)/p);while(r--){double m=(l+h)/2;if(f(m)){h=m;}else{l=m;}}return (l+h)/2;}
template<typename T> T gcd(T a,T b) { if (a<b) swap(a,b); return b?gcd(b,a%b):a; }


template<typename T>class vector2:public vector<vector<T>>{public:vector2(){} vector2(size_t a,size_t b,T t=T()):vector<vector<T>>(a,vector<T>(b,t)){}};
template<typename T>class vector3:public vector<vector2<T>>{public:vector3(){} vector3(size_t a,size_t b,size_t c,T t=T()):vector<vector2<T>>(a,vector2<T>(b,c,t)){}};
template<typename T>class vector4:public vector<vector3<T>>{public:vector4(){} vector4(size_t a,size_t b,size_t c,size_t d,T t=T()):vector<vector3<T>>(a,vector3<T>(b,c,d,t)){}};
template<typename T>class vector5:public vector<vector4<T>>{public:vector5(){} vector5(size_t a,size_t b,size_t c,size_t d,size_t e,T t=T()):vector<vector4<T>>(a,vector4<T>(b,c,d,e,t)){}};


#endif

class DPaveTheParallelepiped {
public:
    int brute(int A, int B, int C) {
        int M = max(A,max(B,C));
        set<vector<int>> S;
        for (int i = 1; i <= A; ++i) {
            if (A%i) continue;
            for (int j = 1; j <= B; ++j) {
                if (B%j) continue;
                for (int k = 1; k <= C; ++k) {
                    if (C%k) continue;
                    vector<int> R{i,j,k};
                    sort(R.begin(),R.end());
                    S.insert(R);
                }
            }
        }
        return S.size();
    }

    void solve(istream& cin, ostream& cout) {
        int T; cin >> T;

        vector<int> P(100001, 0);
        for (int i = 2; i <= 100000; ++i) {
            if (P[i] == 0) {
                for (int j = i; j <= 100000; j += i) P[j] = i;
            }
        }

        auto divs = [&](int a) {
            int x = 1;
            while (a != 1) {
                int b = P[a];
                int c = 1;
                while (P[a] == b) {
                    a /= b;
                    c++;
                }
                x *= c;
            }
            return x;
        };
        vector<int> D(100001, 0);
        for (int i = 1; i <= 100000; ++i) {
            D[i] = divs(i);
        }

        set<vector<int>> Sol;
        for (int i = 1; i < 8; ++i) {
            for (int j = i; j < 8; ++j) {
                for (int k = j; k < 8; ++k) {
                    if ((i|j|k)==7 && __builtin_popcount(i|j)>=2 && __builtin_popcount(j|k)>=2 && __builtin_popcount(i|k)>=2) {
                        vector<int> A{i,j,k};
                        Sol.insert(A);
                    }
                }
            }
        }
        vector<vector<int>> U(Sol.begin(),Sol.end());

        auto solve = [&](int A, int B, int C) {
            int G3 = D[gcd(A, gcd(B, C))];
            int GA = D[gcd(B,C)], GB = D[gcd(A,C)], GC = D[gcd(A,B)];
            vector<int> S(8, 0);
            S[7] = G3;
            S[3] = GC-G3;
            S[5] = GB-G3;
            S[6] = GA-G3;
            S[1] = D[A]-GC-GB+G3;
            S[2] = D[B]-GC-GA+G3;
            S[4] = D[C]-GA-GB+G3;
            ll ans = 0;
            for (auto &uu: U) {
                ll cur = 1;
                int p = 0, c = 0;
                for (int u: uu) {
                    if (u != p) { p = u; c = 0; }
                    else c++;
                    if (c == 0) cur *= S[u];
                    else if (c == 1) { cur *= (S[u]+1); cur /= 2; }
                    else if (c == 2) { cur *= (S[u]*S[u]+3*S[u]+2); cur /= 3; cur /= S[u]+1; }
                }
                ans += cur;
            }
            return ans;
        };
        for (int t = 0; t < T; ++t) {
            int A, B, C; cin >> A >> B >> C;
            cout << solve(A,B,C) << '\n';
        }
    }
};



int main() {
	ios_base::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr);
	DPaveTheParallelepiped solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
    return 0;
}