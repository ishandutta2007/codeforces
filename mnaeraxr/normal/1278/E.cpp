/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author marX
 */

#include <iostream>
#include <fstream>

#include <bits/stdc++.h>

using namespace std;

class ETestsForProblemD {
public:
    void solve(std::istream &in, std::ostream &out) {
        int n;
        in >> n;

        vector<pair<int, int>> ans(n);

        vector<vector<int>> tree(n);

        for (int i = 0; i + 1 < n; ++i) {
            int u, v;
            in >> u >> v;
            u--;
            v--;

            tree[u].push_back(v);
            tree[v].push_back(u);
        }

        vector<int> total(n);

        function<void(int, int)> dfs = [&](int s, int p) {
            total[s] = 1;

            for (auto u : tree[s]) {
                if (u == p)
                    continue;

                dfs(u, s);
                total[s] += total[u];
            }
        };

        dfs(0, -1);

        ans[0] = {2 * n - 1 - tree[0].size(), 2 * n};

        function<void(int, int, int, int)> solve = [&](int s, int p, int b, int e) {
            for (auto u : tree[s]) {
                if (u == p)
                    continue;
                int t = total[u];
                int d = tree[u].size() - 1;
                int ne = 2 * t - 2 + b;
                ans[u] = {ne - d, e--};
                solve(u, s, b, ne);
                b = ne + 1;
            }
        };

        solve(0, -1, 1, 2 * n - 1);

        for (auto x : ans) {
            out << x.first << " " << x.second << '\n';
        }
    }
};


int main() {
    ETestsForProblemD solver;
    std::istream &in(std::cin);
    std::ostream &out(std::cout);
    solver.solve(in, out);
    return 0;
}