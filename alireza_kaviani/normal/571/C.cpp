/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 2e5 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n, m, ans[MAXN], ok[MAXN], mark[MAXN];
pair<ll, pll> backEdge;
vector<ll> V;
vector<pll> A[MAXN], B[MAXN], adj[MAXN];

void DFS(ll v, ll p = -1) {
    mark[v] = 1;
    V.push_back(v);
    for (pll i : adj[v]) {
        ll u = i.X, ind = i.Y;
        if (mark[u] && abs(ind) != p) backEdge = {ind, {v, u}};
        if (!mark[u]) {
            DFS(u, abs(ind));
            ans[abs(ind)] = (ind > 0 ? 1 : 0);
        }
    }
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    cin >> n >> m;
    for (ll i = 0; i < n; i++) {
        ll k, x;
        cin >> k;
        for (ll j = 0; j < k; j++) {
            cin >> x;
            A[i].push_back({abs(x), (x > 0 ? 1 : 0)});
            B[abs(x)].push_back({i, (x > 0 ? 1 : 0)});
        }
    }

    for (ll i = 1; i <= m; i++) {
        if (SZ(B[i]) == 0) continue;
        if (SZ(B[i]) <= 1 || B[i][0].Y == B[i][1].Y) {
            ans[i] = B[i][0].Y;
            for (pll j : B[i]) ok[j.X] = 1;
        }
    }
    for (ll i = 1; i <= m; i++) {
        if (SZ(B[i]) == 2 && ok[B[i][0].X]) swap(B[i][0], B[i][1]);
        if (SZ(B[i]) == 2 && !ok[B[i][0].X] && ok[B[i][1].X]) {
            adj[B[i][0].X].push_back({B[i][0].X, i * (B[i][0].Y == 1 ? 1 : -1)});
            adj[B[i][0].X].push_back({B[i][0].X, i * (B[i][0].Y == 1 ? 1 : -1)});
        }
        if (SZ(B[i]) == 2 && !ok[B[i][0].X] && !ok[B[i][1].X]) {
            adj[B[i][0].X].push_back({B[i][1].X, i * (B[i][1].Y == 1 ? 1 : -1)});
            adj[B[i][1].X].push_back({B[i][0].X, i * (B[i][0].Y == 1 ? 1 : -1)});
        }
    }

    for (ll i = 0; i < n; i++) {
        if (!ok[i] && !mark[i]) {
            V = {};
            backEdge = {-1, {-1, -1}};
            DFS(i);
            for (ll j : V) mark[j] = 0;
            if (backEdge.Y.X == -1) return cout << "NO" << endl, 0;
            adj[backEdge.Y.X].erase(
                find(adj[backEdge.Y.X].begin(), adj[backEdge.Y.X].end(), pll(backEdge.Y.Y, backEdge.X)));
            adj[backEdge.Y.Y].erase(find(adj[backEdge.Y.Y].begin(), adj[backEdge.Y.Y].end(),
                                         pll(backEdge.Y.X, (backEdge.Y.X == backEdge.Y.Y ? -1 : 1) * -backEdge.X)));
            ans[abs(backEdge.X)] = (backEdge.X > 0 ? 1 : 0);
            DFS(backEdge.Y.Y);
        }
    }
    cout << "YES" << endl;
    for (ll i = 1; i <= m; i++) cout << ans[i];


    return 0;
}
/*

*/