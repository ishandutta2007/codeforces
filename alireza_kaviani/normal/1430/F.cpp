/* Generated by powerful Codeforces Tool
 * You can download the binary file in here https://github.com/xalanq/cf-tool (Windows, macOS, Linux)
 * Author: alireza_kaviani
 * Time: 2020-10-11 12:35:02
**/
#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<int, int> pii;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll LOG = 22;
const ll INF = 1e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n , k , dp[MAXN];
vector<pair<pll , ll>> vec;

int main() {
	ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);

	cin >> n >> k;
	for(int i = 0 ; i < n ; i++){
		int l , r , a;
		cin >> l >> r >> a;
		if(SZ(vec) == 0){
			vec.push_back({{l , r} , a});
			continue;
		}
		if(vec.back().X.X == l && vec.back().X.Y == r){
			vec[SZ(vec) - 1].Y += a;
		}
		else{
			vec.push_back({{l , r} , a});
		}
	}
	// cout << SZ(vec) << endl;
	n = SZ(vec);
	vec.push_back({{INF , INF} , INF});
	dp[n] = 0;
	for(int i = n - 1 ; i >= 0 ; i--){
		ll cur = 0 , cost = 0;
		dp[i] = INF;
		for(int j = i ; j < n ; j++){
			ll l = vec[j].X.X , r = vec[j].X.Y , a = vec[j].Y;
			cur += a;
			// cout << cur << endl;
			if(l + (cur - 1) / k > r){
				break;
			}
			// cout << j << endl;
			if(l + (cur + k - 1) / k <= vec[j + 1].X.X){
				dp[i] = min(dp[i] , dp[j + 1] + cost + (j == n - 1 ? cur : (cur + k - 1) / k * k));
			}
			cost += (cur - 1) / k * k;
			cur = (cur % k == 0 ? k : cur % k);
		}
		// cout << i << sep << dp[i] << endl;
	}
	cout << (dp[0] == INF ? -1 : dp[0]) << endl;

    return 0;
}
/*

*/