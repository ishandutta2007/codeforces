/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

set_random;

const ll MAXN = 100;
const ll INF = 1e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

vector<ll> adj[MAXN];
ll n , m , k , v , u , c , ans = INF , w[MAXN][MAXN] , dp[MAXN][MAXN][MAXN][2];

int main() {
    fast_io;
    memset(dp , 63 , sizeof(dp));
    for(ll i = 0 ; i < MAXN ; i++){
        for(ll j = 0 ; j < MAXN ; j++){
            dp[i][j][0][0] = dp[i][j][0][1] = 0;
            w[i][j] = INF;
        }
        dp[i][i][1][0] = dp[i][i][1][1] = 0;
    }

    cin >> n >> k >> m;
    for(ll i = 0 ; i < m ; i++){
        cin >> v >> u >> c;
        adj[v].push_back(u);
        w[v][u] = min(w[v][u] , c);
        dp[min(v , u)][max(v , u)][2][(v > u)] = w[v][u];
    }

    for(ll l = n ; l >= 1 ; l--){
        for(ll r = l ; r <= n ; r++){
            for(ll i = 3 ; i <= k ; i++){
                for(ll j = l + 1 ; j < r ; j++){
                    dp[l][r][i][1] = min({dp[l][r][i][1] , dp[l][j][i - 1][0] + w[r][l] , dp[l][j][i - 1][1] + w[r][j]});
                    dp[l][r][i][0] = min({dp[l][r][i][0] , dp[j][r][i - 1][0] + w[l][j] , dp[j][r][i - 1][1] + w[l][r]});
                }
            }
        }
    }

    for(ll i = 1 ; i <= n ; i++){
        for(ll j = i ; j <= n ; j++){
            ans = min({ans , dp[i][j][k][0] , dp[i][j][k][1]});
        }
    }
    cout << (ans >= INF ? -1 : ans) << endl;

    return 0;
}
/*

*/