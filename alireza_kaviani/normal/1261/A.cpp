/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll q, n, k;
string s;
vector<pll> ans;

ll MAIN() {
    ans = {};
    cin >> n >> k >> s;

    ll cnt = 0;
    for (ll i = 0; i < n; i++) {
        char c;
        if (i < 2 * k - 2) c = (i % 2 == 0 ? '(' : ')');
        else if (cnt < n / 2) c = '(';
        else c = ')';
        if (c == '(') cnt++;

        ll ind = -1;
        for (ll j = i; j < n; j++) {
            if (s[j] == c) {
                ind = j;
                break;
            }
        }
        reverse(s.begin() + i, s.begin() + ind + 1);
        ans.push_back({i, ind});
    }
    cout << ans.size() << endl;
    for (pll i : ans) cout << i.X + 1 << sep << i.Y + 1 << endl;
}

int main() {
    fast_io;

    cin >> q;
    while (q--) MAIN();

    return 0;
}
/*

*/