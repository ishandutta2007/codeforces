/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <vector>
#include <utility>
#include <iostream>
#include <cmath>
#include <algorithm>
#include <set>
#include <string>
#include <cassert>

#define pb push_back
#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()
#define mp make_pair

using namespace std;

typedef long long int64;
typedef vector<int> vi;
typedef pair<int, int> ii;

class TaskD {
 public:
  vector<vector<int>> adj;
  int n;
  int best;

  ii dfs(int root, int parent) {
    vector<ii> children;
    for (int x : adj[root]) {
      if (x == parent) continue;
      children.push_back(dfs(x, root));
    }
    ii res(children.size(), 1);
    for (ii child : children) {
      res.first = max(res.first, max(child.first, child.second) + int(children.size()) - 1);
      res.second = max(res.second, child.first + 1);
    }
    int extra = parent < 0 ? 0 : 1;
    best = max(best, res.first + extra);
    best = max(best, res.second);
    if (children.size() >= 2) {
      int mf = 0;
      int mf2 = 0;
      for (ii child : children) {
        if (child.first > mf) {
          mf2 = mf;
          mf = child.first;
        } else if (child.first > mf2) {
          mf2 = child.first;
        }
      }
      best = max(best, 1 + mf + mf2);
      mf = 0;
      mf2 = 0;
      for (ii child : children) {
        int got = max(child.first, child.second);
        if (got > mf) {
          mf2 = mf;
          mf = got;
        } else if (got > mf2) {
          mf2 = got;
        }
      }
      best = max(best, mf + mf2 + int(children.size()) - 2 + extra);
    }
    return res;
  }

  void solveOne(istream &in, ostream &out) {
    in >> n;
    adj = vector<vector<int>>(n);
    for (int i = 0; i < n - 1; ++i) {
      int a;
      int b;
      in >> a >> b;
      --a;
      --b;
      adj[a].push_back(b);
      adj[b].push_back(a);
    }
    best = 0;
    dfs(0, -1);
    out << best << "\n";
  }

  void solve(std::istream &in, std::ostream &out) {
    int nt = 1;
    for (int it = 0; it < nt; ++it) {
      solveOne(in, out);
    }
  }
};


int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  TaskD solver;
  std::istream& in(std::cin);
  std::ostream& out(std::cout);
  solver.solve(in, out);
  return 0;
}