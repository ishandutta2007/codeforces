/* Generated by powerful Codeforces Tool
 * You can download the binary file in here https://github.com/xalanq/cf-tool (Windows, macOS, Linux)
 * Author: alireza_kaviani
 * Time: 2020-08-31 10:12:27
**/
#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<int, int> pii;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 2e5 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n , k , sum , A[MAXN] , inv[MAXN] , fact[MAXN];

ll C(ll n , ll r){
	if(r < 0 || r > n || n < 0)	return 0;
	return fact[n] * inv[r] % MOD * inv[n - r] % MOD;
}

ll S(ll n , ll k){
	if(n < k)	return 0;
	ll res = 0;
	for(int i = 0 ; i <= k ; i++){
		ll cur = C(k , i) * poww(i , n , MOD) % MOD;
		if(i % 2 == k % 2)	res += cur;
		else	res -= cur;
	}
	res = (res % MOD + MOD) % MOD;
	return res * inv[k] % MOD;
}

int main() {
	ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);

	fact[0] = inv[0] = 1;
	for(int i = 1 ; i < MAXN ; i++){
		fact[i] = fact[i - 1] * i % MOD;
		inv[i] = poww(fact[i] , MOD - 2 , MOD);
	}
	cin >> n >> k;
	for(int i = 0 ; i < n ; i++)	cin >> A[i] , sum += A[i];
	ll x = ((n + k - 1) * S(n - 1 , k) + S(n - 1 , k - 1)) % MOD;
	//cout << S(n - 1 , k) << sep << S(n - 1 , k - 1) << endl;
	//cout << x << endl;
	sum %= MOD;
	cout << x * sum % MOD << endl;

    return 0;
}
/*

*/