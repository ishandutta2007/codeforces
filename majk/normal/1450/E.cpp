/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author majk
 */

#ifndef MAJK_LIB
#define MAJK_LIB

#include <vector>
#include <stack>
#include <iostream>
#include <fstream>
#include <unordered_map>
#include <unordered_set>
#include <map>
#include <iomanip>
#include <set>
#include <functional>
#include <algorithm>
#include <numeric>
#include <cassert>
#include <cmath>
#include <string>
#include <queue>
#include <array>
#include <bitset>
using namespace std;

#define x first
#define y second
typedef std::pair<int,int> pii; typedef long long ll; typedef unsigned long long ull; typedef unsigned int ui; typedef pair<ui,ui> puu;

template <typename T, typename U> std::istream&operator>>(std::istream&i, pair<T,U>&p) {i >> p.x >> p.y; return i;}
template<typename T>std::istream&operator>>(std::istream&i,vector<T>&t) {for(auto&v:t){i>>v;}return i;}
template <typename T, typename U> std::ostream&operator<<(std::ostream&o, const pair<T,U>&p) {o << p.x << ' ' << p.y; return o;}
template<typename T>std::ostream&operator<<(std::ostream&o,const vector<T>&t) {if(t.empty())o<<'\n';for(size_t i=0;i<t.size();++i){o<<t[i]<<" \n"[i == t.size()-1];}return o;}
template<typename T> using minheap = priority_queue<T, vector<T>, greater<T>>;
template<typename T> using maxheap = priority_queue<T, vector<T>, less<T>>;
ui logceil(ll x) { return x?8*sizeof(ll)-__builtin_clzll(x):0; }

namespace std { template<typename T,typename U>struct hash<pair<T,U>>{hash<T>t;hash<U>u;size_t operator()(const pair<T,U>&p)const{return t(p.x)^(u(p.y)<<7);}}; }
template<typename T,typename F>T bsh(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){l=m+1;r=m;}else{h=m-1;}}return r;}
template<typename F> double bshd(double l,double h,const F&f,double p=1e-9){ui r=3+(ui)log2((h-l)/p);while(r--){double m=(l+h)/2;if(f(m)){l=m;}else{h=m;}}return (l+h)/2;}
template<typename T,typename F>T bsl(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){h=m-1;r=m;}else{l=m+1;}}return r;}
template<typename F> double bsld(double l,double h,const F&f){ui r=200;while(r--){double m=(l+h)/2;if(f(m)){h=m;}else{l=m;}}return (l+h)/2;}
template<typename T> T gcd(T a,T b) { if (a<b) swap(a,b); return b?gcd(b,a%b):a; }


template<typename T>class vector2:public vector<vector<T>>{public:vector2(){} vector2(size_t a,size_t b,T t=T()):vector<vector<T>>(a,vector<T>(b,t)){}};
template<typename T>class vector3:public vector<vector2<T>>{public:vector3(){} vector3(size_t a,size_t b,size_t c,T t=T()):vector<vector2<T>>(a,vector2<T>(b,c,t)){}};
template<typename T>class vector4:public vector<vector3<T>>{public:vector4(){} vector4(size_t a,size_t b,size_t c,size_t d,T t=T()):vector<vector3<T>>(a,vector3<T>(b,c,d,t)){}};
template<typename T>class vector5:public vector<vector4<T>>{public:vector5(){} vector5(size_t a,size_t b,size_t c,size_t d,size_t e,T t=T()):vector<vector4<T>>(a,vector4<T>(b,c,d,e,t)){}};


#endif

class ECapitalism {
public:



    void solve(istream& cin, ostream& cout) {
        int N, M;
        vector<vector<pii>> E;

        cin >> N >> M;
        E.resize(N);
        for (int i = 0; i < M; ++i) {
            int a, b, c;
            cin >> a >> b >> c;
            --a;
            --b;
            E[a].push_back({b, c});
            E[b].push_back({a, -c});
        }

        auto solve = [&](int beg, vector<int>&LO, vector<int>&HI) {
            vector<bool> Det(N, false);
            Det[beg] = true;
            bool changed = true;
            while (changed) {
                changed = false;
                for (int i = 0; i < N; ++i) {
                    if (!Det[i]) continue;
                    for (pii j: E[i]) {
                        int lo = LO[i] + j.y;
                        int hi = HI[i] + j.y;
                        if (!j.y) {
                            --lo;
                            ++hi;
                        }
                        if (!Det[j.x]) {
                            Det[j.x] = true;
                            LO[j.x] = lo;
                            HI[j.x] = hi;
                            changed = true;
                        } else {
                            if (abs(LO[j.x]) % 2 != abs(lo) % 2) {
                                return false;
                            }

                            if (lo > LO[j.x]) {
                                LO[j.x] = lo;
                                changed = true;
                            }
                            if (hi < HI[j.x]) {
                                HI[j.x] = hi;
                                changed = true;
                            }
                            if (LO[j.x] > HI[j.x]) {
                                return false;
                            }
                        }
                    }
                }
            }
            return true;
        };

        vector<int> LO(N, 0), HI(N, 0);
        if (!solve(0, LO, HI)) {
            cout << "NO\n";
            return;
        }

        pair<int, vector<int>> Best{-1, {}};
        for (int i = 0; i < N; ++i) {
            vector<int> LL = LO, HH = HI;
            HH[i] = LL[i];
            solve(i, LL, HH);

            int lo = *min_element(HH.begin(),HH.end());
            for (int &h: HH) h -= lo;
            Best = max(Best, {*max_element(HH.begin(),HH.end()), HH});
        }


        cout << "YES\n";
        cout << Best.x << '\n';
        cout << Best.y;
    }
};



int main() {
	ios_base::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr);
	ECapitalism solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
    return 0;
}