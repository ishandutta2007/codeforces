/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

// Actual solution is at the bottom

#undef NDEBUG

#include <algorithm>
#include <array>
#include <bitset>
#include <cassert>
#include <climits>
#include <cstdint>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <memory>
#include <numeric>
#include <queue>
#include <random>
#include <set>
#include <stack>
#include <string>
#include <unordered_set>
#include <unordered_map>
#include <vector>
// AtCoder library from https://github.com/atcoder/ac-library
// #include "../atcoder/all"

#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()

using namespace std;

typedef int64_t int64;
typedef pair<int, int> ii;

class ADoremysIQ {
 public:
  void solveOne() {
    int n;
    cin >> n;
    int q;
    cin >> q;
    vector<int> a(n);
    for (auto& x : a) cin >> x;
    int left = -1;
    int right = n;
    while (right - left > 1) {
      int middle = (left + right) / 2;
      int cur = q;
      int score = 0;
      for (int i = 0; i < n; ++i) {
        if (i >= middle || a[i] <= cur) {
          ++score;
          if (a[i] > cur) --cur;
        }
      }
      if (cur >= 0) {
        right = middle;
      } else {
        left = middle;
      }
    }
    {
      int middle = right;
      int cur = q;
      int score = 0;
      for (int i = 0; i < n; ++i) {
        if (i >= middle || a[i] <= cur) {
          cout << '1';
          if (a[i] > cur) --cur;
        } else {
          cout << '0';
        }
      }
      cout << '\n';
    }
  }

  void solve() {
    int nt;
    cin >> nt;
    for (int it = 0; it < nt; ++it) {
      // cout << "Case #" << (it + 1) << ": ";
      solveOne();
    }
  }
};

// #define st_mtimespec st_mtim

int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(0);
    ADoremysIQ solver;


    solver.solve();
    return 0;
}