/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e5 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n, k, tot, A[MAXN], cnt[MAXN], lg[MAXN];
vector<ll> v;

int main() {
    fast_io;
    lg[1] = INF;
    for (ll i = 2; i < MAXN; i++) {
        ll x = MAXN;
        while (x >= i) {
            x /= i;
            lg[i]++;
        }
    }

    cin >> n >> k;
    for (ll i = 1; i < MAXN; i++) if (lg[i] >= k) v.push_back(poww(i, k, INF));
    for (ll i = 1; i <= n; i++) {
        cin >> A[i];
        ll x = A[i], ans = 1, can = 1;
        for (ll j = 2; j * j <= x; j++) {
            ll cnt = 0;
            while (x % j == 0) {
                cnt++;
                x /= j;
            }
            ll t = (k - cnt % k) % k;
            if (t > lg[j]) {
                can = 0;
                break;
            }
            ans *= poww(j, t, INF);
            if (ans > MAXN) {
                can = 0;
                break;
            }
        }
        if (x != 1) {
            ll t = k - 1;
            if (t > lg[x]) {
                can = 0;
            } else {
                ans *= poww(x, t, INF);
                if (ans > MAXN) can = 0;
            }
        }
        if (can == 0) continue;
        for (ll j : v) {
            if (j * ans >= MAXN) continue;
            tot += cnt[j * ans];
        }
        cnt[A[i]]++;
    }
    cout << tot << endl;

    return 0;
}
/*

*/