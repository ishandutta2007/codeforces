/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Azat Ismagilov
 */

/**********.*****.**************************:-******-:*******************
**********......:*****************+@%@*+#@@@+.****.***********************
...------........-*+*********+%#####@@@##########*************************
********:........----------%@#####################@@-...............------
**********......:********@%#####@###################@#@=+***************::
*********.:****--******%##@#####@#######################@*+***************
********.*******:-**+@@####@#@@@#################@#########=**************
*******-*********:*@@@######@###############################=*************
*****--**********%%@##@########@#############################=:***********
****.************+##################@#@@#####################@************
***.*************%######################@@###################=***********-
*-:**************=##########@@%%%%=%@=%=%=%@################@@**********.*
.****************########%++***+++****+++=+===+++***+=%@######%*******:-**
****************+#######%+*::::::::::::***********:::::**@@###%******.:***
****************#######@%*:::::::::::::::*:*****:::::::::*@@##@*****.*****
****************######@%+*:::::::-::::::::::::::::::::::::=@##%****-******
.......-------:*######=::::::----------:::::::::::::::::::+###:**--*******
............:==:%####=:::::----:-:::::::::::::::::::::::::=@##:-.:********
************=@++*%##@::::*=%%%@@###@=***::::::::::::::::::=@#@*..*********
************=**+@+@#*:::**+++%@#@###%@%%+*::*+=======*::::*##-:**.********
*************:=%%:%*::::*+=%##%###=@@@%=*::*=%@@@%%@@#@%::+#@:****.*******
:**************==:=:::--::::*++++=%@@@%*:--*%#@####@#=+***@@%@*****.******
--**************:-*::--------::**+***:::---*+%%%%%%@@%+*::#*@%******.*****
*:-************---*::::-----------::--:---::::+++++**:::::%*%********-:***
**:.************++*:::::--------::**+------::::::::::::::*++**********--**
****.**************::::::-----::**==:-------+*:::::---:::**************:-*
*****.***********.*::::::::-:::***:*+@**::**=+*::::::::::****************-
******.*:*%@######+::::::::::::::::::++++=******::::::::******************
******:############*::::::::****::::::*+*:*:*:***::::::*******************
******#############***::*:*:*+==@@##=======:*+***:::*:********************
******#############:*+**********:*++**+**++=%=***:*::*********************
.....##############::*++**************+***:*********###+******************
***:##############@*:**+=***:::**++===++***********#####%.................
*:*###############******++=+*:::::::*:::::*::***#########=****************
**:################%*****++==++********::::*+++=##########+***************
*:%##################******++++==+=++++++++++++@############**************
######################@******+++++++++++++++++=%#############*************
########################+++++++++++++++++++++==@#############@***********.
#########################%+++++++++++++++++===%###############%********:-*
########################@=#=++++++++++++====%@##################******-**/

#include <bits/stdc++.h>

#define int long long
#define fs first
#define sc second
#define pb push_back
#define ppb pop_back
#define pf push_front
#define ppf pop_front
#define mp make_pair
#define len(v) ((int)v.size())
#define vc vector
#define pr pair
#define endd "\n"; return;
#define all(v) v.begin(), v.end()

using namespace std;

const int MAXN = 1e5;
const int INF = 1e18;
const int MOD = 1e9 + 7;

class TaskC {
public:
    void solve(std::istream &in, std::ostream &out) {
        int n, m;
        in >> n >> m;
        int a[n][m];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                in >> a[i][j];
            }
        }
        vc<pr<bool, int>> ans;
        int mini = INF;
        for (int j = 0; j < m; j++) {
            mini = min(mini, a[0][j]);
        }
        for (int j = 0; j < m; j++) {
            int tek = a[0][j] - mini;
            for (int i = 0; i < tek; i++) {
                ans.pb(mp(1, j));
            }
            for (int i = 0; i < n; i++) {
                a[i][j] -= tek;
            }
        }
        for (int i = 0; i < n; i++) {
            int tek = a[i][0];
            for (int j = 0; j < m; j++) {
                if (a[i][j] < 0 || a[i][j] != tek) {
                    out << -1 << endd;
                }
            }
        }
        mini = INF;
        for (int i = 0; i < n; i++) {
            mini = min(mini, a[i][0]);
        }
        for (int i = 0; i < n; i++) {
            int tek = a[i][0] - mini;
            for (int j = 0; j < tek; j++) {
                ans.pb(mp(0, i));
            }
            for (int j = 0; j < m; j++) {
                a[i][j] -= tek;
            }
        }
        int tek = a[0][0];
        for (int j = 0; j < m; j++) {
            for (int i = 0; i < n; i++) {
                if (a[i][j] < 0 || a[i][j] != tek) {
                    out << -1 << endd;
                }
            }
        }
        if (n < m) {
            for (int i = 0; i < n * a[0][0]; i++) {
                ans.pb(mp(0, (i % n)));
            }
        } else {
            for (int i = 0; i < m * a[0][0]; i++) {
                ans.pb(mp(1, (i % m)));
            }
        }
        out << len(ans) << endl;
        for (auto v : ans) {
            if (v.fs) {
                out << "col " << v.sc + 1 << endl;
            } else {
                out << "row " << v.sc + 1 << endl;
            }
        }
    }
};


main() {
    TaskC solver;
    std::istream &in(std::cin);
    std::ostream &out(std::cout);
    solver.solve(in, out);
    return 0;
}