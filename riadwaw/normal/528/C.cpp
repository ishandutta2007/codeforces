/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author RiaD
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <vector>


#include <iterator>

#include <string>
#include <stdexcept>
#ifdef SPCPPL_DEBUG
	#define SPCPPL_ASSERT(condition) \
	if(!(condition)) { \
		throw std::runtime_error(std::string() + #condition + " in line " + std::to_string(__LINE__) + " in " + __PRETTY_FUNCTION__); \
	}
#else
	#define SPCPPL_ASSERT(condition)
#endif



/**
* Support decrementing and multi-passing, but not declared bidirectional(or even forward) because
* it's reference type is not a reference.
*
* It doesn't return reference because
* 1. Anyway it'll not satisfy requirement [forward.iterators]/6
*   If a and b are both dereferenceable, then a == b if and only if *a and
*   b are bound to the same object.
* 2. It'll not work with reverse_iterator that returns operator * of temporary which is temporary for this iterator
*
* Note, reverse_iterator is not guaranteed to work  now too since it works only with bidirectional iterators,
* but it's seems to work at least on my implementation.
*
* It's not really useful anywhere except iterating anyway.
*/
template <typename T>
class IntegerIterator : public std::iterator<std::input_iterator_tag, T, std::ptrdiff_t, T*, T> {
public:
	explicit IntegerIterator(int value): value(value) {

	}

	IntegerIterator& operator++ () {
		++value;
		return *this;
	}

	IntegerIterator operator++ (int) {
		IntegerIterator copy = *this;
		++value;
		return copy;
	}

	IntegerIterator& operator-- () {
		--value;
		return *this;
	}

	IntegerIterator operator-- (int) {
		IntegerIterator copy = *this;
		--value;
		return copy;
	}

	T operator * () const {
		return value;
	}

	bool operator == (IntegerIterator rhs) {
		return value == rhs.value;
	}

	bool operator != (IntegerIterator rhs) {
		return !(*this == rhs);
	}
private:
	T value;
};

template <typename T>
class IntegerRange {
public:
	IntegerRange(T begin, T end): begin_(begin), end_(end) {

	}

	IntegerIterator<T> begin() const {
		return IntegerIterator<T>(begin_);
	}

	IntegerIterator<T> end() const {
		return IntegerIterator<T>(end_);
	}

private:
	T begin_;
	T end_;
};

template <typename T>
class ReversedIntegerRange {
	typedef std::reverse_iterator<IntegerIterator<T>> IteratorType;
public:
	ReversedIntegerRange(T begin, T end): begin_(begin), end_(end) {

	}

	IteratorType begin() const {
		return IteratorType(IntegerIterator<T>(begin_));
	}

	IteratorType end() const {
		return IteratorType(IntegerIterator<T>(end_));
	}

private:
	T begin_;
	T end_;
};

template <typename T>
IntegerRange<T> range(T to) {
	SPCPPL_ASSERT(to >= 0);
	return IntegerRange<T>(0, to);
}

template <typename T>
IntegerRange<T> range(T from, T to) {
	SPCPPL_ASSERT(from <= to);
	return IntegerRange<T>(from, to);
}

template <typename T>
ReversedIntegerRange<T> downrange(T from) {
	SPCPPL_ASSERT(from >= 0);
	return ReversedIntegerRange<T>(from, 0);
}

template <typename T>
ReversedIntegerRange<T> downrange(T from, T to) {
	SPCPPL_ASSERT(from >= to);
	return ReversedIntegerRange<T>(from, to);
}

using namespace std;

class TaskC {
public:

	vector<char> edges;
	vector<vector<pair<int, int>>> g;

	vector<pair<int, int>> res;

	int cnt = 0;

	void go(int v) {
		//cerr << v << ' ' << g[v].size() << endl;
		while(!g[v].empty()) {
			if(edges[g[v].back().second]) {
				g[v].pop_back();
				continue;
			}
			int to = g[v].back().first;
			edges[g[v].back().second] = true;
			g[v].pop_back();
			go(to);

			res.push_back(make_pair(v, to));
			++cnt;
		}
	}

	void solve(std::istream& in, std::ostream& out) {
		int n, m;
		in >> n >> m;
		g.resize(n);
		for(int i: range(m)) {
			int x, y;
			in >> x >> y;
			--x, --y;

			g[x].push_back(make_pair(y, edges.size()));
			g[y].push_back(make_pair(x, edges.size()));
			edges.push_back(false);
		}
		edges.reserve(n + m);


		vector<int> odd;

		for(int i : range(n)) {
			if(g[i].size() % 2) {
				odd.push_back(i);
			}
		}

		for (int i = 0; i < odd.size(); i += 2) {
			g[odd[i]].push_back(make_pair(odd[i + 1], edges.size()));
			g[odd[i + 1]].push_back(make_pair(odd[i], edges.size()));
			edges.push_back(false);
			++m;
		}

		if(m % 2 == 1) {
			++m;
			g[0].push_back(make_pair(0, edges.size()));
			g[0].push_back(make_pair(0, edges.size()));
			edges.push_back(false);
		}


		out << m << "\n";
		go(0);
		//cerr << cnt << endl;
		bool f = true;
		for(auto x: res) {
			if(f) {
				swap(x.first, x.second);
			}
			out << x.first + 1 << ' ' << x.second + 1 << "\n";
			f = !f;
		}


	}
};


int main() {
	std::cin.sync_with_stdio(false);
	std::cin.tie(0);
	std::cout << std::fixed;
	std::cout.precision(20);
	TaskC solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}