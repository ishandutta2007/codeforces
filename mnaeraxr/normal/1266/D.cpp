/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author marX
 */

#include <iostream>
#include <fstream>

#include <bits/stdc++.h>

using namespace std;

class DDecreasingDebts {
public:
    void solve(std::istream &in, std::ostream &out) {
        int n, m;
        in >> n >> m;

        vector<long long> balance(n);

        for (int i = 0; i < m; ++i) {
            long long d;
            int u, v;

            in >> u >> v >> d;
            u--;
            v--;

            balance[u] -= d;
            balance[v] += d;
        }

        vector<int> pos, neg;

        for (int i = 0; i < n; ++i) {
            if (balance[i] < 0) neg.push_back(i);
            if (balance[i] > 0) pos.push_back(i);
        }

        for (auto &x : balance) {
            x = max(x, -x);
        }

        vector<pair<pair<int, int>, long long>> answer;

        for (int i = 0, j = 0; i < (int) pos.size() && j < (int) neg.size();) {
            int u = pos[i], v = neg[j];
            long long cancel = min(balance[u], balance[v]);

            answer.push_back({{v + 1, u + 1}, cancel});

            balance[u] -= cancel;
            balance[v] -= cancel;

            if (balance[u] == 0) ++i;
            if (balance[v] == 0) ++j;
        }

        out << answer.size() << endl;
        for (auto x : answer) {
            out << x.first.first << " " << x.first.second << " " << x.second << endl;
        }
    }
};


int main() {
    DDecreasingDebts solver;
    std::istream &in(std::cin);
    std::ostream &out(std::cout);
    solver.solve(in, out);
    return 0;
}