/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n, S[MAXN], ans, C, cnt1[MAXN], cnt2[MAXN], sum;

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    cin >> n;
    for (ll i = 0; i < n; i++) {
        ll l;
        cin >> l;
        ll mn = INF, mx = -INF, t = 0;
        for (ll j = 0; j < l; j++) {
            ll x;
            cin >> x;
            mn = min(mn, x);
            mx = max(mx, x);
            if (x > mn) t = 1;
        }
        C += t;
        if (t == 0) cnt1[mn]++, cnt2[mx]++;
    }
    ans += C * n * 2 - C * C;
    for (ll i = 0; i < MAXN; i++) {
        ans += sum * cnt2[i];
        sum += cnt1[i];
    }
    cout << ans << endl;


    return 0;
}
/*

*/