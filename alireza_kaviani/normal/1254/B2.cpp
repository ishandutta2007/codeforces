/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n, sum, g, ans = INF, A[MAXN], B[MAXN];
vector<ll> primes;

int main() {
    fast_io;

    cin >> n;
    for (ll i = 0; i < n; i++) cin >> A[i], sum += A[i], g = __gcd(g, A[i]);
    if (g != 1) return cout << 0 << endl, 0;

    ll x = sum;
    for (ll i = 2; i * i <= x; i++) {
        if (x % i == 0) {
            primes.push_back(i);
            while (x % i == 0) x /= i;
        }
    }
    if (x != 1) primes.push_back(x);

    for (ll i : primes) {
        for (ll j = 0; j < n; j++) B[j] = A[j] % i;
        ll s = 0, cost = 0;
        vector<ll> vec;
        for (ll j = 0; j < n; j++) {
            if (s <= i / 2 && s + B[j] > i / 2) vec.push_back(j);
            if (s + B[j] > i + i / 2) vec.push_back(j);
            s = (s + B[j]) % i;
        }
        ll t = 0, ind = 0;
        for (ll j = 0; j < n; j++) {
            while (B[j]) {
                ll x = min(B[j], i - t);
                B[j] -= x;
                t += x;
                cost += x * abs(j - vec[ind]);
                if (t >= i) {
                    t %= i;
                    ind++;
                }
            }
        }
        ans = min(ans, cost);
    }
    if (ans == INF) return cout << -1 << endl, 0;
    cout << ans << endl;

    return 0;
}
/*

*/