/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

pll seg[4 * MAXN];
ll lazy[4 * MAXN];

void Build(int id, int l, int r) {
    if (l + 1 == r) {
        seg[id] = {0, l};
        return;
    }
    int mid = (l + r) >> 1;
    Build(id * 2, l, mid);
    Build(id * 2 + 1, mid, r);
    seg[id] = max(seg[id * 2], seg[id * 2 + 1]);
}

void Update(int id, int l, int r, int ql, int qr, ll val) {
    if (r <= ql || qr <= l) return;
    if (ql <= l && r <= qr) {
        lazy[id] += val;
        return;
    }
    int mid = (l + r) >> 1;
    Update(id << 1, l, mid, ql, qr, val);
    Update(id << 1 | 1, mid, r, ql, qr, val);
    seg[id] = max(pll(seg[id << 1].X + lazy[id << 1], seg[id << 1].Y),
                  pll(seg[id << 1 | 1].X + lazy[id << 1 | 1], seg[id << 1 | 1].Y));
}

void update(int l, int r, ll val) { Update(1, 0, MAXN, l, r, val); }

ll n, x[MAXN], y[MAXN], c[MAXN];
vector<ll> All = {-1LL, ll(1.5e9)};
vector<pll> points[MAXN];
pair<ll, pll> ans = {0, {ll(1.5e9), ll(1.5e9)}};

int main() {
    fast_io;

    cin >> n;
    for (ll i = 1; i <= n; i++) {
        cin >> x[i] >> y[i] >> c[i];
        All.push_back(x[i]);
        All.push_back(y[i]);
    }
    Sort(All);
    All.resize(unique(all(All)) - All.begin());
    for (ll i = 1; i <= n; i++) {
        ll newX = lower_bound(all(All), x[i]) - All.begin(), newY = lower_bound(all(All), y[i]) - All.begin();
        if (y[i] >= x[i]) points[newY].push_back({newX, c[i]});
        else points[newX].push_back({newY, c[i]});
    }

    Build(1, 0, MAXN);
    for (ll i = 1; i < All.size(); i++) {
        update(0, i, All[i - 1] - All[i]);
        for (pll j : points[i]) {
            update(0, j.X + 1, j.Y);
        }
        pll res = seg[1];
        if (res.X == 0) continue;
        ans = max(ans, pair<ll, pll>(res.X, {All[res.Y], All[i]}));
    }

    cout << ans.X << endl << ans.Y.X << sep << ans.Y.X << sep << ans.Y.Y << sep << ans.Y.Y << endl;

    return 0;
}
/*

*/