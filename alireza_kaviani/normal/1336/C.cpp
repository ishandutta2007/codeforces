/* Generated by powerful Codeforces Tool
 * You can download the binary file in here https://github.com/xalanq/cf-tool (Windows, macOS, Linux)
 * Author: alireza_kaviani
 * Time: 2020-04-15 19:05:03
**/
#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 3e3 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 998244353; // 1e9 + 9;

ll n , m , ans , dp[MAXN][MAXN];
string s , t;

int main() {
    ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);

    cin >> s >> t;
    n = SZ(s) , m = SZ(t);
    reverse(all(s));
    s = "." + s , t = "." + t;

    for(ll i = 0 ; i <= n - m ; i++)    dp[i][0]++;
    for(ll i = 1 ; i <= n ; i++){
        for(ll j = 0 ; j <= m ; j++){
            if(t[j] == s[i])    dp[i][j] += dp[i - 1][j - 1];
            if(i - j <= n - m || s[i] == t[n - i + j + 1])  dp[i][j] += dp[i - 1][j];
            dp[i][j] %= MOD;
        }
        dp[i][m] += dp[i - 1][m];
        dp[i][m] %= MOD;
        //for(ll j = 0 ; j <= m ; j++)    cout << dp[i][j] << sep;
        //cout << endl;
        //if(i >= m)  for(ll j = 0 ; j <= m ; j++)    ans += dp[i][j];
    }
    ll ans = 0;
    for(ll j = 0 ; j <= m ; j++)    ans += dp[n][j];
    cout << ans % MOD << endl;

    return 0;
}
/*

*/