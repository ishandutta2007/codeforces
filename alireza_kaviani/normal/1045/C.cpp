/* Generated by powerful Codeforces Tool
 * You can download the binary file in here https://github.com/xalanq/cf-tool (Windows, macOS, Linux)
 * Author: alireza_kaviani
 * Time: 2020-04-05 17:18:46
**/
#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 2e5 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n , m , q , mark[MAXN] , H[MAXN] , par[LOG][MAXN];
vector<ll> adj[MAXN] , g[MAXN];

void DFS(ll v , ll p = 0){
    H[v] = H[p] + 1;
    mark[v] = 1;
    ll mn = p;
    for(ll u : adj[v]){
        if(!mark[u]){
            DFS(u , v);
            //mn[v] = min(mn[v] , mn[u]);
            //if(mn[u] >= H[v])    val[v] = 1;
        }
        else if(H[u] < H[mn]) mn = u;
    }
    g[mn].push_back(v);
    //cout << v << sep << mn[v] << sep << val[v] << endl;
}

void DFS2(ll v , ll p = 0){
    H[v] = H[p] + 1;
    par[0][v] = p;
    //cout << v << sep << val[v] << sep << ps[v] << endl;
    for(ll u : g[v])    if(u != p)    DFS2(u , v);
}

ll getPar(ll v , ll h){
    for(ll i = 0 ; i < LOG ; i++)   if(h & (1 << i))    v = par[i][v];
    return v;
}

ll LCA(ll v , ll u){
    if(H[v] > H[u]) swap(v , u);
    u = getPar(u , H[u] - H[v]);
    if(u == v)  return v;
    for(ll i = LOG - 1 ; i >= 0 ; i--)  if(par[i][v] != par[i][u])  v = par[i][v] , u = par[i][u];
    return par[0][v];
}

int main() {
    ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);

    cin >> n >> m >> q;
    for(ll i = 0 ; i < m ; i++){
        ll v , u;
        cin >> v >> u;
        adj[v].push_back(u);
        adj[u].push_back(v);
    }
    DFS(1);
    DFS2(1);
   // cout << endl;
   // for(ll i = 1 ; i <= n ; i++)    cout << i << sep << par[0][i] << endl;
    for(ll i = 1 ; i < LOG ; i++)   for(ll j = 1 ; j <= n ; j++)    par[i][j] = par[i - 1][par[i - 1][j]];
    for(ll i = 1 ; i <= n ; i++)    Sort(adj[i]);

    while(q--){
        ll v , u;
        cin >> v >> u;
        if(H[v] > H[u]) swap(v , u);
        ll lca = LCA(v , u);
        if(lca == v)    cout << H[u] - H[v] << endl;
        else{
            ll V = getPar(v , H[v] - H[lca] - 1);
            ll U = getPar(u , H[u] - H[lca] - 1);
            ll ind = lower_bound(all(adj[V]) , U) - adj[V].begin();
            //cout << V << sep << U << endl;
            cout << H[v] + H[u] - 2 * H[lca] - (ind != SZ(adj[V]) && adj[V][ind] == U) << endl;
        }
    }

    return 0;
}
/*

*/