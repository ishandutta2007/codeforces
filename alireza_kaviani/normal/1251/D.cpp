/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll q, n, s, L[MAXN], R[MAXN];

ll check(ll m) {
    vector<pll> v1, v2;
    for (ll i = 1; i <= n; i++) {
        if (R[i] >= m) v1.push_back({L[i], R[i]});
        if (R[i] < m) v2.push_back({L[i], R[i]});
    }
    if (v1.size() < (n + 1) / 2) return 0;
    sort(all(v1), greater<pll>());
    while (v1.size() > (n + 1) / 2) {
        v2.push_back(v1.back());
        v1.pop_back();
    }

    ll cost = 0;
    for (pll i : v1) cost += max(i.X, m);
    for (pll i : v2) cost += i.X;
    return cost <= s;
}

int main() {
    fast_io;

    cin >> q;
    while (q--) {
        cin >> n >> s;
        for (ll i = 1; i <= n; i++) cin >> L[i] >> R[i];

        ll l = -1, r = 2e9;
        while (r - l > 1) {
            ll mid = (l + r) / 2;
            if (check(mid)) l = mid;
            else r = mid;
        }
        cout << l << endl;
    }

    return 0;
}
/*

*/