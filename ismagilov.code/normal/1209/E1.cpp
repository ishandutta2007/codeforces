/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Azat Ismagilov
 */

#include <fstream>

#include <iostream>
#include <algorithm>
#include <vector>
#include <queue>
#include <numeric>
#include <set>
#include <map>
#include <bits/stdc++.h>

#define int long long
#define ld long double
#define fs first
#define sc second
#define pb push_back
#define ppb pop_back
#define pf push_front
#define ppf pop_front
#define mp make_pair
#define len(v) ((int)v.size())
#define vc vector
#define pr pair
#define all(v) v.begin(), v.end()
//#pragma GCC optimize("Ofast")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,tune=native")
//#pragma GCC optimize("unroll-loops")

using namespace std;

template<typename T, typename U>
inline ostream &operator<<(ostream &_out, const pair<T, U> &_p) {
    _out << _p.first << ' ' << _p.second;
    return _out;
}

template<typename T, typename U>
inline istream &operator>>(istream &_in, pair<T, U> &_p) {
    _in >> _p.first >> _p.second;
    return _in;
}

template<typename T>
inline ostream &operator<<(ostream &_out, const vector<T> &_v) {
    if (_v.empty()) { return _out; }
    _out << _v.front();
    for (auto _it = ++_v.begin(); _it != _v.end(); ++_it) { _out << ' ' << *_it; }
    return _out;
}

template<typename T>
inline istream &operator>>(istream &_in, vector<T> &_v) {
    for (auto &_i : _v) { _in >> _i; }
    return _in;
}

const int MAXN = 3e5;
const int INF = 1e9;
const int MOD = 1e9 + 7;

class E1VrashayaStolbciUproshennayaVersiya {
public:
    void solve(std::istream &in, std::ostream &out) {
        int n, m;
        in >> n >> m;
        vc<vc<int>> a(n, vc<int>(m));
        in >> a;
        vc<pr<int, int>> b(m);
        for (int i = 0; i < m; i++) {
            b[i] = {0, i};
            for (int j = 0; j < n; j++) {
                b[i].fs = max(b[i].fs, a[j][i]);
            }
        }
        sort(all(b));
        reverse(all(b));
        int ans = 0;
        for (int i = 0; i < pow(4, n); i++) {
            int d[n];
            int i1 = i;
            bool prav = 1;
            for (int j = 0; j < n; j++) {
                d[j] = i1 % 4;
                if (d[j] >= m) {
                    prav = 0;
                    break;
                }
                i1 /= 4;
            }
            if (!prav) {
                continue;
            }
            int tek = 0;
            for (int j = 0; j < min(4ll, m); j++) {
                int memans = 0;
                for (int ii = 0; ii < n; ii++) {
                    int mems = 0;
                    for (int ii1 = 0, ii2 = ii; ii1 < n; ii1++, ii2++) {
                        if (ii2 >= n) {
                            ii2 -= n;
                        }
                        if (d[ii1] == j) {
                            mems += a[ii2][b[j].sc];
                        }
                    }
                    memans = max(memans, mems);
                }
                tek += memans;
            }
            ans = max(ans, tek);
        }
        out << ans << endl;
    }
};


signed main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    E1VrashayaStolbciUproshennayaVersiya solver;
    std::istream &in(std::cin);
    std::ostream &out(std::cout);
    int n;
    in >> n;
    for (int i = 0; i < n; ++i) {
        solver.solve(in, out);
    }

    return 0;
}