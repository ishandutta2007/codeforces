/* Generated by powerful Codeforces Tool
 * You can download the binary file in here https://github.com/xalanq/cf-tool (Windows, macOS, Linux)
 * Author: alireza_kaviani
 * Time: 2020-09-08 19:05:04
**/
#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<int, int> pii;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

int n , m , dist[MAXN] , cur[MAXN] , ans[MAXN];
vector<pii> adj[MAXN];

int main() {
	ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);

	cin >> n >> m;
	for(int i = 0 ; i < m ; i++){
		int v , u , c;
		cin >> v >> u >> c;
		c++;
		adj[u].push_back({v , c});
	}

	fill(dist , dist + MAXN , MOD);
	queue<int> Q;
	Q.push(n);
	dist[n] = 0;
	while(!Q.empty()){
		int v = Q.front(); Q.pop();
		for(pii i : adj[v]){
			int u = i.X , c = i.Y;
			cur[u] |= c;
			if(cur[u] != 3){
				ans[u] = 2 - c;
			}
			if(cur[u] == 3 && dist[u] == MOD){
				dist[u] = dist[v] + 1;
				ans[u] = c - 1;
				Q.push(u);
			}
		}
	}
	cout << (dist[1] == MOD ? -1 : dist[1]) << endl;
	for(int i = 1 ; i <= n ; i++)	cout << ans[i];
    return 0;
}
/*

*/