/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author ei13333
 */

#include <bits/stdc++.h>

using namespace std;

using int64 = long long;
const int mod = 1e9 + 7;

string S;
int K;
int dp[1001][1001][2];
int dp2[1001];

class TaskC
{
public:

  int rec2(int bit)
  {
    if(bit == 1) {
      return (1);
    }
    if(~dp2[bit]) {
      return (dp2[bit]);
    }
    return (dp2[bit] = rec2(__builtin_popcount(bit)) + 1);
  }

  int rec(int idx, int bit, bool free)
  {
    if(idx == S.size()) {
      return (rec2(bit) == K);
    }
    if(~dp[idx][bit][free]) {
      return (dp[idx][bit][free]);
    }
    if(idx + 1 == S.size() && bit == 0) {
      return (K == 0);
    }
    int ret = 0;
    for(int i = free ? 1 : S[idx] - '0'; i >= 0; i--) {
      ret += rec(idx + 1, bit + i, free | (i != S[idx] - '0'));
      ret %= mod;
    }
    return (dp[idx][bit][free] = ret);
  }

  void solve(istream &cin, ostream &cout)
  {
    cin >> S;
    cin >> K;
    memset(dp, -1, sizeof(dp));
    memset(dp2, -1, sizeof(dp2));
    cout << rec(0, 0, 0) << endl;
  }
};


int main()
{
  cin.tie(0);
  ios::sync_with_stdio(false);
  cout << fixed << setprecision(12);

  TaskC solver;
  std::istream &in(std::cin);
  std::ostream &out(std::cout);
  solver.solve(in, out);
}