/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n, m, ans[MAXN], par[MAXN], W[MAXN], H[MAXN];
vector<ll> adj[MAXN];
vector<pll> E, Q[MAXN];

void DFS(ll v, ll p = 0) {
    par[v] = p;
    H[v] = H[p] + 1;
    for (ll u : adj[v]) if (u != p) DFS(u, v);
}

void update(ll v, ll u, ll w) {
    if (H[v] > H[u]) swap(v, u);
    while (H[u] != H[v]) {
        ans[u] = w;
        u = par[u];
    }
    while (u != v) {
        ans[u] = ans[v] = w;
        v = par[v];
        u = par[u];
    }
}

ll get(ll v, ll u) {
    ll res = INF;
    if (H[v] > H[u]) swap(v, u);
    while (H[u] != H[v]) {
        res = min(res, ans[u]);
        u = par[u];
    }
    while (u != v) {
        res = min(res, ans[v]);
        res = min(res, ans[u]);
        u = par[u];
        v = par[v];
    }
    return res;
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    fill(ans, ans + MAXN, 1);

    cin >> n;
    for (ll i = 1; i < n; i++) {
        ll v, u;
        cin >> v >> u;
        adj[v].push_back(u);
        adj[u].push_back(v);
        E.push_back({v, u});
    }

    cin >> m;
    for (ll i = 0; i < m; i++) {
        ll v, u, w;
        cin >> v >> u >> w;
        Q[w].push_back({v, u});
    }

    DFS(1);
    for (ll i = 0; i < MAXN; i++) {
        for (pll j : Q[i]) {
            ll v = j.X, u = j.Y;
            update(v, u, i);
        }
    }
    for (ll i = 0; i < MAXN; i++) {
        for (pll j : Q[i]) {
            ll v = j.X, u = j.Y;
            if (get(v, u) != i) return cout << -1 << endl, 0;
        }
    }
    for (pll i : E) {
        ll v = i.X, u = i.Y;
        if (H[v] > H[u]) swap(v, u);
        cout << ans[u] << sep;
    }


    return 0;
}
/*

*/