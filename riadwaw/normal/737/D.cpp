/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author RiaD
 */

#include <iostream>
#include <fstream>

#include <iostream>


#include <iterator>


#include <string>
#include <stdexcept>

#ifndef SPCPPL_ASSERT
	#ifdef SPCPPL_DEBUG
		#define SPCPPL_ASSERT(condition) \
		if(!(condition)) { \
			throw std::runtime_error(std::string() + #condition + " in line " + std::to_string(__LINE__) + " in " + __PRETTY_FUNCTION__); \
		}
	#else
		#define SPCPPL_ASSERT(condition)
	#endif
#endif


/**
* Support decrementing and multi-passing, but not declared bidirectional(or even forward) because
* it's reference type is not a reference.
*
* It doesn't return reference because
* 1. Anyway it'll not satisfy requirement [forward.iterators]/6
*   If a and b are both dereferenceable, then a == b if and only if *a and
*   b are bound to the same object.
* 2. It'll not work with reverse_iterator that returns operator * of temporary which is temporary for this iterator
*
* Note, reverse_iterator is not guaranteed to work  now too since it works only with bidirectional iterators,
* but it's seems to work at least on my implementation.
*
* It's not really useful anywhere except iterating anyway.
*/
template <typename T>
class IntegerIterator: public std::iterator<std::input_iterator_tag, T, std::ptrdiff_t, T*, T> {
public:
	explicit IntegerIterator(T value): value(value) {

	}

	IntegerIterator& operator++() {
		++value;
		return *this;
	}

	IntegerIterator operator++(int) {
		IntegerIterator copy = *this;
		++value;
		return copy;
	}

	IntegerIterator& operator--() {
		--value;
		return *this;
	}

	IntegerIterator operator--(int) {
		IntegerIterator copy = *this;
		--value;
		return copy;
	}

	T operator*() const {
		return value;
	}

	bool operator==(IntegerIterator rhs) const {
		return value == rhs.value;
	}

	bool operator!=(IntegerIterator rhs) const {
		return !(*this == rhs);
	}

private:
	T value;
};

template <typename T>
class IntegerRange {
public:
	IntegerRange(T begin, T end): begin_(begin), end_(end) {
		SPCPPL_ASSERT(begin <= end);
	}

	IntegerIterator<T> begin() const {
		return IntegerIterator<T>(begin_);
	}

	IntegerIterator<T> end() const {
		return IntegerIterator<T>(end_);
	}

private:
	T begin_;
	T end_;
};

template <typename T>
class ReversedIntegerRange {
	typedef std::reverse_iterator<IntegerIterator<T>> IteratorType;
public:
	ReversedIntegerRange(T begin, T end): begin_(begin), end_(end) {
		SPCPPL_ASSERT(begin >= end);
	}

	IteratorType begin() const {
		return IteratorType(IntegerIterator<T>(begin_));
	}

	IteratorType end() const {
		return IteratorType(IntegerIterator<T>(end_));
	}

private:
	T begin_;
	T end_;
};

template <typename T>
IntegerRange<T> range(T to) {
	return IntegerRange<T>(0, to);
}

template <typename T>
IntegerRange<T> range(T from, T to) {
	return IntegerRange<T>(from, to);
}

template <typename T>
IntegerRange<T> inclusiveRange(T to) {
	return IntegerRange<T>(0, to + 1);
}

template <typename T>
IntegerRange<T> inclusiveRange(T from, T to) {
	return IntegerRange<T>(from, to + 1);
}

template <typename T>
ReversedIntegerRange<T> downrange(T from) {
	return ReversedIntegerRange<T>(from, 0);
}

template <typename T>
ReversedIntegerRange<T> downrange(T from, T to) {
	return ReversedIntegerRange<T>(from, to);
}

template <typename T>
ReversedIntegerRange<T> inclusiveDownrange(T from) {
	return ReversedIntegerRange<T>(from + 1, 0);
}

template <typename T>
ReversedIntegerRange<T> inclusiveDownrange(T from, T to) {
	return ReversedIntegerRange<T>(from + 1, to);
}

#include <vector>
#include <cstring>
#include <array>



#include <numeric>

#include <type_traits>

template <typename T>
using range_iterator_traits = std::iterator_traits<typename std::decay<decltype(std::declval<T>().begin())>::type>;


template <typename R>
auto prefixSums(const R& range) -> std::vector<typename range_iterator_traits<R>::value_type> {
	std::vector<typename range_iterator_traits<R>::value_type> result(
			static_cast<std::size_t>(
					std::distance(std::begin(range), std::end(range)) + 1
			)
	);
	std::partial_sum(std::begin(range), std::end(range), result.begin() + 1);
	return result;
}


using namespace std;

int dp[2][4001][201][2];

class TaskD {
public:
	void solve(std::istream& in, std::ostream& out) {
		int n;
		in >> n;
		//n = 4000;
		vector<int> v(n);
		for (int i: range(n)) {
			in >> v[i];
		}

		auto ps = prefixSums(v);

		memset(dp, 0, sizeof dp);

		for (int k: inclusiveDownrange(99, 1)) {
			for (int i: inclusiveDownrange(n)) {
				for (int d: inclusiveDownrange(100, -100)) {
					int s = i + d;
					if (s < 0) {
						continue;
					}
					int j = n - s;
					if (j < i) {
						continue;
					}
					dp[k & 1][i][d + 100][0] = 0;
					dp[k & 1][i][d + 100][1] = 0;

					if (j - i < k) {
						continue;
					}
					if (j - i == k) {
						dp[k & 1][i][d + 100][0] = ps[j] - ps[i];
						dp[k & 1][i][d + 100][1] = -(ps[j] - ps[i]);
						continue;
					}

					if (k + 1 < 100 && d - (k + 1) >= -100) {
						dp[k & 1][i][d + 100][0] = max(
								ps[i + k] - ps[i] + dp[k & 1][i + k][d - k + 100][1],
								ps[i + k + 1] - ps[i] + dp[(k + 1) & 1][i + k + 1][d - (k + 1) + 100][1]
						);
					}

					if (d + k + 1 <= 100 && k + 1 < 100) {
						dp[k & 1][i][d + 100][1] = min(
								-(ps[j] - ps[j - k]) + dp[k & 1][i][d + k + 100][0],
								-(ps[j] - ps[j - (k + 1)]) + dp[(k + 1) & 1][i][d + (k + 1) + 100][0]
						);
					}
				}
			}
		}

		out << dp[1][0][100][0] << "\n";
	}
};


int main() {
	std::ios_base::sync_with_stdio(false);
	TaskD solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	in.tie(nullptr);
	out << std::fixed;
	out.precision(20);
	solver.solve(in, out);
	return 0;
}