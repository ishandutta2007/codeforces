import java.util.ArrayList;
import java.util.Map;
import java.util.List;
import java.util.HashMap;
import java.util.InputMismatchException;
import java.math.BigInteger;
import java.util.Iterator;
import java.io.*;
import java.util.Comparator;
import java.util.Arrays;
import java.util.Collection;

/**
 * Generated by Contest helper plug-in
 * Actual solution is at the bottom
 */
public class Main {
	public static void main(String[] args) {
		InputReader in = new StreamInputReader(System.in);
		PrintWriter out = new PrintWriter(System.out);
		run(in, out);
	}

	public static void run(InputReader in, PrintWriter out) {
		Solver solver = new TaskC();
		solver.solve(1, in, out);
		Exit.exit(in, out);
	}
}

abstract class InputReader {
	private boolean finished = false;

	public abstract int read();

	public int readInt() {
		int c = read();
		while (isSpaceChar(c))
			c = read();
		int sgn = 1;
		if (c == '-') {
			sgn = -1;
			c = read();
		}
		int res = 0;
		do {
			if (c < '0' || c > '9')
				throw new InputMismatchException();
			res *= 10;
			res += c - '0';
			c = read();
		} while (!isSpaceChar(c));
		return res * sgn;
	}

	public String readString() {
		int c = read();
		while (isSpaceChar(c))
			c = read();
		StringBuffer res = new StringBuffer();
		do {
			res.appendCodePoint(c);
			c = read();
		} while (!isSpaceChar(c));
		return res.toString();
	}

	private boolean isSpaceChar(int c) {
		return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
	}

	public void setFinished(boolean finished) {
		this.finished = finished;
	}

	public abstract void close();
}

class StreamInputReader extends InputReader {
	private InputStream stream;
	private byte[] buf = new byte[1024];
	private int curChar, numChars;

	public StreamInputReader(InputStream stream) {
		this.stream = stream;
	}

	public int read() {
		if (numChars == -1)
			throw new InputMismatchException();
		if (curChar >= numChars) {
			curChar = 0;
			try {
				numChars = stream.read(buf);
			} catch (IOException e) {
				throw new InputMismatchException();
			}
			if (numChars <= 0)
				return -1;
		}
		return buf[curChar++];
	}

	public void close() {
		try {
			stream.close();
		} catch (IOException ignored) {
		}
	}
}

class Exit {
	private Exit() {
	}

	public static void exit(InputReader in, PrintWriter out) {
		in.setFinished(true);
		in.close();
		out.close();
	}
}

interface Solver {
	public void solve(int testNumber, InputReader in, PrintWriter out);
}

class Pair<U, V> implements Comparable<Pair<U, V>> {
	public final U first;
	public final V second;

	public static<U, V> Pair<U, V> makePair(U first, V second) {
		return new Pair<U, V>(first, second);
	}

	private Pair(U first, V second) {
		this.first = first;
		this.second = second;
	}

	public boolean equals(Object o) {
		if (this == o) return true;
		if (o == null || getClass() != o.getClass()) return false;

		Pair pair = (Pair) o;

		return !(first != null ? !first.equals(pair.first) : pair.first != null) && !(second != null ? !second.equals(pair.second) : pair.second != null);

	}

	public int hashCode() {
		int result = first != null ? first.hashCode() : 0;
		result = 31 * result + (second != null ? second.hashCode() : 0);
		return result;
	}

	public String toString() {
		return "(" + first + "," + second + ")";
	}

	public int compareTo(Pair<U, V> o) {
		int value = ((Comparable<U>)first).compareTo(o.first);
		if (value != 0)
			return value;
		return ((Comparable<V>)second).compareTo(o.second);
	}
}

class IOUtils {

	public static Pair<Integer, Integer> readIntPair(InputReader in) {
		int first = in.readInt();
		int second = in.readInt();
		return Pair.makePair(first, second);
	}

	public static int[] readIntArray(InputReader in, int size) {
		int[] array = new int[size];
		for (int i = 0; i < size; i++)
			array[i] = in.readInt();
		return array;
	}

	public static Pair<Integer, Integer>[] readIntPairArray(InputReader in, int size) {
		@SuppressWarnings({"unchecked"})
		Pair<Integer, Integer>[] result = new Pair[size];
		for (int i = 0; i < size; i++)
			result[i] = readIntPair(in);
		return result;
	}

	}

class TaskC implements Solver {
	public void solve(int testNumber, InputReader in, PrintWriter out) {
		int vertexCount = in.readInt();
		Pair<Integer, Integer>[] tree = IOUtils.readIntPairArray(in, vertexCount);
		int[] sorted = new int[vertexCount];
		for (int i = 0; i < vertexCount; i++)
			sorted[i] = tree[i].second;
		Arrays.sort(sorted);
		Map<Integer, Integer> index = new HashMap<Integer, Integer>();
		for (int i = 0; i < vertexCount; i++)
			index.put(sorted[i], i);
		int[] left = new int[vertexCount];
		int[] right = new int[vertexCount];
		int[] parent = new int[vertexCount];
		Arrays.fill(left, -1);
		Arrays.fill(right, -1);
		Arrays.fill(parent, -1);
		int root = -1;
		for (int i = 0; i < vertexCount; i++) {
			if (tree[i].first == -1) {
				root = index.get(tree[i].second);
				continue;
			}
			int parentIndex = index.get(tree[tree[i].first - 1].second);
			int currentIndex = index.get(tree[i].second);
			if (parentIndex < currentIndex)
				right[parentIndex] = currentIndex;
			else
				left[parentIndex] = currentIndex;
			parent[currentIndex] = parentIndex;
		}
		int queryCount = in.readInt();
		int[] queries = IOUtils.readIntArray(in, queryCount);
		double[] answer = new double[queryCount];
		long[] sum = new long[vertexCount];
		int[] count = new int[vertexCount];
		int[] order = new int[vertexCount];
		int size = 1;
		order[0] = root;
		for (int i = 0; i < size; i++) {
			if (left[order[i]] != -1) {
				order[size++] = left[order[i]];
				order[size++] = right[order[i]];
			}
		}
		for (int i = 1; i < size; i++) {
			int vertex = order[i];
			sum[vertex] = sum[parent[vertex]];
			count[vertex] = count[parent[vertex]] + 1;
			if (left[parent[vertex]] == vertex)
				sum[vertex] += sorted[parent[vertex] + 1];
			else
				sum[vertex] += sorted[parent[vertex] - 1];
		}
		for (int i : queries) {
			int vertex = -Arrays.binarySearch(sorted, i) - 2;
			if (vertex == -1 || left[vertex] != -1)
				vertex++;
			out.printf("%.12f\n", (double)sum[vertex] / count[vertex]);
		}
	}
}