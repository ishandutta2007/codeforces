/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

// Actual solution is at the bottom

#undef NDEBUG

#include <algorithm>
#include <array>
#include <bitset>
#include <cassert>
#include <climits>
#include <cstdint>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <memory>
#include <numeric>
#include <queue>
#include <random>
#include <set>
#include <stack>
#include <string>
#include <unordered_set>
#include <unordered_map>
#include <vector>
// AtCoder library from https://github.com/atcoder/ac-library
// #include "../atcoder/all"

#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()

using namespace std;

using int64 = int64_t;
using ii = pair<int, int>;

class DUporotiePerestanovki {
 public:
  void solveOne() {
    int n;
    cin >> n;
    vector<int> b(n);
    for (auto& x : b) cin >> x;
    int k = 0;
    while (k < n && b[k] > k) ++k;
    vector<int> a;
    vector<vector<int>> where(n + 2);
    for (int i = 0; i < n; ++i) {
      where[b[i]].push_back(i + 1);
    }
    int start;
    if (!where[0].empty()) start = 0; else start = n + 1;
    while (a.size() < n) {
      int y = -1;
      for (int x : where[start]) if (!where[x].empty()) {
        assert(y < 0);
        y = x;
      }
      for (int x : where[start]) if (x != y) a.push_back(x);
      if (y >= 0) a.push_back(y);
      start = y;
    }
    cout << k << "\n";
    for (int x : a) cout << x << " ";
    cout << "\n";
  }

  void solve() {
    int nt;
    cin >> nt;
    for (int it = 0; it < nt; ++it) {
      // cout << "Case #" << (it + 1) << ": ";
      solveOne();
      // cerr << "Case #" << (it + 1) << " done" << endl;
    }
  }
};

// #define st_mtimespec st_mtim

int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(0);
    DUporotiePerestanovki solver;


    solver.solve();
    return 0;
}