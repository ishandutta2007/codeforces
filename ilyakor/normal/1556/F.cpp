/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <algorithm>
#include <queue>
#include <vector>
#include <set>
#include <map>
#include <cassert>
#include <functional>
#include <sstream>
#include <cmath>

#include <cstring>
#include <cstdio>

using namespace std;

typedef pair<int, int> ii;
typedef long long int64;
typedef vector<int> vi;

#define pb push_back
#define mp make_pair
#define all(v) (v).begin(),(v).end()
#define sz(v) ((int)(v).size())

template<class T> T abs(T x) { return x >= 0 ? x : -x; }
template<class T> T sqr(T x) { return x * x; }

constexpr int mod = 1000 * 1000 * 1000 + 7;

int pw(int64 x, int64 y) {
    int64 res = 1;
    while (y) {
        if (y % 2 == 0) {
            y /= 2;
            x = (x * x) % mod;
        } else {
            --y;
            res = (res * x) % mod;
        }
    }
    return res;
}

int inv(int64 x) {
    return pw(x, mod - 2);
}

int Inv[14][14];
int guy_mask[14][1 << 14];
int anti_guy_mask[14][1 << 14];
int d[1 << 14];
int buf[1 << 14];
int mem[1 << 14];
int bl;

class TaskF {
public:
	void solve(std::istream& in, std::ostream& out) {
	    int n;
	    in >> n;
	    vi A(n);
	    for (int i = 0; i < n; ++i) {
	        in >> A[i];
	    }
        for (int i = 0; i < n; ++i)
            for (int j = 0; j < n; ++j)
                Inv[i][j] = inv(A[i] + A[j]);
	    for (int guy = 0; guy < n; ++guy) {
	        for (int mask = 0; mask < (1 << n); ++mask) {
	            int64 val = 1;
	            for (int i = 0; i < n; ++i) if ((mask >> i) % 2) {
	                if (i != guy) {
	                    val *= A[guy];
	                    val %= mod;
	                    val *= Inv[i][guy];
	                    val %= mod;
	                }
	            }
                guy_mask[guy][mask] = val % mod;

                val = 1;
                for (int i = 0; i < n; ++i) if ((mask >> i) % 2) {
                        if (i != guy) {
                            val *= A[i];
                            val %= mod;
                            val *= Inv[i][guy];
                            val %= mod;
                        }
                    }
                anti_guy_mask[guy][mask] = inv(val % mod);
	        }
	    }
	    int res = 0;
	    for (int s = 0; s < n; ++s) {
	        memset(d, 0, sizeof(d));
	        d[1 << s] = 1;
	        for (int mask = 0; mask < (1 << n); ++mask) {
                if ((mask >> s) % 2 == 0) continue;
                if (mask == (1 << s)) continue;
                int& cur = d[mask];
                cur = 0;
                int omask = (mask ^ (1 << s));
                bl = 0;
                for (int cut = omask; cut; cut = (cut - 1) & omask) {
                    buf[bl++] = cut;
                }
                mem[0] = 1;
                for (int i = bl - 1; i >= 0; --i) {
                    int cut = buf[i];
                    int guy = __builtin_ctz(cut);
                    assert((cut >> guy) % 2 == 1);
                    int val = ((int64) mem[cut ^ (1 << guy)] * (int64) guy_mask[guy][mask ^ cut]) % mod;
                    val = ((int64) val * (int64) anti_guy_mask[guy][cut ^ (1 << guy)]) % mod;
                    mem[cut] = val;
                    val = ((int64) val * (int64) d[mask ^ cut]) % mod;
                    cur = (cur + val) % mod;
                }
                cur = ((1 - cur) % mod + mod) % mod;
	        }
	        res += d[(1 << n) - 1];
	        res %= mod;
	    }
	    out << res << "\n";
	}
};


int main() {
	TaskF solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}