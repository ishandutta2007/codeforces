#define _CRT_SECURE_NO_WARNINGS
#include <algorithm>
#include <numeric>
#include <string>
#include <cstring>
#include <set>
#include <map>
#include <vector>
#include <queue>
#include <iostream>
#include <iterator>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <sstream>

using namespace std;

#define REP(i,n) for (int i=0,_n=(n); i < _n; i++)
#define REPD(i,n) for (int i=(n)-1; i >= 0; i--)
#define FOR(i,a,b) for (int _b=(b), i=(a); i <= _b; i++)
#define FORD(i,a,b) for(int i=(a),_b=(b);i>=_b;i--)
#define ALL(c) (c).begin(), (c).end()
#define SORT(c) sort(ALL(c))

#define CLEAR(x) memset(x,0,sizeof x);
#define CLEARA(x) memset(&x,0,sizeof x);
#define FILL(x,v) memset(x,v,sizeof x);
#define FILLA(x,v) memset(&x,v,sizeof x);

#define VAR(a,b) __typeof(b) a=(b)
#define FOREACH(it,c) for(VAR(it,(c).begin());it!=(c).end();++it)

#define REVERSE(c) reverse(ALL(c))
#define UNIQUE(c) SORT(c),(c).resize(unique(ALL(c))-(c).begin())
#define INF 0x7fffffff
#define X first
#define Y second
#define pb push_back
#define SZ(c) (int)(c).size()
#define MP make_pair
#define eps 1.0e-11
const double pi = acos(-1.0);

typedef pair<int, int> PII;
typedef vector<PII> VPII;
typedef vector<int> VI;
typedef vector<VI> VVI;
typedef long long LL;

queue<VI> q;
set<int> found;
VI rr[256];

const int data[256][6] = {
{-1,-1,-1,-1,-1,-1},
{1,-1,-1,-1,-1,-1},
{1,2,-1,-1,-1,-1},
{1,3,-1,-1,-1,-1},
{1,4,-1,-1,-1,-1},
{1,5,-1,-1,-1,-1},
{1,2,6,-1,-1,-1},
{1,3,7,-1,-1,-1},
{1,8,-1,-1,-1,-1},
{1,9,-1,-1,-1,-1},
{1,2,10,-1,-1,-1},
{1,3,11,-1,-1,-1},
{1,4,12,-1,-1,-1},
{1,3,13,-1,-1,-1},
{1,2,3,14,-1,-1},
{1,3,15,-1,-1,-1},
{1,2,16,-1,-1,-1},
{1,2,17,-1,-1,-1},
{1,2,18,-1,-1,-1},
{1,9,19,-1,-1,-1},
{1,4,20,-1,-1,-1},
{1,5,21,-1,-1,-1},
{1,2,5,22,-1,-1},
{1,3,5,23,-1,-1},
{1,8,24,-1,-1,-1},
{1,3,25,-1,-1,-1},
{1,2,3,26,-1,-1},
{1,3,27,-1,-1,-1},
{1,4,6,28,-1,-1},
{1,3,5,29,-1,-1},
{1,2,6,30,-1,-1},
{1,3,7,31,-1,-1},
{1,4,32,-1,-1,-1},
{1,4,33,-1,-1,-1},
{1,2,4,34,-1,-1},
{1,2,17,35,-1,-1},
{1,4,36,-1,-1,-1},
{1,9,37,-1,-1,-1},
{1,2,9,38,-1,-1},
{1,3,9,39,-1,-1},
{1,8,40,-1,-1,-1},
{1,5,41,-1,-1,-1},
{1,2,5,42,-1,-1},
{1,3,5,43,-1,-1},
{1,4,5,44,-1,-1},
{1,5,45,-1,-1,-1},
{1,5,6,46,-1,-1},
{1,3,11,47,-1,-1},
{1,2,16,48,-1,-1},
{1,2,6,49,-1,-1},
{1,2,6,50,-1,-1},
{1,2,17,51,-1,-1},
{1,4,6,52,-1,-1},
{1,3,13,53,-1,-1},
{1,2,6,54,-1,-1},
{1,3,13,55,-1,-1},
{1,8,12,56,-1,-1},
{1,3,7,57,-1,-1},
{1,2,3,7,58,-1},
{1,3,7,59,-1,-1},
{1,4,12,60,-1,-1},
{1,3,15,61,-1,-1},
{1,2,3,15,62,-1},
{1,3,7,63,-1,-1},
{1,8,64,-1,-1,-1},
{1,8,65,-1,-1,-1},
{1,2,8,66,-1,-1},
{1,4,33,67,-1,-1},
{1,2,17,68,-1,-1},
{1,2,17,69,-1,-1},
{1,2,17,70,-1,-1},
{1,2,3,17,71,-1},
{1,8,72,-1,-1,-1},
{1,9,73,-1,-1,-1},
{1,2,9,74,-1,-1},
{1,3,9,75,-1,-1},
{1,4,9,76,-1,-1},
{1,5,9,77,-1,-1},
{1,2,3,26,78,-1},
{1,2,3,19,79,-1},
{1,2,16,80,-1,-1},
{1,9,81,-1,-1,-1},
{1,2,10,82,-1,-1},
{1,5,41,83,-1,-1},
{1,4,20,84,-1,-1},
{1,2,17,85,-1,-1},
{1,2,5,21,86,-1},
{1,5,41,87,-1,-1},
{1,8,10,88,-1,-1},
{1,3,11,89,-1,-1},
{1,2,10,90,-1,-1},
{1,3,11,91,-1,-1},
{1,2,5,45,92,-1},
{1,5,11,93,-1,-1},
{1,2,6,22,94,-1},
{1,5,45,95,-1,-1},
{1,4,32,96,-1,-1},
{1,4,12,97,-1,-1},
{1,2,4,12,98,-1},
{1,4,33,99,-1,-1},
{1,4,12,100,-1,-1},
{1,3,25,101,-1,-1},
{1,2,4,34,102,-1},
{1,3,25,103,-1,-1},
{1,8,12,104,-1,-1},
{1,3,13,105,-1,-1},
{1,2,3,13,106,-1},
{1,3,13,107,-1,-1},
{1,4,12,108,-1,-1},
{1,3,27,109,-1,-1},
{1,2,3,27,110,-1},
{1,3,27,111,-1,-1},
{1,2,3,14,112,-1},
{1,9,13,113,-1,-1},
{1,2,3,14,114,-1},
{1,2,3,14,115,-1},
{1,4,5,14,116,-1},
{1,3,13,117,-1,-1},
{1,2,6,14,118,-1},
{1,2,17,51,119,-1},
{1,8,24,120,-1,-1},
{1,3,15,121,-1,-1},
{1,2,3,15,122,-1},
{1,3,15,123,-1,-1},
{1,4,5,15,124,-1},
{1,3,25,125,-1,-1},
{1,2,3,14,126,-1},
{1,3,7,15,127,-1},
{1,2,16,128,-1,-1},
{1,2,16,129,-1,-1},
{1,2,16,130,-1,-1},
{1,8,65,131,-1,-1},
{1,4,16,132,-1,-1},
{1,4,33,133,-1,-1},
{1,2,4,33,134,-1},
{1,3,15,135,-1,-1},
{1,2,17,136,-1,-1},
{1,2,17,137,-1,-1},
{1,2,17,138,-1,-1},
{1,2,3,17,139,-1},
{1,4,17,140,-1,-1},
{1,2,5,17,141,-1},
{1,2,17,35,142,-1},
{1,3,4,35,143,-1},
{1,2,16,144,-1,-1},
{1,2,18,145,-1,-1},
{1,2,18,146,-1,-1},
{1,9,73,147,-1,-1},
{1,4,36,148,-1,-1},
{1,9,37,149,-1,-1},
{1,2,9,37,150,-1},
{1,3,9,37,151,-1},
{1,8,72,152,-1,-1},
{1,2,17,153,-1,-1},
{1,2,3,19,154,-1},
{1,9,73,155,-1,-1},
{1,4,9,19,156,-1},
{1,9,37,157,-1,-1},
{1,4,6,38,158,-1},
{1,3,9,39,159,-1},
{1,4,32,160,-1,-1},
{1,4,20,161,-1,-1},
{1,2,18,162,-1,-1},
{1,9,81,163,-1,-1},
{1,4,20,164,-1,-1},
{1,4,33,165,-1,-1},
{1,2,5,41,166,-1},
{1,4,33,67,167,-1},
{1,8,40,168,-1,-1},
{1,5,21,169,-1,-1},
{1,2,4,34,170,-1},
{1,9,19,171,-1,-1},
{1,2,17,36,172,-1},
{1,5,21,173,-1,-1},
{1,2,10,41,174,-1},
{1,2,17,35,175,-1},
{1,2,5,22,176,-1},
{1,2,5,22,177,-1},
{1,2,5,22,178,-1},
{1,8,17,81,179,-1},
{1,4,20,180,-1,-1},
{1,5,45,181,-1,-1},
{1,2,5,45,182,-1},
{1,3,5,45,183,-1},
{1,4,5,45,184,-1},
{1,5,45,185,-1,-1},
{1,2,10,22,186,-1},
{1,2,17,51,187,-1},
{1,4,12,44,188,-1},
{1,5,21,189,-1,-1},
{1,2,9,38,190,-1},
{1,3,11,45,191,-1},
{1,8,64,192,-1,-1},
{1,8,24,193,-1,-1},
{1,2,8,24,194,-1},
{1,8,65,195,-1,-1},
{1,2,6,49,196,-1},
{1,2,6,49,197,-1},
{1,2,8,66,198,-1},
{1,4,33,67,199,-1},
{1,8,24,200,-1,-1},
{1,3,25,201,-1,-1},
{1,2,3,25,202,-1},
{1,3,25,203,-1,-1},
{1,2,17,68,204,-1},
{1,5,41,205,-1,-1},
{1,2,17,70,206,-1},
{1,2,17,69,207,-1},
{1,2,3,26,208,-1},
{1,2,3,26,209,-1},
{1,2,3,26,210,-1},
{1,2,3,26,211,-1},
{1,4,6,52,212,-1},
{1,4,17,49,213,-1},
{1,2,6,26,214,-1},
{1,3,5,43,215,-1},
{1,8,24,216,-1,-1},
{1,3,27,217,-1,-1},
{1,2,3,27,218,-1},
{1,3,27,219,-1,-1},
{1,4,5,44,220,-1},
{1,2,17,51,221,-1},
{1,2,9,74,222,-1},
{1,3,7,27,223,-1},
{1,4,32,48,224,-1},
{1,3,25,225,-1,-1},
{1,2,18,26,226,-1},
{1,8,33,97,227,-1},
{1,4,9,76,228,-1},
{1,4,33,49,229,-1},
{1,4,6,28,230,-1},
{1,4,33,99,231,-1},
{1,8,10,28,232,-1},
{1,3,5,29,233,-1},
{1,2,3,26,234,-1},
{1,3,5,29,235,-1},
{1,4,12,28,236,-1},
{1,3,5,29,237,-1},
{1,5,6,29,238,-1},
{1,3,7,29,239,-1},
{1,2,16,48,240,-1},
{1,2,6,30,241,-1},
{1,2,6,30,242,-1},
{1,3,27,243,-1,-1},
{1,4,6,30,244,-1},
{1,2,6,49,245,-1},
{1,2,6,30,246,-1},
{1,3,13,117,247,-1},
{1,8,10,30,248,-1},
{1,3,7,31,249,-1},
{1,2,6,50,250,-1},
{1,3,7,31,251,-1},
{1,4,6,28,252,-1},
{1,3,7,63,253,-1},
{1,2,3,7,63,254},
{1,2,17,51,255,-1}
};

string w(int i)
{
	string r = "e_x";
	r[1] = ('a'+i);
	return r;
}

int main()
{
//	freopen(".in","r",stdin);
//	freopen(".out","w",stdout);
	/*q.push(VI(1,1));
	while (!q.empty())
	{
		if (q.size() > 30000000) break;
		VI a = q.front();
		q.pop();
		if (!found.count(a.back()))
		{
			found.insert(a.back());
			printf("%d - %d - %d\n",a.back(),SZ(a),SZ(found));
			rr[a.back()] = a;
			if (SZ(found) == 255)
				break;
		}
		REP(i,SZ(a)) REP(j,SZ(a)) REP(k1,2) for (int k2 = 1; k2 <= 8; k2 *= 2)
		{
			if (k1 == 0 && i != 0) continue;
			int t = a[i]*k1+a[j]*k2;
			if (t <= a.back() || t > 255) continue;
			a.push_back(t);
			q.push(a);
			a.pop_back();
		}
	}
	REP(i,256) if (!found.count(i)) printf("? %d\n",i);
	freopen("gen.out","w",stdout);
	FOR(i,1,255)
	{
		printf("{");
		REP(j,max(6,SZ(rr[i])))
			printf(",%d"+(j==0),j<SZ(rr[i])?rr[i][j]:-1);
		printf("},\n");
	}*/

	int n;
	scanf("%d",&n);
	VI a(1,1);
	vector<string> res;
	for (int ii = 1; ii < 6 && a.back() != n; ++ii)
	{
		int need = data[n][ii];
		REP(i,SZ(a)) REP(j,SZ(a)) REP(k1,2) for (int k2 = 1; k2 <= 8; k2 *= 2)
		{
			if (k1 == 0 && i != 0) continue;
			int t = a[i]*k1+a[j]*k2;
			if (t <= a.back() || t > 255 || t != need) continue;
			stringstream cmd;
			cmd << ("lea "+w(ii)+", [");
			if (k1)
				cmd << w(i) << " + ";
			if (k2 > 1)
				cmd << k2 << "*";
			cmd << w(j) << "]";
			res.pb(cmd.str());
			a.pb(t);
			goto ok;
		}
		printf("NOT FOUND\n");
ok:
		;
	}
	printf("%d\n",SZ(res));
	REP(i,SZ(res))
		printf("%s\n",res[i].data());
	return 0;
}