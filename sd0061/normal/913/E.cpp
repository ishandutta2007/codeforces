#include <bits/stdc++.h>
using namespace std;
typedef long long LL;
const int N = 200005;

map<string , string> HE , HT , HF;
bool update;

string Not(string a) {
    string b;
    for (auto c : a) {
        b += char('0' + !(c - '0'));
    }
    return b;
}

string And(string a , string b) {
    string c;
    for (int i = 0 ; i < 8 ; ++ i) {
        c += char('0' + ( (a[i] - '0') & (b[i] - '0')));
    }
    return c;
}

string Or(string a , string b) {
    string c;
    for (int i = 0 ; i < 8 ; ++ i) {
        c += char('0' + ( (a[i] - '0') | (b[i] - '0')));
    }
    return c;
}

bool check(string &A , string B) {
    //if (B.size() > 40) return 0;
    if (A.size() == 0 || B.size() < A.size() || (B.size() == A.size() && B < A)) {
        A = B;
        update = 1;
    }
    return update;
}


int main() {

    /*HF["00001111"] = "x";
    HF["00110011"] = "y";
    HF["01010101"] = "z";

    while ( 1) {


        update = 0;
        for (auto &it : HF) {
            check(HT[it.first] , it.second);
        }
        for (auto &it : HT) {
            check(HE[it.first] ,  it.second);
        }

        for (auto &it : HF) {
            if (check(HF[Not(it.first)] , "!" + it.second)) {
                break;
            }
        }


        if (update) continue;

        for (auto &i : HF) {
            for (auto &j : HT) {
                string kk = And(i.first , j.first);
                string pp = i.second + "&" + j.second;
                check(HT[kk] , pp);
                if (update) break;
            }
            if (update) break;
        }
        if (update) continue;

        for (auto &i : HT) {
            for (auto &j : HE) {
                string kk = Or(i.first , j.first);
                string pp = i.second + "|" + j.second;
                check(HE[kk] , pp);
                if (update) break;
            }
            if (update) break;
        }
        if (update) continue;

        for (auto &it : HE) {
            check(HF[it.first] , "(" + it.second + ")");
        }

        if (!update) break;
    }


    for (auto &it : HE) {
        cout << "HE[\"" + it.first + "\"]=\"" + it.second + "\";" << endl;
        //cout << it.first << ' ' << it.second << endl;
    }*/

    HE["00000000"]="!x&x";
    HE["00000001"]="x&y&z";
    HE["00000010"]="!z&x&y";
    HE["00000011"]="x&y";
    HE["00000100"]="!y&x&z";
    HE["00000101"]="x&z";
    HE["00000110"]="!y&x&z|!z&x&y";
    HE["00000111"]="(y|z)&x";
    HE["00001000"]="!y&!z&x";
    HE["00001001"]="!y&!z&x|x&y&z";
    HE["00001010"]="!z&x";
    HE["00001011"]="!z&x|x&y";
    HE["00001100"]="!y&x";
    HE["00001101"]="!y&x|x&z";
    HE["00001110"]="!(y&z)&x";
    HE["00001111"]="x";
    HE["00010000"]="!x&y&z";
    HE["00010001"]="y&z";
    HE["00010010"]="!x&y&z|!z&x&y";
    HE["00010011"]="(x|z)&y";
    HE["00010100"]="!x&y&z|!y&x&z";
    HE["00010101"]="(x|y)&z";
    HE["00010110"]="!x&y&z|!y&x&z|!z&x&y";
    HE["00010111"]="(x|y)&z|x&y";
    HE["00011000"]="!x&y&z|!y&!z&x";
    HE["00011001"]="!y&!z&x|y&z";
    HE["00011010"]="!x&y&z|!z&x";
    HE["00011011"]="!z&x|y&z";
    HE["00011100"]="!x&y&z|!y&x";
    HE["00011101"]="!y&x|y&z";
    HE["00011110"]="!(y&z)&x|!x&y&z";
    HE["00011111"]="x|y&z";
    HE["00100000"]="!x&!z&y";
    HE["00100001"]="!x&!z&y|x&y&z";
    HE["00100010"]="!z&y";
    HE["00100011"]="!z&y|x&y";
    HE["00100100"]="!x&!z&y|!y&x&z";
    HE["00100101"]="!x&!z&y|x&z";
    HE["00100110"]="!y&x&z|!z&y";
    HE["00100111"]="!z&y|x&z";
    HE["00101000"]="!(!x&!y|x&y|z)";
    HE["00101001"]="!(!x&!y|x&y|z)|x&y&z";
    HE["00101010"]="!z&(x|y)";
    HE["00101011"]="!z&(x|y)|x&y";
    HE["00101100"]="!x&!z&y|!y&x";
    HE["00101101"]="!x&!z&y|!y&x|x&z";
    HE["00101110"]="!y&x|!z&y";
    HE["00101111"]="!z&y|x";
    HE["00110000"]="!x&y";
    HE["00110001"]="!x&y|y&z";
    HE["00110010"]="!(x&z)&y";
    HE["00110011"]="y";
    HE["00110100"]="!x&y|!y&x&z";
    HE["00110101"]="!x&y|x&z";
    HE["00110110"]="!(x&z)&y|!y&x&z";
    HE["00110111"]="x&z|y";
    HE["00111000"]="!x&y|!y&!z&x";
    HE["00111001"]="!x&y|!y&!z&x|y&z";
    HE["00111010"]="!x&y|!z&x";
    HE["00111011"]="!z&x|y";
    HE["00111100"]="!x&y|!y&x";
    HE["00111101"]="!x&y|!y&x|x&z";
    HE["00111110"]="!(x&z)&y|!y&x";
    HE["00111111"]="x|y";
    HE["01000000"]="!x&!y&z";
    HE["01000001"]="!x&!y&z|x&y&z";
    HE["01000010"]="!x&!y&z|!z&x&y";
    HE["01000011"]="!x&!y&z|x&y";
    HE["01000100"]="!y&z";
    HE["01000101"]="!y&z|x&z";
    HE["01000110"]="!y&z|!z&x&y";
    HE["01000111"]="!y&z|x&y";
    HE["01001000"]="!(!x&!z|x&z|y)";
    HE["01001001"]="!(!x&!z|x&z|y)|x&y&z";
    HE["01001010"]="!x&!y&z|!z&x";
    HE["01001011"]="!x&!y&z|!z&x|x&y";
    HE["01001100"]="!y&(x|z)";
    HE["01001101"]="!y&(x|z)|x&z";
    HE["01001110"]="!y&z|!z&x";
    HE["01001111"]="!y&z|x";
    HE["01010000"]="!x&z";
    HE["01010001"]="!x&z|y&z";
    HE["01010010"]="!x&z|!z&x&y";
    HE["01010011"]="!x&z|x&y";
    HE["01010100"]="!(x&y)&z";
    HE["01010101"]="z";
    HE["01010110"]="!(x&y)&z|!z&x&y";
    HE["01010111"]="x&y|z";
    HE["01011000"]="!x&z|!y&!z&x";
    HE["01011001"]="!x&z|!y&!z&x|y&z";
    HE["01011010"]="!x&z|!z&x";
    HE["01011011"]="!x&z|!z&x|x&y";
    HE["01011100"]="!x&z|!y&x";
    HE["01011101"]="!y&x|z";
    HE["01011110"]="!(x&y)&z|!z&x";
    HE["01011111"]="x|z";
    HE["01100000"]="!(!y&!z|x|y&z)";
    HE["01100001"]="!(!y&!z|x|y&z)|x&y&z";
    HE["01100010"]="!x&!y&z|!z&y";
    HE["01100011"]="!x&!y&z|!z&y|x&y";
    HE["01100100"]="!x&!z&y|!y&z";
    HE["01100101"]="!x&!z&y|!y&z|x&z";
    HE["01100110"]="!y&z|!z&y";
    HE["01100111"]="!y&z|!z&y|x&y";
    HE["01101000"]="!(!x&!y|x&y|z)|!x&!y&z";
    HE["01101001"]="!(!x&!y|x&y|z)|!x&!y&z|x&y&z";
    HE["01101010"]="!x&!y&z|!z&(x|y)";
    HE["01101011"]="!x&!y&z|!z&(x|y)|x&y";
    HE["01101100"]="!x&!z&y|!y&(x|z)";
    HE["01101101"]="!x&!z&y|!y&(x|z)|x&z";
    HE["01101110"]="!y&(x|z)|!z&y";
    HE["01101111"]="!y&z|!z&y|x";
    HE["01110000"]="!x&(y|z)";
    HE["01110001"]="!x&(y|z)|y&z";
    HE["01110010"]="!x&z|!z&y";
    HE["01110011"]="!x&z|y";
    HE["01110100"]="!x&y|!y&z";
    HE["01110101"]="!x&y|z";
    HE["01110110"]="!(x&y)&z|!z&y";
    HE["01110111"]="y|z";
    HE["01111000"]="!x&(y|z)|!y&!z&x";
    HE["01111001"]="!x&(y|z)|!y&!z&x|y&z";
    HE["01111010"]="!x&(y|z)|!z&x";
    HE["01111011"]="!x&z|!z&x|y";
    HE["01111100"]="!x&(y|z)|!y&x";
    HE["01111101"]="!x&y|!y&x|z";
    HE["01111110"]="!x&y|!y&z|!z&x";
    HE["01111111"]="x|y|z";
    HE["10000000"]="!(x|y|z)";
    HE["10000001"]="!(x|y|z)|x&y&z";
    HE["10000010"]="!(!x&y|!y&x|z)";
    HE["10000011"]="!(x|y|z)|x&y";
    HE["10000100"]="!(!x&z|!z&x|y)";
    HE["10000101"]="!(x|y|z)|x&z";
    HE["10000110"]="!(!x&y|!y&x|z)|!y&x&z";
    HE["10000111"]="!(x|y|z)|(y|z)&x";
    HE["10001000"]="!y&!z";
    HE["10001001"]="!y&!z|x&y&z";
    HE["10001010"]="!(!x&y|z)";
    HE["10001011"]="!y&!z|x&y";
    HE["10001100"]="!(!x&z|y)";
    HE["10001101"]="!y&!z|x&z";
    HE["10001110"]="!(!x&y|z)|!y&x";
    HE["10001111"]="!y&!z|x";
    HE["10010000"]="!(!y&z|!z&y|x)";
    HE["10010001"]="!(x|y|z)|y&z";
    HE["10010010"]="!(!x&y|!y&x|z)|!x&y&z";
    HE["10010011"]="!(x|y|z)|(x|z)&y";
    HE["10010100"]="!(!x&z|!z&x|y)|!x&y&z";
    HE["10010101"]="!(x|y|z)|(x|y)&z";
    HE["10010110"]="!(!x&y|!y&x|z)|!x&y&z|!y&x&z";
    HE["10010111"]="!(x|y|z)|(x|y)&z|x&y";
    HE["10011000"]="!x&y&z|!y&!z";
    HE["10011001"]="!y&!z|y&z";
    HE["10011010"]="!(!x&y|z)|!x&y&z";
    HE["10011011"]="!(!x&y|z)|y&z";
    HE["10011100"]="!(!x&z|y)|!x&y&z";
    HE["10011101"]="!(!x&z|y)|y&z";
    HE["10011110"]="!(!x&y|z)|!x&y&z|!y&x";
    HE["10011111"]="!y&!z|x|y&z";
    HE["10100000"]="!x&!z";
    HE["10100001"]="!x&!z|x&y&z";
    HE["10100010"]="!(!y&x|z)";
    HE["10100011"]="!x&!z|x&y";
    HE["10100100"]="!x&!z|!y&x&z";
    HE["10100101"]="!x&!z|x&z";
    HE["10100110"]="!(!y&x|z)|!y&x&z";
    HE["10100111"]="!(!y&x|z)|x&z";
    HE["10101000"]="!(x&y|z)";
    HE["10101001"]="!(x&y|z)|x&y&z";
    HE["10101010"]="!z";
    HE["10101011"]="!z|x&y";
    HE["10101100"]="!x&!z|!y&x";
    HE["10101101"]="!(x&y|z)|x&z";
    HE["10101110"]="!y&x|!z";
    HE["10101111"]="!z|x";
    HE["10110000"]="!(!y&z|x)";
    HE["10110001"]="!x&!z|y&z";
    HE["10110010"]="!(!y&x|z)|!x&y";
    HE["10110011"]="!x&!z|y";
    HE["10110100"]="!(!y&z|x)|!y&x&z";
    HE["10110101"]="!(!y&z|x)|x&z";
    HE["10110110"]="!(!y&x|z)|!x&y|!y&x&z";
    HE["10110111"]="!x&!z|x&z|y";
    HE["10111000"]="!x&y|!y&!z";
    HE["10111001"]="!(x&y|z)|y&z";
    HE["10111010"]="!x&y|!z";
    HE["10111011"]="!z|y";
    HE["10111100"]="!(!x&!y&z|x&y)";
    HE["10111101"]="!x&!z|!y&x|y&z";
    HE["10111110"]="!x&y|!y&x|!z";
    HE["10111111"]="!z|x|y";
    HE["11000000"]="!x&!y";
    HE["11000001"]="!x&!y|x&y&z";
    HE["11000010"]="!x&!y|!z&x&y";
    HE["11000011"]="!x&!y|x&y";
    HE["11000100"]="!(!z&x|y)";
    HE["11000101"]="!x&!y|x&z";
    HE["11000110"]="!(!z&x|y)|!z&x&y";
    HE["11000111"]="!(!z&x|y)|x&y";
    HE["11001000"]="!(x&z|y)";
    HE["11001001"]="!(x&z|y)|x&y&z";
    HE["11001010"]="!x&!y|!z&x";
    HE["11001011"]="!(x&z|y)|x&y";
    HE["11001100"]="!y";
    HE["11001101"]="!y|x&z";
    HE["11001110"]="!y|!z&x";
    HE["11001111"]="!y|x";
    HE["11010000"]="!(!z&y|x)";
    HE["11010001"]="!x&!y|y&z";
    HE["11010010"]="!(!z&y|x)|!z&x&y";
    HE["11010011"]="!(!z&y|x)|x&y";
    HE["11010100"]="!(!z&x|y)|!x&z";
    HE["11010101"]="!x&!y|z";
    HE["11010110"]="!(!z&x|y)|!x&z|!z&x&y";
    HE["11010111"]="!x&!y|x&y|z";
    HE["11011000"]="!x&z|!y&!z";
    HE["11011001"]="!(x&z|y)|y&z";
    HE["11011010"]="!(!x&!z&y|x&z)";
    HE["11011011"]="!x&!y|!z&x|y&z";
    HE["11011100"]="!x&z|!y";
    HE["11011101"]="!y|z";
    HE["11011110"]="!x&z|!y|!z&x";
    HE["11011111"]="!y|x|z";
    HE["11100000"]="!(x|y&z)";
    HE["11100001"]="!(x|y&z)|x&y&z";
    HE["11100010"]="!x&!y|!z&y";
    HE["11100011"]="!(x|y&z)|x&y";
    HE["11100100"]="!x&!z|!y&z";
    HE["11100101"]="!(x|y&z)|x&z";
    HE["11100110"]="!(!y&!z&x|y&z)";
    HE["11100111"]="!x&!y|!z&y|x&z";
    HE["11101000"]="!((x|y)&z|x&y)";
    HE["11101001"]="!((x|y)&z|x&y)|x&y&z";
    HE["11101010"]="!x&!y|!z";
    HE["11101011"]="!x&!y|!z|x&y";
    HE["11101100"]="!x&!z|!y";
    HE["11101101"]="!x&!z|!y|x&z";
    HE["11101110"]="!y|!z";
    HE["11101111"]="!y|!z|x";
    HE["11110000"]="!x";
    HE["11110001"]="!x|y&z";
    HE["11110010"]="!x|!z&y";
    HE["11110011"]="!x|y";
    HE["11110100"]="!x|!y&z";
    HE["11110101"]="!x|z";
    HE["11110110"]="!x|!y&z|!z&y";
    HE["11110111"]="!x|y|z";
    HE["11111000"]="!x|!y&!z";
    HE["11111001"]="!x|!y&!z|y&z";
    HE["11111010"]="!x|!z";
    HE["11111011"]="!x|!z|y";
    HE["11111100"]="!x|!y";
    HE["11111101"]="!x|!y|z";
    HE["11111110"]="!(x&y&z)";
    HE["11111111"]="!x|x";

    int T;
    cin >> T;
    while (T --) {
        string s;
        cin >> s;
        cout << HE[s] << endl;
    }

}