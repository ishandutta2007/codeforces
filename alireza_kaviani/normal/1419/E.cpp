/* Generated by powerful Codeforces Tool
 * You can download the binary file in here https://github.com/xalanq/cf-tool (Windows, macOS, Linux)
 * Author: alireza_kaviani
 * Time: 2020-09-19 19:05:02
**/
#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<int, int> pii;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll LOG = 35;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

int q , n;
vector<int> dv , pr , vec[MAXN];

int main() {
	ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);

	cin >> q;
	while(q--){
		cin >> n;
		dv = pr = {};
		fill(vec , vec + LOG , vector<int>());
		for(int i = 1 ; i * i <= n ; i++){
			if(n % i == 0){
				if(i != 1)	dv.push_back(i);
				if(i * i != n)	dv.push_back(n / i);
			}
		}
		sort(all(dv));
		for(int i : dv){
			int res = SZ(pr);
			for(int j = SZ(pr) - 1 ; j >= 0 ; j--){
				if(i % pr[j] == 0){
					res = j;
				}
			}
			if(res == SZ(pr)){
				pr.push_back(i);
			}
			vec[res].push_back(i);
		}
		vector<int> ans;
		for(int i = 0 ; i < SZ(pr) ; i++){
			for(int j : vec[i]){
				ans.push_back(j);
			}
		}
		int flag = 1;
		if(SZ(pr) == 2 && SZ(dv) == 3)	flag = 0;
		if(flag){
			for(int i = 0 ; i < SZ(ans) ; i++){
				if(ans[i] == pr.back() * pr[0]){
					swap(ans[i] , ans[0]);
					break;
				}
			}
		}
		for(int i : ans){
			cout << i << sep;
		}
		cout << endl << 1 - flag << endl;
	}

    return 0;
}
/*

*/