#include <iostream>
#define int long long
using namespace std;
int vis[100005];
inline int cal1(int x)
{
	int now=1;
	while(now<x) x-=now,now<<=2;
	return now+x-1;
}
int a[10]={0,2,3,1};
int b[10]={0,3,1,2};
inline int cal2(int x)
{
	int now=1;
	while(now<x) x-=now,now<<=2;
	int rtn=now*2;
	now>>=2;
	--x;
	while(now>=1)
	{
		int t=0;
		if(now&x) t+=1;
		if((now<<1)&x) t+=2;
		t=a[t];
		rtn+=now*t;
		now>>=2;
	}
	return rtn;
}
inline int cal3(int x)
{
	int now=1;
	while(now<x) x-=now,now<<=2;
	int rtn=now*3;
	now>>=2;
	--x;
	while(now>=1)
	{
		int t=0;
		if(now&x) t+=1;
		if((now<<1)&x) t+=2;
		t=b[t];
		rtn+=now*t;
		now>>=2;
	}
	return rtn;
}
signed main(int argc, char** argv) {
	int T;
	cin >> T;
	while(T--)
	{
		int x;
		scanf("%lld",&x);
		if(x%3==1) printf("%lld\n",cal1(x/3+1));
		else if(x%3==2) printf("%lld\n",cal2(x/3+1));
		else printf("%lld\n",cal3(x/3));
	}
	return 0;
}
/*
1000
1 2 3
4 8 12
5 10 15
6 11 13
7 9 14
16 32 48
17 34 51
18 35 49
19 33 50
20 40 60
21 42 63
22 43 61
23 41 62
24 44 52
25 46 55
26 47 53
27 45 54
28 36 56
29 38 59
30 39 57
31 37 58
64 128 192
65 130 195
66 131 193
67 129 194
68 136 204
69 138 207
70 139 205
71 137 206
72 140 196
73 142 199
74 143 197
75 141 198
76 132 200
77 134 203
78 135 201
79 133 202
80 160 240
81 162 243
82 163 241
83 161 242
84 168 252
85 170 255
86 171 253
87 169 254
88 172 244
89 174 247
90 175 245
91 173 246
92 164 248
93 166 251
94 167 249
95 165 250
96 176 208
97 178 211
98 179 209
99 177 210
100 184 220
101 186 223
102 187 221
103 185 222
104 188 212
105 190 215
106 191 213
107 189 214
108 180 216
109 182 219
110 183 217
111 181 218
112 144 224
113 146 227
114 147 225
115 145 226
116 152 236
117 154 239
118 155 237
119 153 238
120 156 228
121 158 231
122 159 229
123 157 230
124 148 232
125 150 235
126 151 233
127 149 234
256 512 768
257 514 771
258 515 769
259 513 770
260 520 780
261 522 783
262 523 781
263 521 782
264 524 772
265 526 775
266 527 773
267 525 774
268 516 776
269 518 779
270 519 777
271 517 778
272 544 816
273 546 819
274 547 817
275 545 818
276 552 828
277 554 831
278 555 829
279 553 830
280 556 820
281 558 823
282 559 821
283 557 822
284 548 824
285 550 827
286 551 825
287 549 826
288 560 784
289 562 787
290 563 785
291 561 786
292 568 796
293 570 799
294 571 797
295 569 798
296 572 788
297 574 791
298 575 789
299 573 790
300 564 792
301 566 795
302 567 793
303 565 794
304 528 800
305 530 803
306 531 801
307 529 802
308 536 812
309 538 815
310 539 813
311 537 814
312 540 804
313 542 807
314 543 805
315 541 806
316 532 808
317 534 811
318 535 809
319 533 810
320 640 960
321 642 963
322 643 961
323 641 962
324 648 972
325 650 975
326 651 973
327 649 974
328 652 964
329 654 967
330 655 965
331 653 966
332 644 968
333 646 971
334 647 969
335 645 970
336 688 992
337 690 995
338 691 993
339 689 994
340 700 1000
341 704 917
342 705 919
343 707 916
344 701 997
345 702 999
346 706 920
347 703 996
348 698 998
349 708 921
350 709 923
351 713 918
352 692 980
353 694 983
354 695 981
355 693 982
356 696 988
357 699 990
358 697 991
359 710 929
360 711 943
361 714 931
362 712 930
363 715 928
364 720 956
365 722 959
366 723 957
367 721 958
368 672 976
369 674 979
370 675 977
371 673 978
372 681 989
373 684 985
374 685 987
375 687 984
376 716 948
377 718 951
378 719 949
379 717 950
380 678 986
381 724 937
382 725 939
383 727 936
384 726 854
385 728 857
386 729 859
387 731 856
388 730 862
389 735 858
390 736 870
391 738 869
392 732 852
393 734 855
394 737 875
395 739 872
396 733 849
397 740 873
398 745 871
399 741 874
400 742 886
401 744 889
402 743 885
403 747 888
404 746 894
405 750 891
406 748 890
407 755 868
408 751 887
409 749 884
410 756 878
411 758 877
412 752 876
413 754 879
414 764 866
415 766 865
416 757 853
417 753 848
418 765 863
419 767 860
420 759 851
421 760 861
424 762 850
432 761 841
433 763 842
448 576 896
449 578 899
450 579 897
451 577 898
452 584 908
453 586 911
454 587 909
455 585 910
456 588 900
457 590 903
458 591 901
459 589 902
460 580 904
461 582 907
462 583 905
463 581 906
464 608 944
465 610 947
466 611 945
467 609 946
468 620 952
469 622 955
470 623 953
471 621 954
472 626 938
473 628 941
474 630 940
475 629 942
476 632 932
477 634 935
478 635 933
479 633 934
480 624 912
481 627 914
482 625 915
483 636 927
484 638 922
485 660 881
486 631 913
487 661 882
488 663 895
489 665 880
490 662 892
491 664 883
492 657 893
493 677 840
494 680 838
495 676 843
496 656 864
497 658 867
500 616 924
501 619 926
503 618 925
*/