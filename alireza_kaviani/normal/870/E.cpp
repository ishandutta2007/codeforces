/* Generated by powerful Codeforces Tool
 * You can download the binary file in here https://github.com/xalanq/cf-tool (Windows, macOS, Linux)
 * Author: alireza_kaviani
 * Time: 2020-04-01 16:37:01
**/
#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 2e5 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n , ans = 1 , x[MAXN] , y[MAXN] , mark[MAXN] , par[MAXN] , sz[MAXN];
vector<ll> xc , yc;

ll Find(ll v){
    return (par[v] == -1 ? v : par[v] = Find(par[v]));
}

void Union(ll v , ll u){
    v = Find(v) , u = Find(u);
    if(v == u){
        mark[v] = 1;
        return;
    }
    if(sz[v] < sz[u])   swap(v , u);
    par[u] = v;
    sz[v] += sz[u];
    mark[v] |= mark[u];
}

int main() {
    ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
    fill(par , par + MAXN , -1);
    fill(sz , sz + MAXN , 1);
    
    cin >> n;
    for(ll i = 1 ; i <= n ; i++)    cin >> x[i] >> y[i] , xc.push_back(x[i]) , yc.push_back(y[i]);
    Sort(xc) , Sort(yc);
    xc.resize(unique(all(xc)) - xc.begin());
    yc.resize(unique(all(yc)) - yc.begin());
    for(ll i = 1 ; i <= n ; i++){
        x[i] = lower_bound(all(xc) , x[i]) - xc.begin();
        y[i] = lower_bound(all(yc) , y[i]) - yc.begin();
        Union(x[i] , y[i] + n + 5);
    }

    for(ll i = 0 ; i < MAXN ; i++){
        if(Find(i) == i){
            ll val = poww(2 , sz[i] , MOD) - 1 + mark[i];
            ans = ans * val % MOD;
        }
    }
    cout << ans << endl;

    return 0;
}
/*

*/