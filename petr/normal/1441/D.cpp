/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <algorithm>
#include <array>
#include <bitset>
#include <cassert>
#include <climits>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <functional>
#include <iostream>
#include <map>
#include <memory>
#include <numeric>
#include <queue>
#include <random>
#include <set>
#include <stack>
#include <string>
#include <unordered_set>
#include <unordered_map>
#include <vector>

#define pb push_back
#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()
#define mp make_pair

using namespace std;

typedef long long int64;
typedef vector<int> vi;
typedef pair<int, int> ii;

class TaskD {
 public:
  vector<vector<int>> e;
  vector<int> a;
  int n;
  int maxChain;

  ii dfs(int at, int parent) {
    int maxFromOne = 0;
    int maxFromTwo = 0;
    if (a[at] == 1) {
      maxFromOne = 1;
    } else if (a[at] == 2) {
      maxFromTwo = 1;
    }
    for (int child : e[at]) {
      if (child == parent) continue;
      ii cur = dfs(child, at);
      int fromOne = cur.first;
      int fromTwo = cur.second;
      maxChain = max(maxChain, maxFromOne + fromTwo);
      maxChain = max(maxChain, maxFromTwo + fromOne);
      maxFromOne = max(maxFromOne, fromOne);
      maxFromTwo = max(maxFromTwo, fromTwo);
      if (a[at] == 1) {
        maxFromOne = max(maxFromOne, 1 + fromTwo);
      } else if (a[at] == 2) {
        maxFromTwo = max(maxFromTwo, 1 + fromOne);
      }
    }
    return ii(maxFromOne, maxFromTwo);
  }

  void solveOne(istream &in, ostream &out) {
    in >> n;
    e = vector<vector<int>>(n);
    a = vector<int>(n);
    for (int i = 0; i < n; ++i) {
      in >> a[i];
    }
    for (int i = 0; i < n - 1; ++i) {
      int u, v;
      in >> u >> v;
      --u; --v;
      e[u].push_back(v);
      e[v].push_back(u);
    }
    maxChain = 0;
    dfs(0, -1);
    int res = maxChain / 2 + 1;
    out << res << "\n";
  }

  void solve(std::istream &in, std::ostream &out) {
    int nt;
    in >> nt;
    for (int it = 0; it < nt; ++it) {
      solveOne(in, out);
    }
  }
};


int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  TaskD solver;
  std::istream& in(std::cin);
  std::ostream& out(std::cout);
  solver.solve(in, out);
  return 0;
}