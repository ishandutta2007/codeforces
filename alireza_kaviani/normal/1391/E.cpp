/* Generated by powerful Codeforces Tool
 * You can download the binary file in here https://github.com/xalanq/cf-tool (Windows, macOS, Linux)
 * Author: alireza_kaviani
 * Time: 2020-08-09 19:53:29
**/
#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<int, int> pii;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

int q , n , m , flag , mark[MAXN] , par[MAXN] , H[MAXN];
vector<int> adj[MAXN] , vec;
vector<pii> ans;

void printPath(int v){
    flag = 1;
    cout << "PATH" << endl;
    cout << (n + 1) / 2 << endl;
    while(v){
        cout << v << sep;
        v = par[v];
    }
    cout << endl;
}

void DFS(int v , int p = 0){
    par[v] = p;
    H[v] = H[p] + 1;
    mark[v] = 1;
    if(H[v] == (n + 1) / 2 && flag == 0)    printPath(v);
    if(SZ(vec) && mark[vec.back()] == 2){
        ans.push_back({v , vec.back()});
        vec.pop_back();
    }
    else    vec.push_back(v);
    for(int u : adj[v]) if(!mark[u])    DFS(u , v);
    mark[v] = 2;
}

int main() {
    ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);

    cin >> q;
    while(q--){
        cin >> n >> m; flag = 0;
        vec = {};
        ans = {};
        fill(mark , mark + n + 2 , 0);
        fill(adj , adj + n + 2 , vector<int>());
        for(int i = 0 ; i < m ; i++){
            int v , u;
            cin >> v >> u;
            adj[v].push_back(u);
            adj[u].push_back(v);
        }
        DFS(1);
        if(flag)    continue;
        cout << "PAIRING" << endl;
        cout << SZ(ans) << endl;
        for(pii i : ans)    cout << i.X << sep << i.Y << endl;
    }

    return 0;
}
/*

*/