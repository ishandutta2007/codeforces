/* Generated by powerful Codeforces Tool
 * Author: calabash_boy_love_15 
 * Time: 2019-05-03 14:08:36
 * Personal Code Template: https://github.com/4thcalabash/ACM-Code-Library
**/
#pragma GCC optimize(3)
#include <bits/stdc++.h>
using namespace std;
#ifdef __LOCAL_DEBUG__
# define _debug(fmt, ...) fprintf(stderr, "\033[91m[%s %3d]: " fmt "\n\033[0m", \
  __func__,__LINE__, ##__VA_ARGS__)
#else
# define _debug(...) (void(0))
#endif
#define PB(x) push_back(x)
#define rep(i,l,r) for (int i = l,_ = r;i< _;i++)
#define REP(i,l,r) for (int i=l,_=r;i<=_;i++)
#define leave(x) do {cout<<#x<<endl;fflush(stdout);return 0;}while (0);
#define untie do{ios::sync_with_stdio(false);cin.tie(nullptr);cout.tie(nullptr);}while (0)
#define range(x) x.begin(),x.end()
typedef long long LL;
typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef long double db;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;
const int inf = 0x3f3f3f3f;
const ll inf_ll = 0x3f3f3f3f3f3f3f3fLL;
/************* header ******************/
const int maxn = 250 + 10;
int dp[maxn][maxn][maxn];
int s[3][maxn];
char t[100000+10];
int n,q;
int nxt[100000+10][26];
int len[3];
int main(){
    scanf("%d%d",&n,&q);
    scanf("%s",t+1);
    memset(nxt,inf,sizeof nxt);
    for (int i=n;i>=1;i--){
        memcpy(nxt[i],nxt[i+1],sizeof nxt[i]);
        nxt[i][t[i] - 'a'] = i;
    }
    memset(dp,inf,sizeof dp);
    dp[0][0][0]= 0;
    while (q--){
        static char op[5];
        int idx;
        scanf("%s%d",op,&idx);
        idx --;
        if (op[0] == '+'){
            //plus
            static char ch[5];
            scanf("%s",ch);
            len[idx]++;
            s[idx][len[idx]] = ch[0];
            if (idx == 0){
                for (int i = 0;i<=len[1];i++){
                    for (int j=0;j<=len[2];j++){
                        if (dp[len[0]-1][i][j] != inf){
                            int pre_l = dp[len[0]-1][i][j];
                            dp[len[0]][i][j] = min(dp[len[0]][i][j],nxt[pre_l+1][ch[0] - 'a']);
                        }
                        if (i && dp[len[0]][i-1][j] != inf){
                            int pre_l = dp[len[0]][i-1][j];
                            int c = s[1][i] - 'a';
                            dp[len[0]][i][j] = min(dp[len[0]][i][j],nxt[pre_l+1][c]);
                        }
                        if (j && dp[len[0]][i][j-1] != inf){
                            int pre_l = dp[len[0]][i][j-1];
                            int c = s[2][j] - 'a'; 
                            dp[len[0]][i][j] = min(dp[len[0]][i][j],nxt[pre_l+1][c]);
                        }
                    }
                }
            }else if (idx == 1){
                 for (int i = 0;i<=len[0];i++){
                    for (int j=0;j<=len[2];j++){
                        if (dp[i][len[1]-1][j] != inf){
                            int pre_l = dp[i][len[1]-1][j];
                            dp[i][len[1]][j] = min(dp[i][len[1]][j],nxt[pre_l+1][ch[0] - 'a']);
                        }
                        if (i && dp[i-1][len[1]][j] != inf){
                            int pre_l = dp[i-1][len[1]][j];
                            int c = s[0][i] - 'a';
                            dp[i][len[1]][j] = min(dp[i][len[1]][j],nxt[pre_l+1][c]);
                        }
                        if (j && dp[i][len[1]][j-1] != inf){
                            int pre_l = dp[i][len[1]][j-1];
                            int c = s[2][j] - 'a'; 
                            dp[i][len[1]][j] = min(dp[i][len[1]][j],nxt[pre_l+1][c]);
                        }
                    }
                }
            }else if (idx == 2){
                 for (int i = 0;i<=len[0];i++){
                    for (int j=0;j<=len[1];j++){
                        int & dp_val = dp[i][j][len[2]];
                        if (dp[i][j][len[2]-1] != inf){
                            int pre_l = dp[i][j][len[2]-1];
                            dp_val = min(dp_val,nxt[pre_l+1][ch[0] - 'a']);
                        }
                        if (i && dp[i-1][j][len[2]] != inf){
                            int pre_l = dp[i-1][j][len[2]];
                            int c = s[0][i] - 'a';
                            dp_val = min(dp_val,nxt[pre_l+1][c]);
                        }
                        if (j && dp[i][j-1][len[2]] != inf){
                            int pre_l = dp[i][j-1][len[2]];
                            int c = s[1][j] - 'a'; 
                            dp_val = min(dp_val,nxt[pre_l+1][c]);
                        }
                    }
                }
            }else assert(0);

        }else{
            //minus
            int ll = len[idx];
            if (idx == 0){
                for (int i=0;i<=len[1];i++){
                    for (int j=0;j<=len[2];j++){
                        dp[ll][i][j] = inf;
                    }
                }
            }else if (idx == 1){
                for (int i=0;i<=len[0];i++){
                    for (int j=0;j<=len[2];j++){
                        dp[i][ll][j] = inf;
                    }
                }
            }else if (idx == 2){
                for (int i=0;i<=len[0];i++){
                    for (int j=0;j<=len[1];j++){
                        dp[i][j][ll] = inf;
                    }
                }
            }else assert(0);
            len[idx] --;
        }
        if (dp[len[0]][len[1]][len[2]] != inf){
            puts("YES");
        }else{
            puts("NO");
        }

    }
    return 0;
}