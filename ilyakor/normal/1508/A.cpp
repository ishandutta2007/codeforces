/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <algorithm>
#include <queue>
#include <vector>
#include <set>
#include <map>
#include <cassert>
#include <functional>
#include <sstream>
#include <cmath>

#include <cstring>
#include <cstdio>

using namespace std;

typedef pair<int, int> ii;
typedef long long int64;
typedef vector<int> vi;

#define pb push_back
#define mp make_pair
#define all(v) (v).begin(),(v).end()
#define sz(v) ((int)(v).size())

template<class T> T abs(T x) { return x >= 0 ? x : -x; }
template<class T> T sqr(T x) { return x * x; }

class TaskA {
public:
    int calc(string s1, string s2) {
        int n1 = 0, n2 = 0;
        for (char c : s1) {
            if (c == '0') ++n1;
        }
        for (char c : s2) {
            if (c == '0') ++n2;
        }
        return min(n1, n2);
    }

    string doSolve(vector<string> a) {
        int n = sz(a[0]) / 2;
        for (int it = 0; it < 2; ++it) {
            for (int i = 0; i < sz(a); ++i) {
                for (int j = 0; j < sz(a); ++j)
                    if (i != j) {
                        if (calc(a[i], a[j]) >= n) {
                            int pos1 = 0, pos2 = 0;
                            string res;
                            while (pos1 < sz(a[i]) || pos2 < sz(a[j])) {
                                if (pos1 >= sz(a[i]))
                                    res += a[j][pos2++];
                                else if (pos2 >= sz(a[j]))
                                    res += a[i][pos1++];
                                else {
                                    if (a[i][pos1] == a[j][pos2]) {
                                        res += a[i][pos1];
                                        ++pos1;
                                        ++pos2;
                                    } else if (a[i][pos1] == '1') {
                                        res += a[i][pos1];
                                        ++pos1;
                                    } else {
                                        res += a[j][pos2];
                                        ++pos2;
                                    }
                                }
                            }
                            if (it == 1) {
                                for (int k = 0; k < sz(res); ++k)
                                    res[k] = (res[k] == '0' ? '1' : '0');
                            }
                            assert(sz(res) <= 3 * n);
                            return res;
                        }
                    }
            }
            for (string &s : a) {
                for (int i = 0; i < sz(s); ++i)
                    s[i] = (s[i] == '0' ? '1' : '0');
            }
        }
        for (string s : a)
            cerr << s << "\n";
        assert(false);
    }

    string randStr(int n) {
        string res;
        for (int i = 0; i < n; ++i)
            res += (char)('0' + (rand() % 2));
        return res;
    }

    void solve(std::istream& in, std::ostream& out) {
//        {
//            int n = 7;
//            for (int it = 0; it < 1000000; ++it) {
//                string s1 = randStr(n * 2);
//                string s2 = randStr(n * 2);
//                string s3 = randStr(n * 2);
//                doSolve({s1, s2, s3});
//            }
//        }

	    int n;
	    string s1, s2, s3;
	    in >> n >> s1 >> s2 >> s3;
	    vector<string> a = {s1, s2, s3};
	    out << doSolve(a) << "\n";
	}
};


int main() {
	TaskA solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	int n;
in >> n;
for(int i = 0; i < n; ++i) {
	solver.solve(in, out);
}

	return 0;
}