/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author majk
 */

#ifndef MAJK_LIB
#define MAJK_LIB

#include <vector>
#include <stack>
#include <iostream>
#include <unordered_map>
#include <unordered_set>
#include <map>
#include <iomanip>
#include <set>
#include <functional>
#include <fstream>
#include <algorithm>
#include <cassert>
#include <cmath>
#include <string>
#include <sstream>
#include <queue>
#include <array>
#include <bitset>
using namespace std;

#define x first
#define y second
typedef std::pair<int,int> pii; typedef long long ll; typedef unsigned long long ull; typedef unsigned int ui; typedef pair<ui,ui> puu;

template <typename T, typename U> std::istream&operator>>(std::istream&i, pair<T,U>&p) {i >> p.x >> p.y; return i;}
template<typename T>std::istream&operator>>(std::istream&i,vector<T>&t) {for(auto&v:t){i>>v;}return i;}
template <typename T, typename U> std::ostream&operator<<(std::ostream&o, const pair<T,U>&p) {o << p.x << ' ' << p.y; return o;}
template<typename T>std::ostream&operator<<(std::ostream&o,const vector<T>&t) {if(t.empty())o<<'\n';for(size_t i=0;i<t.size();++i){o<<t[i]<<" \n"[i == t.size()-1];}return o;}
template<typename T> using minheap = priority_queue<T, vector<T>, greater<T>>;
template<typename T> using maxheap = priority_queue<T, vector<T>, less<T>>;
template <typename T> bool in(T a, T b, T c) { return a <= b && b < c; }
ui logceil(ll x) { return x?8*sizeof(ll)-__builtin_clzll(x):0; }

namespace std { template<typename T,typename U>struct hash<pair<T,U>>{hash<T>t;hash<U>u;size_t operator()(const pair<T,U>&p)const{return t(p.x)^(u(p.y)<<7);}}; }
template<typename T,typename F>T bsh(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){l=m+1;r=m;}else{h=m-1;}}return r;}
template<typename F> double bshd(double l,double h,const F&f,double p=1e-9){ui r=3+(ui)log2((h-l)/p);while(r--){double m=(l+h)/2;if(f(m)){l=m;}else{h=m;}}return (l+h)/2;}
template<typename T,typename F>T bsl(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){h=m-1;r=m;}else{l=m+1;}}return r;}
template<typename F> double bsld(double l,double h,const F&f,double p=1e-9){ui r=3+(ui)log2((h-l)/p);while(r--){double m=(l+h)/2;if(f(m)){h=m;}else{l=m;}}return (l+h)/2;}
template<typename T> T gcd(T a,T b) { if (a<b) swap(a,b); return b?gcd(b,a%b):a; }

template<typename T>class vector2:public vector<vector<T>>{public:vector2(){} vector2(size_t a,size_t b,T t=T()):vector<vector<T>>(a,vector<T>(b,t)){}};
template<typename T>class vector3:public vector<vector2<T>>{public:vector3(){} vector3(size_t a,size_t b,size_t c,T t=T()):vector<vector2<T>>(a,vector2<T>(b,c,t)){}};
template<typename T>class vector4:public vector<vector3<T>>{public:vector4(){} vector4(size_t a,size_t b,size_t c,size_t d,T t=T()):vector<vector3<T>>(a,vector3<T>(b,c,d,t)){}};
template<typename T>class vector5:public vector<vector4<T>>{public:vector5(){} vector5(size_t a,size_t b,size_t c,size_t d,size_t e,T t=T()):vector<vector4<T>>(a,vector4<T>(b,c,d,e,t)){}};


#endif
 #ifndef MAJK_RANDOM_H
#define MAJK_RANDOM_H

#include <random>
#include <chrono>
auto seed = chrono::high_resolution_clock::now().time_since_epoch().count();
std::mt19937 rng(seed);
using random_int = std::uniform_int_distribution<int>;
using random_ll = std::uniform_int_distribution<ll>;
struct TimeLimit {
    TimeLimit(double seconds) : s(seconds-0.2), last(clock()), mx(0) {}
    operator bool() const { clock_t cur = clock(); mx = max(mx, cur-last); last = cur; return clock() < s * CLOCKS_PER_SEC - 1.5 * mx; }
    double s; mutable clock_t last, mx;
};

#endif //MAJK_RANDOM_H


class CJohnnySolving {
public:
    int N, M, K;
    vector<vector<int>> Cycles, E;
    vector<int> Path;
    vector<int> D, P, S;
    vector<bool> V;

    void dfs(int u, int p, int d) {
        if (Cycles.size() == K || !Path.empty()) return;

        P[u] = p;
        S[d] = u;
        D[u] = d;
        V[u] = true;

        if ((d+1)*K >= N) {
            for (int i = 0; i <= d; ++i) Path.push_back(S[i]);
            return;
        }

        bool hasNext = false;
        for (int v : E[u]) {
            if (!V[v]) {
                dfs(v, u, d+1);
                hasNext = true;
            }
        }

        if (!hasNext && Cycles.size() < K) {
            int w = -1;
            for (int v : E[u]) {
                if (D[v] != D[u] - 1) {
                    if ((D[u] - D[v] + 1)%3 != 0) {
                        vector<int> C;
                        for (int j = D[v]; j <= D[u]; ++j) C.push_back(S[j]);
                        reverse(C.begin(),C.end());
                        Cycles.push_back(C);
                        return;
                    } else if (w == -1) {
                        w = v;
                    } else {
                        vector<int> C;
                        if (D[w] > D[v]) swap(w,v);
                        for (int j = D[w]; j <= D[v]; ++j) C.push_back(S[j]);
                        C.push_back(u);
                        reverse(C.begin(),C.end());
                        Cycles.push_back(C);
                        return;
                    }
                }
            }
        }
    }


//    bool findRepr(vector<int> &C) {
//        for (int i = 0; i < C.size(); ++i) {
//            if (!Repr[C[i]]) {
//                Repr[C[i]] = true;
//                rotate(C.begin(),C.begin()+i,C.end());
//                return true;
//            }
//        }
//        return false;
//    }

    void solve(istream& cin, ostream& cout) {
        cin >> N >> M >> K;
        E.resize(N);
        for (int i = 0; i < M; ++i) {
            int u, v;
            cin >> u >> v;
            --u;
            --v;
            E[u].push_back(v);
            E[v].push_back(u);
        }

        V.assign(N, false);
        D.assign(N, 0);
        P.assign(N, 0);
        S.resize(N);

        dfs(0, -1, 0);

        if (!Path.empty()) {
            cout << "PATH\n";
            cout << Path.size() << '\n';
            for (int i = 0; i < Path.size(); ++i) cout << Path[i]+1 << " \n"[i==Path.size()-1];
        } else {
            cout << "CYCLES\n";
            for (auto &cc: Cycles) {
                cout << cc.size() << '\n';
                for (int i = 0; i < cc.size(); ++i) cout << cc[i]+1 << " \n"[i==cc.size()-1];
            }
        }
    }
};


int main() {
	ios_base::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr);
	CJohnnySolving solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
    return 0;
}