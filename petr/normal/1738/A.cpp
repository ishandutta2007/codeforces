/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

// Actual solution is at the bottom

#undef NDEBUG

#include <algorithm>
#include <array>
#include <bitset>
#include <cassert>
#include <climits>
#include <cstdint>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <memory>
#include <numeric>
#include <queue>
#include <random>
#include <set>
#include <stack>
#include <string>
#include <unordered_set>
#include <unordered_map>
#include <vector>
// AtCoder library from https://github.com/atcoder/ac-library
// #include "../atcoder/all"

#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()

using namespace std;

using int64 = int64_t;
using ii = pair<int, int>;

class AUporotayaSlava {
 public:
  void solveOne() {
    int n;
    cin >> n;
    vector<int> a;
    vector<int> b;
    vector<int> t(n);
    for (auto& x : t) cin >> x;
    for (int i = 0; i < n; ++i) {
      int x;
      cin >> x;
      if (t[i] == 0) a.push_back(x); else b.push_back(x);
    }
    sort(all(a));
    sort(all(b));
    reverse(all(a));
    reverse(all(b));
    int64 res = 0;
    for (auto x : a) res += x;
    for (auto x : b) res += x;
    if (a.empty() || b.empty()) {
      cout << res << "\n";
      return;
    }
    if (a.size() == b.size()) {
      cout << res * 2 - min(a.back(), b.back()) << "\n";
      return;
    }
    if (a.size() < b.size()) swap(a, b);
    for (int i = 0; i < b.size(); ++i) res += a[i] + b[i];
    cout << res << "\n";
  }

  void solve() {
    int nt;
    cin >> nt;
    for (int it = 0; it < nt; ++it) {
      // cout << "Case #" << (it + 1) << ": ";
      solveOne();
      // cerr << "Case #" << (it + 1) << " done" << endl;
    }
  }
};

// #define st_mtimespec st_mtim

int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(0);
    AUporotayaSlava solver;


    solver.solve();
    return 0;
}