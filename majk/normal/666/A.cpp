/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Majk
 */

#include <vector>
#include <iostream>
#include <unordered_map>
#include <map>
#include <iomanip>
#include <functional>
#include <fstream>
#include <algorithm>
#include <cassert>
#include <cmath>
#include <string>
#include <sstream>
#include <queue>
using namespace std;

#define x first
#define y second
constexpr int MOD = 1000000007;

typedef std::pair<int,int> pii;
typedef long long ll;

template<typename T>std::istream&operator>>(std::istream&i,vector<T>&t) {for(auto&v:t){i>>v;}return i;}
template<typename T>std::ostream&operator<<(std::ostream&o,const vector<T>&t) {for(size_t i=0;i<t.size();++i){o<<t[i]<<" \n"[i == t.size()-1];}return o;}

namespace std {
    template<typename T,typename U>struct hash<pair<T,U>>{hash<T>t;hash<U>u;size_t operator()(const pair<T,U>&p)const{return t(p.x)^(u(p.y)<<7);}};
}
template<typename T,typename F>T bsh(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){l=m+1;r=m;}else{h=m-1;}}return r;}
template<typename T,typename F>T bsl(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){h=m-1;r=m;}else{l=m+1;}}return r;}
template<typename T> T gcd(T a,T b) { if (a<b) swap(a,b); return b?gcd(b,a%b):a; }

// #include "../l/mod.h"
#include <set>

class TaskA {
public:
	void solve(istream& cin, ostream& cout) {
		string S;
		cin >> S;
		set<string> R;
		set<pii> D;
		queue<pii> Q;
		Q.push({S.size(), 0});
		while (!Q.empty()) {
			pii p = Q.front(); Q.pop();

			if (D.count(p)) continue;
			D.insert(p);

			for (int d=2;d<=3;++d) {
				if (p.x-d <= 4) { continue; }
				string t = S.substr(p.x-d, d);
				if (t != S.substr(p.x, p.y)) {
					if (R.count(t) == 0) {
						R.insert(t);
					}
					Q.push({p.x-d,d});
				}
			}
		}

		vector<string> L;
		for (auto r:R) L.push_back(r);
		sort(L.begin(), L.end());
		cout << L.size() << endl;
		for (auto r:L) cout << r << '\n';
	}
};


int main() {
	ios_base::sync_with_stdio(false);
	TaskA solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}