/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;
typedef pair<ld, ld> pld;
typedef pair<string, string> pss;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define file_io                     freopen("in.txt" , "r" , stdin) ; freopen("out.txt" , "w" , stdout);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

inline ll input() {
    ll n;
    cin >> n;
    return n;
}

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

set_random;

const ll MAXN = 1e3 + 10;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n , m;
string s , t;
pair<ll , pair<pll , pair<string , char>>> dp[MAXN][MAXN];
vector<pair<string , pair<ll , char>>> ans;

int main() {
    fast_io;
    for(ll i = 0 ; i < MAXN ; i++){
        for(ll j = 0 ; j < MAXN ; j++){
            dp[i][j] = {INF , {{-1 , -1} , {"" , ' '}}};
        }
    }

    cin >> s >> t;
    n = s.size();
    m = t.size();
    s = "." + s;
    t = "." + t;

    dp[0][0] = {0 , {{-1 , -1} , {"" , ' '}}};
    for(ll i = 0 ; i <= n ; i++){
        for(ll j = 0 ; j <= m ; j++){
            if(i != 0 && j != 0){
                if(s[i] == t[j]){
                    dp[i][j] = min(dp[i][j] , Mp(dp[i - 1][j - 1].X , Mp(Mp(i - 1 , j - 1) , Mp(string("") , ' '))));
                }
                else{
                    dp[i][j] = min(dp[i][j] , Mp(dp[i - 1][j - 1].X + 1 , Mp(Mp(i - 1 , j - 1) , Mp(string("REPLACE") , t[j]))));
                }
            }
            if(i != 0){
                dp[i][j] = min(dp[i][j] , Mp(dp[i - 1][j].X + 1 , Mp(Mp(i - 1 , j) , Mp(string("DELETE") , ' '))));
            }
            if(j != 0){
                dp[i][j] = min(dp[i][j] , Mp(dp[i][j - 1].X + 1 , Mp(Mp(i , j - 1) , Mp(string("INSERT") , t[j]))));
            }
        }
    }

    pll ind = {n , m};
    while(ind != Mp(0LL , 0LL)){
        ll i = ind.X , j = ind.Y;
        if(dp[i][j].Y.Y.X != "")
            ans.push_back({dp[i][j].Y.Y.X , {j + (dp[i][j].Y.Y.X == "DELETE") , dp[i][j].Y.Y.Y}});
        ind = dp[i][j].Y.X;
    }
    reverse(all(ans));

    cout << dp[n][m].X << endl;
    for(auto i : ans)    cout << i.X << sep << i.Y.X << sep << i.Y.Y << endl;

    return 0;
}
/*

*/