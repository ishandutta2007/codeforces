/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <algorithm>
#include <array>
#include <bitset>
#include <cassert>
#include <climits>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <functional>
#include <iostream>
#include <map>
#include <memory>
#include <numeric>
#include <queue>
#include <random>
#include <set>
#include <stack>
#include <string>
#include <unordered_set>
#include <unordered_map>
#include <vector>

#define pb push_back
#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()
#define mp make_pair

using namespace std;

typedef long long int64;
typedef vector<int> vi;
typedef pair<int, int> ii;

class TaskD {
 public:
  void solveOne(istream &in, ostream &out) {
    int n;
    in >> n;
    string s;
    in >> s;
    int res = n + 10;
    for (int firstL = 0; firstL < min(n, 6); ++firstL) {
      string t = s.substr(firstL) + s.substr(0, firstL);
      int bestl = n + 10;
      int bestll = n + 10;
      int bestr = n + 10;
      int bestrr = n + 10;
      for (int i = 0; i < n; ++i) {
        int nbestl = min(bestr, bestrr);
        int nbestll = bestl;
        int nbestr = min(bestl, bestll);
        int nbestrr = bestr;
        if (i == 0) {
          nbestl = 0;
        }
        if (t[i] == 'L') {
          ++nbestr;
          ++nbestrr;
        } else {
          ++nbestl;
          ++nbestll;
        }
        bestl = nbestl;
        bestr = nbestr;
        bestll = nbestll;
        bestrr = nbestrr;
      }
      res = min(res, min(bestr, bestrr));
    }
    out << res << "\n";
  }

  void solve(std::istream &in, std::ostream &out) {
    int nt;
    in >> nt;
    for (int it = 0; it < nt; ++it) {
      solveOne(in, out);
    }
  }
};


int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  TaskD solver;
  std::istream& in(std::cin);
  std::ostream& out(std::cout);
  solver.solve(in, out);
  return 0;
}