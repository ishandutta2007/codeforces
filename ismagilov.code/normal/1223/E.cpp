/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Azat Ismagilov
 */

#include <fstream>

#include <iostream>
#include <algorithm>
#include <vector>
#include <queue>
#include <numeric>
#include <set>
#include <map>

#define int long long
#define ld long double
#define fs first
#define sc second
#define pb push_back
#define ppb pop_back
#define pf push_front
#define ppf pop_front
#define mp make_pair
#define len(v) ((int)v.size())
#define vc vector
#define pr pair
#define all(v) v.begin(), v.end()
//#pragma GCC optimize("Ofast")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,tune=native")
//#pragma GCC optimize("unroll-loops")

using namespace std;

template<typename T, typename U>
inline ostream &operator<<(ostream &_out, const pair<T, U> &_p) {
    _out << _p.first << ' ' << _p.second;
    return _out;
}

template<typename T, typename U>
inline istream &operator>>(istream &_in, pair<T, U> &_p) {
    _in >> _p.first >> _p.second;
    return _in;
}

template<typename T>
inline ostream &operator<<(ostream &_out, const vector<T> &_v) {
    if (_v.empty()) { return _out; }
    _out << _v.front();
    for (auto _it = ++_v.begin(); _it != _v.end(); ++_it) { _out << ' ' << *_it; }
    return _out;
}

template<typename T>
inline istream &operator>>(istream &_in, vector<T> &_v) {
    for (auto &_i : _v) { _in >> _i; }
    return _in;
}

const int MAXN = 5e5 + 10;
const int INF = 1e9;
const int MOD = 1e9 + 7;

int dp[MAXN][2];
vc<pr<int, int>> g[MAXN];
bool used[MAXN];
int n, k;

void dfs(int v) {
    used[v] = 1;
    int sums = 0;
    vc<int> tobetters;
    for (auto to : g[v]) {
        if (!used[to.fs]) {
            dfs(to.fs);
            sums += dp[to.fs][1];
            tobetters.pb(max(0ll, (to.sc + dp[to.fs][0] - dp[to.fs][1])));
        }
    }
    sort(all(tobetters));
    reverse(all(tobetters));
    dp[v][0] = sums;
    for (int i = 0; i < min(k - 1, len(tobetters)); i++) {
        dp[v][0] += tobetters[i];
    }
    dp[v][1] = sums;
    for (int i = 0; i < min(k, len(tobetters)); i++) {
        dp[v][1] += tobetters[i];
    }
}

class ERaskrasDerevo {
public:
    void solve(std::istream &in, std::ostream &out) {
        in >> n >> k;
        for (int i = 0; i < n; i++) {
            dp[i][0] = 0;
            dp[i][1] = 0;
            g[i].clear();
            used[i] = 0;
        }
        for (int i = 0; i < n - 1; i++) {
            int a, b, w;
            in >> a >> b >> w;
            a--, b--;
            g[a].pb({b, w});
            g[b].pb({a, w});
        }
        dfs(0);
        out << dp[0][1] << '\n';
    }
};


signed main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    ERaskrasDerevo solver;
    std::istream &in(std::cin);
    std::ostream &out(std::cout);
    int n;
    in >> n;
    for (int i = 0; i < n; ++i) {
        solver.solve(in, out);
    }

    return 0;
}