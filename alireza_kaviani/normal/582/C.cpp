/* Generated by powerful Codeforces Tool
 * You can download the binary file in here https://github.com/xalanq/cf-tool (Windows, macOS, Linux)
 * Author: alireza_kaviani
 * Time: 2020-05-02 15:04:59
**/
#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 2e5 + 10;
const ll SQ = 250;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

int n , A[MAXN] , isMax[SQ][MAXN] , C[MAXN] , S[MAXN];
ll ans;
vector<int> dv , G[MAXN];

int main() {
    ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);

    cin >> n;
    for(int i = 0 ; i < n ; i++)    cin >> A[i];
    for(int i = 1 ; i * i <= n ; i++){
        if(n % i == 0){
            dv.push_back(i);
            if(i * i != n)  dv.push_back(n / i);
        }
    }
    sort(all(dv));
    for(int i = 0 ; i < SZ(dv) ; i++){
        for(int j = 0 ; j < dv[i] ; j++){
            int mx = 0;
            for(int k = j ; k < n ; k += dv[i]) mx = max(mx , A[k]);
            for(int k = j ; k < n ; k += dv[i]) if(A[k] == mx)  isMax[i][k] = 1;
        }
    }

    for(int i = 1 ; i < n ; i++){
        int ind = lower_bound(all(dv) , __gcd(n , i)) - dv.begin();
        G[ind].push_back(i);
    }

    for(int i = 0 ; i + 1 < SZ(dv) ; i++){
        vector<int> vec;
        int cnt = 0;
        for(int j = 0 ; j < n ; j++){
            if(isMax[i][j] == 0 && cnt != 0){
                vec.push_back(cnt);
                cnt = 0;
            }
            cnt += isMax[i][j];
        }
        if(cnt != 0)    vec.push_back(cnt);
        if(isMax[i][0] && isMax[i][n - 1] && SZ(vec) > 1){
            vec[0] += vec.back();
            vec.pop_back();
        }
        //for(int j : vec)    cout << j << sep;
        //cout << endl;
        memset(C , 0 , sizeof(C));
        memset(S , 0 , sizeof(S));
        for(int j : vec)    C[j]++ , S[j] += j;
        for(int j = n ; j >= 0 ; j--)   C[j] += C[j + 1] , S[j] += S[j + 1];
        for(int j : G[i]){
            if(vec[0] == n) ans += n;
            else    ans += S[j] - C[j] * (j - 1);
        }
        //cout << i << sep << dv[i] << sep << ans << endl;
    }
    cout << ans << endl;

    return 0;
}
/*

*/