/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author RiaD
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <bits/stdc++.h>

using namespace std;

class TaskD {
public:

	void solve(std::istream& in, std::ostream& out) {
		int r,s, p;
		in >> r >> s >> p;
		out << solve(r, s, p) << ' ' << solve(s, p, r) << ' ' << solve(p, r, s) << "\n";
	}

	double solve(int r, int s, int p) {
		vector<vector<vector<double>>> dp(r + 1, vector<vector<double>>(s + 1, vector<double>(p + 1)));
		for (int i = 0; i <= r; ++i) {
			for(int j = 0; j <= s; ++j) {
				dp[i][j][0] = 1;
			}

		}

		for(int i = 1; i <= r; ++i) {
			for(int j = 1; j <= s; ++j) {
				for(int k = 1; k <= p; ++k) {
					double all = i * j + j * k + k * i;
					dp[i][j][k] = i * j / all * dp[i][j - 1][k] + j * k / all * dp[i][j][k - 1] + i *k/all * dp[i - 1][j][k];
				}
			}
		}
		return dp[r][s][p];
	}
};


int main() {
	std::cin.sync_with_stdio(false);
	std::cin.tie(0);
	std::cout << std::fixed;
	std::cout.precision(20);
	TaskD solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}