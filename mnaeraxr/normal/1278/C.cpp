/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author marX
 */

#include <iostream>
#include <fstream>

#include <bits/stdc++.h>

using namespace std;

class CBerryJam {
public:
    void solve(std::istream &in, std::ostream &out) {
        int t;
        in >> t;

        while (t--) {
            int n;
            in >> n;

            vector<int> l(n + 1), r(n + 1);

            for (int i = 0; i < n; ++i) {
                int u;
                in >> u;
                l[i + 1] = u == 1 ? +1 : -1;
            }

            for (int i = 0; i < n; ++i) {
                int u;
                in >> u;
                r[i] = u == 1 ? +1 : -1;
            }

            map<int, int> a;

            int c = 0;
            for (int i = n; i >= 0; --i) {
                c += r[i];
                a[c] = i;
            }

            int answer = 2 * n;

            c = 0;
            for (int i = 0; i <= n; ++i) {
                c += l[i];

                if (a.find(-c) != a.end())
                    answer = min(answer, n - i + a[-c]);
            }

            out << answer << endl;
        }
    }
};


int main() {
    CBerryJam solver;
    std::istream &in(std::cin);
    std::ostream &out(std::cout);
    solver.solve(in, out);
    return 0;
}