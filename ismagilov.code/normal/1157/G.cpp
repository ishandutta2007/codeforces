/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Azat Ismagilov
 */

#include <fstream>

#include <iostream>
#include <algorithm>
#include <vector>
#include <numeric>

#define int long long
#define fs first
#define sc second
#define pb push_back
#define ppb pop_back
#define pf push_front
#define ppf pop_front
#define mp make_pair
#define len(v) ((int)v.size())
#define vc vector
#define pr pair
#define all(v) v.begin(), v.end()
//#pragma GCC optimize("Ofast")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,tune=native")
//#pragma GCC optimize("unroll-loops")

using namespace std;

template<typename T, typename U>
inline ostream &operator<<(ostream &_out, const pair<T, U> &_p) {
    _out << _p.first << ' ' << _p.second;
    return _out;
}

template<typename T, typename U>
inline istream &operator>>(istream &_in, pair<T, U> &_p) {
    _in >> _p.first >> _p.second;
    return _in;
}

template<typename T>
inline ostream &operator<<(ostream &_out, const vector<T> &_v) {
    if (_v.empty()) { return _out; }
    _out << _v.front();
    for (auto _it = ++_v.begin(); _it != _v.end(); ++_it) { _out << ' ' << *_it; }
    return _out;
}

template<typename T>
inline istream &operator>>(istream &_in, vector<T> &_v) {
    for (auto &_i : _v) { _in >> _i; }
    return _in;
}

const int MAXN = 1e5;
const int INF = 1e9;
const int MOD = 1e9 + 7;

class GObrashenieStrokIStolbcov {
public:
    void solve(std::istream &in, std::ostream &out) {
        int n, m;
        in >> n >> m;
        vc<vc<int>> a(n, vc<int>(m));
        in >> a;
        {
            int counts = 0;
            for (int i = 0; i < n; i++) {
                int x = 0;
                for (int j = 0; j < m; j++) {
                    if ((j > 0) && ((a[0][j] ^ a[i][j]) != x)) {
                        counts++;
                    }
                    x = a[0][j] ^ a[i][j];
                }
            }
            if (counts <= 1) {
                out << "YES\n";
                string ans1, ans2;
                counts = 0;
                for (int i = 0; i < n; i++) {
                    int x = 0;
                    for (int j = 0; j < m; j++) {
                        if ((j > 0) && (a[0][j] ^ a[i][j]) != x) {
                            counts++;
                        }
                        x = a[0][j] ^ a[i][j];
                    }
                    ans1.push_back('0' + a[0][m - 1] ^ a[i][m - 1] ^ counts);
                }
                for (int j = 0; j < m; j++) {
                    ans2.push_back('0' + a[0][j]);
                }
                out << ans1 << '\n' << ans2;
                return;
            }
        }
        {
            int counts = 0;
            for (int i = 0; i < n; i++) {
                int x = 0;
                for (int j = 0; j < m; j++) {
                    if ((j > 0) && ((a[n - 1][j] ^ a[i][j] ^ 1) != x)) {
                        counts++;
                    }
                    x = a[n - 1][j] ^ a[i][j] ^ 1;
                }
            }
            if (counts <= 1) {
                out << "YES\n";
                string ans1, ans2;
                counts = 0;
                for (int i = n - 1; i >= 0; i--) {
                    int x = 0;
                    for (int j = 0; j < m; j++) {
                        if ((j > 0) && (a[n - 1][j] ^ a[i][j] ^ 1) != x) {
                            counts++;
                        }
                        x = a[n - 1][j] ^ a[i][j] ^ 1;
                    }
                    ans1.push_back('0' + a[n - 1][0] ^ a[i][0] ^ counts);
                }
                reverse(all(ans1));
                for (int j = 0; j < m; j++) {
                    ans2.push_back('0' + a[n - 1][j] ^ 1);
                }
                out << ans1 << '\n' << ans2;
                return;
            }
        }
        out << "NO";
    }
};


main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    GObrashenieStrokIStolbcov solver;
    std::istream &in(std::cin);
    std::ostream &out(std::cout);
    solver.solve(in, out);
    return 0;
}