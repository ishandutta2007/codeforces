/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;
typedef pair<ld, ld> pld;
typedef pair<string, string> pss;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define file_io                     freopen("in.txt" , "r+" , stdin) ; freopen("out.txt" , "w+" , stdout);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

inline ll input() {
    ll n;
    cin >> n;
    return n;
}

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

set_random;

const ll MAXN = 110;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n , k , mp[MAXN][MAXN];
pll car[MAXN] , target[MAXN];
vector<ll> order;
vector<pair<ll , pll>> ans;

void move(pll &start , pll end){
    ll x0 = start.X , y0 = start.Y , x1 = end.X , y1 = end.Y;
    ans.push_back({mp[x0][y0] , end});
    mp[x1][y1] = mp[x0][y0];
    mp[x0][y0] = 0;
    start = end;
}

void moveToTarget(){
    for(ll i = 1 ; i <= k ; i++){
        if(abs(target[i].X - car[i].X) + abs(target[i].Y - car[i].Y) == 1){
            move(car[i] , target[i]);
            car[i] = {-1 , -1};
            target[i] = {-1 , -1};
        }
    }
}

ll findEmpty(ll r){
    for(ll i = n ; i >= 1 ; i--){
        if(mp[r][i] == 0)   return i;
    }
    return -1;
}

void shift(ll ind){
    for(ll i = ind + 1 ; i <= n ; i++){
        if(mp[2][i] == 0) continue;
        move(car[mp[2][i]] , {2 , i - 1});
    }
}

void start(){
    for(ll i = n ; i >= 1 ; i--){
        if(mp[2][i] != 0)   order.push_back(mp[2][i]);
    }
    for(ll i = 1 ; i <= n ; i++){
        if(mp[3][i] != 0)   order.push_back(mp[3][i]);
    }
}

ll empty(){
    for(ll i : order){
        if(car[i].X != -1)  return 0;
    }
    return 1;
}

pll next(pll p){
    if(p == Mp(2LL , n))    return {3 , n};
    if(p == Mp(3LL , 1LL))  return {2 , 1};
    if(p.X == 2)            return {p.X , p.Y + 1};
    if(p.X == 3)            return {p.X , p.Y - 1};
}

void go(){
    while(1){
        if(empty()) break;
        for(ll i : order){
            if(car[i].X != -1)  move(car[i] , next(car[i]));
        }
        moveToTarget();
    }
}

int main() {
    fast_io;
    fill(car , car + MAXN , Mp(-1 , -1));
    fill(target , target + MAXN , Mp(-1 , -1));

    cin >> n >> k;
    for(ll i = 1 ; i <= 4 ; i++){
        for(ll j = 1 ; j <= n ; j++){
            cin >> mp[i][j];
            if(mp[i][j]){
                if(i == 1 || i == 4)    target[mp[i][j]] = {i , j};
                if(i == 2 || i == 3)    car[mp[i][j]] = {i , j};
            }
        }
    }

    moveToTarget();

    ll ind = findEmpty(2);
    if(ind == -1){
        ind = findEmpty(3);
        if(ind == -1)   return cout << -1 << endl , 0;
        move(car[mp[2][ind]] , {3 , ind});
    }
    shift(ind);
    start();
    go();

    cout << ans.size() << endl;
    for(pair<ll , pll> i : ans) cout << i.X << sep << i.Y.X << sep << i.Y.Y << endl;

    return 0;
}
/*
todo :
    1- set constants
    2- check TimeLimit and MemoryLimit
    3- check special test cases
    4- don't forget BS can help you that is good idea(use for loop for floats)
    5- don't forget printf and scanf can help you in your code speed
*/