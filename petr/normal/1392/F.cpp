/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <algorithm>
#include <array>
#include <bitset>
#include <cassert>
#include <climits>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <functional>
#include <iostream>
#include <map>
#include <memory>
#include <numeric>
#include <queue>
#include <random>
#include <set>
#include <stack>
#include <string>
#include <unordered_set>
#include <unordered_map>
#include <vector>

#define pb push_back
#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()
#define mp make_pair

using namespace std;

typedef long long int64;
typedef vector<int> vi;
typedef pair<int, int> ii;

class TaskF {
 public:
  void solveOne(istream &in, ostream &out) {
    int n;
    in >> n;
    vector<int> zeroAt;
    int64 right;
    in >> right;
    for (int i = 1; i < n; ++i) {
      int64 h;
      in >> h;
      int64 nright = h;
      h -= right;
      right = nright;
      while (h >= 2) {
        if (zeroAt.empty()) {
          if (i > 1) {
            int64 cycle = i;
            int64 whole = h / (cycle + 1);
            if (whole > 0) {
              h -= whole * (cycle + 1);
              right -= whole * cycle;
            } else {
              zeroAt.push_back(1);
              --h;
              --right;
            }
          } else {
            int64 whole = h / 2;
            h -= 2 * whole;
            right -= whole;
          }
        } else {
          int pos = zeroAt.back();
          if (pos == i - 1) {
            zeroAt.pop_back();
            --right;
            h -= 2;
          } else {
            int moves = i - pos - 1;
            int by = min((int64) moves, h - 1);
            zeroAt.back() += by;
            h -= by;
            right -= by;
          }
        }
      }
      if (h == 0) {
        zeroAt.push_back(i);
      }
    }
    vector<int64> res(n);
    res[n - 1] = right;
    int ptr = int(zeroAt.size()) - 1;
    for (int i = n - 1; i > 0; --i) {
      if (ptr >= 0 && zeroAt[ptr] == i) {
        res[i - 1] = res[i];
        --ptr;
      } else {
        res[i - 1] = res[i] - 1;
      }
    }
    for (auto x : res) {
      out << x << " ";
    }
    out << "\n";
  }

  void solve(std::istream &in, std::ostream &out) {
    int nt = 1;
    for (int it = 0; it < nt; ++it) {
      solveOne(in, out);
    }
  }
};


int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  TaskF solver;
  std::istream& in(std::cin);
  std::ostream& out(std::cout);
  solver.solve(in, out);
  return 0;
}