/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <algorithm>
#include <array>
#include <bitset>
#include <cassert>
#include <climits>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <functional>
#include <iostream>
#include <map>
#include <memory>
#include <numeric>
#include <queue>
#include <random>
#include <set>
#include <stack>
#include <string>
#include <unordered_map>
#include <vector>

#define pb push_back
#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()
#define mp make_pair

using namespace std;

typedef long long int64;
typedef vector<int> vi;
typedef pair<int, int> ii;

class TaskB {
 public:
  vector<string> data{"1110111", "0010010", "1011101", "1011011", "0111010", "1101011", "1101111", "1010010", "1111111", "1111011"};

  void solveOne(istream &in, ostream &out) {
    int n, k;
    in >> n >> k;
    vector<vector<int>> can(n, vector<int>(10, 0));
    for (int i = 0; i < n; ++i) {
      string s;
      in >> s;
      for (int j = 0; j < 10; ++j) {
        string t = data[j];
        for (int p = 0; p < 7; ++p) if (s[p] != t[p]) {
          if (t[p] == '1') {
            ++can[i][j];
          } else {
            can[i][j] = -1;
            break;
          }
        }
      }
    }

    vector<vector<bool>> canSuffix(n + 1, vector<bool>(k + 1, false));
    canSuffix[0][0] = true;
    for (int i = 0; i < n; ++i) {
      for (int j = 0; j < 10; ++j) {
        int d = can[n - 1 - i][j];
        if (d < 0) continue;
        for (int o = 0; o + d <= k; ++o) {
          if (canSuffix[i][o]) canSuffix[i + 1][o + d] = true;
        }
      }
    }

    if (!canSuffix[n][k]) {
      out << -1 << "\n";
      return;
    }

    int togo = k;
    string ret(n, '?');
    for (int i = 0; i < n; ++i) {
      for (int j = 9; j >= 0; --j) {
        int d = can[i][j];
        if (d < 0 || d > togo) continue;
        if (canSuffix[n - 1 - i][togo - d]) {
          ret[i] = '0' + j;
          togo -= d;
          break;
        }
      }
    }

    out << ret << "\n";
  }

  void solve(std::istream &in, std::ostream &out) {
    int nt = 1;
    for (int it = 0; it < nt; ++it) {
      solveOne(in, out);
    }
  }
};


int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  TaskB solver;
  std::istream& in(std::cin);
  std::ostream& out(std::cout);
  solver.solve(in, out);
  return 0;
}