/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Azat Ismagilov
 */

#include <fstream>

#include <iostream>
#include <algorithm>
#include <vector>
#include <queue>
#include <numeric>
#include <set>
#include <map>
#include <math.h>

#define int long long
#define ld long double
#define fs first
#define sc second
#define pb push_back
#define ppb pop_back
#define pf push_front
#define ppf pop_front
#define mp make_pair
#define len(v) ((int)v.size())
#define vc vector
#define pr pair
#define all(v) v.begin(), v.end()
//#pragma GCC optimize("Ofast")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,tune=native")
//#pragma GCC optimize("unroll-loops")
#define PI acos(-1.0)

using namespace std;

template<typename T, typename U>
inline ostream &operator<<(ostream &_out, const pair<T, U> &_p) {
    _out << _p.first << ' ' << _p.second;
    return _out;
}

template<typename T, typename U>
inline istream &operator>>(istream &_in, pair<T, U> &_p) {
    _in >> _p.first >> _p.second;
    return _in;
}

template<typename T>
inline ostream &operator<<(ostream &_out, const vector<T> &_v) {
    if (_v.empty()) { return _out; }
    _out << _v.front();
    for (auto _it = ++_v.begin(); _it != _v.end(); ++_it) { _out << ' ' << *_it; }
    return _out;
}

template<typename T>
inline istream &operator>>(istream &_in, vector<T> &_v) {
    for (auto &_i : _v) { _in >> _i; }
    return _in;
}

const int MAXN = 3e5;
const int INF = 1e9;
const int MOD = 1e9 + 7;

ld get_angle(ld x, ld y) {
    ld res = atan2(y, x);
    if (res < 0) {
        res += 2 * PI;
    }
    return res;
}

int pw(pr<int, int> a, pr<int, int> b) {
    return a.fs * b.sc - a.sc * b.fs;
}

int getc(int v) {
    return v * (v - 1) * (v - 2) / (3 * 2 * 1);
}

int solves(pr<int, int> a, vc<pr<int, int>> b) {
    vc<pr<ld, int>> ans;
    int i = 0;
    for (auto &v : b) {
        v.fs -= a.fs;
        v.sc -= a.sc;
        ans.pb({get_angle(v.fs, v.sc), i});
        i++;
    }
    sort(all(ans));
    int tek = 0;
    int n = len(b);
    int ansss = 0;
    for (int i = 0; i < n; i++) {
        tek = max(0ll, tek - 1);
        while (tek + 1 < n && pw(b[ans[i].sc], b[ans[(i + tek + 1) % n].sc]) > 0) {
            tek++;
        }
        ansss += getc(tek);
    }
    return ansss;
}

class ENoviiGodIStroitelstvoZamkom {
public:
    void solve(std::istream &in, std::ostream &out) {
        int n;
        in >> n;
        vc<pr<int, int>> a(n);
        in >> a;
        int ans = 0;
        for (int i = 0; i < n; i++) {
            vc<pr<int, int>> b;
            for (auto v : a) {
                if (a[i] != v) {
                    b.pb(v);
                }
            }
            ans += ((n - 1) * (n - 2) * (n - 3) * (n - 4) / (4 * 3 * 2 * 1)) - solves(a[i], b);
        }
        out << ans;
    }
};


signed main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    ENoviiGodIStroitelstvoZamkom solver;
    std::istream &in(std::cin);
    std::ostream &out(std::cout);
    solver.solve(in, out);
    return 0;
}