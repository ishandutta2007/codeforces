/* Generated by powerful Codeforces Tool
 * You can download the binary file in here https://github.com/xalanq/cf-tool (Windows, macOS, Linux)
 * Author: alireza_kaviani
 * Time: 2020-04-01 18:08:16
**/
#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 5000 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n , last[MAXN] , prv[MAXN] , dp[MAXN] , ps[MAXN];
string s;
vector<ll> vec;

int main() {
    ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);

    cin >> n >> s; s = s + ".";
    vec.push_back(-1);
    for(ll i = 0 ; i < n ; i++) if(s[i] != s[i + 1])    vec.push_back(s[i]);

    dp[0] = 1;
    fill(ps , ps + MAXN , 1);
    fill(last , last + MAXN , -1);
    for(ll i = 1 ; i < SZ(vec) ; i++)   prv[i] = last[vec[i]] , last[vec[i]] = i;
    for(ll i = 1 ; i <= n ; i++){
        for(ll j = 1 ; j < SZ(vec) ; j++){
            dp[j] = (ps[j] - (prv[j] == -1 ? 0 : ps[prv[j]]) + MOD) % MOD;
            //cout << i << sep << j << sep << dp[j] << endl;
        }
        ps[0] = 0;
        for(ll j = 1 ; j < SZ(vec) ; j++)   ps[j] = (ps[j - 1] + dp[j]) % MOD;
    }
    cout << ps[SZ(vec) - 1] << endl;

    return 0;
}
/*

*/