/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author RiaD
 */

#include <iostream>
#include <fstream>

#include <iostream>


#include <iterator>


#include <string>
#include <stdexcept>

#ifndef SPCPPL_ASSERT
	#ifdef SPCPPL_DEBUG
		#define SPCPPL_ASSERT(condition) \
		if(!(condition)) { \
			throw std::runtime_error(std::string() + #condition + " in line " + std::to_string(__LINE__) + " in " + __PRETTY_FUNCTION__); \
		}
	#else
		#define SPCPPL_ASSERT(condition)
	#endif
#endif


/**
* Support decrementing and multi-passing, but not declared bidirectional(or even forward) because
* it's reference type is not a reference.
*
* It doesn't return reference because
* 1. Anyway it'll not satisfy requirement [forward.iterators]/6
*   If a and b are both dereferenceable, then a == b if and only if *a and
*   b are bound to the same object.
* 2. It'll not work with reverse_iterator that returns operator * of temporary which is temporary for this iterator
*
* Note, reverse_iterator is not guaranteed to work  now too since it works only with bidirectional iterators,
* but it's seems to work at least on my implementation.
*
* It's not really useful anywhere except iterating anyway.
*/
template <typename T>
class IntegerIterator: public std::iterator<std::input_iterator_tag, T, std::ptrdiff_t, T*, T> {
public:
	explicit IntegerIterator(T value): value(value) {

	}

	IntegerIterator& operator++() {
		++value;
		return *this;
	}

	IntegerIterator operator++(int) {
		IntegerIterator copy = *this;
		++value;
		return copy;
	}

	IntegerIterator& operator--() {
		--value;
		return *this;
	}

	IntegerIterator operator--(int) {
		IntegerIterator copy = *this;
		--value;
		return copy;
	}

	T operator*() const {
		return value;
	}

	bool operator==(IntegerIterator rhs) const {
		return value == rhs.value;
	}

	bool operator!=(IntegerIterator rhs) const {
		return !(*this == rhs);
	}

private:
	T value;
};

template <typename T>
class IntegerRange {
public:
	IntegerRange(T begin, T end): begin_(begin), end_(end) {
		SPCPPL_ASSERT(begin <= end);
	}

	IntegerIterator<T> begin() const {
		return IntegerIterator<T>(begin_);
	}

	IntegerIterator<T> end() const {
		return IntegerIterator<T>(end_);
	}

private:
	T begin_;
	T end_;
};

template <typename T>
class ReversedIntegerRange {
	typedef std::reverse_iterator<IntegerIterator<T>> IteratorType;
public:
	ReversedIntegerRange(T begin, T end): begin_(begin), end_(end) {
		SPCPPL_ASSERT(begin >= end);
	}

	IteratorType begin() const {
		return IteratorType(IntegerIterator<T>(begin_));
	}

	IteratorType end() const {
		return IteratorType(IntegerIterator<T>(end_));
	}

private:
	T begin_;
	T end_;
};

template <typename T>
IntegerRange<T> range(T to) {
	return IntegerRange<T>(0, to);
}

template <typename T>
IntegerRange<T> range(T from, T to) {
	return IntegerRange<T>(from, to);
}

template <typename T>
IntegerRange<T> inclusiveRange(T to) {
	return IntegerRange<T>(0, to + 1);
}

template <typename T>
IntegerRange<T> inclusiveRange(T from, T to) {
	return IntegerRange<T>(from, to + 1);
}

template <typename T>
ReversedIntegerRange<T> downrange(T from) {
	return ReversedIntegerRange<T>(from, 0);
}

template <typename T>
ReversedIntegerRange<T> downrange(T from, T to) {
	return ReversedIntegerRange<T>(from, to);
}

template <typename T>
ReversedIntegerRange<T> inclusiveDownrange(T from) {
	return ReversedIntegerRange<T>(from + 1, 0);
}

template <typename T>
ReversedIntegerRange<T> inclusiveDownrange(T from, T to) {
	return ReversedIntegerRange<T>(from + 1, to);
}

#include <vector>


#include <cstddef>


template <typename T>
std::size_t leastSignificantBit(T number) {
	SPCPPL_ASSERT(number != 0);
	for (std::size_t i = 0; ; ++i) {
		if ((number >> i) & 1) {
			return i;
		}
	}
}

template <typename T>
bool isPowerOf2(T number) {
	return number != 0 && (number & (number - 1)) == 0;
}


using namespace std;

class TaskC {
public:

	int MAGIC = 40;
	int get_log(int64_t x) {
		int pw = 0;
		while (x > 1) {
			x /= 2;
			++pw;
		}
		return pw;
	}
	void solve(std::istream& in, std::ostream& out) {
		int n;
		in >> n;
		vector<int> good(MAGIC);
		vector<int> bad(MAGIC);

		for (int i: range(n)) {
			int64_t x;
			in >> x;
			if (isPowerOf2(x)) {
				++good[get_log(x)];
			} else {
				++bad[get_log(x)];
			}
		}

		for (int i: range(1, MAGIC)) {
			bad[i] += good[i];
			good[i] = min(good[i - 1], good[i]);
			bad[i] -= good[i];
		}
		if (!can(good, bad)) {
			out << -1;
			return;;
		}

		int mx = good[0];

		int l = 0, r = mx;
		while (r - l > 1) {
			int m = (l + r) / 2;
			vector<int> newGood(MAGIC);
			vector<int> newBad(MAGIC);
			for (int i: range(MAGIC)) {
				newGood[i] = min(m, good[i]);
				newBad[i] = good[i] + bad[i] - newGood[i];
			}
			if (can(newGood, newBad)) {
				r = m;
			} else {
				l = m;
			}
		}

		for (int i = r; i <= mx; ++i) {
			out << i << " ";
		}

	}

	bool can(vector<int> good, vector<int> bad) {
		int sumBad = 0;
		for (int i: downrange(MAGIC)) {
			sumBad += bad[i];
			if (sumBad > good[i]) {
				return false;
			}
		}
		return true;
	}
};


int main() {
	std::ios_base::sync_with_stdio(false);
	TaskC solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	in.tie(nullptr);
	out << std::fixed;
	out.precision(20);
	solver.solve(in, out);
	return 0;
}