/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;
typedef pair<ld, ld> pld;
typedef pair<string, string> pss;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define file_io                     freopen("in.txt" , "r+" , stdin) ; freopen("out.txt" , "w+" , stdout);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

inline ll input() {
    ll n;
    cin >> n;
    return n;
}

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

set_random;

const ll MAXN = 1e6 + 10;
const ll INF = 8e18;
const ll MOD = 1e9 + 7;
const ll MOD1 = 998244353;
const ll MOD2 = 1e9 + 7;
const ll MOD3 = 1e9 + 9;

ll n , v , maxl = 1 , minr , ans , x[MAXN] , L[MAXN] , R[MAXN];
pll p[MAXN];
Tree<pll> tr;

int main() {
    fast_io;
    fill(L , L + MAXN , -1);
    fill(R , R + MAXN , -1);

    cin >> n >> v;
    for(ll i = 0 ; i < n ; i++)
    {
        cin >> x[i];
        p[i] = {x[i] , i};
    }

    minr = v;
    sort(p , p + n);
    p[n] = {v , INF};
    for(ll i = 0 ; i < n ; i++)
    {
        if(i != 0 && p[i].Y < p[i - 1].Y)   break;
        if(p[i].X != p[i + 1].X)    maxl = p[i + 1].X;
        if(i == n - 1)              maxl = v;
    }

    for(ll i = n - 1 ; i >= 0 ; i--)
    {
        if(p[i].Y > p[i + 1].Y) break;
        if(i == 0)  minr = 1;
        else
        {
            minr = p[i - 1].X;
        }
    }

    for(ll i = 1 ; i <= maxl ; i++)
    {
        ll ind = lower_bound(p , p + n , Mp(i , -INF)) - p - 1;
        if(ind == -1)   L[i] = -INF;
        else            L[i] = p[ind].Y;

    }

    for(ll i = minr ; i <= v ; i++)
    {
        ll ind = upper_bound(p , p + n , Mp(i , INF)) - p;
        if(ind == n)    R[i] = INF;
        else            R[i] = p[ind].Y;
    }

    for(ll i = 1 ; i <= v ; i++)
    {
        if(L[i] != -1)
        {
            tr.insert({L[i] , i});
        }
        if(R[i] != -1)
        {
            ans += tr.order_of_key({R[i] + 1 , -INF});
        }
    }
    cout << ans << endl;

    return 0;
}
/*
todo :
    1- set constants
    2- check TimeLimit and MemoryLimit
    3- check special test cases
    4- don't forget BS can help you that is good idea(use for loop for floats)
    5- don't forget printf and scanf can help you in your code speed
*/