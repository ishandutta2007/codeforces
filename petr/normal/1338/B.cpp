/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <vector>
#include <utility>
#include <iostream>
#include <cmath>
#include <algorithm>
#include <set>
#include <string>
#include <cassert>

#define pb push_back
#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()
#define mp make_pair

using namespace std;

typedef long long int64;
typedef vector<int> vi;
typedef pair<int, int> ii;

class TaskB {
 public:
  vector<vector<int>> adj;
  int n;
  vector<int> color;

  void dfs(int root, int parent, int col) {
    color[root] = col;
    for (int x : adj[root]) {
      if (x == parent) continue;
      dfs(x, root, 1 - col);
    }
  }

  void solveOne(istream &in, ostream &out) {
    in >> n;
    adj = vector<vector<int>>(n);
    for (int i = 0; i < n - 1; ++i) {
      int a;
      int b;
      in >> a >> b;
      --a;
      --b;
      adj[a].push_back(b);
      adj[b].push_back(a);
    }
    color = vector<int>(n);
    dfs(0, -1, 0);
    int seen = 0;
    vector<bool> haveLeaf(n);
    for (int i = 0; i < n; ++i) if (adj[i].size() == 1) {
      seen |= 1 << color[i];
      haveLeaf[adj[i][0]] = true;
    }
    int minf;
    if (seen != 3) {
      minf = 1;
    } else {
      minf = 3;
    }
    int numleaf = 0;
    for (int i = 0; i < n; ++i) if (haveLeaf[i]) ++numleaf;
    int maxf = numleaf;
    for (int i = 0; i < n; ++i) if (adj[i].size() > 1) {
      ++maxf;
    }
    --maxf;
    out << minf << " " << maxf << "\n";
  }

  void solve(std::istream &in, std::ostream &out) {
    int nt = 1;
    for (int it = 0; it < nt; ++it) {
      solveOne(in, out);
    }
  }
};


int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  TaskB solver;
  std::istream& in(std::cin);
  std::ostream& out(std::cout);
  solver.solve(in, out);
  return 0;
}