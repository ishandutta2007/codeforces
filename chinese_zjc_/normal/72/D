S := File standardInput readLine
readint := method(s, i,
  ret := 0
  while(48 <= s at(i) and s at(i) <= 57,
    ret = ret*10 + s at(i)-48
    i = i+1
  )
  list(i, ret)
)
readstr := method(s, i,
  start := i+1
  i = i+1
  while(s at(i) != 34, i = i+1)
  list(i+1, s slice(start, i))
)
reverseP := method(s, i,
  tmp := program(s, i+8)
  i = tmp at(0) + 1
  ret := ""
  L := tmp at(1) size
  for(x, L-1, 0, -1,
    p := tmp at(1) at(x) asCharacter
    ret = ret .. p
  )
  list(i, ret)
)
concatP := method(s, i,
  tmp := program(s, i+7)
  i = tmp at(0) + 1
  x := tmp at(1)
  tmp = program(s, i)
  i = tmp at(0) + 1
  y := tmp at(1)
  list(i, x .. y)
)
substrP := method(s, i,
  tmp := program(s, i+7)
  i = tmp at(0) + 1
  x := tmp at(1)
  tmp = readint(s, i)
  i = tmp at(0) + 1
  a := tmp at(1)
  tmp = readint(s, i)
  i = tmp at(0)
  b := tmp at(1)
  if(s at(i)==44,
    tmp = readint(s, i+1)
    i = tmp at(0) + 1
    c := tmp at(1)
    ret := ""
    a = a-1
    while(a<b,
      p := x at(a) asCharacter
      ret = ret .. p
      a = a + c
    )
    list(i, ret)
    ,
    list(i+1, x slice(a-1, b))
  )
)
callP := method(s, i,
  if(s at(i)==99 or s at(i)==67, concatP(s, i),
  if(s at(i)==114 or s at(i)==82, reverseP(s, i), substrP(s, i)))
)
program := method(s, i,
  if(s at(i)==34,
    readstr(s, i),
    callP(s, i)
  )
)
t := program(S, 0) at(1)
"\"" print
t print
"\"" println
/*
copy because lazy
//This Code was made by Chinese_zjc_.
#include <iostream>
#include <fstream>
#include <iomanip>
#include <algorithm>
#include <vector>
#include <bitset>
#include <cmath>
#include <queue>
#include <stack>
#include <list>
#include <string>
#include <cstring>
#include <cstdio>
#include <cstdlib>
#include <cctype>
#include <map>
#include <set>
#include <ctime>
// #define debug
#define int long long
#define double long double
const double PI = acos(-1);
const double eps = 0.0000000001;
const int INF = 0x3fffffffffffffff;
std::string s;
std::string concat(std::string A, std::string B) { return A + B; }
std::string reverse(std::string x)
{
    std::reverse(x.begin(), x.end());
    return x;
}
std::string substr(std::string x, int l, int r, int m = 1)
{
    x = x.substr(l, r - l);
    std::string res;
    for (int i = 0; i != (int)x.size(); ++i)
        if (i % m == 0)
            res += x[i];
    return res;
}
std::string getname(int pos)
{
    std::string res;
    while (pos != (int)s.size() && isalpha(s[pos]))
        res += tolower(s[pos++]);
    return res;
}
std::pair<std::string, int> work(int l)
{
    if (s[l] == '\"')
    {
        int pos = s.find('\"', l + 1) + 1;
        return std::make_pair(s.substr(l + 1, pos - l - 2), pos);
    }
    if (isdigit(s[l]))
    {
        int pos = l;
        while (pos != (int)s.size() && isdigit(s[pos]))
            ++pos;
        return std::make_pair(s.substr(l, pos - l), pos);
    }
    std::string name = getname(l);
    if (name == "concat")
    {
        std::pair<std::string, int> A = work(l + name.size() + 1),
                                    B = work(A.second + 1);
        return std::make_pair(concat(A.first, B.first), B.second + 1);
    }
    else if (name == "reverse")
    {
        std::pair<std::string, int> A = work(l + name.size() + 1);
        return std::make_pair(reverse(A.first), A.second + 1);
    }
    else if (name == "substr")
    {
        std::pair<std::string, int> A = work(l + name.size() + 1),
                                    B = work(A.second + 1),
                                    C = work(B.second + 1),
                                    D = s[C.second] == ',' ? work(C.second + 1) : std::make_pair("1", C.second);
        return std::make_pair(substr(A.first, atoi(B.first.c_str()) - 1, atoi(C.first.c_str()), atoi(D.first.c_str())),
                              D.second + 1);
    }
    std::cerr << "ERROR" << std::endl;
    exit(114514);
}
signed main()
{
    std::ios::sync_with_stdio(false);
    std::cin >> s;
    std::cout << "\"" << work(0).first << "\"" << std::endl;
    return 0;
}
*/