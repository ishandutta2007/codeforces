/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 3e5 + 10;
const ll INF = 8e18;
const ll MOD = 998244353; // 1e9 + 9;

ll n , ans , fact[MAXN] , inv[MAXN] , cntA[MAXN] , cntB[MAXN];
pll A[MAXN];
map<pll , ll> cnt;

int main() {
    fast_io;
    fact[0] = 1;
    for(ll i = 1 ; i < MAXN ; i++)  fact[i] = (fact[i - 1] * i) % MOD;

    cin >> n;
    for(ll i = 0 ; i < n ; i++){
        cin >> A[i].X >> A[i].Y;
        cnt[A[i]]++;
        cntA[A[i].X]++;
        cntB[A[i].Y]++;
    }

    ans = fact[n];
    ll x = 1 , y = 1;
    for(ll i = 0 ; i < MAXN ; i++)  x = (x * fact[cntA[i]]) % MOD , y = (y * fact[cntB[i]]) % MOD;
    ans = (ans + MOD * 1000 - x - y) % MOD;

    sort(A , A + n);
    ll ok = 1;
    for(ll i = 1 ; i < n ; i++){
        if(A[i].Y < A[i - 1].Y) ok = 0;
    }
    if(ok){
        ll t = 1;
        for(auto &i : cnt){
            t = t * fact[i.Y] % MOD;
        }
        ans = (ans + t) % MOD;
    }
    cout << ans << endl;

    return 0;
}
/*

*/