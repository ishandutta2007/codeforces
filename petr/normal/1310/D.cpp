/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <bits/stdc++.h>

#define pb push_back
#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()
#define mp make_pair

using namespace std;

typedef long long int64;
typedef vector<int> vi;
typedef pair<int, int> ii;

class TaskD {
 public:
  const int INF = (int) 1e9 + 10;

  void solveOne(istream &in, ostream &out) {
    int n;
    int k;
    in >> n >> k;
    vector<vector<int>> cost(n, vector<int>(n));
    for (int i = 0; i < n; ++i) {
      for (int j = 0; j < n; ++j) {
        in >> cost[i][j];
      }
    }
    auto start = clock();
    mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
    uniform_int_distribution<int> distrib(0, 1);
    int res = INF;
    while (clock() < start + 2 * CLOCKS_PER_SEC) {
      vector<int> color(n);
      for (int i = 1; i < n; ++i) {
        color[i] = distrib(rng);
      }
      vector<int> best(n, INF);
      best[0] = 0;
      vector<int> nbest(n);
      for (int step = 0; step < k; ++step) {
        int label = step % 2;
        fill(nbest.begin(), nbest.end(), INF);
        for (int i = 0; i < n; ++i) if (color[i] == label) {
          for (int j = 0; j < n; ++j) if (color[j] == 1 - label) {
            nbest[j] = min(nbest[j], best[i] + cost[i][j]);
          }
        }
        best.swap(nbest);
      }
      res = min(res, best[0]);
    }
    out << res << "\n";
  }

  void solve(std::istream &in, std::ostream &out) {
    int nt;
    nt = 1;
    for (int it = 0; it < nt; ++it) {
      solveOne(in, out);
    }
  }
};


int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  TaskD solver;
  std::istream& in(std::cin);
  std::ostream& out(std::cout);
  solver.solve(in, out);
  return 0;
}