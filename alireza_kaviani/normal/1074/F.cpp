/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 2e5 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n, q, timer, st[MAXN], fn[MAXN], H[MAXN], par[LOG][MAXN];
map<pll, ll> mp;
vector<ll> adj[MAXN];
pair<int, int> seg[MAXN << 2];
int lz[MAXN << 2];

void build(int id = 1, int l = 0, int r = MAXN) {
    seg[id].Y = r - l;
    if (r - l == 1) return;
    int mid = l + r >> 1;
    build(id << 1, l, mid);
    build(id << 1 | 1, mid, r);
}

void shift(int id) {
    lz[id << 1] += lz[id];
    lz[id << 1 | 1] += lz[id];
    seg[id << 1].X += lz[id];
    seg[id << 1 | 1].X += lz[id];
    lz[id] = 0;
}

void update(int ql, int qr, int x, int id = 1, int l = 0, int r = MAXN) {
    if (qr <= l || r <= ql) return;
    if (ql <= l && r <= qr) {
        lz[id] += x;
        seg[id].X += x;
        return;
    }
    shift(id);
    int mid = l + r >> 1;
    update(ql, qr, x, id << 1, l, mid);
    update(ql, qr, x, id << 1 | 1, mid, r);
    seg[id].X = min(seg[id << 1].X, seg[id << 1 | 1].X);
    seg[id].Y = (seg[id << 1].X == seg[id].X) * seg[id << 1].Y + (seg[id << 1 | 1].X == seg[id].X) * seg[id << 1 | 1].Y;
}

int get(int ql, int qr, int id = 1, int l = 0, int r = MAXN) {
    if (qr <= l || r <= ql) return 0;
    if (ql <= l && r <= qr) return (seg[id].X == 0) * seg[id].Y;
    shift(id);
    int mid = l + r >> 1;
    return get(ql, qr, id << 1, l, mid) + get(ql, qr, id << 1 | 1, mid, r);
}

void DFS(ll v, ll p = 0) {
    par[0][v] = p;
    H[v] = H[p] + 1;
    st[v] = timer++;
    for (ll u : adj[v]) if (u != p) DFS(u, v);
    fn[v] = timer;
}

ll getPar(ll v, ll h) {
    for (ll i = 0; i < LOG; i++) if (h & (1ll << i)) v = par[i][v];
    return v;
}

ll LCA(ll v, ll u) {
    u = getPar(u, H[u] - H[v]);
    if (u == v) return u;
    for (ll i = LOG - 1; i >= 0; i--) {
        if (par[i][v] != par[i][u]) {
            v = par[i][v];
            u = par[i][u];
        }
    }
    return par[0][v];
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    cin >> n >> q;
    for (ll i = 1; i < n; i++) {
        ll v, u;
        cin >> v >> u;
        adj[v].push_back(u);
        adj[u].push_back(v);
    }
    DFS(1);
    for (ll i = 1; i < LOG; i++) {
        for (ll j = 0; j <= n; j++) {
            par[i][j] = par[i - 1][par[i - 1][j]];
        }
    }

    build();
    while (q--) {
        ll v, u, d;
        cin >> v >> u;
        if (H[v] > H[u] || H[v] == H[u] && v > u) swap(v, u);
        d = (mp[{v, u}] ? -1 : 1);
        mp[{v, u}] ^= 1;
        ll lca = LCA(v, u);
        if (v == lca) {
            v = getPar(u, H[u] - H[v] - 1);
            update(st[v], fn[v], d);
            update(st[u], fn[u], -d);
        } else {
            update(0, n, d);
            update(st[v], fn[v], -d);
            update(st[u], fn[u], -d);
        }
        cout << get(0, n) << endl;
    }

    return 0;
}
/*

*/