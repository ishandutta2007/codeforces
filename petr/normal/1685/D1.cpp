/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

// Actual solution is at the bottom

#undef NDEBUG

#include <algorithm>
#include <array>
#include <bitset>
#include <cassert>
#include <climits>
#include <cstdint>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <memory>
#include <numeric>
#include <queue>
#include <random>
#include <set>
#include <stack>
#include <string>
#include <unordered_set>
#include <unordered_map>
#include <vector>
// AtCoder library from https://github.com/atcoder/ac-library
// #include "../atcoder/all"

#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()

using namespace std;

typedef int64_t int64;
typedef pair<int, int> ii;

class D1VesPerestanovkiProstayaVersiya {
 public:
  void solveOne() {
    int n;
    cin >> n;
    vector<int> p(n);
    for (auto& x : p) {
      cin >> x;
      --x;
    }
    vector<int> cycle(n, -1);
    int cycles = 0;
    for (int i = 0; i < n; ++i) if (cycle[i] < 0) {
      int j = i;
      do {
        cycle[j] = cycles;
        j = p[j];
      } while (j != i);
      ++cycles;
    }
    for (int i = 0; i + 1 < n; ++i) if (cycle[i] != cycle[i + 1]) {
      int a = cycle[i];
      int b = cycle[i + 1];
      for (int j = 0; j < n; ++j) if (cycle[j] == b) cycle[j] = a;
      a = -1;
      b = -1;
      for (int j = 0; j < n; ++j) {
        if (p[j] == i) a = j;
        if (p[j] == i + 1) b = j;
      }
      swap(p[a], p[b]);
    }
    int i = 0;
    vector<int> q(n);
    for (int j = n - 1; j >= 0; --j) {
      q[j] = i;
      i = p[i];
    }
    for (int x : q) cout << (x + 1) << " ";
    cout << "\n";
  }

  void solve() {
    int nt;
    cin >> nt;
    for (int it = 0; it < nt; ++it) {
      // cout << "Case #" << (it + 1) << ": ";
      solveOne();
    }
  }
};

// #define st_mtimespec st_mtim

int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(0);
    D1VesPerestanovkiProstayaVersiya solver;


    solver.solve();
    return 0;
}