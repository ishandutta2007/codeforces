/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author majk
 */

#ifndef MAJK_LIB
#define MAJK_LIB

#include <vector>
#include <stack>
#include <iostream>
#include <unordered_map>
#include <unordered_set>
#include <map>
#include <iomanip>
#include <set>
#include <functional>
#include <fstream>
#include <algorithm>
#include <cassert>
#include <cmath>
#include <string>
#include <sstream>
#include <queue>
#include <bitset>
using namespace std;

#define x first
#define y second
typedef std::pair<int,int> pii; typedef long long ll; typedef unsigned long long ull; typedef unsigned int ui; typedef pair<ui,ui> puu;

template <typename T, typename U> std::istream&operator>>(std::istream&i, pair<T,U>&p) {i >> p.x >> p.y; return i;}
template<typename T>std::istream&operator>>(std::istream&i,vector<T>&t) {for(auto&v:t){i>>v;}return i;}
template <typename T, typename U> std::ostream&operator<<(std::ostream&o, const pair<T,U>&p) {o << p.x << ' ' << p.y; return o;}
template<typename T>std::ostream&operator<<(std::ostream&o,const vector<T>&t) {if(t.empty())o<<'\n';for(size_t i=0;i<t.size();++i){o<<t[i]<<" \n"[i == t.size()-1];}return o;}
template<typename T> using minheap = priority_queue<T, vector<T>, greater<T>>;
template<typename T> using maxheap = priority_queue<T, vector<T>, less<T>>;
template <typename T> bool in(T a, T b, T c) { return a <= b && b < c; }
ui logceil(int x) { return 8*sizeof(int)-__builtin_clz(x); }

namespace std { template<typename T,typename U>struct hash<pair<T,U>>{hash<T>t;hash<U>u;size_t operator()(const pair<T,U>&p)const{return t(p.x)^(u(p.y)<<7);}}; }
template<typename T,typename F>T bsh(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){l=m+1;r=m;}else{h=m-1;}}return r;}
template<typename F> double bshd(double l,double h,const F&f,double p=1e-9){ui r=3+(ui)log2((h-l)/p);while(r--){double m=(l+h)/2;if(f(m)){l=m;}else{h=m;}}return (l+h)/2;}
template<typename T,typename F>T bsl(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){h=m-1;r=m;}else{l=m+1;}}return r;}
template<typename F> double bsld(double l,double h,const F&f,double p=1e-9){ui r=3+(ui)log2((h-l)/p);while(r--){double m=(l+h)/2;if(f(m)){h=m;}else{l=m;}}return (l+h)/2;}
template<typename T> T gcd(T a,T b) { if (a<b) swap(a,b); return b?gcd(b,a%b):a; }

template<typename T>class vector2:public vector<vector<T>>{public:vector2(){} vector2(size_t a,size_t b,T t=T()):vector<vector<T>>(a,vector<T>(b,t)){}};
template<typename T>class vector3:public vector<vector2<T>>{public:vector3(){} vector3(size_t a,size_t b,size_t c,T t=T()):vector<vector2<T>>(a,vector2<T>(b,c,t)){}};
template<typename T>class vector4:public vector<vector3<T>>{public:vector4(){} vector4(size_t a,size_t b,size_t c,size_t d,T t=T()):vector<vector3<T>>(a,vector3<T>(b,c,d,t)){}};
template<typename T>class vector5:public vector<vector4<T>>{public:vector5(){} vector5(size_t a,size_t b,size_t c,size_t d,size_t e,T t=T()):vector<vector4<T>>(a,vector4<T>(b,c,d,e,t)){}};


#endif
// #include "../l/mod.h"

constexpr int SIZE = 1500;
vector<int> Lucky;
vector<bool> LCC;

class luckyarray {
public:

    struct Segment {
        int L,R,Delta;
        vector<int> A, C;

        Segment(int l, int r, const vector<int> &X) : L(l), R(r), Delta(0), A(r-l), C(1e4+1, 0) {
            for (int i = l; i < r; ++i) C[A[i-l] = X[i]]++;
        }

        void add(int l, int r, int x) {
            if (r <= L || l >= R) return;
            if (l <= L && r >= R) Delta += x;
            else {
                for (int i = L; i < R; ++i) C[A[i-L]]--;

                for (int i = max(l,L); i < min(r,R); ++i) A[i-L] += x;
                for (int i = L; i < R; ++i) A[i-L] += Delta;
                Delta = 0;

                for (int a:A) C[a]++;
            }
        }

        int countLucky(int l,int r) {
            int ans = 0;
            if (r <= L || l >= R) return 0;
            if (l <= L && r >= R) {
                for (int l:Lucky) {
                    ans += l >= Delta ? C[l - Delta] : 0;
                }
            } else {
                for (int i = max(l,L); i < min(r,R); ++i) {
                    ans += LCC[A[i-L]+Delta];
                }
            }

            return ans;
        }
    };

    void solve(istream& cin, ostream& cout) {
        Lucky = {4,7,44,47,74,77,444,447,474,477,744,747,774,777,4444,4447,4474,4477,4744,4747,4774,4777,7444,7447,7474,7477,7744,7747,7774,7777};
        LCC = vector<bool>(10001, false);
        for (int &l: Lucky) LCC[l] = true;

        int N, Q; cin >> N >>  Q;
        vector<int> A(N); cin >> A;
        vector<Segment> S;
        for (int i = 0; i < N; i+=SIZE) S.emplace_back(i,min(i+SIZE,N),A);

        for (int q = 0; q < Q; ++q) {
            string s;
            int l,r; cin >> s >> l >> r;
            --l;
            if (s[0] == 'a') {
                int d; cin >> d;
                for (int i = l/SIZE; i <= (r-1)/SIZE; ++i) S[i].add(l,r,d);
            } else {
                int ans = 0;
                for (int i = l/SIZE; i <= (r-1)/SIZE; ++i) ans += S[i].countLucky(l,r);
                cout << ans << '\n';
            }
        }
    }
};


int main() {
	ios_base::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr);
	luckyarray solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
    return 0;
}