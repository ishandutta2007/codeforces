/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author parsa bahrami
 */

#pragma GCC optimize("O2")

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

typedef long long int ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<ld, ld> pld;
typedef pair<string, string> pss;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

#define sz(x)                       (ll) x.size()
#define jjoin(x)                    for (auto i : x) cout << i << endl;
#define all(x)                      (x).begin(),(x).end()
#define F                           first
#define S                           second
#define Mp                          make_pair
#define sep                         ' '
#define error(x)                    cerr << #x << " = " << x << endl
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());
#define kill(x)                     return cout << x << endl , 0;
#define endl                        '\n'

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 2e5 + 10;
const ll MAXA = 101;
const ll INF = 8e18;
const ll MOD = 998244353; //1e9 + 7
const ld PI = 4 * atan((ld) 1);

template<ll SZ>
struct BITree {
    ll fen[SZ];

    BITree() {
        fill(fen, fen + SZ, 0);
    }

    void update(ll ind, ll val) {
        for (; ind < SZ; ind += (ind & (-ind))) fen[ind] += val;
    }

    ll get(ll x) {
        ll sum = 0;
        for (; x; x -= (x & (-x))) sum += fen[x];
        return sum;
    }
};

BITree<MAXN> fen;
vector<ll> LIS;
ll SZ[MAXN], SZrev[MAXN];

int main() {
    fast_io;
    set_random;
    ll n, m;
    cin >> n >> m;
    for (ll i = 1; i <= n; i++) {
        ll l, r;
        cin >> l >> r;
        fen.update(l, 1);
        fen.update(r + 1, -1);
    }
    //LIS.push_back(0);
    for (ll i = 1; i <= m; i++) {
        ll t = fen.get(i);
        auto it = upper_bound(all(LIS), t);
        if (it == LIS.end()) {
            LIS.push_back(t);
            SZ[i] = sz(LIS);
        } else {
            ll idx = it - LIS.begin();
            SZ[i] = idx;
            LIS[idx] = t;
        }
    }
    ll ans = -INF;
    LIS.clear();
    //LIS.push_back(0);
    for (ll i = m; i >= 1; i--) {
        ll t = fen.get(i);
        auto it = upper_bound(all(LIS), t);
        if (it == LIS.end()) {
            //LIS.push_back(t);
            //ans = max(ans, sz(LIS) + SZ[i]);
            LIS.push_back(t);
            SZrev[i] = sz(LIS);

        } else {
            ll idx = it - LIS.begin();
            SZrev[i] = idx;
            LIS[idx] = t;
            //ans = max(ans, idx + SZ[i] - 1);
        }
        ans = max(ans , SZ[i] + SZrev[i] - 1);
    }
    //ll ans = -INF;
    //for (ll i = 1; i <= m; i++) {
    //ans = max(ans, SZ[i] + SZrev[i] - 1);
    //}
    cout << ans << endl;
    return 0;
}