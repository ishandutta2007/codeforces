/* Generated by powerful Codeforces Tool
 * You can download the binary file in here https://github.com/xalanq/cf-tool (Windows, macOS, Linux)
 * Author: alireza_kaviani
 * Time: 2020-04-30 16:39:32
**/
#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n , m , sz[MAXN] , H[MAXN];
set<pll> dp[MAXN];
vector<ll> adj[MAXN];
vector<pll> Q[MAXN];

void DFS(ll v , ll p = 0){
    sz[v] = 1;
    H[v] = H[p] + 1;
    for(ll u : adj[v])  if(u != p)  DFS(u , v) , sz[v] += sz[u];
}

void DFS2(ll v , ll p = -1 , ll cost = 0){
    ll mxInd = 0 , C = 0;
    for(ll u : adj[v])  if(u != p && sz[u] > sz[mxInd]) mxInd = u;
    for(ll u : adj[v])  if(u != p && u != mxInd)    DFS2(u , v , 0) , C += (*dp[u].begin()).X;
    if(mxInd != 0)  DFS2(mxInd , v , cost + C) , C += (*dp[mxInd].begin()).X - cost - C;
    dp[v].swap(dp[mxInd]);
    for(ll u : adj[v]){
        if(u == p || u == mxInd)    continue;
        ll A = (*dp[u].begin()).X;
        for(auto &i : dp[u]){
            dp[v].insert({i.X - A + C + cost , i.Y});
        }
    }
    dp[v].insert({C , v});
    for(pll i : Q[v])   dp[v].insert({C + i.Y + cost , i.X});
    while(SZ(dp[v]) > 0 && H[(*dp[v].begin()).Y] >= (H[v] + (p == -1))){
        dp[v].erase(dp[v].begin());
    }
    //cout << v << sep << (*dp[v].begin()).X << sep << (*dp[v].begin()).Y << endl;
    if(SZ(dp[v]) == 0){
        cout << -1 << endl;
        exit(0);
    }
}

int main() {
    ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);

    cin >> n >> m;
    for(ll i = 1 ; i < n ; i++){
        ll v , u;
        cin >> v >> u;
        adj[v].push_back(u);
        adj[u].push_back(v);
    }
    for(ll i = 1 ; i <= m ; i++){
        ll v , u , w;
        cin >> v >> u >> w;
        Q[v].push_back({u , w});
    }
    DFS(1);
    DFS2(1);
    cout << (*dp[1].begin()).X;

    return 0;
}
/*

*/