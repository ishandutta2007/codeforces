/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n , k , a , m , X[MAXN] , A[MAXN];

ll check(ll x){
    ll cnt = 0 , last = 0;
    for(ll i = 0 ; i < MAXN ; i++)  A[i] = X[i];
    sort(A + 1 , A + x + 1);
    for(ll i = 1 ; i <= x ; i++){
        cnt += max(0LL , (A[i] - last) / (a + 1));
        last = A[i];
    }
    cnt += max(0LL , (n - last + 1) / (a + 1));
    return (cnt < k);
}

int main() {
    fast_io;

    cin >> n >> k >> a >> m;
    for(ll i = 1 ; i <= m ; i++)    cin >> X[i];

    ll l = 0 , r = m + 1;
    while(r - l > 1){
        ll mid = (l + r) / 2;
        if(check(mid))  r = mid;
        else    l = mid;
    }
    if(r == m + 1)  return cout << -1 << endl , 0;
    cout << r << endl;

    return 0;
}
/*

*/