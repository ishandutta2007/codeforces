/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author RiaD
 */

#include <iostream>
#include <fstream>

#include <iostream>


#include <vector>
#include <type_traits>

template <typename T, size_t N>
struct MakeVector {
	template <
			typename... Args,
			typename R = std::vector<decltype(MakeVector<T, N - 1>::make_vector(std::declval<Args>()...))>
	>
	static R make_vector(std::size_t first, Args... sizes) {
		auto inner = MakeVector<T, N - 1>::make_vector(sizes...);
		return R(first, inner);
	}
};

template <typename T>
struct MakeVector<T, 1> {
	/*
	 * This template is to fool CLion.
	 * Without it CLion thinks that make_vector always returns std::vector<T> and marks code like
	 *
	 * auto dp = make_vector<int>(n, m, 0);
	 * dp[0][0] = 1 as error because it suppose that dp[0] is int
	 *
	 * TODO: Consider removing it once https://youtrack.jetbrains.com/issue/CPP-3340 is fixed
	 */
	template <typename R = std::vector<T>>
	static R make_vector(std::size_t size, const T& value) {
		return R(size, value);
	}
};

template <typename T, typename... Args>
auto make_vector(Args... args) -> decltype(MakeVector<T, sizeof...(Args) - 1>::make_vector(args...)) {
	return MakeVector<T, sizeof...(Args) - 1>::make_vector(args...);
}



#include <iterator>


#include <string>
#include <stdexcept>

#ifndef SPCPPL_ASSERT
	#ifdef SPCPPL_DEBUG
		#define SPCPPL_ASSERT(condition) \
		if(!(condition)) { \
			throw std::runtime_error(std::string() + #condition + " in line " + std::to_string(__LINE__) + " in " + __PRETTY_FUNCTION__); \
		}
	#else
		#define SPCPPL_ASSERT(condition)
	#endif
#endif


/**
* Support decrementing and multi-passing, but not declared bidirectional(or even forward) because
* it's reference type is not a reference.
*
* It doesn't return reference because
* 1. Anyway it'll not satisfy requirement [forward.iterators]/6
*   If a and b are both dereferenceable, then a == b if and only if *a and
*   b are bound to the same object.
* 2. It'll not work with reverse_iterator that returns operator * of temporary which is temporary for this iterator
*
* Note, reverse_iterator is not guaranteed to work  now too since it works only with bidirectional iterators,
* but it's seems to work at least on my implementation.
*
* It's not really useful anywhere except iterating anyway.
*/
template <typename T>
class IntegerIterator: public std::iterator<std::input_iterator_tag, T, std::ptrdiff_t, T*, T> {
public:
	explicit IntegerIterator(T value): value(value) {

	}

	IntegerIterator& operator++() {
		++value;
		return *this;
	}

	IntegerIterator operator++(int) {
		IntegerIterator copy = *this;
		++value;
		return copy;
	}

	IntegerIterator& operator--() {
		--value;
		return *this;
	}

	IntegerIterator operator--(int) {
		IntegerIterator copy = *this;
		--value;
		return copy;
	}

	T operator*() const {
		return value;
	}

	bool operator==(IntegerIterator rhs) const {
		return value == rhs.value;
	}

	bool operator!=(IntegerIterator rhs) const {
		return !(*this == rhs);
	}

private:
	T value;
};

template <typename T>
class IntegerRange {
public:
	IntegerRange(T begin, T end): begin_(begin), end_(end) {
		SPCPPL_ASSERT(begin <= end);
	}

	IntegerIterator<T> begin() const {
		return IntegerIterator<T>(begin_);
	}

	IntegerIterator<T> end() const {
		return IntegerIterator<T>(end_);
	}

private:
	T begin_;
	T end_;
};

template <typename T>
class ReversedIntegerRange {
	typedef std::reverse_iterator<IntegerIterator<T>> IteratorType;
public:
	ReversedIntegerRange(T begin, T end): begin_(begin), end_(end) {
		SPCPPL_ASSERT(begin >= end);
	}

	IteratorType begin() const {
		return IteratorType(IntegerIterator<T>(begin_));
	}

	IteratorType end() const {
		return IteratorType(IntegerIterator<T>(end_));
	}

private:
	T begin_;
	T end_;
};

template <typename T>
IntegerRange<T> range(T to) {
	return IntegerRange<T>(0, to);
}

template <typename T>
IntegerRange<T> range(T from, T to) {
	return IntegerRange<T>(from, to);
}

template <typename T>
IntegerRange<T> inclusiveRange(T to) {
	return IntegerRange<T>(0, to + 1);
}

template <typename T>
IntegerRange<T> inclusiveRange(T from, T to) {
	return IntegerRange<T>(from, to + 1);
}

template <typename T>
ReversedIntegerRange<T> downrange(T from) {
	return ReversedIntegerRange<T>(from, 0);
}

template <typename T>
ReversedIntegerRange<T> downrange(T from, T to) {
	return ReversedIntegerRange<T>(from, to);
}

template <typename T>
ReversedIntegerRange<T> inclusiveDownrange(T from) {
	return ReversedIntegerRange<T>(from + 1, 0);
}

template <typename T>
ReversedIntegerRange<T> inclusiveDownrange(T from, T to) {
	return ReversedIntegerRange<T>(from + 1, to);
}

#include <array>
#include <algorithm>
#include <cassert>
//#define PROBLEM "problem_name.h"
//#include PROBLEM
//#include <message.h>
//#include <spcppl/dgcj.h>

using namespace std;

class TaskE {
public:

	vector<vector<vector<uint64_t>>> prec;

	TaskE() {

		auto c = make_vector<uint64_t>(61, 61, 0);
		for (int n: range(61)) {
			c[n][0] = c[n][n] = 1;
			if (n > 0) {
				for (int k: range(1, n)) {
					c[n][k] = c[n - 1][k - 1] + c[n - 1][k];
				}
			}
		}

		auto dp = make_vector<uint64_t>(11, 61, 1 << 10, 0);
		dp[0][0][0] = 1;
		//int cnt = 20;
		for (int i: range(10)) {
			//int cnt = (i >= 5) ? 30 : 60;
			int maxLength = 0;
			uint64_t step = 1;
			while (step <= 1'000'000'000'000'000'000ull) {
				++maxLength;
				step *= max(i + 1, 2);
			}
			int cnt = maxLength;
			for (int cntWas: range(0, cnt + 1)) {
				for (int cntNew: range(0, cnt + 1 - cntWas)) {
					for (int mask: range(1 << 10)) {
						dp[i + 1][cntWas + cntNew][mask ^ ((cntNew & 1) << i)] +=
								dp[i][cntWas][mask] * c[cntWas + cntNew][cntWas];
					}
				}
			}
		}
		prec = dp;
	}

	void solve(std::istream& in, std::ostream& out) {
		int64_t b, l, r;
		in >> b;

		auto solve = [&](int64_t r) {
			if (r == 0) {
				return (uint64_t) 0;
			}

			vector<int> numbers;
			while (r) {
				numbers.push_back(r % b);
				r /= b;
			}

			reverse(numbers.begin(), numbers.end());

			uint64_t res = 0;
			int mask = 0;
			for (int i = 0; i <= numbers.size(); ++i) {
				if (i == numbers.size()) {
					if (mask == 0) {
						res += 1;
					}
				}
				else if (i != 0) {
					for (int next_digit: range(numbers[i])) {
						res += prec[b][numbers.size() - i - 1][mask ^ (1 << next_digit)];
					}
				}
				else {
					//auto get_from_nonzero = [&](int len, int mask) {
					//	return prec[b][len][mask] - prec[b][len - 1][mask ^ 1];
					//};
					for (int cnt0 = 0; cnt0 < numbers.size(); ++cnt0) {
						if (numbers[cnt0] > 0 || cnt0 > 0) {
							for (int first_digit: range(1, (int)(cnt0 == 0 ? numbers[cnt0] : b))) {
								assert(mask == 0);
								res += prec[b][numbers.size() - cnt0 - 1][mask ^ (1 << first_digit)];
							}
						}
					}
				}

				if (i != numbers.size()) {
					mask ^= (1 << numbers[i]);
				}
			}
			return res;
		};

		in >> l >> r;
		//cerr << solve(r) << endl;
		//cerr << solve(l - 1) << endl;
		out << solve(r) - solve(l - 1) << "\n";
	}
};


int main() {
	std::ios_base::sync_with_stdio(false);
	TaskE solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	in.tie(nullptr);
	out << std::fixed;
	out.precision(20);
	int n;
in >> n;
for(int i = 0; i < n; ++i) {
	solver.solve(in, out);
}

	return 0;
}