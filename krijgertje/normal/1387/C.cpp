#include <algorithm>  
#include <iostream>  
#include <sstream>  
#include <string>  
#include <vector>  
#include <queue>  
#include <set>  
#include <map>  
#include <cstdio>  
#include <cstdlib>  
#include <cctype>  
#include <cmath>  
#include <cstring>
#include <list>  
#include <cassert>
#include <climits>
#include <bitset>
#include <chrono>
#include <random>
using namespace std;

#define PB push_back  
#define MP make_pair  
#define SZ(v) ((int)(v).size())  
#define FOR(i,a,b) for(int i=(a);i<(b);++i)  
#define REP(i,n) FOR(i,0,n)  
#define FORE(i,a,b) for(int i=(a);i<=(b);++i)  
#define REPE(i,n) FORE(i,0,n)  
#define FORSZ(i,a,v) FOR(i,a,SZ(v))  
#define REPSZ(i,v) REP(i,SZ(v))  
std::mt19937 rnd((int)std::chrono::steady_clock::now().time_since_epoch().count());
typedef long long ll;
ll gcd(ll a, ll b) { return b == 0 ? a : gcd(b, a % b); }

const int MAXMUTRHSSUM = 100;
const int MAXMUT = MAXMUTRHSSUM;
const int MAXGENE = MAXMUT + 2;
const int MAXPATRHSSUM = 50;
const int MAXPAT = MAXPATRHSSUM;
const int MAXTOK = 2 + MAXMUTRHSSUM;
const int MAXTRIE = 1 + MAXPATRHSSUM;
const int MAXSINGLE = MAXMUTRHSSUM;
const int MAXPAIR = MAXMUTRHSSUM - 1;
const int ALPH = 2;


int ngene, nmut, npat;
vector<int> mut[MAXMUT]; int mutlhs[MAXMUT];
vector<int> muts[MAXGENE];
vector<int> pat[MAXPAT];
ll ans[MAXGENE];

int ntok, nsingle, npair, ntrie;
int singlelhs[MAXSINGLE], singlerhs[MAXSINGLE];
int pairlhs[MAXPAIR]; pair<int, int> pairrhs[MAXPAIR];
vector<int> singleusage[MAXTOK];
vector<pair<int, int>> pairusage[MAXTOK];
ll dp[MAXTOK][MAXTRIE][MAXTRIE]; // dp[x][s][t] = the length of the shortest string generated by token x that goes from trienode s to trienode t
priority_queue<pair<ll, pair<int, pair<int, int>>>> pq;

struct TrieNode {
	int nxt[ALPH];
	int safenxt[ALPH];
	int suff;
	bool detected;
}; 

TrieNode trie[MAXTRIE]; int trieroot;
int maketrie() { assert(ntrie < MAXTRIE); int ret = ntrie++; REP(i, ALPH) trie[ret].nxt[i] = trie[ret].safenxt[i] = -1; trie[ret].detected = false; trie[ret].suff = -1; return ret; }

void buildtrie() {
	ntrie = 0;
	trieroot = maketrie();
	REP(i, npat) {
		int at = trieroot;
		REPSZ(j, pat[i]) {
			int x = pat[i][j]; assert(0 <= x && x < ALPH);
			int to = trie[at].nxt[x]; if (to == -1) { to = maketrie(); trie[at].nxt[x] = to; }
			at = to;
		}
		trie[at].detected = true;
	}
	queue<int> q;
	q.push(trieroot);
	while (!q.empty()) {
		int at = q.front(); q.pop();
		REP(k, ALPH) {
			int suff;
			if (at == trieroot) {
				suff = at;
			} else {
				suff = trie[at].suff; while (suff != trieroot && trie[suff].nxt[k] == -1) suff = trie[suff].suff;
				if (trie[suff].nxt[k] != -1) suff = trie[suff].nxt[k];
			}
			int to = trie[at].nxt[k];
			trie[at].safenxt[k] = to == -1 ? suff : to;
			if (to != -1) {
				trie[to].suff = suff;
				if (trie[suff].detected) trie[to].detected = true;
				q.push(to);
			}
		}
	}
	//REP(at, ntrie) { printf("%d: detected=%s suff=%d", at, trie[at].detected ? "YES" : "NO", trie[at].suff); REP(k, ALPH) if (trie[at].nxt[k] != -1) printf(" %c=%d", '0' + k, trie[at].nxt[k]); puts(""); }
}


void upd(int x, int s, int t, ll cost) { if (cost >= dp[x][s][t]) return; dp[x][s][t] = cost; pq.push(MP(-cost, MP(x, MP(s, t)))); }

void solve() {
	ntok = ngene, nsingle = 0, npair = 0;
	REP(i, nmut) {
		if (SZ(mut[i]) == 1) { int idx = nsingle++; singlelhs[idx] = mutlhs[i]; singlerhs[idx] = mut[i][0]; continue; }
		int at = 0, last = mutlhs[i];
		while (at + 2 < SZ(mut[i])) { int next = ntok++, idx = npair++; pairlhs[idx] = last, pairrhs[idx] = MP(mut[i][at], next); ++at, last = next; }
		{ int idx = npair++; pairlhs[idx] = last; pairrhs[idx] = MP(mut[i][at], mut[i][at + 1]); }
	}
	REP(i, nsingle) singleusage[singlerhs[i]].PB(i);
	REP(i, npair) pairusage[pairrhs[i].first].PB(MP(i, 0)), pairusage[pairrhs[i].second].PB(MP(i, 1));
	//REP(i, nsingle) printf("%d: %d\n", singlelhs[i], singlerhs[i]);
	//REP(i, npair) printf("%d: %d %d\n", pairlhs[i], pairrhs[i].first, pairrhs[i].second);

	buildtrie();

	REP(x, ntok) REP(s, ntrie) REP(t, ntrie) dp[x][s][t] = LLONG_MAX;
	REP(x, 2) REP(s, ntrie) if (!trie[s].detected) { int t = trie[s].safenxt[x]; if (!trie[t].detected) upd(x, s, t, 1); }

	while (!pq.empty()) {
		ll cost = -pq.top().first; int x = pq.top().second.first, s = pq.top().second.second.first, t = pq.top().second.second.second; pq.pop();
		if (cost > dp[x][s][t]) continue;
		//printf("processing %d: %d->%d = %lld\n", x, s, t, cost);
		REPSZ(i, singleusage[x]) {
			int idx = singleusage[x][i];
			int a = singlelhs[idx], b = singlerhs[idx]; assert(b == x);
			upd(a, s, t, cost);
		}
		REPSZ(i, pairusage[x]) {
			int idx = pairusage[x][i].first, side = pairusage[x][i].second;
			int a = pairlhs[idx], b = pairrhs[idx].first, c = pairrhs[idx].second;
			if (side == 0) { assert(b == x); REP(tt, ntrie) if (dp[c][t][tt] != LLONG_MAX) upd(a, s, tt, cost + dp[c][t][tt]); }
			if (side == 1) { assert(c == x); REP(ss, ntrie) if (dp[b][ss][s] != LLONG_MAX) upd(a, ss, t, cost + dp[b][ss][s]); }
		}
	}

	FOR(x, 2, ngene) ans[x] = LLONG_MAX;
	FOR(x, 2, ngene) REP(t, ntrie) if (!trie[t].detected) ans[x] = min(ans[x], dp[x][trieroot][t]);
}

void run() {
	scanf("%d%d%d", &ngene, &nmut, &npat);
	REP(i, nmut) { int a, cnt; scanf("%d%d", &a, &cnt); vector<int> cur(cnt); REP(j, cnt) scanf("%d", &cur[j]); mutlhs[i] = a, mut[i] = cur; muts[a].PB(i); }
	REP(i, npat) { int cnt; scanf("%d", &cnt); vector<int> cur(cnt); REP(j, cnt) scanf("%d", &cur[j]); pat[i] = cur; }
	solve();
	FOR(i, 2, ngene) if (ans[i] == LLONG_MAX) printf("YES\n"); else printf("NO %lld\n", ans[i]);
}

int main() {
	run();
	return 0;
}