// &&@@@@@@@@@@@@@@@@,,,,,,**/***/////*//(//***/////(###&&&&&@@@@@/,,/@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
// &@@@@@@@@@@@@@@@@@*,,,,*******/////*/////***/////###%&&&&&@@@,.,,,,,@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
// @@@@@@@@@@@@@@@@@@*,,,,***/***/////*////****////(###%&&&&&@,.,,,,,,,,@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
// @@@@@@@@@@@@@@@@@@/,,,,,**/***/////*//(/***////*((##%&&%&(..,,,,,,,,.,@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
// @@@@@@@@@@@@@@@@@@(,,,,,**//**/////*////***/////(###%&&%...,,,,,,,,...,@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
// @@@@@@@@@@@@@@@@@@#,,,,***/***/////*/(//***/////(###%&%.......,,,......,@@@@@@@@@@@@@@@@@@@@@@@@@@@@
// @@@@@@@@@@@@@@@@@@#,,,,***//**/////*////***/////(###%(.................,%@@@@@@@@@@@@@@@@@@@@@@@@@@@
// @@@@@@@@@@@@@@@@@@%,,,,***//**//(//*/(/. .....,,,.......,.....   .......,@@@@@@@@@@@@@@@@@@@@@@&////
// @@@@@@@@@@@@#(((#%%,,,,****/**////...,****,...................,*.........*@@@@@@@@@@@@@(#@@@*/////&@
// @@@@@@@@@@@..,,.       ....,**....*,..,,..........................*,.....,,@@@@@@@@@&**@%////*//@@@@
// @@@@@@@@@@@@.,,,...         ..,,..... ...............................*....,,,@@@@@(//#*#/#/*,*@@@@@@
// @@@@@@@@@@@@%,..,....     ..,.... ............................/@@%(@@@@(&%(,,,*@///****/*,,,@&,*@@@@
// @@@@@@@@@@@@@%,........ ..,....... ...   ...    ..  .  ......(@@@@@@@@@%#@@@@@,.******,.....,/@@@@@@
// @@@@@@@@@@@@@@&..,......,, ....     . .           ..     . .#@@#.#%#%@@@@@@@@@/,.**,.......,@@@%@@@@
// @@@@@@@@@@@@@@@@.......,.   .,.    (@@@.           ./...    /.....(###&@@@@@@@#,,........./,,/######
// @@@@@@@@@@@@@*&@#@(@..,.   .,.    (@@@@@@     .     .,..      ...  /%#/@@@@@@@&,,,.........(########
// @@@@@@@@@#*#@@@&@@&/.,.  ..,,.   .@@@@@@@@&. ..,.    .,.      ..... #%/@@@@@@@@,,,.......&@@@@@@@@@@
// @@@@@@@%@@@@&%@@@#@,,,...../.....&@@@@@@@@@@(. .       ,.  .. ......,#/%@@@@@@@,,,.....(@@@@@@@@@@@@
// @@@@@@#@@@/#%(@@&@./(......,....*@@@@@@@@@@@@@ ..&#  . .,. ..... .....(/#(#&&#@#,,....@@@@@@@@@@@@@@
// @@@@@#@@@@@%%(@**#,**...........@@@@@@@@@@@@@@@...@@&  ..,(..........*@@@@@@@@@@@,../@@@@@@@@@@@@@@@
// @@@@@#@@@@@%%%###(,,............@@@@@@@@@@@@@@@@/.&@@@@.../@,......%@@@@@@@@@@@@@@@@%&@@@@@@@@@@@@@@
// @@@@@&@@@@@@(#/##*,,. ... ....,,@@@@@@@@@@@@@@@@*#.@@@@@. .@@@.....,@@@@@@@@@@@@@@@@@@@@@@(@@@@@@@@@
// @@@@@@@@@@@@&%#%#,,,..... %...#,@@@@@@@@@@@@@@@@@@%@@@@@@..@@@@%....@@@@@@@@@@@@@@@@@@@@@@/@@@@@@@@@
// @@@@#@@@@@@@@#%##,,,.....(@...*.##%@@@@@@@@@@@@@@@@@@@@@@@.@@@@@%...@@@@@@@@@@@@@@@@&@##@@(@@@@@@@@@
// @@@@#@@@@@@%(%%#(/,......@@#..&#@@@@@@@@@@@@@@@@@&#@&.........../...@@@@@@@@@@@@@@@@%&@&@@/@@@@@@@@@
// @@@@@@@@@&(%#(#@@&,,.....@@@,.@@@@@@@@@@@@@@@@@@@@,.%&.   ..*...,..,@@@&/.....,@@@@@/%&@@@(@@@@@@@@@
// @@@@@@@@@@@@@@&@#@,,......@@@.&@@%%&@@@@@@@@@@@@@@@@@@,.......%&@...,..............*&%%%@@#@@@@@@@@@
// @@@@@@@@@@@@@@@@@@.,.... ..%@@........&@@@@@@@@@@@@@@@@@./#/.@@@@*.......................*@@@@@@@@@@
// @@@@@@@@@@@@@@@#@@.,........*.,%   .,.*@@@@@@@@@@@@@@@@@@@@@@@@@@#......................../@@@@@@@@@
// @@@@@@@@@@@@@@@@@@,,.... ......@&.(,,,.@@@@@@@@@@@@@@@@@@@@@@@@@@%.........................@@@@@@@@@
// &&@@@@@@@@@@@@/@@@/,..........(@@&@*/@@@@@@@@@@@@@@@@@@@@@@@@@@@@%. .......................*@@@@@@@@
// ..........*%@#@@@@&,...  ... ./*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&. ........................@@@@@@@@
// ............/@@@@@@,.  ..  ..,//*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&. ................ .......@@@@@@@@
// ............*@@@@@@..        *((//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%. .......... ..... .......@@@@@@@@
// ............,@@@@@@,.        /((///&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%  ................   .....&@@@@@@@
// .............@@@@@@/.        */(//(/*#@@@@@@@@@@@/%%%#@@@@@@@@@@@(  ................ .......*@@@@@@@
// .............@@@@@@#.        */(//(/**..#@@@@@@@@@@@@@@@@@@@@&/##* ............ .....*@@@@@@@@@@@@@@
// ............%@@@@@@#..       *//////** &@@@%%@@@@@@@@@@@@%/######* ............. ....@@@@@@@@@@@@@@@
// ...........&@@@@@@@(..       *//,.....@@@@@@@&%%/&@@@((##/#######, .................  .#@@@@@@@@@@@@
// ..........@@@@@@@@@#,.       .........@@@@@@@@%%%%%%%*####/######  ..................  ......,,(&@@@
// ........ .@@@@@@@@@#, .      ........*@@@@@@@@@%%%%%%#####(######  .................   ...........,@
// .......  .(/..........       ........(@@@@@@@@@@%%%%*############  ..................   ............
// ......  ...............       .......#@@@@@@@@@@@@%%/#,######%@@&  .................... ............
// .....  ....  ...........      ... ...@@@@@@@@@@@@@@@###(##%@@@(@.  &................... ............
// ..........   ... .......      ... .. @@@@@@@@@@@@@@@(@@@@@@@@@/@  @@@...............................
// .........     . ...   ... .       ..*@@@@@@@@@@@@@@@/@@@@@@@/@@% @@@@@%.............................
// .....   .   ..  ... .......    .. ..%@@@@@@@@@@@@@@@&@@@@@*@@@@.@@@@@@@@@@/..... .. ................
//          .       .. .       .  .  ..@@@@@@@@@@@@@@@@@###*@@@@@#@@@@@@@@@@@@@@@@@@%/    ............@
//                                  ...@@@@@@@@@@#.  ,.  *    ,./@@@@@@@@@@@@@@@@@@@@/.              %@
//                     ,,,***,*****  . @&(.   .......  ..  ,, ..      #@@@@@@@@@@@@@@               *@@
//              .,,,,,,,,,***,****.         .... ...   ,,   .,. . . .....  *@@@@@@@@....           .@@@
//   ....,,.,,,,,,,,,,,,,,***,*,,*           ..     .,    ,     .,. .    .       (@*    .          @@@@
// ,,,,,,,,,,,,,,,,,,,,,,****,*,,*          ..   ...,     ,..      .,                             @@@@@
// ....................,,****,*,,*          ,...   .      .. .,     ,.                           &@@@@@
#include <bits/stdc++.h>
 
using namespace std;
using ll = long long;
using db = long double;
using str = string;
 
using pi = pair<int, int>;
#define mp make_pair
#define f first
#define s second
 
#define tcT template<class T
tcT> using V = vector<T>;
tcT, size_t SZ> using AR = array<T, SZ>;
using vi = V<int>;
using vb = V<bool>;
using vpi = V<pi>;
 
#define sz(x) int((x).size())
#define all(x) begin(x), end(x)
#define sor(x) sort(all(x))
#define rsz resize
#define pb push_back
#define ft front()
#define bk back()
 
const int MOD = 1e9+7;
const db PI = acos((db)-1);
mt19937 rng(0);
 
tcT> bool chkmin(T& a, const T& b){
    return b < a ? a = b, 1 : 0;
}
 
tcT> bool chkmax(T& a, const T& b){
    return a < b ? a = b, 1 : 0;
}

const int Mod = 998244353;
const int MAXN = 300228;


int sum(int a, int b) {
    return (a + b >= Mod ? a + b - Mod: a + b);
}


int mul(int a, int b) {
    return ((ll)a * b) % Mod;
}
 

int n, m;
int d[MAXN];
int fact[MAXN];
int rfact[MAXN];


int powm(int a, int b) {
    int res = 1;
    while (b) {
        if (b & 1) {
            res = mul(res, a);
        }  
        b >>= 1;
        a = mul(a, a);
    }
    return res;
}


int getck(int a, int b) {
    if (b > a) {
        return 0;
    }
    return mul(fact[a], mul(rfact[b], rfact[a - b]));
}

void solve() {
    cin >> n >> m;
    ll need = 0;
    for (int i = 0; i < n; i++) {
        cin >> d[i];
        need += d[i];
    }
    fact[0] = 1;
    for (int i = 1; i <= max(n, m); i++) {
        fact[i] = mul(fact[i - 1], i);
    }
    rfact[max(n, m)] = powm(fact[max(n, m)], Mod - 2);
    for (int i = max(n, m) - 1; i >= 0; i--) {
        rfact[i] = mul(rfact[i + 1], i + 1);
    }
    ll cur = 0;
    int uk = 0;
    int cnt = 0;
    for (int i = 0; i < n; i++) {
        while (cur * 2 < need) {
            cur += d[uk];
            uk = (uk + 1) % n;
        }
        if (cur * 2 == need) {
            cnt++;
        }
        cur -= d[i];
    }
    cnt /= 2;
    int ans = 0;
    for (int t = 0; t <= cnt; t++) {
        int d = mul(getck(m, t), getck(cnt, t));
        d = mul(d, fact[t]);
        d = mul(d, powm(((ll)(m - t) * (m - t - 1)) % Mod, cnt - t));
        d = mul(d, powm(m - t, n - 2 * cnt));

        ans = sum(ans, d);
    }
    cout << ans << '\n';
}


int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    //read(FILENAME);
    int t = 1;
    //cin >> t;
    while (t--) {
        solve();
    }
    return 0;
}