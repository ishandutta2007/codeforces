/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <bits/stdc++.h>

#define pb push_back
#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()
#define mp make_pair

using namespace std;

typedef long long int64;
typedef vector<int> vi;
typedef pair<int, int> ii;

class TaskH {
 public:
  int cnt;

  vector<ii> ops;

  vector<int> innerSolve(const vector<int>& a, const vector<ii>& b, int low, int high) {
    vector<int> res(b.size(), -1);
    map<ii, int> encode;
    vector<ii> nb;
    for (int i = 0; i < b.size(); ++i) {
      auto p = b[i];
      while (p.first <= p.second && (a[p.first] < low || a[p.first] > high)) ++p.first;
      while (p.first <= p.second && (a[p.second] < low || a[p.second] > high)) --p.second;
      if (p.first > p.second) continue;
      if (encode.find(p) != encode.end()) {
        int idx = encode[p];
        res[i] = idx;
      } else {
        int idx = encode.size();
        nb.push_back(p);
        encode[p] = idx;
        res[i] = idx;
      }
    }
    if (!nb.empty()) {
      vector<int> nres(nb.size());
      if (low == high) {
        assert(nb.size() == 1);
        nres[0] = nb[0].first + 1;
      } else {
        int mid = (low + high) / 2;
        vector<int> r1 = innerSolve(a, nb, low, mid);
        vector<int> r2 = innerSolve(a, nb, mid + 1, high);
        for (int i = 0; i < nres.size(); ++i) {
          if (r1[i] == 0) nres[i] = r2[i];
          else if (r2[i] == 0) nres[i] = r1[i];
          else {
            ops.emplace_back(r1[i], r2[i]);
            nres[i] = a.size() + ops.size();
          }
        }
      }
      for (int i = 0; i < res.size(); ++i) if (res[i] >= 0) res[i] = nres[res[i]];
    }
    for (int i = 0; i < res.size(); ++i) if (res[i] < 0) res[i] = 0;
    return res;
  }

  void solveOne(istream &in, ostream &out) {
    int n, q;
    in >> n >> q;
    vector<int> a(n);
    for (int i = 0; i < n; ++i) {
      in >> a[i];
    }
    vector<ii> b(q);
    for (int i = 0; i < q; ++i) {
      in >> b[i].first >> b[i].second;
      --b[i].first;
      --b[i].second;
    }
    cnt = n;
    ops.clear();
    vector<int> res = innerSolve(a, b, 1, n);
    out << a.size() + ops.size() << "\n";
    for (auto x : ops) {
      out << x.first << " " << x.second << "\n";
    }
    for (int x : res) {
      out << x << " ";
    }
    out << "\n";
  }

  void solve(std::istream &in, std::ostream &out) {
    int nt = 1;
    for (int it = 0; it < nt; ++it) {
      solveOne(in, out);
    }
  }
};


int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  TaskH solver;
  std::istream& in(std::cin);
  std::ostream& out(std::cout);
  solver.solve(in, out);
  return 0;
}