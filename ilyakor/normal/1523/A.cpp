/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <algorithm>
#include <queue>
#include <vector>
#include <set>
#include <map>
#include <cassert>
#include <functional>
#include <sstream>
#include <cmath>

#include <cstring>
#include <cstdio>

using namespace std;

typedef pair<int, int> ii;
typedef long long int64;
typedef vector<int> vi;

#define pb push_back
#define mp make_pair
#define all(v) (v).begin(),(v).end()
#define sz(v) ((int)(v).size())

template<class T> T abs(T x) { return x >= 0 ? x : -x; }
template<class T> T sqr(T x) { return x * x; }

class TaskA {
public:
	void solve(std::istream& in, std::ostream& out) {
	    int n, m;
	    in >> n >> m;
	    string s;
	    in >> s;
	    for (int it = 0; it < min(2 * n + 10, m); ++it) {
	        string ns = s;
	        for (int i = 0; i < sz(s); ++i) if (s[i] == '0') {
	            int cnt = 0;
	            if (i > 0 && s[i - 1] == '1') ++cnt;
	            if (i + 1 < sz(s) && s[i + 1] == '1') ++cnt;
	            if (cnt == 1) ns[i] = '1';
	        }
	        s = ns;
	    }
	    out << s << "\n";
	}
};


int main() {
	TaskA solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	int n;
in >> n;
for(int i = 0; i < n; ++i) {
	solver.solve(in, out);
}

	return 0;
}