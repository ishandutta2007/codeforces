#include <bits/stdc++.h>

using int64 = long long;

const int64 P = 998244353;

std::vector<std::vector<int> > Tp = {
    {2, 1, 1, 1},      {3, 1, 2, 2},     {3, 2, 3, 1},     {4, 1, 3, 3},      {4, 1, 4, 1},      {4, 2, 3, 1},
    {4, 2, 4, 4},      {4, 2, 5, 3},     {4, 3, 6, 1},     {5, 1, 4, 4},      {5, 1, 5, 2},      {5, 1, 6, 2},
    {5, 2, 4, 4},      {5, 2, 5, 12},    {5, 2, 6, 12},    {5, 2, 7, 9},      {5, 2, 8, 3},      {5, 3, 5, 2},
    {5, 3, 6, 4},      {5, 3, 7, 6},     {5, 3, 8, 6},     {5, 3, 9, 4},      {5, 4, 10, 1},     {6, 1, 5, 5},
    {6, 1, 6, 3},      {6, 1, 7, 4},     {6, 1, 8, 3},     {6, 1, 9, 1},      {6, 2, 5, 10},     {6, 2, 6, 28},
    {6, 2, 7, 35},     {6, 2, 8, 35},    {6, 2, 9, 30},    {6, 2, 10, 17},    {6, 2, 11, 8},     {6, 3, 5, 1},
    {6, 3, 6, 13},     {6, 3, 7, 29},    {6, 3, 8, 41},    {6, 3, 9, 44},     {6, 3, 10, 45},    {6, 3, 11, 30},
    {6, 4, 7, 1},      {6, 4, 8, 4},     {6, 4, 9, 7},     {6, 4, 10, 7},     {6, 4, 11, 11},    {7, 1, 6, 6},
    {7, 1, 7, 4},      {7, 1, 8, 6},     {7, 1, 9, 6},     {7, 1, 10, 6},     {7, 1, 11, 2},     {7, 2, 6, 20},
    {7, 2, 7, 55},     {7, 2, 8, 80},    {7, 2, 9, 95},    {7, 2, 10, 101},   {7, 2, 11, 94},    {7, 3, 6, 6},
    {7, 3, 7, 50},     {7, 3, 8, 118},   {7, 3, 9, 186},   {7, 3, 10, 230},   {7, 3, 11, 260},   {7, 4, 7, 3},
    {7, 4, 8, 18},     {7, 4, 9, 48},    {7, 4, 10, 85},   {7, 4, 11, 113},   {7, 5, 10, 2},     {7, 5, 11, 4},
    {8, 1, 7, 7},      {8, 1, 8, 5},     {8, 1, 9, 8},     {8, 1, 10, 9},     {8, 1, 11, 11},    {8, 2, 7, 35},
    {8, 2, 8, 96},     {8, 2, 9, 155},   {8, 2, 10, 207},  {8, 2, 11, 250},   {8, 3, 7, 21},     {8, 3, 8, 145},
    {8, 3, 9, 358},    {8, 3, 10, 616},  {8, 3, 11, 859},  {8, 4, 7, 1},      {8, 4, 8, 26},     {8, 4, 9, 124},
    {8, 4, 10, 313},   {8, 4, 11, 567},  {8, 5, 9, 3},     {8, 5, 10, 16},    {8, 5, 11, 53},    {9, 1, 8, 8},
    {9, 1, 9, 6},      {9, 1, 10, 10},   {9, 1, 11, 12},   {9, 2, 8, 56},     {9, 2, 9, 154},    {9, 2, 10, 268},
    {9, 2, 11, 389},   {9, 3, 8, 56},    {9, 3, 9, 350},   {9, 3, 10, 898},   {9, 3, 11, 1654},  {9, 4, 8, 8},
    {9, 4, 9, 126},    {9, 4, 10, 552},  {9, 4, 11, 1404}, {9, 5, 9, 4},      {9, 5, 10, 48},    {9, 5, 11, 204},
    {9, 6, 11, 1},     {10, 1, 9, 9},    {10, 1, 10, 7},   {10, 1, 11, 12},   {10, 2, 9, 84},    {10, 2, 10, 232},
    {10, 2, 11, 427},  {10, 3, 9, 126},  {10, 3, 10, 742}, {10, 3, 11, 1967}, {10, 4, 9, 36},    {10, 4, 10, 448},
    {10, 4, 11, 1887}, {10, 5, 9, 1},    {10, 5, 10, 43},  {10, 5, 11, 357},  {10, 6, 11, 6},    {11, 1, 10, 10},
    {11, 1, 11, 8},    {11, 2, 10, 120}, {11, 2, 11, 333}, {11, 3, 10, 252},  {11, 3, 11, 1428}, {11, 4, 10, 120},
    {11, 4, 11, 1302}, {11, 5, 10, 10},  {11, 5, 11, 252}, {11, 6, 11, 5},    {12, 1, 11, 11},   {12, 2, 11, 165},
    {12, 3, 11, 462},  {12, 4, 11, 330}, {12, 5, 11, 55},  {12, 6, 11, 1}};

void Add(int64& a, int64 b) {
    a += b;
    if (a >= P) a -= P;
}

int64 Pow(int64 a, int64 b) {
    if (b & 1) return a * Pow(a, b - 1) % P;
    if (b == 0) return 1;
    return Pow(a * a % P, b / 2);
}

int64 Div(int64 a, int64 b) {
    int64 res = a;
    for (int64 x = a - 1; x > b; --x) res = (res * x) % P;
    return res;
}

const int K = 11;
const int X = 11;
const int A = 2 * (K + 1);
int64 CInv[K + 1];
int64 Fac[K + 1];
int64 dp[A + 1][K + 1][X + 1][K + 1];

void Calc(int i, int Cs, int Cc, int Cx, int Ck, int64 Ma) {
    if (i == Tp.size()) return;
    int a = Tp[i][0], b = Tp[i][1], c = Tp[i][2];
    if (Ck + (a - 1) > K) return;
    int64 opc = Tp[i][3];

    int64 Next = Ma;
    for (int cou = 0;; ++cou) {
        int Nx = Cx + b * cou;
        int Nk = Ck + c * cou;
        if (Nx > X || Nk > K) break;
        int Ns = Cs + a * cou;
        int Nc = Cc + cou;
        Calc(i + 1, Ns, Nc, Nx, Nk, Next);
        if (cou > 0) Add(dp[Ns][Nc][Nx][Nk], Next);
        Next = ((Next * opc) % P * CInv[cou + 1]) % P;
    }
}

void Solve() {
    int64 n;
    int k, x;
    std::cin >> n >> k >> x;
    int64 res = 0;
    for (int a = 1; a <= std::min(n, (int64)2 * k); ++a) {
        for (int b = 1; b <= std::min(k, a); ++b) {
            if (dp[a][b][x][k]) {
                int64 Ma = Div(n - a + b, n - a);
                int64 add = Ma * dp[a][b][x][k] % P;
                Add(res, add);
            }
        }
    }
    std::cout << res << '\n';
}

int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr), std::cout.tie(nullptr);

    Fac[0] = 1;
    for (int k = 1; k <= K; ++k) {
        CInv[k] = Pow(k, P - 2);
        Fac[k] = (Fac[k - 1] * k) % P;
    }
    Calc(0, 0, 0, 0, 0, 1);
    int T;
    std::cin >> T;
    while (T--) Solve();
    return 0;
}