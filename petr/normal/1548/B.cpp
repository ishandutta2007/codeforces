/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

// Actual solution is at the bottom

#include <algorithm>
#include <array>
#include <bitset>
#include <cassert>
#include <climits>
#include <cstdint>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <memory>
#include <numeric>
#include <queue>
#include <random>
#include <set>
#include <stack>
#include <string>
#include <unordered_set>
#include <unordered_map>
#include <vector>
//#include "../atcoder/all"

#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()

using namespace std;

typedef int64_t int64;
typedef pair<int, int> ii;

class BIntegersHaveFriends {
 public:
  int64 gcd(int64 p, int64 q) {
    while (q) {
      int64 t = p % q;
      p = q;
      q = t;
    }
    return p;
  }

  void solveOne() {
    int n;
    cin >> n;
    vector<int64> a(n);
    for (auto& x : a) cin >> x;
    auto solve = [&](auto self, int left, int right) {
      if (left > right) return 1;
      int middle = (left + right) / 2;
      int64 cur = 0;
      vector<pair<int64, int>> cright;
      cright.emplace_back(0, middle);
      for (int i = middle + 1; i <= right; ++i) {
        int64 next = abs(a[i] - a[middle]);
        next = gcd(next, cur);
        if (next != cur) {
          cright.emplace_back(next, i);
          cur = next;
        }
      }
      for (int i = 0; i + 1 < cright.size(); ++i) {
        cright[i].second = cright[i + 1].second - 1;
      }
      cright.back().second = right;
      cur = 0;
      int res = 1;
      int ptr = cright.size() - 1;
      for (int i = middle; i >= left; --i) {
        cur = gcd(cur, abs(a[i] - a[middle]));
        if (cur == 1) break;
        while (gcd(cright[ptr].first, cur) == 1) {
          --ptr;
        }
        res = max(res, cright[ptr].second - i + 1);
      }
      res = max(res, self(self, left, middle - 1));
      res = max(res, self(self, middle + 1, right));
      return res;
    };

    cout << solve(solve, 0, n - 1) << "\n";
  }

  void solve() {
    int nt;
    cin >> nt;
    for (int it = 0; it < nt; ++it) {
      solveOne();
    }
  }
};


int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(0);
    BIntegersHaveFriends solver;


    solver.solve();
    return 0;
}