/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll q, n, m, t[MAXN], l[MAXN], r[MAXN], mx[MAXN], mn[MAXN];

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    cin >> q;
    while (q--) {
        cin >> n >> m;
        fill(mx, mx + n + 10, -INF);
        fill(mn, mn + n + 10, INF);
        for (ll i = 1; i <= n; i++) {
            cin >> t[i] >> l[i] >> r[i];
            for (ll j = 0; j <= i; j++) {
                mn[j] = min(mn[j], r[i] + t[i] - t[j]);
                mx[j] = max(mx[j], l[i] - t[i] + t[j]);
            }
        }
        string ans = "YES";
        for (ll i = 0; i <= n; i++) if (mx[i] > mn[i]) ans = "NO";
        if (m < mx[0] || m > mn[0]) ans = "NO";
        cout << ans << endl;
    }

    return 0;
}
/*

*/