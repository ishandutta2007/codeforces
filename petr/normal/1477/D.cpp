/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <algorithm>
#include <array>
#include <bitset>
#include <cassert>
#include <climits>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <functional>
#include <iostream>
#include <map>
#include <memory>
#include <numeric>
#include <queue>
#include <random>
#include <set>
#include <stack>
#include <string>
#include <unordered_set>
#include <unordered_map>
#include <vector>
#ifndef ATCODER_DSU_HPP
#define ATCODER_DSU_HPP 1





namespace atcoder {

// Implement (union by size) + (path compression)
// Reference:
// Zvi Galil and Giuseppe F. Italiano,
// Data structures and algorithms for disjoint set union problems
struct dsu {
  public:
    dsu() : _n(0) {}
    dsu(int n) : _n(n), parent_or_size(n, -1) {}

    int merge(int a, int b) {
        assert(0 <= a && a < _n);
        assert(0 <= b && b < _n);
        int x = leader(a), y = leader(b);
        if (x == y) return x;
        if (-parent_or_size[x] < -parent_or_size[y]) std::swap(x, y);
        parent_or_size[x] += parent_or_size[y];
        parent_or_size[y] = x;
        return x;
    }

    bool same(int a, int b) {
        assert(0 <= a && a < _n);
        assert(0 <= b && b < _n);
        return leader(a) == leader(b);
    }

    int leader(int a) {
        assert(0 <= a && a < _n);
        if (parent_or_size[a] < 0) return a;
        return parent_or_size[a] = leader(parent_or_size[a]);
    }

    int size(int a) {
        assert(0 <= a && a < _n);
        return -parent_or_size[leader(a)];
    }

    std::vector<std::vector<int>> groups() {
        std::vector<int> leader_buf(_n), group_size(_n);
        for (int i = 0; i < _n; i++) {
            leader_buf[i] = leader(i);
            group_size[leader_buf[i]]++;
        }
        std::vector<std::vector<int>> result(_n);
        for (int i = 0; i < _n; i++) {
            result[i].reserve(group_size[i]);
        }
        for (int i = 0; i < _n; i++) {
            result[leader_buf[i]].push_back(i);
        }
        result.erase(
            std::remove_if(result.begin(), result.end(),
                           [&](const std::vector<int>& v) { return v.empty(); }),
            result.end());
        return result;
    }

  private:
    int _n;
    // root node: -1 * component size
    // otherwise: parent
    std::vector<int> parent_or_size;
};

}  // namespace atcoder

#endif  // ATCODER_DSU_HPP



#define pb push_back
#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()
#define mp make_pair

using namespace std;

typedef long long int64;
typedef vector<int> vi;
typedef pair<int, int> ii;

class DNezzarAndHiddenPermutations {
 public:
  void innerSolve(int n, vector<vector<int>> adj, vector<int>& p, vector<int>& q) {
    vector<int> nonadj(n, -1);
    vector<int> have(n, false);
    for (int i = 0; i < n; ++i) {
      if (adj[i].size() < n - 1) {
        for (int x : adj[i]) have[x] = true;
        for (int j = 0; j < n; ++j)
          if (i != j && !have[j]) {
            nonadj[i] = j;
            break;
          }
        for (int x : adj[i]) have[x] = false;
      }
      adj[i].clear();
    }
    atcoder::dsu dsu(n);
    for (int i = 0; i < n; ++i) {
      int j = nonadj[i];
      if (j < 0) continue;
      if (dsu.leader(i) != dsu.leader(j)) {
        dsu.merge(i, j);
        adj[i].push_back(j);
        adj[j].push_back(i);
      }
    }
    vector<bool> mark(n);
    vector<set<int>> stars(n);
    for (int i = 0; i < n; ++i) {
      if (!mark[i]) {
        dfs(i, -1, mark, adj, stars);
      }
    }
    int sofar = 0;
    for (int i = 0; i < n; ++i)
      if (adj[i].empty() || !stars[i].empty()) {
        assert(p[i] < 0);
        assert(q[i] < 0);
        q[i] = sofar;
        for (int x : stars[i]) {
          assert(p[x] < 0);
          assert(q[x] < 0);
          p[x] = sofar;
          q[x] = sofar + 1;
          ++sofar;
        }
        p[i] = sofar;
        ++sofar;
      }
    for (int x : p) {
      assert(x >= 0);
    }
    for (int x : q) {
      assert(x >= 0);
    }
  }

  void solveOne(istream &in, ostream &out) {
    int n, m;
    in >> n >> m;
    vector<vector<int>> adj(n);
    for (int i = 0; i < m; ++i) {
      int l, r;
      in >> l >> r;
      --l; --r;
      adj[l].push_back(r);
      adj[r].push_back(l);
    }
    vector<int> p(n, -1);
    vector<int> q(n, -1);
    innerSolve(n, adj, p, q);
    for (int x : p) {
      out << x + 1 << " ";
    }
    out << "\n";
    for (int x : q) {
      out << x + 1 << " ";
    }
    out << "\n";
  }

  int dfs(int root, int skip, vector<bool>& mark, const vector<vector<int>>& adj, vector<set<int>>& stars) {
    mark[root] = true;
    int available = -1;
    for (int x : adj[root]) {
      if (x == skip) continue;
      int child = dfs(x, root, mark, adj, stars);
      if (child != x) {
        if (child >= 0) {
          stars[child].erase(x);
        }
        stars[root].insert(x);
      } else {
        available = child;
      }
    }
    if (stars[root].empty()) {
      if (available >= 0) {
        stars[available].insert(root);
      }
      return available;
    } else {
      return root;
    }
  }

  void solve(std::istream &in, std::ostream &out) {
    /*int iter = 0;
    while (true) {
      ++iter;
      cout << iter << endl;
      int n = rand() % 10 + 1;
      vector<vector<int>> adj(n);
      for (int i = 0; i < n; ++i) {
        for (int j = 0; j < i; ++j) {
          if (rand() % 2 == 0) {
            adj[i].push_back(j);
            adj[j].push_back(i);
          }
        }
      }
      vector<int> p(n, -1);
      vector<int> q(n, -1);
      innerSolve(n, adj, p, q);
    }*/
    int nt;
    in >> nt;
    for (int it = 0; it < nt; ++it) {
      solveOne(in, out);
    }
  }
};


int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  DNezzarAndHiddenPermutations solver;
  std::istream& in(std::cin);
  std::ostream& out(std::cout);
  solver.solve(in, out);
  return 0;
}