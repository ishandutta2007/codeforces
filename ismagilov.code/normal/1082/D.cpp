/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Azat Ismagilov
 */

#include <bits/stdc++.h>

#define int long long
#define fs first
#define sc second
#define pb push_back
#define mp make_pair
#define len(v) ((int)v.size())
#define vc vector
#define pr pair
#define all(v) v.begin(), v.end()

using namespace std;

typedef long long ll;
typedef long double ld;


class TaskD {
public:
	void solve(std::istream& in, std::ostream& out) {
		int n;
		in >> n;
		vc<int> a(n);
		for (int i = 0; i < n; i++){
			in >> a[i];
		}
		vc<pr<int, int>> anses;
		vc<int> lowride;
		vc<int> line;
		for (int i = 0; i < n; i++){
			if (a[i] >= 2){
				if (len(line) != 0){
					anses.pb({line.back(), i});
				}
				line.pb(i);
			}
			else{
				lowride.pb(i);
			}
		}
		int ans = len(line) - 1;
		if (len(lowride) > 0 && len(line) > 0) {
			anses.pb({line.front(), lowride.back()});
			lowride.pop_back();
			ans++;
		}
		if (len(lowride) > 0 && len(line) > 0) {
			anses.pb({line.back(), lowride.back()});
			lowride.pop_back();
			ans++;
		}
		for (auto v : line){
			while(len(lowride) > 0 && a[v] > 2){
				a[v]--;
				anses.pb({v, lowride.back()});
				lowride.pop_back();
			}
		}
		if (len(lowride) > 0){
			out << "NO";
			return;
		}
		out << "YES " << ans << endl << len(anses) << endl;
		for (auto v : anses){
			out << v.fs + 1 << ' ' << v.sc + 1 << endl;
		}
	}
};


main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
	TaskD solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}