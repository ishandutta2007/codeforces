/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <bits/stdc++.h>

#define pb push_back
#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()
#define mp make_pair

using namespace std;

typedef long long int64;
typedef vector<int> vi;
typedef pair<int, int> ii;

class TaskA {
 public:
  void solveOne(istream &in, ostream &out) {
    int n;
    in >> n;
    vector<ii> a(n);
    for (int i = 0; i < n; ++i) {
      in >> a[i].first;
    }
    for (int i = 0; i < n; ++i) {
      in >> a[i].second;
    }
    sort(a.begin(), a.end());
    set<ii> pending;
    int64 pendingTotal = 0;
    int ptr = 0;
    int at = 0;
    int64 res = 0;
    while (ptr < n || !pending.empty()) {
      while (ptr < n && a[ptr].first == at) {
        pending.emplace(-a[ptr].second, ptr);
        pendingTotal += a[ptr].second;
        ++ptr;
      }
      if (pending.empty()) {
        if (ptr < n) at = a[ptr].first;
      } else {
        ii take = *pending.begin();
        pending.erase(pending.begin());
        pendingTotal += take.first;
        res += pendingTotal;
        ++at;
      }
    }
    out << res << "\n";
  }

  void solve(std::istream &in, std::ostream &out) {
    int nt;
    nt = 1;
    for (int it = 0; it < nt; ++it) {
      solveOne(in, out);
    }
  }
};


int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  TaskA solver;
  std::istream& in(std::cin);
  std::ostream& out(std::cout);
  solver.solve(in, out);
  return 0;
}