/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e4 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n, m, k, s1, s2, f, dist[2][MAXN], mark[MAXN];
vector<pair<pll, pll>> E1, E2;
vector<pll> adj[MAXN];

void Dijkstra(ll ind, ll v) {
    fill(dist[ind], dist[ind] + MAXN, INF);
    fill(mark, mark + MAXN, 0);
    priority_queue<pll, vector<pll>, greater<pll>> pq;
    dist[ind][v] = 0;
    pq.push({0, v});
    while (!pq.empty()) {
        ll v = pq.top().Y;
        pq.pop();
        if (mark[v]) continue;
        mark[v] = 1;
        for (pll i : adj[v]) {
            ll u = i.X, w = i.Y;
            if (dist[ind][u] > dist[ind][v] + w) {
                dist[ind][u] = dist[ind][v] + w;
                pq.push({dist[ind][u], u});
            }
        }
    }
}

template<class T>
ll solve(T op) {
    ll cnt = -1;
    while (1) {
        ll c = 0;
        fill(adj, adj + MAXN, vector<pll>());
        for (pair<pll, pll> i : E1) adj[i.X.X].push_back({i.X.Y, i.Y.Y});
        for (pair<pll, pll> i : E2) {
            if (cnt != -1 && op(dist[0][i.X.X], dist[1][i.X.X])) adj[i.X.X].push_back({i.X.Y, i.Y.X}), c++;
            else adj[i.X.X].push_back({i.X.Y, i.Y.Y});
        }
        if (c == cnt) break;
        cnt = c;
        Dijkstra(0, s1);
        Dijkstra(1, s2);
    }
    Dijkstra(0, s1);
    Dijkstra(1, s2);
    return op(dist[0][f], dist[1][f]);
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    cin >> n >> m >> k >> s1 >> s2 >> f;
    for (ll i = 0; i < m; i++) {
        ll v, u, w;
        cin >> v >> u >> w;
        E1.push_back({{v, u},
                      {w, w}});
    }
    for (ll i = 0; i < k; i++) {
        ll v, u, l, r;
        cin >> v >> u >> l >> r;
        E2.push_back({{v, u},
                      {l, r}});
    }

    if (solve([&](ll A, ll B) -> ll { return A < B; })) {
        cout << "WIN" << endl;
        for (pair<pll, pll> i : E2) {
            if (dist[0][i.X.X] < dist[1][i.X.X]) cout << i.Y.X << sep;
            else cout << i.Y.Y << sep;
        }
        return 0;
    }
    if (solve([&](ll A, ll B) -> ll { return A <= B; })) {
        cout << "DRAW" << endl;
        for (pair<pll, pll> i : E2) {
            if (dist[0][i.X.X] <= dist[1][i.X.X]) cout << i.Y.X << sep;
            else cout << i.Y.Y << sep;
        }
        return 0;
    }
    cout << "LOSE" << endl;

    return 0;
}
/*

*/