/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n, a1, a2, k1, k2, mn = INF, mx = 0;

int main() {
    fast_io;

    cin >> a1 >> a2 >> k1 >> k2 >> n;

    for (ll i = 0; i <= n; i++) {
        if (i > a1 * k1 || (n - i) > a2 * k2) continue;
        ll cnt1X = i / a1;
        ll cnt2X = i / k1;
        ll cnt1Y = (n - i) / a2;
        ll cnt2Y = (n - i) / k2;
        mx = max(mx, min(a1, cnt2X) + min(a2, cnt2Y));
        ll t = 0;
        if (cnt1X >= k1) t += a1;
        if (cnt1Y >= k2) t += a2;
        if (cnt1X == k1 - 1) t += i % a1;
        if (cnt1Y == k2 - 1) t += (n - i) % a2;
        mn = min(mn, t);
    }
    cout << mn << sep << mx << endl;

    return 0;
}
/*

*/