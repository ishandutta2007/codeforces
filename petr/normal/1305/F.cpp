/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <bits/stdc++.h>

#define pb push_back
#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()
#define mp make_pair

using namespace std;

typedef long long int64;
typedef vector<int> vi;
typedef pair<int, int> ii;

class TaskF {
 public:
  set<int> checked;

  int64 check(const vector<int64>& a, int64 d) {
    int n = a.size();
    if (checked.find(d) != checked.end()) {
      return n;
    }
    checked.insert(d);
    int64 res = 0;
    for (int64 x : a) {
      if (x < d) {
        res += d - x;
      } else {
        x %= d;
        res += min(x, d - x);
      }
      if (res >= n) return n;
    }
    return res;
  }

  void solveOne(istream &in, ostream &out) {
    int n;
    in >> n;
    vector<int64> a(n);
    for (int i = 0; i < n; ++i) {
      in >> a[i];
    }
    auto start = clock();
    mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
    uniform_int_distribution<int> distrib(0, n - 1);
    int64 res = n;
    while (clock() - start < 2 * CLOCKS_PER_SEC) {
      int64 val = a[distrib(rng)];
      for (int64 v = max(int64(1), val - 1); v <= val + 1; ++v) {
        int64 r = v;
        for (int64 d = 2; d * d <= v; ++d) if (r % d == 0) {
          res = min(res, check(a, d));
          while (r % d == 0) r /= d;
        }
        if (r > 1) {
          res = min(res, check(a, r));
        }
      }
    }
    out << res << "\n";
  }

  void solve(std::istream &in, std::ostream &out) {
    int nt;
    nt = 1;
    for (int it = 0; it < nt; ++it) {
      solveOne(in, out);
    }
  }
};


int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  TaskF solver;
  std::istream& in(std::cin);
  std::ostream& out(std::cout);
  solver.solve(in, out);
  return 0;
}