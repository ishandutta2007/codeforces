/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll MAXM = 1e3 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

template<ll SIZE>
struct DSU {
    ll par[SIZE], sz[SIZE];

    DSU() {
        fill(par, par + SIZE, -1);
        fill(sz, sz + SIZE, 1);
    }

    ll Find(ll v) {
        return (par[v] == -1 ? v : par[v] = Find(par[v]));
    }

    ll Union(ll v, ll u) {
        ll pv = Find(v), pu = Find(u);
        if (pv == pu) return 0;
        if (sz[pv] < sz[pu]) swap(pv, pu); // union by rank
        par[pu] = pv;
        sz[pv] += sz[pu];
        return 1;
    }

    ll getSize(ll v) {
        return sz[Find(v)];
    }
};

ll n, m, mn = 1;
vector<ll> vec, adj[MAXN];
DSU<MAXN> dsu;
bitset<MAXM> bs[MAXM];

int main() {
    fast_io;

    ll n, m;
    cin >> n >> m;

    for (ll i = 0; i < m; i++) {
        ll v, u;
        cin >> v >> u;
        adj[v].push_back(u);
        adj[u].push_back(v);
    }

    for (ll i = 1; i <= n; i++) {
        if (adj[i].size() < adj[mn].size()) mn = i;
    }

    for (ll i = 1; i <= n; i++) {
        ll f = 0;
        for (ll j : adj[i]) {
            if (j == mn) f = 1;
        }
        if (f == 0) dsu.Union(mn, i);
        else vec.push_back(i);
    }

    for (ll i = 1; i <= n; i++) adj[i].push_back(INF);
    for (ll i = 1; i <= n; i++) Sort(adj[i]);

    for (ll i : vec) {
        for (ll j = 1; j <= n; j++) {
            if (*lower_bound(all(adj[i]), j) != j) dsu.Union(i, j);
        }
    }

    ll ans = 0;
    for (ll i = 1; i <= n; i++) if (dsu.Find(i) == i) ans++;
    cout << ans - 1 << endl;

    return 0;
}
/*

*/