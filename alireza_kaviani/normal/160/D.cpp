/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n, m, v[MAXN], u[MAXN], w[MAXN], ans[MAXN], par[MAXN], sz[MAXN], H[MAXN], mn[MAXN], mark[MAXN];
vector<ll> E[MAXN];
vector<pll> adj[MAXN];

ll Find(ll v) {
    return (par[v] == -1 ? v : par[v] = Find(par[v]));
}

void Union(ll v, ll u) {
    v = Find(v), u = Find(u);
    if (u == v) return;
    if (sz[v] < sz[u]) swap(v, u);
    par[u] = v;
    sz[v] += sz[u];
}

void DFS(ll v, ll p = 0, ll t = -1) {
    H[v] = H[p] + 1;
    mark[v] = 1;
    for (pll i : adj[v]) {
        ll u = i.X, ind = i.Y;
        if (mark[u]) {
            if (t != ind) mn[v] = min(mn[v], H[u]);
            continue;
        }
        DFS(u, v, ind);
        if (mn[u] > H[v]) ans[ind] = 3;
        mn[v] = min(mn[v], mn[u]);
    }
}

int main() {
    fast_io;
    fill(par, par + MAXN, -1);
    fill(sz, sz + MAXN, 1);
    fill(mn, mn + MAXN, INF);

    cin >> n >> m;
    for (ll i = 1; i <= m; i++) {
        cin >> v[i] >> u[i] >> w[i];
        E[w[i]].push_back(i);
    }

    for (ll i = 0; i < MAXN; i++) {
        vector<ll> vec;
        for (ll j : E[i]) {
            if (Find(v[j]) == Find(u[j])) ans[j] = 1;
            else {
                ans[j] = 2;
                adj[Find(v[j])].push_back({Find(u[j]), j});
                adj[Find(u[j])].push_back({Find(v[j]), j});
                vec.push_back(Find(u[j]));
                vec.push_back(Find(v[j]));
            }
        }

        for (ll j : vec) {
            if (!mark[j]) DFS(j);
        }
        for (ll j : vec) {
            adj[j] = {};
            mn[j] = INF;
            H[j] = 0;
            mark[j] = 0;
        }
        for (ll j : E[i]) Union(v[j], u[j]);
    }
    for (ll i = 1; i <= m; i++) {
        if (ans[i] == 1) cout << "none" << endl;
        if (ans[i] == 2) cout << "at least one" << endl;
        if (ans[i] == 3) cout << "any" << endl;
    }

    return 0;
}
/*

*/