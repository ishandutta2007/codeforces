/* Generated by powerful Codeforces Tool
 * You can download the binary file in here https://github.com/xalanq/cf-tool (Windows, macOS, Linux)
 * Author: alireza_kaviani
 * Time: 2020-12-06 18:05:03
**/
#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<int, int> pii;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 300 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

int q , n , k , cnt[3];
string s[MAXN];

int main() {
	ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);

	cin >> q;
	while(q--){
		cin >> n; k = 0;
		cnt[0] = cnt[1] = cnt[2] = 0;
		vector<pii> vec1 , vec2;
		for(int i = 0 ; i < n ; i++){
			cin >> s[i];
			for(int j = 0 ; j < n ; j++){
				if(s[i][j] != '.'){
					k++;
					cnt[(i + j) % 3]++;
				}	
			}
		}
		int x , y;
		if(cnt[0] >= cnt[1] && cnt[0] >= cnt[2]){
			x = 1; y = 2;
		}
		else if(cnt[1] >= cnt[0] && cnt[1] >= cnt[2]){
			x = 0 , y = 2;
		}
		else{
			x = 0 , y = 1;
		}
		for(int i = 0 ; i < n ; i++){
			for(int j = 0 ; j < n ; j++){
				if(s[i][j] == '.' || (i + j) % 3 != x)	continue;
				if(s[i][j] == 'X'){
					vec1.push_back({i , j});
				}
				else{
					vec2.push_back({i , j});
				}
			}
		}
		for(int i = 0 ; i < n ; i++){
			for(int j = 0 ; j < n ; j++){
				if(s[i][j] == '.' || (i + j) % 3 != y)	continue;
				if(s[i][j] == 'X'){
					vec2.push_back({i , j});
				}
				else{
					vec1.push_back({i , j});
				}
			}
		}
		if(SZ(vec1) > SZ(vec2))	vec1 = vec2;
		for(pii i : vec1){
			int x = i.X , y = i.Y;
			if(s[x][y] == 'X')	s[x][y] = 'O';
			else	s[x][y] = 'X';
		}
		for(int i = 0 ; i < n ; i++){
			cout << s[i] << endl;
		}
	}

    return 0;
}
/*

*/