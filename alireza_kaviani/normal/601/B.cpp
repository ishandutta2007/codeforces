/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e5 + 10;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll q, n, A[MAXN], D[MAXN], L[MAXN], R[MAXN];

ll calc(ll l, ll r) {
    fill(L, L + MAXN, l - 1);
    fill(R, R + MAXN, r + 1);

    vector<ll> vec;
    for (ll i = l; i <= r; i++) {
        while (vec.size() > 0 && D[vec.back()] < D[i]) {
            R[vec.back()] = i;
            vec.pop_back();
        }
        if (vec.size() != 0) L[i] = vec.back();
        vec.push_back(i);
    }

    ll ans = 0;
    for (ll i = l; i <= r; i++) ans += (i - L[i]) * (R[i] - i) * D[i];
    return ans;
}

int main() {
    fast_io;

    cin >> n >> q;
    for (ll i = 1; i <= n; i++) cin >> A[i];
    for (ll i = 1; i < n; i++) D[i] = abs(A[i] - A[i + 1]);

    while (q--) {
        ll l, r;
        cin >> l >> r;
        cout << calc(l, r - 1) << endl;
    }

    return 0;
}
/*

*/