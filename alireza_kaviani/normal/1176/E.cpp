/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;
typedef pair<ld, ld> pld;
typedef pair<string, string> pss;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define file_io                     freopen("in.txt" , "r+" , stdin) ; freopen("out.txt" , "w+" , stdout);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

inline ll input() {
    ll n;
    cin >> n;
    return n;
}

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

set_random;

const ll MAXN = 1e6 + 10;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

vector<ll> adj[MAXN] , ver[2];
ll t , n , m , v , u , dist[MAXN] , mark[MAXN];

void BFS(ll v){
    queue<ll> q;
    q.push(v);

    mark[v] = 1;
    while(!q.empty()){
        v = q.front();
        q.pop();
        for(ll u : adj[v]){
            if(!mark[u]){
                dist[u] = dist[v] + 1;
                mark[u] = 1;
                q.push(u);
            }
        }
    }

    for(ll i = 1 ; i <= n ; i++)    ver[dist[i] % 2].push_back(i);
}

int main() {
    fast_io;

    cin >> t;

    while(t--){
        cin >> n >> m;
        fill(adj , adj + n + 10 , vector<ll>());
        fill(ver , ver + 2 , vector<ll>());
        fill(dist , dist + n + 10 , 0);
        fill(mark , mark + n + 10 , 0);

        for(ll i = 0 ; i < m ; i++){
            cin >> v >> u;
            adj[v].push_back(u);
            adj[u].push_back(v);
        }
        BFS(1);
        if(ver[0].size() > ver[1].size())   ver[0] = ver[1];
        cout << ver[0].size() << endl;
        for(ll i : ver[0])  cout << i << sep;
        cout << endl;
    }

    return 0;
}
/*
todo :
    1- set constants
    2- check TimeLimit and MemoryLimit
    3- check special test cases
    4- don't forget BS can help you that is good idea(use for loop for floats)
    5- don't forget printf and scanf can help you in your code speed
*/