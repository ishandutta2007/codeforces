import java.util.InputMismatchException;
import java.math.BigInteger;
import java.util.Collection;
import java.util.ArrayList;
import java.util.List;
import java.util.Comparator;
import java.io.*;
import java.util.Iterator;
import java.util.Arrays;

/**
 * Generated by Contest helper plug-in
 * Actual solution is at the bottom
 */
public class Main {
	public static void main(String[] args) {
		InputReader in = new StreamInputReader(System.in);
		PrintWriter out = new PrintWriter(System.out);
		run(in, out);
	}

	public static void run(InputReader in, PrintWriter out) {
		Solver solver = new TaskD();
		solver.solve(1, in, out);
		Exit.exit(in, out);
	}
}

abstract class InputReader {
	private boolean finished = false;

	public abstract int read();

	public int readInt() {
		int c = read();
		while (isSpaceChar(c))
			c = read();
		int sgn = 1;
		if (c == '-') {
			sgn = -1;
			c = read();
		}
		int res = 0;
		do {
			if (c < '0' || c > '9')
				throw new InputMismatchException();
			res *= 10;
			res += c - '0';
			c = read();
		} while (!isSpaceChar(c));
		return res * sgn;
	}

	public String readString() {
		int c = read();
		while (isSpaceChar(c))
			c = read();
		StringBuffer res = new StringBuffer();
		do {
			res.appendCodePoint(c);
			c = read();
		} while (!isSpaceChar(c));
		return res.toString();
	}

	private boolean isSpaceChar(int c) {
		return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
	}

	public void setFinished(boolean finished) {
		this.finished = finished;
	}

	public abstract void close();
}

class StreamInputReader extends InputReader {
	private InputStream stream;
	private byte[] buf = new byte[1024];
	private int curChar, numChars;

	public StreamInputReader(InputStream stream) {
		this.stream = stream;
	}

	public int read() {
		if (numChars == -1)
			throw new InputMismatchException();
		if (curChar >= numChars) {
			curChar = 0;
			try {
				numChars = stream.read(buf);
			} catch (IOException e) {
				throw new InputMismatchException();
			}
			if (numChars <= 0)
				return -1;
		}
		return buf[curChar++];
	}

	public void close() {
		try {
			stream.close();
		} catch (IOException ignored) {
		}
	}
}

class Exit {
	private Exit() {
	}

	public static void exit(InputReader in, PrintWriter out) {
		in.setFinished(true);
		in.close();
		out.close();
	}
}

interface Solver {
	public void solve(int testNumber, InputReader in, PrintWriter out);
}

class IntegerUtils {

	public static long power(long base, long exponent, long mod) {
		if (exponent == 0)
			return 1;
		long result = power(base, exponent >> 1, mod);
		result = result * result % mod;
		if ((exponent & 1) != 0)
			result = result * base % mod;
		return result;
	}

	}

class TaskD implements Solver {
	private static final int MOD = 1000000007;

	public void solve(int testNumber, InputReader in, PrintWriter out) {
		int rowCount = in.readInt();
		int columnCount = in.readInt();
		int colorCount = in.readInt();
		if (columnCount == 1) {
			out.println(IntegerUtils.power(colorCount, rowCount, MOD));
			return;
		}
		long[][] variants = new long[rowCount + 1][rowCount + 1];
		variants[0][0] = 1;
		for (int i = 1; i <= rowCount; i++) {
			for (int j = 1; j <= i; j++)
				variants[i][j] = (variants[i - 1][j - 1] + variants[i - 1][j] * j) % MOD;
		}
		long[] factorial = new long[rowCount + 1];
		factorial[0] = 1;
		for (int i = 0; i < rowCount; i++)
			factorial[i + 1] = (factorial[i] * (i + 1)) % MOD;
		long[] reverse = new long[rowCount + 2];
		for (int i = 1; i <= rowCount + 1; i++)
			reverse[i] = BigInteger.valueOf(i).modInverse(BigInteger.valueOf(MOD)).longValue();
		long baseCount = 1;
		int exponent = (columnCount - 2) * rowCount;
		long result = 0;
		for (int i = 0; i <= rowCount && i <= colorCount; i++) {
			long curBaseCount = baseCount;
			for (int j = 0; i + j <= rowCount && i + 2 * j <= colorCount; j++) {
				result += variants[rowCount][i + j] * variants[rowCount][i + j] % MOD * curBaseCount % MOD * IntegerUtils.power(i, exponent, MOD) % MOD * factorial[i + j] % MOD * factorial[i + j] % MOD;
				curBaseCount = curBaseCount * reverse[j + 1] % MOD;
				curBaseCount = curBaseCount * (colorCount - i - 2 * j) % MOD;
				curBaseCount = curBaseCount * (colorCount - i - 2 * j - 1) % MOD;
				curBaseCount = curBaseCount * reverse[j + 1] % MOD;
			}
			baseCount = (baseCount * (colorCount - i)) % MOD;
			baseCount = baseCount * reverse[i + 1] % MOD;
		}
		out.println(result % MOD);
	}
}