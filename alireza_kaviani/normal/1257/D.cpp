/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 2e5 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll q, n, m, lg[MAXN], A[MAXN], P[MAXN], S[MAXN], mx[LOG][MAXN], MX[MAXN], dp[MAXN];

ll GetMax(ll l, ll r) {
    ll x = lg[r - l + 1];
    if (x == 0) x = 1;
    ll y = (1 << (x - 1));
    return max(mx[x - 1][l], mx[x - 1][r - y + 1]);
}

ll MAIN() {
    cin >> n;
    for (ll i = 1; i <= n; i++) cin >> A[i];
    cin >> m;
    for (ll i = 1; i <= m; i++) cin >> P[i] >> S[i];

    fill(MX, MX + n + 10, 0);
    fill(dp, dp + n + 10, INF);
    for (ll i = 0; i < LOG; i++) fill(mx[i], mx[i] + n + 10, INF);

    for (ll i = 1; i <= m; i++) MX[S[i]] = max(MX[S[i]], P[i]);
    for (ll i = n; i >= 0; i--) MX[i] = max(MX[i], MX[i + 1]);

    for (ll i = 1; i <= n; i++) mx[0][i] = A[i];
    for (ll i = 1; i < LOG; i++) {
        for (ll j = 1; j <= n; j++) {
            mx[i][j] = max(mx[i - 1][j], mx[i - 1][j + (1LL << (i - 1))]);
        }
    }

    dp[0] = 0;
    for (ll i = 0; i < n; i++) {
        ll l = i, r = n + 1;
        while (r - l > 1) {
            ll mid = (l + r) / 2;
            if (GetMax(i + 1, mid) <= MX[mid - i]) l = mid;
            else r = mid;
        }
        dp[l] = min(dp[l], dp[i] + 1);
    }
    if (dp[n] == INF)
        return cout << -1 << endl, 0;
    cout << dp[n] << endl;
}

int main() {
    fast_io;
    for (ll i = 2; i < MAXN; i++) lg[i] = lg[(i + 1) / 2] + 1;

    cin >> q;
    while (q--) MAIN();

    return 0;
}
/*

*/