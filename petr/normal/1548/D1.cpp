/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

// Actual solution is at the bottom

#include <algorithm>
#include <array>
#include <bitset>
#include <cassert>
#include <climits>
#include <cstdint>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <memory>
#include <numeric>
#include <queue>
#include <random>
#include <set>
#include <stack>
#include <string>
#include <unordered_set>
#include <unordered_map>
#include <vector>
//#include "../atcoder/all"

#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()

using namespace std;

typedef int64_t int64;
typedef pair<int, int> ii;

class D1GregorAndTheOddCowsEasy {
 public:
  int gcd(int a, int b) {
    while (b) {
      int t = a % b;
      a = b;
      b = t;
    }
    return a;
  }

  void solveOne() {
    int n;
    cin >> n;
    vector<int> x(n);
    vector<int> y(n);
    vector<vector<int>> am(2, vector<int>(2));
    for (int i = 0; i < n; ++i) {
      cin >> x[i] >> y[i];
      x[i] /= 2;
      y[i] /= 2;
      ++am[x[i] % 2][y[i] % 2];
    }
    int64 res = 0;
    for (int a = 0; a < 2; ++a) {
      for (int b = 0; b < 2; ++b) {
        int64 cur = am[a][b];
        res += cur * (cur - 1) / 2 * (n - cur);
        res += cur * (cur - 1) / 2 * (cur - 2) / 3;
      }
    }
    cout << res << "\n";
  }

  void solve() {
    int nt = 1;
    for (int it = 0; it < nt; ++it) {
      solveOne();
    }
  }
};


int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(0);
    D1GregorAndTheOddCowsEasy solver;


    solver.solve();
    return 0;
}