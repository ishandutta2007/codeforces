/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;
typedef pair<ld, ld> pld;
typedef pair<string, string> pss;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define file_io                     freopen("in.txt" , "r+" , stdin) ; freopen("out.txt" , "w+" , stdout);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

inline ll input() {
    ll n;
    cin >> n;
    return n;
}

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

set_random;

const ll MAXN = 1e3 + 10;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n , x , y , ind , mat[MAXN][MAXN] , dp[MAXN][MAXN][3] , cnt[MAXN][MAXN][3];
char prv[MAXN][MAXN][3];
vector<char> ans;

ll get(ll n , ll x){
    ll ans = 0;
    while(n % x == 0 && n != 0){
        n /= x;
        ans++;
    }
    return ans;
}

int main() {
    fast_io;
    for(ll i = 0 ; i < MAXN ; i++){
        for(ll j = 0 ; j < MAXN ; j++){
            for(ll k = 0 ; k < 3 ; k++){
                dp[i][j][k] = INF + 100;
            }
        }
    }

    cin >> n;
    for(ll i = 1 ; i <= n ; i++){
        for(ll j = 1 ; j <= n ; j++){
            cin >> mat[i][j];
            cnt[i][j][0] = get(mat[i][j] , 2);
            cnt[i][j][1] = get(mat[i][j] , 5);
            cnt[i][j][2] = (mat[i][j] == 0 ? 1LL : INF);
        }
    }

    dp[0][1][0] = dp[0][1][1] = 0;
    for(ll i = 1 ; i <= n ; i++){
        for(ll j = 1 ; j <= n ; j++){
            for(ll k = 0 ; k < 2 ; k++){
                if(dp[i - 1][j][k] < dp[i][j - 1][k]){
                    dp[i][j][k] = dp[i - 1][j][k] + cnt[i][j][k];
                    prv[i][j][k] = 'D';
                }
                else{
                    dp[i][j][k] = dp[i][j - 1][k] + cnt[i][j][k];
                    prv[i][j][k] = 'R';
                }
            }
            if(dp[i - 1][j][2] < dp[i][j - 1][2]){
                dp[i][j][2] = min(dp[i - 1][j][2] , cnt[i][j][2]);
                prv[i][j][2] = 'D';
            }
            else{
                dp[i][j][2] = min(dp[i][j - 1][2] , cnt[i][j][2]);
                prv[i][j][2] = 'R';
            }
        }
    }

    x = n , y = n , ind = (min_element(dp[n][n] , dp[n][n] + 3) - dp[n][n]);
    cout << dp[n][n][ind] << endl;
    while(x != 1 || y != 1){
        ans.push_back(prv[x][y][ind]);
        if(prv[x][y][ind] == 'D')   x--;
        else    y--;
    }
    for(ll i = ans.size() - 1 ; i >= 0 ; i--)   cout << ans[i];

    return 0;
}
/*
todo :
    1- set constants
    2- check TimeLimit and MemoryLimit
    3- check special test cases
    4- don't forget BS can help you that is good idea(use for loop for floats)
    5- don't forget printf and scanf can help you in your code speed
*/