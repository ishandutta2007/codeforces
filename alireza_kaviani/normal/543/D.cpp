/* Generated by powerful Codeforces Tool
 * You can download the binary file in here https://github.com/xalanq/cf-tool (Windows, macOS, Linux)
 * Author: alireza_kaviani
 * Time: 2020-04-17 11:34:56
**/
#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n , dp[MAXN] , dp2[MAXN];
vector<ll> adj[MAXN];

void DFS(ll v){
    dp[v] = 1;
    for(ll u : adj[v])  DFS(u) , dp[v] = dp[v] * (dp[u] + 1) % MOD;
}

void DFS2(ll v){
    ll mul = dp2[v] + 1;
    for(ll u : adj[v]){
        dp2[u] = mul;
        mul = mul * (dp[u] + 1) % MOD;
    }
    reverse(all(adj[v]));
    mul = 1;
    for(ll u : adj[v]){
        dp2[u] = dp2[u] * mul % MOD;
        mul = mul * (dp[u] + 1) % MOD;
        DFS2(u);
    }
}

int main() {
    ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);

    cin >> n;
    for(ll i = 2 , p ; i <= n ; i++)    cin >> p , adj[p].push_back(i);
    DFS(1) ; DFS2(1);
    for(ll i = 1 ; i <= n ; i++)    cout << dp[i] * (dp2[i] + 1) % MOD << sep;

    return 0;
}
/*

*/