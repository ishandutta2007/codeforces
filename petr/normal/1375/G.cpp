/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <bits/stdc++.h>

#define pb push_back
#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()
#define mp make_pair

using namespace std;

typedef long long int64;
typedef vector<int> vi;
typedef pair<int, int> ii;

class TaskG {
 public:
  vector<vector<int>> adj;
  vector<int> color;
  int n;

  void dfs(int at, int parent, int c)
  {
    color[at] = c;
    for (int x : adj[at]) {
      if (x != parent) {
        dfs(x, at, 1 - c);
      }
    }
  }

  void solveOne(istream &in, ostream &out) {
    in >> n;
    adj = vector<vector<int>>(n);
    for (int i = 0; i < n - 1; ++i) {
      int u, v;
      in >> u >> v;
      --u; --v;
      adj[u].push_back(v);
      adj[v].push_back(u);
    }
    color = vector<int>(n, -1);
    dfs(0, -1, 0);
    vector<int> am(2);
    for (int x : color) ++am[x];
    out << min(am[0], am[1]) - 1 << "\n";
  }

  void solve(std::istream &in, std::ostream &out) {
    int nt = 1;
    for (int it = 0; it < nt; ++it) {
      solveOne(in, out);
    }
  }
};


int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  TaskG solver;
  std::istream& in(std::cin);
  std::ostream& out(std::cout);
  solver.solve(in, out);
  return 0;
}