/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author RiaD
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <vector>
#include <set>

using namespace std;

class A {
public:
	void solve(std::istream& in, std::ostream& out) {
		int n;
		set<int> lists;
		in >> n;
		vector<int> degree(n);
		vector<int> xors(n);

		int sumD = 0;
		for(int i = 0; i < n; ++i) {
			in >> degree[i] >> xors[i];
			if(degree[i] == 1) {
				lists.insert(i);
			}

			sumD += degree[i];
		}

		out << sumD / 2 << "\n";

		while(!lists.empty()) {
			int id = *lists.begin();
			lists.erase(lists.begin());
			out << id << ' ' << xors[id] << '\n';
			xors[xors[id]] ^= id;
			--degree[xors[id]];
			if(degree[xors[id]] == 1) {
				lists.insert(xors[id]);
			}
			if(degree[xors[id]] == 0) {
				lists.erase(xors[id]);
			}
		}
	}
};


int main() {
	std::cin.sync_with_stdio(false);
	std::cin.tie(0);
	std::cout << std::fixed;
	std::cout.precision(20);
	A solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}