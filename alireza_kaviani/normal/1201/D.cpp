/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

set_random;

const ll MAXN = 1e6 + 10;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n , m , k , q , x , y , B[MAXN] , L[MAXN] , R[MAXN] , dist[MAXN] , mark[MAXN];
set<ll> st;
vector<ll> vec;
vector<pll> adj[MAXN];
priority_queue<pll , vector<pll> , greater<pll>> pq;

ll get(ll l , ll r){
    if(l > r)   swap(l , r);
    ll ans = INF , ind = lower_bound(B , B + q , l) - B;
    if(ind < q && B[ind] <= r)  return r - l;
    ind = upper_bound(B , B + q , l) - B - 1;
    if(ind >= 0){
        ans = min(ans , l - B[ind] + r - B[ind]);
    }
    ind = upper_bound(B , B + q , r) - B;
    if(ind < q){
        ans = min(ans , B[ind] - r + B[ind] - l);
    }
    return ans;
}

void dijkstra(ll v){
    dist[v] = 0;
    pq.push({dist[v] , v});

    while(!pq.empty()){
        pll p = pq.top();
        pq.pop();
        ll v = p.Y;

        if(mark[v]) continue;
        mark[v] = 1;

        for(pll i : adj[v]){
            ll u = i.X , w = i.Y;
            if(dist[u] > dist[v] + w){
                dist[u] = dist[v] + w;
                pq.push({dist[u] , u});
            }
        }
    }
}

int main() {
    fast_io;
    fill(L , L + MAXN , INF);
    fill(R , R + MAXN , -INF);
    fill(dist , dist + MAXN , INF);

    cin >> n >> m >> k >> q;
    for(ll i = 0 ; i < k ; i++){
        cin >> x >> y;
        L[x] = min(L[x] , y);
        R[x] = max(R[x] , y);
        st.insert(x);
    }

    for(ll i = 0 ; i < q ; i++) cin >> B[i];
    sort(B , B + q);

    vec = vector<ll>(st.begin() , st.end());
    if(vec[0] == 1) {
        adj[0].push_back({1, L[vec[0]] - 1});
        adj[0].push_back({2, R[vec[0]] - 1});
    }
    else{
        adj[0].push_back({1, get(1 , L[vec[0]])});
        adj[0].push_back({2, get(1 , R[vec[0]])});
    }
    for(ll i = 1 ; i < vec.size() ; i++){
        adj[i * 2 - 1].push_back({i * 2 + 1 , R[vec[i - 1]] - L[vec[i - 1]] + get(R[vec[i - 1]] , L[vec[i]])});
        adj[i * 2 - 1].push_back({i * 2 + 2 , R[vec[i - 1]] - L[vec[i - 1]] + get(R[vec[i - 1]] , R[vec[i]])});
        adj[i * 2].push_back({i * 2 + 1 , R[vec[i - 1]] - L[vec[i - 1]] + get(L[vec[i - 1]] , L[vec[i]])});
        adj[i * 2].push_back({i * 2 + 2 , R[vec[i - 1]] - L[vec[i - 1]] + get(L[vec[i - 1]] , R[vec[i]])});
    }

    dijkstra(0);
    cout << min(dist[vec.size() * 2] , dist[vec.size() * 2 - 1]) + R[vec.back()] - L[vec.back()] + vec.back() - 1 << endl;

    return 0;
}
/*

*/