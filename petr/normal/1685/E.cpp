/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

// Actual solution is at the bottom

#undef NDEBUG

#include <algorithm>
#include <array>
#include <bitset>
#include <cassert>
#include <climits>
#include <cstdint>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <memory>
#include <numeric>
#include <queue>
#include <random>
#include <set>
#include <stack>
#include <string>
#include <unordered_set>
#include <unordered_map>
#include <vector>
// AtCoder library from https://github.com/atcoder/ac-library
#ifndef ATCODER_LAZYSEGTREE_HPP
#define ATCODER_LAZYSEGTREE_HPP 1






#ifndef ATCODER_INTERNAL_BITOP_HPP
#define ATCODER_INTERNAL_BITOP_HPP 1

#ifdef _MSC_VER
#include <intrin.h>
#endif

namespace atcoder {

namespace internal {

// @param n `0 <= n`
// @return minimum non-negative `x` s.t. `n <= 2**x`
int ceil_pow2(int n) {
    int x = 0;
    while ((1U << x) < (unsigned int)(n)) x++;
    return x;
}

// @param n `1 <= n`
// @return minimum non-negative `x` s.t. `(n & (1 << x)) != 0`
int bsf(unsigned int n) {
#ifdef _MSC_VER
    unsigned long index;
    _BitScanForward(&index, n);
    return index;
#else
    return __builtin_ctz(n);
#endif
}

}  // namespace internal

}  // namespace atcoder

#endif  // ATCODER_INTERNAL_BITOP_HPP



namespace atcoder {

template <class S,
          S (*op)(S, S),
          S (*e)(),
          class F,
          S (*mapping)(F, S),
          F (*composition)(F, F),
          F (*id)()>
struct lazy_segtree {
  public:
    lazy_segtree() : lazy_segtree(0) {}
    lazy_segtree(int n) : lazy_segtree(std::vector<S>(n, e())) {}
    lazy_segtree(const std::vector<S>& v) : _n(int(v.size())) {
        log = internal::ceil_pow2(_n);
        size = 1 << log;
        d = std::vector<S>(2 * size, e());
        lz = std::vector<F>(size, id());
        for (int i = 0; i < _n; i++) d[size + i] = v[i];
        for (int i = size - 1; i >= 1; i--) {
            update(i);
        }
    }

    void set(int p, S x) {
        assert(0 <= p && p < _n);
        p += size;
        for (int i = log; i >= 1; i--) push(p >> i);
        d[p] = x;
        for (int i = 1; i <= log; i++) update(p >> i);
    }

    S get(int p) {
        assert(0 <= p && p < _n);
        p += size;
        for (int i = log; i >= 1; i--) push(p >> i);
        return d[p];
    }

    S prod(int l, int r) {
        assert(0 <= l && l <= r && r <= _n);
        if (l == r) return e();

        l += size;
        r += size;

        for (int i = log; i >= 1; i--) {
            if (((l >> i) << i) != l) push(l >> i);
            if (((r >> i) << i) != r) push(r >> i);
        }

        S sml = e(), smr = e();
        while (l < r) {
            if (l & 1) sml = op(sml, d[l++]);
            if (r & 1) smr = op(d[--r], smr);
            l >>= 1;
            r >>= 1;
        }

        return op(sml, smr);
    }

    S all_prod() { return d[1]; }

    void apply(int p, F f) {
        assert(0 <= p && p < _n);
        p += size;
        for (int i = log; i >= 1; i--) push(p >> i);
        d[p] = mapping(f, d[p]);
        for (int i = 1; i <= log; i++) update(p >> i);
    }
    void apply(int l, int r, F f) {
        assert(0 <= l && l <= r && r <= _n);
        if (l == r) return;

        l += size;
        r += size;

        for (int i = log; i >= 1; i--) {
            if (((l >> i) << i) != l) push(l >> i);
            if (((r >> i) << i) != r) push((r - 1) >> i);
        }

        {
            int l2 = l, r2 = r;
            while (l < r) {
                if (l & 1) all_apply(l++, f);
                if (r & 1) all_apply(--r, f);
                l >>= 1;
                r >>= 1;
            }
            l = l2;
            r = r2;
        }

        for (int i = 1; i <= log; i++) {
            if (((l >> i) << i) != l) update(l >> i);
            if (((r >> i) << i) != r) update((r - 1) >> i);
        }
    }

    template <bool (*g)(S)> int max_right(int l) {
        return max_right(l, [](S x) { return g(x); });
    }
    template <class G> int max_right(int l, G g) {
        assert(0 <= l && l <= _n);
        assert(g(e()));
        if (l == _n) return _n;
        l += size;
        for (int i = log; i >= 1; i--) push(l >> i);
        S sm = e();
        do {
            while (l % 2 == 0) l >>= 1;
            if (!g(op(sm, d[l]))) {
                while (l < size) {
                    push(l);
                    l = (2 * l);
                    if (g(op(sm, d[l]))) {
                        sm = op(sm, d[l]);
                        l++;
                    }
                }
                return l - size;
            }
            sm = op(sm, d[l]);
            l++;
        } while ((l & -l) != l);
        return _n;
    }

    template <bool (*g)(S)> int min_left(int r) {
        return min_left(r, [](S x) { return g(x); });
    }
    template <class G> int min_left(int r, G g) {
        assert(0 <= r && r <= _n);
        assert(g(e()));
        if (r == 0) return 0;
        r += size;
        for (int i = log; i >= 1; i--) push((r - 1) >> i);
        S sm = e();
        do {
            r--;
            while (r > 1 && (r % 2)) r >>= 1;
            if (!g(op(d[r], sm))) {
                while (r < size) {
                    push(r);
                    r = (2 * r + 1);
                    if (g(op(d[r], sm))) {
                        sm = op(d[r], sm);
                        r--;
                    }
                }
                return r + 1 - size;
            }
            sm = op(d[r], sm);
        } while ((r & -r) != r);
        return 0;
    }

  private:
    int _n, size, log;
    std::vector<S> d;
    std::vector<F> lz;

    void update(int k) { d[k] = op(d[2 * k], d[2 * k + 1]); }
    void all_apply(int k, F f) {
        d[k] = mapping(f, d[k]);
        if (k < size) lz[k] = composition(f, lz[k]);
    }
    void push(int k) {
        all_apply(2 * k, lz[k]);
        all_apply(2 * k + 1, lz[k]);
        lz[k] = id();
    }
};

}  // namespace atcoder

#endif  // ATCODER_LAZYSEGTREE_HPP



#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()

using namespace std;

typedef int64_t int64;
typedef pair<int, int> ii;

struct HalfTracker {
  bool ok() {
    return num_bad == 0;
  }

  int score(pair<int, int> p, pair<int, int> q) {
    bool v1 = p.second >= q.second;
    bool v2 = (p.second == bySecond.rbegin()->first) && (q.second == bySecond.begin()->first);
    return v1 == v2 ? 0 : 1;
  }

  void put(int at, int val) {
    pair<int, int> cur(at, val);
    pair<int, int> cur2(val, at);
    if (byFirst.empty()) {
      byFirst.insert(cur);
      bySecond.insert(cur2);
      return;
    }
    auto it = byFirst.lower_bound(cur);
    auto it2 = it;
    if (it == byFirst.end()) {
      it = byFirst.begin();
    }
    if (it2 == byFirst.begin()) {
      it2 = byFirst.end();
    }
    --it2;
    num_bad -= score(*it2, *it);
    bySecond.insert(cur2);
    num_bad += score(*it2, cur);
    num_bad += score(cur, *it);
    byFirst.insert(cur);
  }

  void remove(int at, int val) {
    pair<int, int> cur(at, val);
    pair<int, int> cur2(val, at);
    if (byFirst.size() == 1) {
      byFirst.erase(cur);
      bySecond.erase(cur2);
      return;
    }
    byFirst.erase(cur);
    auto it = byFirst.lower_bound(cur);
    auto it2 = it;
    if (it == byFirst.end()) {
      it = byFirst.begin();
    }
    if (it2 == byFirst.begin()) {
      it2 = byFirst.end();
    }
    --it2;
    num_bad -= score(*it2, cur);
    num_bad -= score(cur, *it);
    bySecond.erase(cur2);
    num_bad += score(*it2, *it);
  }

  int num_bad = 0;
  set<pair<int, int>> byFirst;
  set<pair<int, int>> bySecond;
};

int op(int x, int y) {
  return min(x, y);
}

int unit() {
  return (int) 1e9;
}

int apply(int x, int y) {
  return x + y;
}

int identit() {
  return 0;
}

using Tree = atcoder::lazy_segtree<int, op, unit, int, apply, apply, identit>;

class ELuchshayaZadachaOLIS {
 public:
  void solveOne() {
    int n, q;
    cin >> n >> q;
    vector<int> p(2 * n + 1);
    for (auto& x : p) {
      cin >> x;
      --x;
    }
    HalfTracker bottom;
    HalfTracker top;
    Tree balances(2 * n + 2);
    int balance = 0;
    balances.set(0, 0);
    int where = -1;
    for (int i = 0; i < p.size(); ++i) {
      if (p[i] <= n) {
        bottom.put(i, p[i]);
      }
      if (p[i] >= n) {
        top.put(i, p[i]);
      }
      if (p[i] < n) {
        --balance;
      } else if (p[i] > n) {
        ++balance;
      } else if (p[i] == n) {
        where = i;
      }
      balances.set(i + 1, balance);
    }
    for (int qi = 0; qi < q; ++qi) {
      int u, v;
      cin >> u >> v;
      --u; --v;
      for (int i : {u, v}) {
        if (p[i] <= n) {
          bottom.remove(i, p[i]);
        }
        if (p[i] >= n) {
          top.remove(i, p[i]);
        }
        if (p[i] < n) {
          balances.apply(i + 1, 2 * n + 2, 1);
        }
        if (p[i] > n) {
          balances.apply(i + 1, 2 * n + 2, -1);
        }
      }
      swap(p[u], p[v]);
      for (int i : {u, v}) {
        if (p[i] <= n) {
          bottom.put(i, p[i]);
        }
        if (p[i] >= n) {
          top.put(i, p[i]);
        }
        if (p[i] < n) {
          balances.apply(i + 1, 2 * n + 2, -1);
        }
        if (p[i] > n) {
          balances.apply(i + 1, 2 * n + 2, 1);
        }
        if (p[i] == n) {
          where = i;
        }
      }
      int global_min = balances.all_prod();
      if (global_min < balances.get(where)) {
        int pos = balances.min_left(2 * n + 2, [&](int v) { return v > global_min; }) - 1;
        cout << pos % (2 * n + 1) << "\n";
      } else if (!top.ok()) {
        cout << where % (2 * n + 1) << "\n";
      } else if (!bottom.ok()) {
        cout << (where + 1) % (2 * n + 1) << "\n";
      } else {
        cout << -1 << "\n";
      }
    }
  }

  void solve() {
    int nt = 1;
    for (int it = 0; it < nt; ++it) {
      // cout << "Case #" << (it + 1) << ": ";
      solveOne();
    }
  }
};

// #define st_mtimespec st_mtim

int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(0);
    ELuchshayaZadachaOLIS solver;


    solver.solve();
    return 0;
}