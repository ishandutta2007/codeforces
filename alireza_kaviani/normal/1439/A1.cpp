/* Generated by powerful Codeforces Tool
 * You can download the binary file in here https://github.com/xalanq/cf-tool (Windows, macOS, Linux)
 * Author: alireza_kaviani
 * Time: 2020-11-17 18:05:02
**/
#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<int, int> pii;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e3 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

int q , n , m , A[MAXN][MAXN];
string s;

int main() {
	ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);

	cin >> q;
	while(q--){
		cin >> n >> m;
		vector<pair<pll , pair<pll , pll>>> ans;
		for(int i = 1 ; i <= n ; i++){
			cin >> s; s = "." + s;
			for(int j = 1 ; j <= m ; j++){
				if(s[j] == '1')	A[i][j] = 1;
				else	A[i][j] = 0;
			}
		}
		for(int i = n ; i >= 3 ; i--){
			for(int j = 1 ; j < m ; j++){
				if(A[i][j] == 1){
					ans.push_back({{i , j} , {{i - 1 , j} , {i - 1 , j + 1}}});
					A[i][j] ^= 1;
					A[i - 1][j] ^= 1;
					A[i - 1][j + 1] ^= 1;
				}
			}
			if(A[i][m] == 1){
				ans.push_back({{i , m} , {{i - 1 , m} , {i - 1 , m - 1}}});
				A[i][m] ^= 1;
				A[i - 1][m] ^= 1;
				A[i - 1][m - 1] ^= 1;
			}
		}
		for(int i = m ; i >= 3 ; i--){
			for(int j = 1 ; j <= 2 ; j++){
				if(A[j][i] == 1){
					ans.push_back({{j , i} , {{1 , i - 1} , {2 , i - 1}}});
					A[j][i] ^= 1;
					A[1][i - 1] ^= 1;
					A[2][i - 1] ^= 1;
				}
			}
		}
		for(int i = 1 ; i <= 2 ; i++){
			for(int j = 1 ; j <= 2 ; j++){
				if((A[i][j] + A[3 - i][j] + A[i][3 - j]) % 2 == 1){
					ans.push_back({{i , j} , {{3 - i , j} , {i , 3 - j}}});
				}
			}
		}
		cout << SZ(ans) << endl;
		for(pair<pll , pair<pll , pll>> i : ans){
			cout << i.X.X << sep << i.X.Y << sep << i.Y.X.X << sep << i.Y.X.Y << sep << i.Y.Y.X << sep << i.Y.Y.Y << endl;
		}
	}

    return 0;
}
/*

*/