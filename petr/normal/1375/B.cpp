/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <bits/stdc++.h>

#define pb push_back
#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()
#define mp make_pair

using namespace std;

typedef long long int64;
typedef vector<int> vi;
typedef pair<int, int> ii;

class TaskB {
 public:
  void solveOne(istream &in, ostream &out) {
    int height;
    int width;
    in >> height >> width;
    vector<vector<int>> count(height, vector<int>(width));
    for (int i = 0; i < height; ++i) {
      for (int j = 0; j < width; ++j) {
        if (i == 0 || i == height - 1) {
          if (j == 0 || j == width - 1) {
            count[i][j] = 2;
          } else {
            count[i][j] = 3;
          }
        } else {
          if (j == 0 || j == width - 1) {
            count[i][j] = 3;
          } else {
            count[i][j] = 4;
          }
        }
      }
    }
    bool ok = true;
    for (int i = 0; i < height; ++i) {
      for (int j = 0; j < width; ++j) {
        int a;
        in >> a;
        if (a > count[i][j]) ok = false;
      }
    }
    if (ok) {
      out << "YES\n";
      for (int i = 0; i < height; ++i) {
        for (int j = 0; j < width; ++j) {
          out << count[i][j] << " ";
        }
        out << "\n";
      }
    } else {
      out << "NO\n";
    }
  }

  void solve(std::istream &in, std::ostream &out) {
    int nt;
    in >> nt;
    for (int it = 0; it < nt; ++it) {
      solveOne(in, out);
    }
  }
};


int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  TaskB solver;
  std::istream& in(std::cin);
  std::ostream& out(std::cout);
  solver.solve(in, out);
  return 0;
}