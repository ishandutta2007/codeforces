/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <bits/stdc++.h>

#define pb push_back
#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()
#define mp make_pair

using namespace std;

typedef long long int64;
typedef vector<int> vi;
typedef pair<int, int> ii;

class TaskD {
 public:
  void solve(std::istream &in, std::ostream &out) {
    int n;
    in >> n;
    int m;
    in >> m;
    vector<int64> delta(n);
    for (int i = 0; i < m; ++i) {
      int u;
      int v;
      int d;
      in >> u >> v >> d;
      --u;
      --v;
      delta[u] -= d;
      delta[v] += d;
    }
    int j = 0;
    vector<tuple<int, int, int64>> res;
    for (int i = 0; i < n; ++i) {
      while (delta[i] < 0) {
        while (delta[j] <= 0) ++j;
        int64 by = min(-delta[i], delta[j]);
        delta[i] += by;
        delta[j] -= by;
        res.emplace_back(i + 1, j + 1, by);
      }
    }
    out << res.size() << "\n";
    for (const auto& x : res) {
      out << get<0>(x) << " " << get<1>(x) << " " << get<2>(x) << "\n";
    }
  }
};


int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  TaskD solver;
  std::istream& in(std::cin);
  std::ostream& out(std::cout);
  solver.solve(in, out);
  return 0;
}