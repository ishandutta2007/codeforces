/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

// Actual solution is at the bottom

#undef NDEBUG

#include <algorithm>
#include <array>
#include <bitset>
#include <cassert>
#include <climits>
#include <cstdint>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <memory>
#include <numeric>
#include <queue>
#include <random>
#include <set>
#include <stack>
#include <string>
#include <unordered_set>
#include <unordered_map>
#include <vector>
// AtCoder library from https://github.com/atcoder/ac-library
// #include "../atcoder/all"

#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()

using namespace std;

typedef int64_t int64;
typedef pair<int, int> ii;

class BRailwaySystem {
 public:
  void solveOne() {
    int n, m;
    cin >> n >> m;
    vector<pair<int, int>> edges;
    for (int i = 0; i < m; ++i) {
      cout << "? ";
      for (int j = 0; j < m; ++j) {
        cout << ((i == j) ? "1" : "0");
      }
      cout << endl;
      int cap;
      cin >> cap;
      edges.emplace_back(cap, i);
    }
    sort(all(edges));
    int sofar = 0;
    string st(m, '0');
    for (auto p : edges) {
      st[p.second] = '1';
      cout << "? " << st << endl;
      int cap;
      cin >> cap;
      if (cap == p.first + sofar) {
        sofar += p.first;
      } else {
        st[p.second] = '0';
      }
    }
    cout << "! " << sofar << endl;
  }

  void solve() {
    int nt = 1;
    for (int it = 0; it < nt; ++it) {
      // cout << "Case #" << (it + 1) << ": ";
      solveOne();
    }
  }
};

// #define st_mtimespec st_mtim

int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(0);
    BRailwaySystem solver;


    solver.solve();
    return 0;
}