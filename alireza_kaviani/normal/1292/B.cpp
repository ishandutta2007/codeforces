/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll x, y, n, ax, bx, ay, by, xs, ys, t, ans, px[MAXN], py[MAXN];

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    cin >> x >> y >> ax >> ay >> bx >> by >> xs >> ys >> t;
    px[0] = x;
    py[0] = y;
    for (ll i = 0; i < 100; i++) {
        if (px[i] - xs + py[i] - ys > t) {
            n = i + 1;
            break;
        }
        px[i + 1] = ax * px[i] + bx;
        py[i + 1] = ay * py[i] + by;
    }

    for (ll i = 0; i < n; i++) {
        ll nx = xs, ny = ys, cost = 0, cnt = 0;
        for (ll j = i; j < n; j++) {
            if (cost + abs(px[j] - nx) + abs(py[j] - ny) <= t) {
                cost += abs(px[j] - nx) + abs(py[j] - ny);
                nx = px[j];
                ny = py[j];
                cnt++;
            } else break;
        }
        ans = max(ans, cnt);
        cost = 0, cnt = 0;
        nx = xs, ny = ys;
        for (ll j = i; j >= 0; j--) {
            if (cost + abs(px[j] - nx) + abs(py[j] - ny) <= t) {
                cost += abs(px[j] - nx) + abs(py[j] - ny);
                nx = px[j];
                ny = py[j];
                cnt++;
            } else break;
        }
        ans = max(ans, cnt);
    }
    cout << ans << endl;

    return 0;
}
/*

*/