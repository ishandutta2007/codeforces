/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author RiaD
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <cassert>
#include <vector>
#include <algorithm>
#include <map>


#include <iterator>


#include <string>
#include <stdexcept>

#ifndef SPCPPL_ASSERT
	#ifdef SPCPPL_DEBUG
		#define SPCPPL_ASSERT(condition) \
		if(!(condition)) { \
			throw std::runtime_error(std::string() + #condition + " in line " + std::to_string(__LINE__) + " in " + __PRETTY_FUNCTION__); \
		}
	#else
		#define SPCPPL_ASSERT(condition)
	#endif
#endif


/**
* Support decrementing and multi-passing, but not declared bidirectional(or even forward) because
* it's reference type is not a reference.
*
* It doesn't return reference because
* 1. Anyway it'll not satisfy requirement [forward.iterators]/6
*   If a and b are both dereferenceable, then a == b if and only if *a and
*   b are bound to the same object.
* 2. It'll not work with reverse_iterator that returns operator * of temporary which is temporary for this iterator
*
* Note, reverse_iterator is not guaranteed to work  now too since it works only with bidirectional iterators,
* but it's seems to work at least on my implementation.
*
* It's not really useful anywhere except iterating anyway.
*/
template <typename T>
class IntegerIterator {
public:
	using value_type = T;
	using difference_type = std::ptrdiff_t;
	using pointer = T*;
	using reference = T;
	using iterator_category = std::input_iterator_tag;

	explicit IntegerIterator(T value): value(value) {

	}

	IntegerIterator& operator++() {
		++value;
		return *this;
	}

	IntegerIterator operator++(int) {
		IntegerIterator copy = *this;
		++value;
		return copy;
	}

	IntegerIterator& operator--() {
		--value;
		return *this;
	}

	IntegerIterator operator--(int) {
		IntegerIterator copy = *this;
		--value;
		return copy;
	}

	T operator*() const {
		return value;
	}

	bool operator==(IntegerIterator rhs) const {
		return value == rhs.value;
	}

	bool operator!=(IntegerIterator rhs) const {
		return !(*this == rhs);
	}

private:
	T value;
};

template <typename T>
class IntegerRange {
public:
	IntegerRange(T begin, T end): begin_(begin), end_(end) {
		SPCPPL_ASSERT(begin <= end);
	}

	IntegerIterator<T> begin() const {
		return IntegerIterator<T>(begin_);
	}

	IntegerIterator<T> end() const {
		return IntegerIterator<T>(end_);
	}

private:
	T begin_;
	T end_;
};

template <typename T>
class ReversedIntegerRange {
	using IteratorType = std::reverse_iterator<IntegerIterator<T>>;
public:
	ReversedIntegerRange(T begin, T end): begin_(begin), end_(end) {
		SPCPPL_ASSERT(begin >= end);
	}

	IteratorType begin() const {
		return IteratorType(IntegerIterator<T>(begin_));
	}

	IteratorType end() const {
		return IteratorType(IntegerIterator<T>(end_));
	}

private:
	T begin_;
	T end_;
};

template <typename T>
IntegerRange<T> range(T to) {
	return IntegerRange<T>(0, to);
}

template <typename T>
IntegerRange<T> range(T from, T to) {
	return IntegerRange<T>(from, to);
}

template <typename T>
IntegerRange<T> inclusiveRange(T to) {
	return IntegerRange<T>(0, to + 1);
}

template <typename T>
IntegerRange<T> inclusiveRange(T from, T to) {
	return IntegerRange<T>(from, to + 1);
}

template <typename T>
ReversedIntegerRange<T> downrange(T from) {
	return ReversedIntegerRange<T>(from, 0);
}

template <typename T>
ReversedIntegerRange<T> downrange(T from, T to) {
	return ReversedIntegerRange<T>(from, to);
}

template <typename T>
ReversedIntegerRange<T> inclusiveDownrange(T from) {
	return ReversedIntegerRange<T>(from + 1, 0);
}

template <typename T>
ReversedIntegerRange<T> inclusiveDownrange(T from, T to) {
	return ReversedIntegerRange<T>(from + 1, to);
}



template <typename T>
bool updateMin(T& oldValue, const T& newValue) {
	if (newValue < oldValue) {
		oldValue = newValue;
		return true;
	}
	return false;
}

template <typename T>
bool updateMax(T& oldValue, const T& newValue) {
	if (oldValue < newValue) {
		oldValue = newValue;
		return true;
	}
	return false;
}

//#define PROBLEM "problem_name.h"
//#include PROBLEM
//#include <message.h>
//#include <spcppl/dgcj.h>

using namespace std;

class EBestPair {
public:
	static constexpr int kStressCount = 0;
	static void generateTest(std::ostream& test) {
	}
	void solve(std::istream& in, std::ostream& out) {
		//static int testnumber = 0;
		//out << "Case #" << ++testnumber << ": ";
		//cerr << "test " << testnumber << endl;

		int n, m;
		in >> n >> m;
		vector<int> a(n);
		for (int i: range(n)) {
			in >> a[i];
		}

		sort(a.begin(), a.end());
		vector<int> unique_values;
		vector<int> sizes;
		sizes.reserve(n);
		unique_values.reserve(n);
		map<int, vector<int>> by_size;
		for (int i = 0; i < n;) {
			int j = i;
			while (j < n && a[i] == a[j]) {
				++j;
			}
			by_size[j - i].push_back(unique_values.size());
			unique_values.push_back(a[i]);
			sizes.push_back(j - i);
			i = j;
		}
		n = unique_values.size();
		vector<vector<int>> g(n);
		for (int i: range(m)) {
			int c, d;
			in >> c >> d;
			//cerr << "old " << c << ' ' << d << endl;

			c = lower_bound(unique_values.begin(), unique_values.end(), c) - unique_values.begin();
			d = lower_bound(unique_values.begin(), unique_values.end(), d) - unique_values.begin();
			//cerr << "ban " << c << ' ' << d << endl;
			//--c, --d;
			g[c].push_back(d);
			g[d].push_back(c);
		}

		int64_t ans = 0;

		for (auto& [k, v]: by_size) {
			sort(v.begin(), v.end(), greater<>());
		}
		vector<int> banned(n);
		for (int i = 0; i < n; ++i) {
			for (int o: g[i]) {
				banned[o] = i;
				//cerr << unique_values[i]  << " ban " << unique_values[o] << endl;
			}
			for (auto& [sz, list]: by_size) {
				for (int num: list) {
					if (i == num) {
						continue;
					}
					if (banned[num] == i) {
						continue;
					} else {
						//cerr << unique_values[i] << ' ' << unique_values[num] << ' ' << (unique_values[i] + unique_values[num]) * 1LL * (sizes[i] + sizes[num]) << endl;
						updateMax(ans, (unique_values[i] + unique_values[num]) * 1LL * (sizes[i] + sizes[num]));
						break;
					}
				}
			}
		}

		out << ans << "\n";

	}
};


int main() {
	std::ios_base::sync_with_stdio(false);
	EBestPair solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	in.tie(nullptr);
	out << std::fixed;
	out.precision(20);
	int n;
in >> n;
for(int i = 0; i < n; ++i) {
	solver.solve(in, out);
}

	return 0;
}