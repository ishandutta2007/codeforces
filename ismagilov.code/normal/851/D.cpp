/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Azat Ismagilov
 */

/**********.*****.**************************:-******-:*******************
**********......:*****************+@%@*+#@@@+.****.***********************
...------........-*+*********+%#####@@@##########*************************
********:........----------%@#####################@@-...............------
**********......:********@%#####@###################@#@=+***************::
*********.:****--******%##@#####@#######################@*+***************
********.*******:-**+@@####@#@@@#################@#########=**************
*******-*********:*@@@######@###############################=*************
*****--**********%%@##@########@#############################=:***********
****.************+##################@#@@#####################@************
***.*************%######################@@###################=***********-
*-:**************=##########@@%%%%=%@=%=%=%@################@@**********.*
.****************########%++***+++****+++=+===+++***+=%@######%*******:-**
****************+#######%+*::::::::::::***********:::::**@@###%******.:***
****************#######@%*:::::::::::::::*:*****:::::::::*@@##@*****.*****
****************######@%+*:::::::-::::::::::::::::::::::::=@##%****-******
.......-------:*######=::::::----------:::::::::::::::::::+###:**--*******
............:==:%####=:::::----:-:::::::::::::::::::::::::=@##:-.:********
************=@++*%##@::::*=%%%@@###@=***::::::::::::::::::=@#@*..*********
************=**+@+@#*:::**+++%@#@###%@%%+*::*+=======*::::*##-:**.********
*************:=%%:%*::::*+=%##%###=@@@%=*::*=%@@@%%@@#@%::+#@:****.*******
:**************==:=:::--::::*++++=%@@@%*:--*%#@####@#=+***@@%@*****.******
--**************:-*::--------::**+***:::---*+%%%%%%@@%+*::#*@%******.*****
*:-************---*::::-----------::--:---::::+++++**:::::%*%********-:***
**:.************++*:::::--------::**+------::::::::::::::*++**********--**
****.**************::::::-----::**==:-------+*:::::---:::**************:-*
*****.***********.*::::::::-:::***:*+@**::**=+*::::::::::****************-
******.*:*%@######+::::::::::::::::::++++=******::::::::******************
******:############*::::::::****::::::*+*:*:*:***::::::*******************
******#############***::*:*:*+==@@##=======:*+***:::*:********************
******#############:*+**********:*++**+**++=%=***:*::*********************
.....##############::*++**************+***:*********###+******************
***:##############@*:**+=***:::**++===++***********#####%.................
*:*###############******++=+*:::::::*:::::*::***#########=****************
**:################%*****++==++********::::*+++=##########+***************
*:%##################******++++==+=++++++++++++@############**************
######################@******+++++++++++++++++=%#############*************
########################+++++++++++++++++++++==@#############@***********.
#########################%+++++++++++++++++===%###############%********:-*
########################@=#=++++++++++++====%@##################******-**/

#include <bits/stdc++.h>

#define int long long
#define fs first
#define sc second
#define pb push_back
#define ppb pop_back
#define pf push_front
#define ppf pop_front
#define mp make_pair
#define len(v) ((int)v.size())
#define vc vector
#define pr pair
#define endd "\n"; return 0;
#define all(v) v.begin(), v.end()

using namespace std;

const int MAXN = 1e5;
const int INF = 1e18;
const int MOD = 1e9 + 7;

class TaskD {
public:
    void solve(std::istream &in, std::ostream &out) {
        vc<int> prost;
        for (int i = 2; i <= 1000; i++) {
            bool prav = 1;
            for (auto v : prost) {
                if (v * v > i) {
                    break;
                }
                if (i % v == 0) {
                    prav = 0;
                    break;
                }
            }
            if (prav) {
                prost.pb(i);
            }
        }
        int n, x, y;
        in >> n >> x >> y;
        int a[n];
        for (int i = 0; i < n; i++) {
            in >> a[i];
        }
        int ans = 0;
        map<int, int> chiss;
        for (int i = 0; i < n; i++) {
            set<int> chis;
            int mem = a[i];
            for (auto v : prost) {
                if (v * v > mem) {
                    break;
                }
                while (mem % v == 0) {
                    mem /= v;
                    chis.insert(v);
                }
            }
            if (mem > 1) {
                chis.insert(mem);
            }
            for (auto v : chis) {
                chiss[v]++;
            }
        }
        vc<pr<int, int>> kek;
        for (auto v : chiss) {
            kek.pb(mp(v.sc, v.fs));
        }
        sort(all(kek));
        reverse(all(kek));
        ans = min(x * n, y * n);
        for (auto v : kek) {
            if (((n - v.fs) * (min(x, y))) >= ans) {
                break;
            }
            int tekans = 0;
            for (int i = 0; i < n; i++) {
                if (a[i] % (v.sc) != 0) {
                    tekans += min(x, ((v.sc - (a[i] % (v.sc))) * y));
                }
                if (tekans >= ans) {
                    break;
                }
            }
            ans = min(ans, tekans);
        }
        out << ans;
    }
};


main() {
    TaskD solver;
    std::istream &in(std::cin);
    std::ostream &out(std::cout);
    solver.solve(in, out);
    return 0;
}