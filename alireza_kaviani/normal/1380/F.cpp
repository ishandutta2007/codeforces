/* Generated by powerful Codeforces Tool
 * You can download the binary file in here https://github.com/xalanq/cf-tool (Windows, macOS, Linux)
 * Author: alireza_kaviani
 * Time: 2020-07-14 09:25:29
**/
#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<int, int> pii;
typedef pair<pll, pll> plll;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 998244353; // 1e9 + 9;

ll n , q , A[MAXN];
string s;
plll seg[MAXN << 2];

pll mul(pll A , pll B , pll C){
    return {(A.X * B.X + A.Y * C.X) % MOD , (A.X * B.Y + A.Y * C.Y) % MOD};
}

plll merge(int i , plll x , plll y){
    pll z = mul(pll(A[i] + 1 , (A[i - 1] == 1 ? 1 : 0) * (9 - A[i])) , x.Y , x.X);
    pll a = mul(y.X , x.Y , z);
    pll b = mul(y.Y , x.Y , z);
    return plll(a , b);
}

void build(int id = 1 , int l = 0 , int r = n){
    if(r - l == 1){
        seg[id] = {{1 , 0} , {0 , 1}};
        return;
    }
    int mid = l + r >> 1;
    build(id << 1 , l , mid);
    build(id << 1 | 1 , mid , r);
    seg[id] = merge(mid , seg[id << 1] , seg[id << 1 | 1]);
}

void modify(int x , int id = 1 , int l = 0 , int r = n){
    if(r - l == 1)  return;
    int mid = l + r >> 1;
    if(x < mid) modify(x , id << 1 , l , mid);
    else    modify(x , id << 1 | 1 , mid , r);
    seg[id] = merge(mid , seg[id << 1] , seg[id << 1 | 1]);
}

int main() {
    ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);

    cin >> n >> q >> s;
    for(int i = 0 ; i < n ; i++)    A[i] = s[i] - 48;
    build();
    while(q--){
        int x , d;
        cin >> x >> d;
        x--; A[x] = d;
        modify(x);
        pll ans = seg[1].Y;
        cout << (ans.X + ans.Y * (A[0] + 1)) % MOD << endl;
    }

    return 0;
}
/*

*/