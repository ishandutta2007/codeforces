/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <algorithm>
#include <queue>
#include <vector>
#include <set>
#include <map>
#include <cassert>
#include <functional>
#include <sstream>
#include <cmath>

#include <cstring>
#include <cstdio>
#ifndef ATCODER_SEGTREE_HPP
#define ATCODER_SEGTREE_HPP 1





#ifndef ATCODER_INTERNAL_BITOP_HPP
#define ATCODER_INTERNAL_BITOP_HPP 1

#ifdef _MSC_VER
#include <intrin.h>
#endif

namespace atcoder {

namespace internal {

// @param n `0 <= n`
// @return minimum non-negative `x` s.t. `n <= 2**x`
int ceil_pow2(int n) {
    int x = 0;
    while ((1U << x) < (unsigned int)(n)) x++;
    return x;
}

// @param n `1 <= n`
// @return minimum non-negative `x` s.t. `(n & (1 << x)) != 0`
int bsf(unsigned int n) {
#ifdef _MSC_VER
    unsigned long index;
    _BitScanForward(&index, n);
    return index;
#else
    return __builtin_ctz(n);
#endif
}

}  // namespace internal

}  // namespace atcoder

#endif  // ATCODER_INTERNAL_BITOP_HPP



namespace atcoder {

template <class S, S (*op)(S, S), S (*e)()> struct segtree {
  public:
    segtree() : segtree(0) {}
    explicit segtree(int n) : segtree(std::vector<S>(n, e())) {}
    explicit segtree(const std::vector<S>& v) : _n(int(v.size())) {
        log = internal::ceil_pow2(_n);
        size = 1 << log;
        d = std::vector<S>(2 * size, e());
        for (int i = 0; i < _n; i++) d[size + i] = v[i];
        for (int i = size - 1; i >= 1; i--) {
            update(i);
        }
    }

    void set(int p, S x) {
        assert(0 <= p && p < _n);
        p += size;
        d[p] = x;
        for (int i = 1; i <= log; i++) update(p >> i);
    }

    S get(int p) const {
        assert(0 <= p && p < _n);
        return d[p + size];
    }

    S prod(int l, int r) const {
        assert(0 <= l && l <= r && r <= _n);
        S sml = e(), smr = e();
        l += size;
        r += size;

        while (l < r) {
            if (l & 1) sml = op(sml, d[l++]);
            if (r & 1) smr = op(d[--r], smr);
            l >>= 1;
            r >>= 1;
        }
        return op(sml, smr);
    }

    S all_prod() const { return d[1]; }

    template <bool (*f)(S)> int max_right(int l) const {
        return max_right(l, [](S x) { return f(x); });
    }
    template <class F> int max_right(int l, F f) const {
        assert(0 <= l && l <= _n);
        assert(f(e()));
        if (l == _n) return _n;
        l += size;
        S sm = e();
        do {
            while (l % 2 == 0) l >>= 1;
            if (!f(op(sm, d[l]))) {
                while (l < size) {
                    l = (2 * l);
                    if (f(op(sm, d[l]))) {
                        sm = op(sm, d[l]);
                        l++;
                    }
                }
                return l - size;
            }
            sm = op(sm, d[l]);
            l++;
        } while ((l & -l) != l);
        return _n;
    }

    template <bool (*f)(S)> int min_left(int r) const {
        return min_left(r, [](S x) { return f(x); });
    }
    template <class F> int min_left(int r, F f) const {
        assert(0 <= r && r <= _n);
        assert(f(e()));
        if (r == 0) return 0;
        r += size;
        S sm = e();
        do {
            r--;
            while (r > 1 && (r % 2)) r >>= 1;
            if (!f(op(d[r], sm))) {
                while (r < size) {
                    r = (2 * r + 1);
                    if (f(op(d[r], sm))) {
                        sm = op(d[r], sm);
                        r--;
                    }
                }
                return r + 1 - size;
            }
            sm = op(d[r], sm);
        } while ((r & -r) != r);
        return 0;
    }

  private:
    int _n, size, log;
    std::vector<S> d;

    void update(int k) { d[k] = op(d[2 * k], d[2 * k + 1]); }
};

}  // namespace atcoder

#endif  // ATCODER_SEGTREE_HPP


using namespace std;

typedef pair<int, int> ii;
typedef long long int64;
typedef vector<int> vi;

#define pb push_back
#define mp make_pair
#define all(v) (v).begin(),(v).end()
#define sz(v) ((int)(v).size())

template<class T> T abs(T x) { return x >= 0 ? x : -x; }
template<class T> T sqr(T x) { return x * x; }

struct S {
    bool locked_unlock = false;
    bool locked_lock = true;
    string col_unlock = "";
    string col_lock = "";

    S() {}

    S(bool lockedUnlock, bool lockedLock, const string &colUnlock, const string &colLock) : locked_unlock(lockedUnlock),
                                                                                            locked_lock(lockedLock),
                                                                                            col_unlock(colUnlock),
                                                                                            col_lock(colLock) {}

    S(string s) {
        if (s == "lock") {
            locked_unlock = true;
            locked_lock = true;
        } else if (s == "unlock") {
            locked_lock = false;
            locked_unlock = false;
        } else {
            col_lock = "";
            col_unlock = s;
        }
    }

    string str() {
        return col_unlock;
    }
};

S CombineS(S s1, S s2) {
    S res;
    // Unlock.
    string col_unlock = s1.col_unlock;
    bool lock_unlock = s1.locked_unlock;
    if (lock_unlock) {
        lock_unlock = s2.locked_lock;
        if (!s2.col_lock.empty())
            col_unlock = s2.col_lock;
    } else {
        lock_unlock = s2.locked_unlock;
        if (!s2.col_unlock.empty())
            col_unlock = s2.col_unlock;
    }
    // Lock.
    string col_lock = s1.col_lock;
    bool lock_lock = s1.locked_lock;
    if (lock_lock) {
        lock_lock = s2.locked_lock;
        if (!s2.col_lock.empty())
            col_lock = s2.col_lock;
    } else {
        lock_lock = s2.locked_unlock;
        if (!s2.col_unlock.empty())
            col_lock = s2.col_unlock;
    }
    res.col_unlock = col_unlock;
    res.col_lock = col_lock;
    res.locked_unlock = lock_unlock;
    res.locked_lock = lock_lock;
    return res;
}

S e() {
    return S();
}

class TaskD {
public:
	void solve(std::istream& in, std::ostream& out) {
	    int n;
	    in >> n;
	    atcoder::segtree<S, CombineS, e> tree(n + 5);
	    tree.set(0, S(false, true, "blue", "blue"));
	    for (int i = 0; i < n; ++i) {
	        string s;
	        in >> s;
	        tree.set(i + 1, S(s));
	    }
	    out << tree.prod(0, n + 1).str() << "\n";

	    int q;
	    in >> q;
	    for (int i = 0; i < q; ++i) {
	        int pos;
	        string s;
	        in >> pos >> s;
            tree.set(pos, S(s));
            out << tree.prod(0, n + 1).str() << "\n";
	    }
	}
};


int main() {
	TaskD solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}