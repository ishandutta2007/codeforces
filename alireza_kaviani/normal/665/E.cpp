/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll LOG = 30;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n, k, ind, ans, px[MAXN], x[MAXN];
int nxt[LOG * MAXN][2], cnt[LOG * MAXN];

void insert(ll A) {
    ll v = 0;
    cnt[v]++;
    for (ll i = LOG - 1; i >= 0; i--) {
        ll t = ((A >> i) & 1);
        if (nxt[v][t] == 0) {
            nxt[v][t] = ++ind;
        }
        v = nxt[v][t];
        cnt[v]++;
    }
}

void go(ll A, ll B) {
    ll v = 0;
    for (ll i = LOG - 1; i >= 0; i--) {
        ll x = ((A >> i) & 1), y = ((B >> i) & 1), z = (x ^ y);
        if (y == 0 && nxt[v][1 - z] != 0) {
            ans += cnt[nxt[v][1 - z]];
        }
        if (nxt[v][z] == 0) return;;
        v = nxt[v][z];
    }
    ans += cnt[v];
}

int main() {
    fast_io;

    cin >> n >> k;
    insert(0);
    for (ll i = 1; i <= n; i++) {
        cin >> x[i];
        px[i] = px[i - 1] ^ x[i];
        go(px[i], k);
        insert(px[i]);
    }
    cout << ans << endl;

    return 0;
}
/*

*/