/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author majk
 */

#ifndef MAJK_LIB
#define MAJK_LIB

#include <vector>
#include <stack>
#include <iostream>
#include <unordered_map>
#include <unordered_set>
#include <map>
#include <iomanip>
#include <set>
#include <functional>
#include <fstream>
#include <algorithm>
#include <cassert>
#include <cmath>
#include <string>
#include <sstream>
#include <queue>
#include <array>
#include <bitset>
using namespace std;

#define x first
#define y second
typedef std::pair<int,int> pii; typedef long long ll; typedef unsigned long long ull; typedef unsigned int ui; typedef pair<ui,ui> puu;

template <typename T, typename U> std::istream&operator>>(std::istream&i, pair<T,U>&p) {i >> p.x >> p.y; return i;}
template<typename T>std::istream&operator>>(std::istream&i,vector<T>&t) {for(auto&v:t){i>>v;}return i;}
template <typename T, typename U> std::ostream&operator<<(std::ostream&o, const pair<T,U>&p) {o << p.x << ' ' << p.y; return o;}
template<typename T>std::ostream&operator<<(std::ostream&o,const vector<T>&t) {if(t.empty())o<<'\n';for(size_t i=0;i<t.size();++i){o<<t[i]<<" \n"[i == t.size()-1];}return o;}
template<typename T> using minheap = priority_queue<T, vector<T>, greater<T>>;
template<typename T> using maxheap = priority_queue<T, vector<T>, less<T>>;
template <typename T> bool in(T a, T b, T c) { return a <= b && b < c; }
ui logceil(ll x) { return x?8*sizeof(ll)-__builtin_clzll(x):0; }

namespace std { template<typename T,typename U>struct hash<pair<T,U>>{hash<T>t;hash<U>u;size_t operator()(const pair<T,U>&p)const{return t(p.x)^(u(p.y)<<7);}}; }
template<typename T,typename F>T bsh(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){l=m+1;r=m;}else{h=m-1;}}return r;}
template<typename F> double bshd(double l,double h,const F&f,double p=1e-9){ui r=3+(ui)log2((h-l)/p);while(r--){double m=(l+h)/2;if(f(m)){l=m;}else{h=m;}}return (l+h)/2;}
template<typename T,typename F>T bsl(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){h=m-1;r=m;}else{l=m+1;}}return r;}
template<typename F> double bsld(double l,double h,const F&f,double p=1e-9){ui r=3+(ui)log2((h-l)/p);while(r--){double m=(l+h)/2;if(f(m)){h=m;}else{l=m;}}return (l+h)/2;}
template<typename T> T gcd(T a,T b) { if (a<b) swap(a,b); return b?gcd(b,a%b):a; }


template<typename T>class vector2:public vector<vector<T>>{public:vector2(){} vector2(size_t a,size_t b,T t=T()):vector<vector<T>>(a,vector<T>(b,t)){}};
template<typename T>class vector3:public vector<vector2<T>>{public:vector3(){} vector3(size_t a,size_t b,size_t c,T t=T()):vector<vector2<T>>(a,vector2<T>(b,c,t)){}};
template<typename T>class vector4:public vector<vector3<T>>{public:vector4(){} vector4(size_t a,size_t b,size_t c,size_t d,T t=T()):vector<vector3<T>>(a,vector3<T>(b,c,d,t)){}};
template<typename T>class vector5:public vector<vector4<T>>{public:vector5(){} vector5(size_t a,size_t b,size_t c,size_t d,size_t e,T t=T()):vector<vector4<T>>(a,vector4<T>(b,c,d,e,t)){}};


#endif

class CCirclingRoundTreasures {
public:
    void solve(istream& cin, ostream& cout) {
        int N, M; cin >> N >> M;
        vector<string> A(N); cin >> A;
        pii S;
        vector2<int> I(N, M, 0);
        int b = 0, t = 0;
        for (int i = 0; i < N; ++i) {
            for (int j = 0; j < M; ++j) {
                if (A[i][j] == 'B') {
                    ++b;
                } else if (A[i][j] == 'S') {
                    S = {i,j};
                    A[i][j] = '.';
                } else if (A[i][j] >= '1' && A[i][j] <= '8') {
                    ++t;
                }
            }
        }


        b = 0;
        for (int i = 0; i < N; ++i) {
            for (int j = 0; j < M; ++j) {
                if (A[i][j] == 'B') {
                    I[i][j] = 1<<(t + (b++));
                } else if (A[i][j] >= '1' && A[i][j] <= '8') {
                    I[i][j] = 1<<(A[i][j] - '1');
                }
            }
        }

        int L = b + t;
        vector<int> X(t); cin >> X;
        vector2<int> Left(N, M, 0);
        for (int i = 0; i < N; ++i) {
            int left = 0;
            for (int j = 0; j < M; ++j) {
                Left[i][j] = left;
                left |= I[i][j];
            }
        }

        int id = (S.x + S.y * N) << L;
        vector<int> D(1+(N*M<<L), 10000);
        D[id] = 0;
        int E[4];
        vector<int> Q{id};
        for (int i = 0; i < Q.size(); ++i) {
            int id = Q[i];

            int a = (id>>L) % N;
            int b = (id>>L) / N;

            if (a != 0 && A[a-1][b] == '.') E[0] = (id^Left[a][b]) - (1<<L); else E[0] = -1;
            if (a != N-1 && A[a+1][b] == '.') E[1] = (id^Left[a+1][b]) + (1<<L); else E[1] = -1;
            if (b != 0 && A[a][b-1] == '.') E[2] = id - (N<<L); else E[2] = -1;
            if (b != M-1 && A[a][b+1] == '.') E[3] = id + (N<<L); else E[3] = -1;

            for (int j = 0; j < 4; ++j) {
                int u = E[j];
                if (u != -1 && D[u] == 10000) {
                    D[u] = D[id] + 1;
                    Q.push_back(u);
                }
            }
        }

        int ans = 0;
        for (int i = 0; i < (1<<t); ++i) {
            int cur = 0;
            for (int j = 0; j < t; ++j) {
                if (i&1<<j) cur += X[j];
            }
            ans = max(ans, cur - D[id++]);
        }
        cout << ans << '\n';
    }
};


int main() {
	ios_base::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr);
	CCirclingRoundTreasures solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
    return 0;
}