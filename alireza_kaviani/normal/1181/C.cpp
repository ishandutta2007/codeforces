/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;
typedef pair<ld, ld> pld;
typedef pair<string, string> pss;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define file_io                     freopen("in.txt" , "r+" , stdin) ; freopen("out.txt" , "w+" , stdout);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

inline ll input() {
    ll n;
    cin >> n;
    return n;
}

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

set_random;

const ll MAXN = 1010;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

template <ll SIZE>
struct DSU
{
    ll par[SIZE] , sz[SIZE];
    DSU(){
        fill(par , par + SIZE , -1);
        fill(sz , sz + SIZE , 1);
    }

    ll Find(ll v){
        return (par[v] == -1 ? v : par[v] = Find(par[v]));
    }

    ll Union(ll v , ll u){
        ll pv = Find(v) , pu = Find(u);
        if(pv == pu)    return 0;
        par[pu] = pv;
        sz[pv] += sz[pu];
        return 1;
    }

    ll getSize(ll v){
        return sz[Find(v)];
    }
};

ll n , m , ans , nxt[MAXN][MAXN];
string s[MAXN];
pair<string , ll> flag[MAXN][MAXN];
DSU<MAXN * MAXN> dsu;

int main() {
    fast_io;

    cin >> n >> m;
    for(ll i = 1 ; i <= n ; i++)    cin >> s[i];

    for(ll i = 0 ; i < MAXN ; i++)  nxt[n][i] = n;
    for(ll i = n - 1 ; i >= 1 ; i--){
        for(ll j = 0 ; j < m ; j++){
            if(s[i][j] == s[i + 1][j]){
                nxt[i][j] = nxt[i + 1][j];
            }
            else{
                nxt[i][j] = i;
            }
        }
    }

    for(ll i = 1 ; i <= n ; i++){
        for(ll j = 0 ; j < m ; j++){
            ll x = nxt[i][j] , y = nxt[x + 1][j] , z = nxt[y + 1][j];
            if(x == 0 || y == 0 || z == 0) continue;
            if(x - i != y - x - 1 || x - i > z - y - 1) continue;
            flag[i][j] = {string(1 , s[x][j]) + string(1 , s[y][j]) + string(1 , s[z][j]) , x - i + 1};
        }
    }

    for(ll i = 1 ; i <= n ; i++){
        for(ll j = 0 ; j < m - 1 ; j++){
            if(flag[i][j] == flag[i][j + 1]){
                dsu.Union(i * MAXN + j , i * MAXN + j + 1);
            }
        }
    }

    for(ll i = 1 ; i <= n ; i++){
        for(ll j = 0 ; j < m ; j++){
            if(flag[i][j].Y == 0) continue;
            ll ind = i * MAXN + j;
            if(dsu.Find(ind) == ind)    ans += dsu.getSize(ind) * (dsu.getSize(ind) + 1) / 2;
        }
    }
    cout << ans << endl;

    return 0;
}
/*
todo :
    1- set constants
    2- check TimeLimit and MemoryLimit
    3- check special test cases
    4- don't forget BS can help you that is good idea(use for loop for floats)
    5- don't forget printf and scanf can help you in your code speed
*/