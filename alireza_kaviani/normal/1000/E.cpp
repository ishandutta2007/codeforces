/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;
typedef pair<ld, ld> pld;
typedef pair<string, string> pss;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define tab                         '\t'
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define file_io                     freopen("in.txt" , "r+" , stdin) ; freopen("out.txt" , "w+" , stdout);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

inline ll input() {
    ll n;
    cin >> n;
    return n;
}

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

set_random;

const ll MAXN = 3e5 + 10;
const ll INF = 8e18;
const ll MOD1 = 998244353;
const ll MOD2 = 1e9 + 7;
const ll MOD3 = 1e9 + 9;

vector<ll> adj[MAXN] , g[MAXN];
vector<pll> E;
map<pll , ll> bridge;
ll n , m , v , u , timer , dist[MAXN] , mark[MAXN] , low[MAXN] , tin[MAXN] , par[MAXN];

void DFS(ll v , ll p = -1)
{
    mark[v] = 1;
    low[v] = tin[v] = timer++;
    for(ll u : adj[v])
    {
        if(u == p) continue;
        if(mark[u])
        {
            low[v] = min(low[v] , tin[u]);
        }
        else
        {
            DFS(u , v);
            low[v] = min(low[v] , low[u]);
            if(low[u] > tin[v])
            {
                bridge[{v , u}] = 1;
                bridge[{u , v}] = 1;
            }
        }
    }
}

void DFS2(ll v , ll p = -1)
{
    dist[v] = (p == -1 ? 0 : dist[p] + 1);
    for(ll u : g[v])
    {
        if(u != p)
        {
            DFS2(u , v);
        }
    }
}

ll Find(ll v)
{
    return (par[v] == -1 ? v : par[v] = Find(par[v]));
}

void Union(ll v , ll u)
{
    ll pv = Find(v) , pu = Find(u);
    if(pv != pu)
        par[pu] = pv;
}

ll getMax() {
    ll res = 0;
    for(ll i = 1 ; i <= n ; i++)
    {
        if(dist[i] >= dist[res])    res = i;
    }
    return res;
}

int main() {
    fast_io;
    fill(par , par + MAXN , -1);

    cin >> n >> m;
    for(ll i = 0 ; i < m ; i++)
    {
        cin >> v >> u;
        adj[v].push_back(u);
        adj[u].push_back(v);
        E.push_back({v , u});
    }

    DFS(1);
    for(pll i : E)
    {
        if(!bridge[i])
        {
            Union(i.X , i.Y);
        }
    }

    for(pll i : E)
    {
        ll v = Find(i.X) , u = Find(i.Y);
        if(v != u)
        {
            g[v].push_back(u);
            g[u].push_back(v);
        }
    }

    DFS2(Find(1));
    DFS2(getMax());
    cout << dist[getMax()];

    return 0;
}
/*
todo :
    1- set constants
    2- check TimeLimit and MemoryLimit
    3- check special test cases
    4- don't forget BS can help you that is good idea(use for loop for floats)
    5- don't forget printf and scanf can help you in your code speed
*/