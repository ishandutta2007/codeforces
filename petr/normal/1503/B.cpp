/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

// Actual solution is at the bottom

#include <algorithm>
#include <array>
#include <bitset>
#include <cassert>
#include <climits>
#include <cstdint>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <memory>
#include <numeric>
#include <queue>
#include <random>
#include <set>
#include <stack>
#include <string>
#include <unordered_set>
#include <unordered_map>
#include <vector>
//#include "../atcoder/all"

#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()

using namespace std;

typedef int64_t int64;
typedef pair<int, int> ii;

class B3Raskraska {
 public:
  void solveOne() {
    int n;
    cin >> n;
    vector<ii> q1;
    vector<ii> q2;
    for (int r = 0; r < n; ++r) {
      for (int c = 0; c < n; ++c) {
        if ((r + c) % 2 == 0) {
          q1.emplace_back(r, c);
        } else {
          q2.emplace_back(r, c);
        }
      }
    }
    for (int step = 0; step < n * n; ++step) {
      int a;
      cin >> a;
      if (a != 1 && !q1.empty()) {
        auto p = q1.back(); q1.pop_back();
        cout << 1 << " " << p.first + 1 << " " << p.second + 1 << "\n";
      } else if (a != 2 && !q2.empty()) {
        auto p = q2.back(); q2.pop_back();
        cout << 2 << " " << p.first + 1 << " " << p.second + 1 << "\n";
      } else if (!q1.empty()) {
        auto p = q1.back(); q1.pop_back();
        cout << 3 << " " << p.first + 1 << " " << p.second + 1 << "\n";
      } else {
        auto p = q2.back(); q2.pop_back();
        cout << 3 << " " << p.first + 1 << " " << p.second + 1 << "\n";
      }
      cout.flush();
    }
  }

  void solve() {
    int nt = 1;
    for (int it = 0; it < nt; ++it) {
      solveOne();
    }
  }
};


int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(0);
    B3Raskraska solver;


    solver.solve();
    return 0;
}