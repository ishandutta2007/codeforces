/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 400 + 10;
const ll MAXM = 1e6 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n , m , dp[MAXN][MAXN] , A[MAXN] , s[MAXM] , f[MAXM] , c[MAXM] , r[MAXM] , ans[MAXN];
vector<ll> Q[MAXN][MAXN];

int main() {
    ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);

    cin >> n >> m;
    for(ll i = 1 ; i <= n ; i++)    cin >> A[i];
    for(ll i = 1 ; i <= m ; i++){
        cin >> s[i] >> f[i] >> c[i] >> r[i];
        if(r[i] == 0)   ans[i] = (A[f[i]] - A[s[i]]) * c[i];
        Q[s[i]][r[i]].push_back(i);
    }

    for(ll i = 1 ; i <= n ; i++){
        memset(dp , 31 , sizeof(dp));
        for(ll j = i ; j <= n ; j++)    dp[0][j] = A[j] - A[i];
        for(ll j = 1 ; j <= n ; j++){
            dp[j][i] = 0;
            ll ptr = i;
            for(ll k = i + 1 ; k <= n ; k++){
                while(ptr + 1 < k && A[k] - A[ptr] >= dp[j - 1][ptr])   ptr++;
                dp[j][k] = min(dp[j][k] , max(A[k] - A[ptr] , dp[j - 1][ptr]));
                if(ptr != i)    dp[j][k] = min(dp[j][k] , max(A[k] - A[ptr - 1] , dp[j - 1][ptr - 1]));
            }
            for(ll k : Q[i][j]) ans[k] = dp[j][f[k]] * c[k];
        }
    }
    cout << *max_element(ans , ans + MAXM) << endl;

    return 0;
}
/*

*/