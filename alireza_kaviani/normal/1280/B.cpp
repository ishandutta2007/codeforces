/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll q, n, m, r1[MAXN], c1[MAXN], r2[MAXN], c2[MAXN];
string s[MAXN];

ll MAIN() {
    fill(r1, r1 + 70, 1);
    fill(c1, c1 + 70, 1);
    fill(r2, r2 + 70, 0);
    fill(c2, c2 + 70, 0);

    cin >> n >> m;
    for (ll i = 0; i < n; i++) {
        cin >> s[i];
        for (ll j = 0; j < m; j++) {
            if (s[i][j] == 'A') r2[i] = c2[j] = 1;
            else r1[i] = c1[j] = 0;
        }
    }

    if (*max_element(r2, r2 + n) == 0) return cout << "MORTAL" << endl, 0;
    if (*min_element(r1, r1 + n) == 1) return cout << 0 << endl, 0;
    if (r1[0] == 1 || r1[n - 1] == 1 || c1[0] == 1 || c1[m - 1] == 1) return cout << 1 << endl, 0;
    if (*max_element(r1, r1 + n) == 1 || *max_element(c1, c1 + m) == 1) return cout << 2 << endl, 0;
    if (s[0][0] == 'A' || s[0][m - 1] == 'A' || s[n - 1][0] == 'A' || s[n - 1][m - 1] == 'A')
        return cout << 2 << endl, 0;
    if (r2[0] == 1 || r2[n - 1] == 1 || c2[0] == 1 || c2[m - 1] == 1) return cout << 3 << endl, 0;
    cout << 4 << endl;
}

int main() {
    fast_io;

    cin >> q;
    while (q--) {
        MAIN();
    }

    return 0;
}
/*

*/