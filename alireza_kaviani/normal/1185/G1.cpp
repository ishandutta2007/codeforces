/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;
typedef pair<ld, ld> pld;
typedef pair<string, string> pss;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define file_io                     freopen("in.txt" , "r" , stdin) ; freopen("out.txt" , "w" , stdout);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

inline ll input() {
    ll n;
    cin >> n;
    return n;
}

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

set_random;

const ll MAXN = 16;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

template<ll Mod>
struct ModInt {
    ll val;

    ModInt(ll v = 0) { val = (v % Mod + Mod) % Mod; }
    template<ll MOD> ModInt(ModInt<MOD> x) { (*this).val = (x.val % Mod + Mod) % Mod;}

    friend ostream &operator<<(ostream &os, ModInt x) { return os << x.val;}
    friend istream &operator>>(istream &is, ModInt &x) { return is >> x.val;}

    friend ModInt operator+(ModInt x, ModInt y) { return ModInt(x.val + y.val);}
    friend ModInt operator-(ModInt x, ModInt y) { return ModInt(x.val - y.val);}
    friend ModInt operator*(ModInt x, ModInt y) { if (Mod > ll(2e9)) return x.LogMul(x, y); return ModInt(x.val * y.val);}
    friend ModInt operator/(ModInt x, ModInt y) { return x * x.inv(y); }
    friend ModInt operator^(ModInt x, ll y) {
        ModInt ans = 1;
        for(; y ; y /= 2 , x *= x)  if(y & 1)   ans *= x;
        return ans;
    }

    template<class T> ModInt operator+=(T x) { return (*this) = (*this) + x;}
    template<class T> ModInt operator-=(T x) { return (*this) = (*this) - x;}
    template<class T> ModInt operator*=(T x) { return (*this) = (*this) * x;}
    template<class T> ModInt operator/=(T x) { return (*this) = (*this) / x;}
    template<class T> ModInt operator^=(T x) { return (*this) = (*this) ^ x;}

    ModInt inv(ModInt x) { return ModInt(x.val) ^ (Mod - 2); }

    ModInt LogMul(ModInt x, ModInt y) {
        if (y.val == 1) return x;
        return LogMul(ModInt(2 * x.val), ModInt(y.val / 2)) + (y.val % 2 == 1 ? x.val : 0);
    }
};

template <ll T = MOD> using mll = ModInt<T>;

ll n , t;
pll p[MAXN];
mll<> dp[MAXN][MAXN][MAXN][MAXN][3] , fact[MAXN] , ans;

int main() {
    fast_io;
    fact[0] = 1;
    for(ll i = 1 ; i < MAXN ; i++)  fact[i] = fact[i - 1] * i;

    cin >> n >> t;
    for(ll i = 0 ; i < n ; i++) cin >> p[i].X >> p[i].Y;

    for(ll mask = 0 ; mask < (1LL << n) ; mask++){
        ll sum = 0 , cnt[3] = {0 , 0 , 0};
        for(ll i = 0 ; i < n ; i++){
            if(mask & (1LL << i)){
                sum += p[i].X;
                cnt[p[i].Y - 1]++;
            }
        }
        if(sum != t) continue;

        ll m = cnt[0] + cnt[1] + cnt[2];
        dp[1][1][0][0][0] = 1;
        dp[1][0][1][0][1] = 1;
        dp[1][0][0][1][2] = 1;
        for(ll i = 2 ; i <= m ; i++){
            for(ll j = 0 ; j <= m ; j++){
                for(ll k = 0 ; k <= m ; k++){
                    ll t = i - j - k;
                    if(t < 1) break;
                    dp[i][j][k][t][2] = dp[i - 1][j][k][t - 1][0] + dp[i - 1][j][k][t - 1][1];
                    dp[i][j][t][k][1] = dp[i - 1][j][t - 1][k][0] + dp[i - 1][j][t - 1][k][2];
                    dp[i][t][j][k][0] = dp[i - 1][t - 1][j][k][1] + dp[i - 1][t - 1][j][k][2];
                }
            }
        }
        ans += (dp[m][cnt[0]][cnt[1]][cnt[2]][0] + dp[m][cnt[0]][cnt[1]][cnt[2]][1] + dp[m][cnt[0]][cnt[1]][cnt[2]][2]) * fact[cnt[0]] * fact[cnt[1]] * fact[cnt[2]];
    }
    cout << ans << endl;

    return 0;
}
/*
todo :
    1- set constants
    2- check TimeLimit and MemoryLimit
    3- check special test cases
    4- don't forget BS can help you that is good idea(use for loop for floats)
    5- don't forget printf and scanf can help you in your code speed
*/