/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 2e3 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

void add(ll &x, ll y) {
    x += y;
    if (x >= MOD) x -= MOD;
    if (x < 0) x += MOD;
}

template<ll SZ>
struct BITree {
    ll fen[SZ];

    BITree() {
        fill(fen, fen + SZ, 0);
    }

    void update(ll x, ll val) {
        for (; x < SZ; x += x & -x) add(fen[x], val);
    }

    ll get(ll x) {
        ll ans = 0;
        for (; x > 0; x -= x & -x) add(ans, fen[x]);
        return ans;
    }

    void update(ll l, ll r, ll val) {
        update(l, val);
        update(r + 1, -val);
    }
};

ll n, m, cnt1[MAXN][MAXN], cnt2[MAXN][MAXN];
string s[MAXN];
BITree<MAXN> dp1[MAXN], dp2[MAXN];

int main() {
    fast_io;

    cin >> n >> m;
    if (n == 1 && m == 1) return cout << 1 << endl, 0;
    for (ll i = 1; i <= n; i++) {
        cin >> s[i];
        s[i] = '.' + s[i];
        for (ll j = m; j >= 1; j--) {
            cnt1[i][j] = cnt1[i][j + 1] + (s[i][j] == 'R');
        }
    }
    for (ll i = n; i >= 1; i--) {
        for (ll j = 1; j <= m; j++) {
            cnt2[i][j] = cnt2[i + 1][j] + (s[i][j] == 'R');
        }
    }

    dp1[1].update(1, 1, 1);
    dp2[1].update(1, 1, 1);
    for (ll i = 1; i <= n; i++) {
        for (ll j = 1; j <= m; j++) {
            ll c1 = dp1[j].get(i), c2 = dp2[i].get(j);
            dp2[i].update(j + 1, m - cnt1[i][j + 1], c1);
            dp1[j].update(i + 1, n - cnt2[i + 1][j], c2);
        }
    }
    cout << (dp1[m].get(n) + dp2[n].get(m)) % MOD;

    return 0;
}
/*

*/