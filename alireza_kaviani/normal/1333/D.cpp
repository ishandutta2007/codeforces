/* Generated by powerful Codeforces Tool
 * You can download the binary file in here https://github.com/xalanq/cf-tool (Windows, macOS, Linux)
 * Author: alireza_kaviani
 * Time: 2020-04-08 19:05:03
**/
#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n , k , cnt , tot;
string s;
vector<ll> vec[MAXN];

int main() {
    ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
    
    cin >> n >> k >> s;
    s = "." + s;
    for(ll i = 0 ; i < n ; i++){
        for(ll j = 1 ; j < n ; j++){
            //cout << j << sep;
            if(s[j] == 'R' && s[j + 1] == 'L'){
                vec[i].push_back(j);
                s[j] = 'L' , s[j + 1] = 'R';
                j++;
                tot++;
            }
        }
        if(SZ(vec[i]) != 0) cnt++;
    }
    
    if(cnt > k || tot < k)  return cout << -1 << endl , 0;
    //for(ll i = 0 ; i < cnt ; i++ , cout << endl)   for(ll j : vec[i]) cout << j << sep;
    //cout << cnt << endl;
    for(ll i = 0 ; i < cnt ; i++){
        for(ll j = 0 ; j < SZ(vec[i]) ; j++){
            if(cnt - i < k){
                cout << 1 << sep << vec[i][j] << endl;
                k--; continue;
            }
            else{
                cout << SZ(vec[i]) - j << sep;
                for(ll l = j ; l < SZ(vec[i]) ; l++)    cout << vec[i][l] << sep;
                cout << endl; k--;
                break;
            }
        }
    }

    return 0;
}
/*

*/