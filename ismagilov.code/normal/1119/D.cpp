/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Azat Ismagilov
 */

#include <bits/stdc++.h>

#define int long long
#define fs first
#define sc second
#define pb push_back
#define mp make_pair
#define len(v) ((int)v.size())
#define vc vector
#define pr pair
#define all(v) v.begin(), v.end()

using namespace std;

typedef long long ll;
typedef long double ld;

template<typename T, typename U>
inline ostream &operator<<(ostream &_out, const pair<T, U> &_p) {
    _out << _p.first << ' ' << _p.second;
    return _out;
}

template<typename T, typename U>
inline istream &operator>>(istream &_in, pair<T, U> &_p) {
    _in >> _p.first >> _p.second;
    return _in;
}

template<typename T>
inline ostream &operator<<(ostream &_out, const vector<T> &_v) {
    if (_v.empty()) { return _out; }
    _out << _v.front();
    for (auto _it = ++_v.begin(); _it != _v.end(); ++_it) { _out << ' ' << *_it; }
    return _out;
}

template<typename T>
inline istream &operator>>(istream &_in, vector<T> &_v) {
    for (auto &_i : _v) { _in >> _i; }
    return _in;
}

const int MAXN = 1e5 + 10;
const int INF = 1e18;
const int MOD = 1e9 + 7;

int a[MAXN];
pr<int, int> t[4 * MAXN];

pr<int, int> multiply(pr<int, int> a, pr<int, int> b) {
    return {min(a.fs, b.fs), max(a.sc, b.sc)};
}

void build(int v, int l, int r) {
    if (l == r) {
        t[v] = {a[l], a[l]};
        return;
    }
    int mid = (l + r) / 2;
    build(2 * v, l, mid);
    build(2 * v + 1, mid + 1, r);
    t[v] = multiply(t[2 * v], t[2 * v + 1]);
}

pr<int, int> gets(int v, int l, int r, int tl, int tr) {
    if (tl <= l && r <= tr) {
        return t[v];
    }
    if (r < tl || tr < l) {
        return {INF + 1, -INF - 1};
    }
    int mid = (l + r) / 2;
    return multiply(gets(2 * v, l, mid, tl, tr), gets(2 * v + 1, mid + 1, r, tl, tr));
}

class DFretsOnFire {
public:
    void solve(std::istream &in, std::ostream &out) {
        int n;
        in >> n;
        vc<int> s(n);
        in >> s;
        sort(all(s));
        int q;
        in >> q;
        vc<pr<int, int>> toans;
        vc<int> eraselayer;
        vc<int> ans(q);
        for (int i = 0; i < q; i++) {
            int l, r;
            in >> l >> r;
            r = r - l + 1;
            toans.pb({r, i});
        }
        sort(all(toans));
        int sum = 0;
        int counts = n;
        for (int i = 1; i < n; i++) {
            eraselayer.pb(s[i] - s[i - 1]);
        }
        sort(all(eraselayer));
        int lasts = 0;
        int postoans = 0;
        int postoeraselayer = 0;
        while (postoans < q) {
            while (postoeraselayer < n - 1 && eraselayer[postoeraselayer] <= toans[postoans].fs){
                sum += counts * (eraselayer[postoeraselayer] - lasts);
                lasts = eraselayer[postoeraselayer];
                counts--;
                postoeraselayer++;
            }
            sum += counts * (toans[postoans].fs - lasts);
            lasts = toans[postoans].fs;
            ans[toans[postoans].sc] = sum;
            postoans++;
        }
        for (auto v : ans){
            out << v << ' ';
        }

    }
};


main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
	DFretsOnFire solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}