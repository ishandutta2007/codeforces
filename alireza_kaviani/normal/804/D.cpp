/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e5 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n, m, q, comps, mark[MAXN], dpDown[MAXN], R[MAXN], dpUp[MAXN], comp[MAXN];
vector<ll> adj[MAXN], C[MAXN], ps[MAXN];
map<pll, ll> solved;

void DFSDown(ll v, ll c, ll p = -1) {
    mark[v] = 1;
    comp[v] = c;
    C[c].push_back(v);
    for (ll u : adj[v]) {
        if (u == p) continue;
        DFSDown(u, c, v);
        dpDown[v] = max(dpDown[v], dpDown[u] + 1);
    }
}

void DFSUp(ll v, ll p = -1) {
    ll mx = -2;
    for (ll u : adj[v]) {
        if (u == p) continue;
        dpUp[u] = max(dpUp[v] + 1, mx + 2);
        mx = max(mx, dpDown[u]);
    }
    reverse(all(adj[v]));
    mx = -2;
    for (ll u : adj[v]) {
        if (u == p) continue;
        dpUp[u] = max(dpUp[u], mx + 2);
        mx = max(mx, dpDown[u]);
        DFSUp(u, v);
    }
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    cin >> n >> m >> q;
    for (ll i = 0; i < m; i++) {
        ll v, u;
        cin >> v >> u;
        adj[v].push_back(u);
        adj[u].push_back(v);
    }

    for (ll i = 1; i <= n; i++) {
        if (!mark[i]) {
            DFSDown(i, ++comps);
            DFSUp(i);
            for (ll j = 0; j < C[comps].size(); j++) {
                R[C[comps][j]] = max(dpDown[C[comps][j]], dpUp[C[comps][j]]);
                C[comps][j] = R[C[comps][j]];
            }
            Sort(C[comps]);;
            ps[comps].push_back(0);
            for (ll j = 0; j < C[comps].size(); j++) {
                ps[comps].push_back(ps[comps].back() + C[comps][j]);
            }
        }
    }

    cout << setprecision(20) << fixed;
    while (q--) {
        ll v, u;
        cin >> v >> u;
        if (comp[v] == comp[u]) {
            cout << -1 << endl;
            continue;
        }
        v = comp[v], u = comp[u];
        ll sv = C[v].size(), su = C[u].size();
        if (sv > su || sv == su && v > u) swap(v, u);
        if (solved[{v, u}] != 0) {
            cout << double(solved[{v, u}]) / double(sv) / double(su) << endl;
            continue;
        }
        ll ans = 0, mx = max(C[v].back(), C[u].back());
        for (ll i : C[v]) {
            ll ind = upper_bound(all(C[u]), mx - i - 1) - C[u].begin();
            ans += ind * mx;
            ans += (ps[u].back() - ps[u][ind]) + (i + 1) * (SZ(C[u]) - ind);
        }
        solved[{v, u}] = ans;
        cout << ans / double(sv) / double(su) << endl;
    }

    return 0;
}
/*

*/