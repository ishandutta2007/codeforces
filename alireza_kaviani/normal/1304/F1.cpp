/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 50 + 10;
const ll MAXM = 5e4 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n, m, k, cost[MAXN][MAXM], ps[MAXN][MAXM], dp[MAXM];
int seg[MAXM << 2], lz[MAXM << 2];

void build(int id = 1, int l = 0, int r = MAXM) {
    lz[id] = 0;
    if (r - l == 1) {
        seg[id] = dp[l];
        return;
    }
    int mid = l + r >> 1;
    build(id << 1, l, mid);
    build(id << 1 | 1, mid, r);
    seg[id] = max(seg[id << 1], seg[id << 1 | 1]);
}

void shift(int id) {
    lz[id << 1] += lz[id];
    lz[id << 1 | 1] += lz[id];
    seg[id << 1] += lz[id];
    seg[id << 1 | 1] += lz[id];
    lz[id] = 0;
}

void update(int ql, int qr, int x, int id = 1, int l = 0, int r = MAXM) {
    if (qr <= l || r <= ql || qr <= ql) return;
    if (ql <= l && r <= qr) {
        lz[id] += x;
        seg[id] += x;
        return;
    }
    shift(id);
    int mid = l + r >> 1;
    update(ql, qr, x, id << 1, l, mid);
    update(ql, qr, x, id << 1 | 1, mid, r);
    seg[id] = max(seg[id << 1], seg[id << 1 | 1]);
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    cin >> n >> m >> k;
    for (ll i = 1; i <= n; i++) {
        for (ll j = 1; j <= m; j++) {
            cin >> cost[i][j];
        }
        partial_sum(cost[i], cost[i] + MAXM, ps[i]);
    }

    for (ll i = 0; i <= m; i++) dp[i + 1] = ps[1][i + k] - ps[1][i];
    for (ll i = 2; i <= n; i++) {
        build();
        for (ll j = k; j <= m; j++) update(max(0ll, j - k + 1), j + 1, cost[i][j]);
        for (ll j = 0; j <= m; j++) {
            //cout << cost[i][j + k] << sep << cost[i][j] << sep;
            update(j + 1, j + k + 1, -cost[i][j + k]);
            //cout << seg[1] << sep;
            update(max(0ll, j - k + 1), j + 1, cost[i][j]);
            //cout << seg[1] << endl;
            dp[j + 1] = max(dp[j + 1], ps[i][j + k] - ps[i][j] + seg[1]);
        }
        //for(ll j = 0 ; j <= m ; j++)    cout << dp[j] << sep;
        //cout << endl;
        build();
    }
    cout << *max_element(dp, dp + MAXM);

    return 0;
}
/*

*/