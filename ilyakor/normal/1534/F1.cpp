/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <algorithm>
#include <queue>
#include <vector>
#include <set>
#include <map>
#include <cassert>
#include <functional>
#include <sstream>
#include <cmath>

#include <cstring>
#include <cstdio>

using namespace std;

typedef pair<int, int> ii;
typedef long long int64;
typedef vector<int> vi;

#define pb push_back
#define mp make_pair
#define all(v) (v).begin(),(v).end()
#define sz(v) ((int)(v).size())

template<class T> T abs(T x) { return x >= 0 ? x : -x; }
template<class T> T sqr(T x) { return x * x; }

class TaskF1 {
public:
    vector<vi> a;
    vector<vi> comp;
    vector<vi> g;
    vector<vi> gr;
    vi used;
    vi order;
    vi scc;

	void solve(std::istream& in, std::ostream& out) {
	    int n, m;
	    in >> n >> m;
	    a = vector<vi>(n, vi(m, 0));
	    for (int i = 0; i < n; ++i) {
	        string s;
	        in >> s;
	        for (int j = 0; j < m; ++j)
	            a[i][j] = (s[j] == '#' ? 1 : 0);
	    }
	    vi A(m);
	    for (int i = 0 ;i < m; ++i)
	        in >> A[i];
	    int cnt = 0;
        comp = vector<vi>(n, vi(m, -1));
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < m; ++j) {
                if (a[i][j] == 0) continue;
                if (comp[i][j] != -1) continue;
                dfs(i, j, cnt);
                ++cnt;
            }
        }
        vi last(m, -1);
        g = vector<vi>(cnt);
        gr = vector<vi>(cnt);
        for (int i = n - 1; i >= 0; --i) {
            for (int j = 0; j < m; ++j) {
                if (a[i][j] == 0) continue;
                int c = comp[i][j];
                for (int dy = -1; dy <= 1; ++dy) {
                    int y = j + dy;
                    if (y < 0 || y >= m) continue;
                    if (last[y] != -1 && last[y] != c) {
                        g[c].pb(last[y]);
                        gr[last[y]].pb(c);
                    }
                }
            }
            for (int j = 0; j < m; ++j) {
                if (a[i][j] == 0) continue;
                last[j] = comp[i][j];
            }
        }
        used = vi(cnt, 0);
        order = vi();
        for (int i = 0; i < cnt; ++i)
            if (!used[i])
                dfs1(i);
        used = vi(cnt, 0);
        scc = vi(cnt, -1);
        for (int i = 0; i < cnt; ++i) {
            int v = order[cnt - 1 - i];
            if (!used[v]) {
                dfs2(v, v);
            }
        }
        vi sub(cnt, 0);
        for (int i = 0; i < cnt; ++i)
            for (int x : g[i])
                if (scc[x] != scc[i])
                    sub[scc[x]] = true;
        int res = 0;
        for (int i = 0; i < cnt; ++i) if (scc[i] == i)
            if (!sub[i]) ++res;
        out << res << "\n";
	}

	void dfs(int x, int y, int mark) {
	    comp[x][y] = mark;
	    for (int dx = -1; dx <= 1; ++dx)
	        for (int dy = -1; dy <= 1; ++dy) {
	            if (abs(dx) + abs(dy) != 1) continue;
	            int nx = x + dx, ny = y + dy;
	            if (nx < 0 || nx >= sz(a)) continue;
	            if (ny < 0 || ny >= sz(a[nx])) continue;
	            if (a[nx][ny] == 0) continue;
	            if (comp[nx][ny] != -1) continue;
	            dfs(nx, ny, mark);
	        }
	}

    void dfs1 (int v) {
        used[v] = true;
        for (int x : g[v])
            if (!used[ x ])
                dfs1 (x);
        order.push_back(v);
    }

    void dfs2 (int v, int mark) {
        used[v] = true;
        scc[v] = mark;
        for (int x : gr[v])
            if (!used[x])
                dfs2(x, mark);
    }
};


int main() {
	TaskF1 solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}