/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e5 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n, q, A[MAXN];
int seg[MAXN << 2][LOG], lazy[MAXN << 2];

void build(int id = 1, int l = 0, int r = MAXN) {
    if (r - l == 1) {
        for (int i = 0; i < LOG; i++) if (A[l] & (1LL << i)) seg[id][i] = 1;
        return;
    }
    int mid = l + r >> 1;
    build(id << 1, l, mid);
    build(id << 1 | 1, mid, r);
    for (int i = 0; i < LOG; i++) seg[id][i] = seg[id << 1][i] + seg[id << 1 | 1][i];
}

void add(int id, int l, int r, int v) {
    lazy[id] ^= v;
    for (int i = 0; i < LOG; i++) if (v & (1LL << i)) seg[id][i] = r - l - seg[id][i];
}

void Shift(int id, int l, int r) {
    int mid = l + r >> 1;
    add(id << 1, l, mid, lazy[id]);
    add(id << 1 | 1, mid, r, lazy[id]);
    lazy[id] = 0;
}

void update(int ql, int qr, int x, int id = 1, int l = 0, int r = MAXN) {
    if (r <= ql || qr <= l || r <= l || qr <= ql) return;
    if (ql <= l && r <= qr) {
        add(id, l, r, x);
        return;
    }
    Shift(id, l, r);
    int mid = l + r >> 1;
    update(ql, qr, x, id << 1, l, mid);
    update(ql, qr, x, id << 1 | 1, mid, r);
    for (int i = 0; i < LOG; i++) seg[id][i] = seg[id << 1][i] + seg[id << 1 | 1][i];
}

ll get(int ql, int qr, int id = 1, int l = 0, int r = MAXN) {
    if (r <= ql || qr <= l || r <= l || qr <= ql) return 0;
    if (ql <= l && r <= qr) {
        ll res = 0;
        for (ll i = 0; i < LOG; i++) res += seg[id][i] * (1ll << i);
        return res;
    }
    Shift(id, l, r);
    int mid = l + r >> 1;
    return get(ql, qr, id << 1, l, mid) + get(ql, qr, id << 1 | 1, mid, r);
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    cin >> n;
    for (ll i = 1; i <= n; i++) cin >> A[i];
    build();

    cin >> q;
    while (q--) {
        ll t, l, r, x;
        cin >> t >> l >> r;
        if (t == 1) {
            cout << get(l, r + 1) << endl;
        } else {
            cin >> x;
            update(l, r + 1, x);
        }
    }

    return 0;
}
/*

*/