/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll LOG = 22;
const ll INF = 2e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n, L[MAXN], R[MAXN], T[MAXN], mn[MAXN];
vector<ll> vec;
vector<pll> S[MAXN], E[MAXN];
set<pll> st;

int main() {
    fast_io;

    cin >> n;
    for (ll i = 0; i < n; i++) {
        cin >> L[i] >> R[i] >> T[i];
        vec.push_back(L[i]);
        vec.push_back(R[i]);
        vec.push_back(R[i] - T[i] + 1);
    }

    Sort(vec);
    vec.resize(unique(all(vec)) - vec.begin());
    for (ll i = 0; i < n; i++) {
        S[lower_bound(all(vec), L[i]) - vec.begin()].push_back({T[i], i});
        E[lower_bound(all(vec), R[i] - T[i] + 1) - vec.begin()].push_back({T[i], i});
    }

    st.insert({INF, INF});
    for (ll i = 0; i < vec.size(); i++) {
        for (pll j : S[i]) st.insert(j);
        for (pll j : E[i]) st.erase(j);
        mn[i] = vec[i] + (*st.begin()).X;
    }
    for (ll i = SZ(vec) - 2; i >= 0; i--) mn[i] = min(mn[i], mn[i + 1]);

    ll timer = 0, ans = 0;
    st = set<pll>();
    st.insert({INF, INF});
    for (ll i = 0; i < vec.size(); i++) {
        ll t = (*st.begin()).X;
        ll cnt = (vec[i] - timer) / t;
        if (timer <= vec[i]) {
            timer += cnt * t;
            ans += cnt;
        }
        for (pll j : S[i]) st.insert(j);
        for (pll j : E[i]) st.erase(j);
        if (timer >= vec[i]) continue;
        if (t == INF) timer = vec[i];
        else if (timer + t < mn[i]) timer += t, ans++;
        else timer = vec[i];
    }
    cout << ans << endl;


    return 0;
}
/*

*/