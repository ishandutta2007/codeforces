#include <bits/stdc++.h>

using namespace std;

const int max_lev = 32, inf = 1000111222;

long long pw[max_lev];

long long solve0(long long n) {
    ++n;
    long long l = 1;
    while (n > l) {
        n -= l;
        l *= 4;
    }
    return l + n - 1;
}

long long get_delta(int lev, long long num) {
    if (lev == 0) {
        return 0;
    }
    int id = num / pw[lev - 1];
    num %= pw[lev - 1];
    if (id <= 1) {
        return get_delta(lev - 1, num);
    }
    if (id == 2) {
        return get_delta(lev - 1, num) - pw[lev - 1];
    }
    return get_delta(lev - 1, num) - pw[lev - 1] - pw[lev];
}

long long get_delta(long long n) {
    ++n;
    int lev = 0;
    long long l = 1;
    while (n > l) {
        n -= l;
        l *= 4;
        ++lev;
    }
    --n;
    return get_delta(lev, n);
}

long long solve1(long long n) {
    return 2 * solve0(n) + get_delta(n);
}

long long solve(long long n) {
    --n;
    long long row = n / 3;
    int col = n % 3;
    if (col == 0) {
        return solve0(row);
    } else if (col == 1) {
        return solve1(row);
    }
    return solve0(row) ^ solve1(row);
}

//vector<int> small{1,2,3,4,8,12,5,10,15,6,11,13,7,9,14,16,32,48,17,34,51,18,35,49,19,33,50,20,40,60,21,42,63,22,43,61,23,41,62,24,44,52,25,46,55,26,47,53,27,45,54,28,36,56,29,38,59,30,39,57,31,37,58,64,128,192,65,130,195,66,131,193,67,129,194,68,136,204,69,138,207,70,139,205,71,137,206,72,140,196,73,142,199,74,143,197,75,141,198,76,132,200,77,134,203,78,135,201,79,133,202,80,160,240,81,162,243,82,163,241,83,161,242,84,168,252,85,170,255,86,171,253,87,169,254,88,172,244,89,174,247,90,175,245,91,173,246,92,164,248,93,166,251,94,167,249,95,165,250,96,176,208,97,178,211,98,179,209,99,177,210,100,184,220,101,186,223,102,187,221,103,185,222,104,188,212,105,190,215,106,191,213,107,189,214,108,180,216,109,182,219,110,183,217,111,181,218,112,144,224,113,146,227,114,147,225,115,145,226,116,152,236,117,154,239,118,155,237,119,153,238,120,156,228,121,158,231,122,159,229,123,157,230,124,148,232,125,150,235,126,151,233,127,149,234,256,512,768,257,514,771,258,515,769,259,513,770,260,520,780,261,522,783,262,523,781,263,521,782,264,524,772,265,526,775,266,527,773,267,525,774,268,516,776,269,518,779,270,519,777,271,517,778,272,544,816,273,546,819,274,547,817,275,545,818,276,552,828,277,554,831,278,555,829,279,553,830,280,556,820,281,558,823,282,559,821,283,557,822,284,548,824,285,550,827,286,551,825,287,549,826,288,560,784,289,562,787,290,563,785,291,561,786,292,568,796,293,570,799,294,571,797,295,569,798,296,572,788,297,574,791,298,575,789,299,573,790,300,564,792,301,566,795,302,567,793,303,565,794,304,528,800,305,530,803,306,531,801,307,529,802,308,536,812,309,538,815,310,539,813,311,537,814,312,540,804,313,542,807,314,543,805,315,541,806,316,532,808,317,534,811,318,535,809,319,533,810,320,640,960,321,642,963,322,643,961,323,641,962,324,648,972,325,650,975,326,651,973,327,649,974,328,652,964,329,654,967,330,655,965,331,653,966,332,644,968,333,646,971,334,647,969,335,645,970,336,672,1008,337,674,1011,338,675,1009,339,673,1010,340,680,1020,341,682,1023,342,683,1021,343,681,1022,344,684,1012,345,686,1015,346,687,1013,347,685,1014,348,676,1016,349,678,1019,350,679,1017,351,677,1018,352,688,976,353,690,979,354,691,977,355,689,978,356,696,988,357,698,991,358,699,989,359,697,990,360,700,980,361,702,983,362,703,981,363,701,982,364,692,984,365,694,987,366,695,985,367,693,986,368,656,992,369,658,995,370,659,993,371,657,994,372,664,1004,373,666,1007,374,667,1005,375,665,1006,376,668,996,377,670,999,378,671,997,379,669,998,380,660,1000,381,662,1003,382,663,1001,383,661,1002,384,704,832,385,706,835,386,707,833,387,705,834,388,712,844,389,714,847,390,715,845,391,713,846,392,716,836,393,718,839,394,719,837,395,717,838,396,708,840,397,710,843,398,711,841,399,709,842,400,736,880,401,738,883,402,739,881,403,737,882,404,744,892,405,746,895,406,747,893,407,745,894,408,748,884,409,750,887,410,751,885,411,749,886,412,740,888,413,742,891,414,743,889,415,741,890,416,752,848,417,754,851,418,755,849,419,753,850,420,760,860,421,762,863,422,763,861,423,761,862,424,764,852,425,766,855,426,767,853,427,765,854,428,756,856,429,758,859,430,759,857,431,757,858,432,720,864,433,722,867,434,723,865,435,721,866,436,728,876,437,730,879,438,731,877,439,729,878,440,732,868,441,734,871,442,735,869,443,733,870,444,724,872,445,726,875,446,727,873,447,725,874,448,576,896,449,578,899,450,579,897,451,577,898,452,584,908,453,586,911,454,587,909,455,585,910,456,588,900,457,590,903,458,591,901,459,589,902,460,580,904,461,582,907,462,583,905,463,581,906,464,608,944,465,610,947,466,611,945,467,609,946,468,616,956,469,618,959,470,619,957,471,617,958,472,620,948,473,622,951,474,623,949,475,621,950,476,612,952,477,614,955,478,615,953,479,613,954,480,624,912,481,626,915,482,627,913,483,625,914,484,632,924,485,634,927,486,635,925,487,633,926,488,636,916,489,638,919,490,639,917,491,637,918,492,628,920,493,630,923,494,631,921,495,629,922,496,592,928,497,594,931,498,595,929,499,593,930,500,600,940,501,602,943,502,603,941,503,601,942,504,604,932,505,606,935,506,607,933,507,605,934,508,596,936,509,598,939,510,599,937,511,597,938,1024,2048,3072};

int main() {
    //freopen("input.txt", "r", stdin);
    //freopen("output2.txt", "w", stdout);
    pw[0] = 1;
    for (int i = 1; i < max_lev; ++i) {
        pw[i] = pw[i - 1] * 4;
    }
    int t;
    scanf("%d", &t);
    while (t--) {
        long long n;
        scanf("%I64d", &n);
        long long ans = solve(n);
        printf("%I64d\n", ans);
    }
    return 0;
}