/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

// Actual solution is at the bottom

#undef NDEBUG

#include <algorithm>
#include <array>
#include <bitset>
#include <cassert>
#include <climits>
#include <cstdint>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <memory>
#include <numeric>
#include <queue>
#include <random>
#include <set>
#include <stack>
#include <string>
#include <unordered_set>
#include <unordered_map>
#include <vector>
// AtCoder library from https://github.com/atcoder/ac-library
#ifndef ATCODER_LAZYSEGTREE_HPP
#define ATCODER_LAZYSEGTREE_HPP 1






#ifndef ATCODER_INTERNAL_BITOP_HPP
#define ATCODER_INTERNAL_BITOP_HPP 1

#ifdef _MSC_VER
#include <intrin.h>
#endif

namespace atcoder {

namespace internal {

// @param n `0 <= n`
// @return minimum non-negative `x` s.t. `n <= 2**x`
int ceil_pow2(int n) {
    int x = 0;
    while ((1U << x) < (unsigned int)(n)) x++;
    return x;
}

// @param n `1 <= n`
// @return minimum non-negative `x` s.t. `(n & (1 << x)) != 0`
int bsf(unsigned int n) {
#ifdef _MSC_VER
    unsigned long index;
    _BitScanForward(&index, n);
    return index;
#else
    return __builtin_ctz(n);
#endif
}

}  // namespace internal

}  // namespace atcoder

#endif  // ATCODER_INTERNAL_BITOP_HPP



namespace atcoder {

template <class S,
          S (*op)(S, S),
          S (*e)(),
          class F,
          S (*mapping)(F, S),
          F (*composition)(F, F),
          F (*id)()>
struct lazy_segtree {
  public:
    lazy_segtree() : lazy_segtree(0) {}
    lazy_segtree(int n) : lazy_segtree(std::vector<S>(n, e())) {}
    lazy_segtree(const std::vector<S>& v) : _n(int(v.size())) {
        log = internal::ceil_pow2(_n);
        size = 1 << log;
        d = std::vector<S>(2 * size, e());
        lz = std::vector<F>(size, id());
        for (int i = 0; i < _n; i++) d[size + i] = v[i];
        for (int i = size - 1; i >= 1; i--) {
            update(i);
        }
    }

    void set(int p, S x) {
        assert(0 <= p && p < _n);
        p += size;
        for (int i = log; i >= 1; i--) push(p >> i);
        d[p] = x;
        for (int i = 1; i <= log; i++) update(p >> i);
    }

    S get(int p) {
        assert(0 <= p && p < _n);
        p += size;
        for (int i = log; i >= 1; i--) push(p >> i);
        return d[p];
    }

    S prod(int l, int r) {
        assert(0 <= l && l <= r && r <= _n);
        if (l == r) return e();

        l += size;
        r += size;

        for (int i = log; i >= 1; i--) {
            if (((l >> i) << i) != l) push(l >> i);
            if (((r >> i) << i) != r) push(r >> i);
        }

        S sml = e(), smr = e();
        while (l < r) {
            if (l & 1) sml = op(sml, d[l++]);
            if (r & 1) smr = op(d[--r], smr);
            l >>= 1;
            r >>= 1;
        }

        return op(sml, smr);
    }

    S all_prod() { return d[1]; }

    void apply(int p, F f) {
        assert(0 <= p && p < _n);
        p += size;
        for (int i = log; i >= 1; i--) push(p >> i);
        d[p] = mapping(f, d[p]);
        for (int i = 1; i <= log; i++) update(p >> i);
    }
    void apply(int l, int r, F f) {
        assert(0 <= l && l <= r && r <= _n);
        if (l == r) return;

        l += size;
        r += size;

        for (int i = log; i >= 1; i--) {
            if (((l >> i) << i) != l) push(l >> i);
            if (((r >> i) << i) != r) push((r - 1) >> i);
        }

        {
            int l2 = l, r2 = r;
            while (l < r) {
                if (l & 1) all_apply(l++, f);
                if (r & 1) all_apply(--r, f);
                l >>= 1;
                r >>= 1;
            }
            l = l2;
            r = r2;
        }

        for (int i = 1; i <= log; i++) {
            if (((l >> i) << i) != l) update(l >> i);
            if (((r >> i) << i) != r) update((r - 1) >> i);
        }
    }

    template <bool (*g)(S)> int max_right(int l) {
        return max_right(l, [](S x) { return g(x); });
    }
    template <class G> int max_right(int l, G g) {
        assert(0 <= l && l <= _n);
        assert(g(e()));
        if (l == _n) return _n;
        l += size;
        for (int i = log; i >= 1; i--) push(l >> i);
        S sm = e();
        do {
            while (l % 2 == 0) l >>= 1;
            if (!g(op(sm, d[l]))) {
                while (l < size) {
                    push(l);
                    l = (2 * l);
                    if (g(op(sm, d[l]))) {
                        sm = op(sm, d[l]);
                        l++;
                    }
                }
                return l - size;
            }
            sm = op(sm, d[l]);
            l++;
        } while ((l & -l) != l);
        return _n;
    }

    template <bool (*g)(S)> int min_left(int r) {
        return min_left(r, [](S x) { return g(x); });
    }
    template <class G> int min_left(int r, G g) {
        assert(0 <= r && r <= _n);
        assert(g(e()));
        if (r == 0) return 0;
        r += size;
        for (int i = log; i >= 1; i--) push((r - 1) >> i);
        S sm = e();
        do {
            r--;
            while (r > 1 && (r % 2)) r >>= 1;
            if (!g(op(d[r], sm))) {
                while (r < size) {
                    push(r);
                    r = (2 * r + 1);
                    if (g(op(d[r], sm))) {
                        sm = op(d[r], sm);
                        r--;
                    }
                }
                return r + 1 - size;
            }
            sm = op(d[r], sm);
        } while ((r & -r) != r);
        return 0;
    }

  private:
    int _n, size, log;
    std::vector<S> d;
    std::vector<F> lz;

    void update(int k) { d[k] = op(d[2 * k], d[2 * k + 1]); }
    void all_apply(int k, F f) {
        d[k] = mapping(f, d[k]);
        if (k < size) lz[k] = composition(f, lz[k]);
    }
    void push(int k) {
        all_apply(2 * k, lz[k]);
        all_apply(2 * k + 1, lz[k]);
        lz[k] = id();
    }
};

}  // namespace atcoder

#endif  // ATCODER_LAZYSEGTREE_HPP



#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()

using namespace std;

typedef int64_t int64;
typedef pair<int, int> ii;

constexpr int INF = (int) 1e9;

struct S {
  int v = 0;
};

struct F {
  int v = 0;
};

S op(S l, S r) { return S{max(l.v, r.v)}; }

S e() { return S{-INF}; }

S mapping(F l, S r) { return S{l.v + r.v}; }

F composition(F l, F r) { return F{l.v + r.v}; }

F id() { return F{0}; }

struct Person {
  int a;
  int s;
  int index;

  bool operator<(const Person &rhs) const {
    if (a < rhs.a)
      return true;
    if (rhs.a < a)
      return false;
    return s < rhs.s;
  }
};

class DSlozhnayaGora {
 public:
  int innerSolve(int d, vector<Person> ps) {
    int n = ps.size();
    Person start;
    start.s = INF;
    start.a = d;
    start.index = n;
    ps.push_back(start);
    ++n;
    sort(all(ps));
    vector<Person> psBys = ps;
    sort(all(psBys), [](const auto& a, const auto& b) {
      return a.s < b.s;
    });
    int pbys = 0;
    vector<int> sortedPos(n);
    for (int i = 0; i < n; ++i) sortedPos[ps[i].index] = i;
    int startScore = 0;
    for (auto pp : ps) {
      if (pp.s >= d && pp.a <= d) ++startScore;
    }
    atcoder::lazy_segtree<S, op, e, F, mapping, composition, id> seg(n);
    int res = 0;
    vector<bool> inTheMix(n);
    for (auto p : ps) {
      while (pbys < n && psBys[pbys].s < p.a) {
        if (inTheMix[psBys[pbys].index]) {
          seg.apply(0, sortedPos[psBys[pbys].index], {-1});
        }
        ++pbys;
      }

      int best;
      if (p.index == n - 1) {
        best = startScore;
      } else {
        int right = lower_bound(all(ps), p.s, [](auto a, auto b) {return a.a <= b;}) - ps.begin();
        best = seg.prod(0, right).v + 1;
      }

      if (p.s >= p.a) {
        seg.apply(0, sortedPos[p.index], {1});
        inTheMix[p.index] = true;
      }

      if (best > -INF / 2) {
        res = max(res, best);
        seg.set(sortedPos[p.index], {best});
      }
    }

    return res - 1;
  }

  void solveOne() {
    int n, d;
    cin >> n >> d;
    vector<Person> ps(n);
    int idx = 0;
    for (auto& p : ps) {
      cin >> p.s >> p.a;
      p.index = idx++;
    }
    auto res = innerSolve(d, ps);
    cout << res << "\n";
  }

  int stupidSolve(int d, vector<Person> ps) {
    int n = ps.size();
    vector<int> perm(n);
    iota(all(perm), 0);
    int res = 0;
    do {
      int cur = 0;
      int level = d;
      for (int x : perm) {
        if (ps[x].s >= level) {
          ++cur;
          level = max(level, ps[x].a);
        }
      }
      res = max(res, cur);
    } while (next_permutation(all(perm)));
    return res;
  }

  void solve() {
    /*while (true) {
      int n = rand() % 5 + 1;
      int d = rand() % 5;
      vector<Person> ps(n);
      for (int i = 0; i < n; ++i) {
        ps[i].s = rand() % 5;
        ps[i].a = rand() % 5;
        ps[i].index = i;
      }
      auto got = innerSolve(d, ps);
      auto expected = stupidSolve(d, ps);
      if (got != expected) {
        innerSolve(d, ps);
        assert(false);
      }
    }*/
    int nt = 1;
    for (int it = 0; it < nt; ++it) {
      solveOne();
    }
  }
};


int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(0);
    DSlozhnayaGora solver;


    solver.solve();
    return 0;
}