/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author RiaD
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <vector>



#include <cstddef>


#include <string>
#include <stdexcept>

#ifndef SPCPPL_ASSERT
	#ifdef SPCPPL_DEBUG
		#define SPCPPL_ASSERT(condition) \
		if(!(condition)) { \
			throw std::runtime_error(std::string() + #condition + " in line " + std::to_string(__LINE__) + " in " + __PRETTY_FUNCTION__); \
		}
	#else
		#define SPCPPL_ASSERT(condition)
	#endif
#endif


class DSU {
public:
	explicit DSU(std::size_t n): dsu(n) {
		for (std::size_t i = 0; i < n; ++i) {
			dsu[i] = i;
		}
	}

	std::size_t getSet(std::size_t v) {
		SPCPPL_ASSERT(v < dsu.size());
		if (v == dsu[v]) {
			return v;
		}
		return dsu[v] = getSet(dsu[v]);
	}

	void unite(std::size_t u, std::size_t v) {
		SPCPPL_ASSERT(u < dsu.size());
		SPCPPL_ASSERT(v < dsu.size());
		u = getSet(u);
		v = getSet(v);
		dsu[v] = u;
	}

private:
	std::vector<std::size_t> dsu;
};



#include <iterator>


/**
* Support decrementing and multi-passing, but not declared bidirectional(or even forward) because
* it's reference type is not a reference.
*
* It doesn't return reference because
* 1. Anyway it'll not satisfy requirement [forward.iterators]/6
*   If a and b are both dereferenceable, then a == b if and only if *a and
*   b are bound to the same object.
* 2. It'll not work with reverse_iterator that returns operator * of temporary which is temporary for this iterator
*
* Note, reverse_iterator is not guaranteed to work  now too since it works only with bidirectional iterators,
* but it's seems to work at least on my implementation.
*
* It's not really useful anywhere except iterating anyway.
*/
template <typename T>
class IntegerIterator: public std::iterator<std::input_iterator_tag, T, std::ptrdiff_t, T*, T> {
public:
	explicit IntegerIterator(T value): value(value) {

	}

	IntegerIterator& operator++() {
		++value;
		return *this;
	}

	IntegerIterator operator++(int) {
		IntegerIterator copy = *this;
		++value;
		return copy;
	}

	IntegerIterator& operator--() {
		--value;
		return *this;
	}

	IntegerIterator operator--(int) {
		IntegerIterator copy = *this;
		--value;
		return copy;
	}

	T operator*() const {
		return value;
	}

	bool operator==(IntegerIterator rhs) {
		return value == rhs.value;
	}

	bool operator!=(IntegerIterator rhs) {
		return !(*this == rhs);
	}

private:
	T value;
};

template <typename T>
class IntegerRange {
public:
	IntegerRange(T begin, T end): begin_(begin), end_(end) {
		SPCPPL_ASSERT(begin <= end);
	}

	IntegerIterator<T> begin() const {
		return IntegerIterator<T>(begin_);
	}

	IntegerIterator<T> end() const {
		return IntegerIterator<T>(end_);
	}

private:
	T begin_;
	T end_;
};

template <typename T>
class ReversedIntegerRange {
	typedef std::reverse_iterator<IntegerIterator<T>> IteratorType;
public:
	ReversedIntegerRange(T begin, T end): begin_(begin), end_(end) {
		SPCPPL_ASSERT(begin >= end);
	}

	IteratorType begin() const {
		return IteratorType(IntegerIterator<T>(begin_));
	}

	IteratorType end() const {
		return IteratorType(IntegerIterator<T>(end_));
	}

private:
	T begin_;
	T end_;
};

template <typename T>
IntegerRange<T> range(T to) {
	return IntegerRange<T>(0, to);
}

template <typename T>
IntegerRange<T> range(T from, T to) {
	return IntegerRange<T>(from, to);
}

template <typename T>
IntegerRange<T> inclusiveRange(T to) {
	return IntegerRange<T>(0, to + 1);
}

template <typename T>
IntegerRange<T> inclusiveRange(T from, T to) {
	return IntegerRange<T>(from, to + 1);
}

template <typename T>
ReversedIntegerRange<T> downrange(T from) {
	return ReversedIntegerRange<T>(from, 0);
}

template <typename T>
ReversedIntegerRange<T> downrange(T from, T to) {
	return ReversedIntegerRange<T>(from, to);
}

template <typename T>
ReversedIntegerRange<T> inclusiveDownrange(T from) {
	return ReversedIntegerRange<T>(from + 1, 0);
}

template <typename T>
ReversedIntegerRange<T> inclusiveDownrange(T from, T to) {
	return ReversedIntegerRange<T>(from + 1, to);
}


using namespace std;

class TaskC {
public:
	void solve(std::istream& in, std::ostream& out) {
		int n, k;
		in >> n >> k;
		vector<string> s(n);
		for (int i: range(n)) {
			in >> s[i];
		}

		auto id = [&](int i, int j) {
			return i * n + j;
		};

		DSU dsu(n * n);
		for (int i: range(n)) {
			for (int j: range(n)){
				if (s[i][j] == '.') {
					if (i + 1 < n && s[i + 1][j] == '.') {
						dsu.unite(id(i, j), id(i + 1, j));
					}
					if (j + 1 < n && s[i][j + 1] == '.') {
						dsu.unite(id(i, j), id(i, j + 1));
					}
				}
			}
		}

		vector<int> compSize(n * n);
		for (int i: range(n * n)) {
			++compSize[dsu.getSet(i)];
		}

		vector<int> curCounts(n * n);

		int ans = 0;
		for (int startI = 0; startI + k <= n; ++startI) {
			for (int& i: curCounts) {
				i = 0;
			}
			int curCnt = 0;

			auto add = [&](int i, int j) {
				int ID = (int) dsu.getSet(id(i, j));
				if (curCounts[ID] == 0) {
					curCnt += compSize[ID];
				}
				++curCounts[ID];
			};
			auto rem = [&](int i, int j) {
				int ID = (int) dsu.getSet(id(i, j));
				--curCounts[ID];
				if (curCounts[ID] == 0) {
					curCnt -= compSize[ID];
				}
			};

			auto add_if = [&](int i, int j) {
				if (i < 0 || i >= n || j < 0 || j >= n || s[i][j] != '.') {
					return;
				}
				int ID = (int) dsu.getSet(id(i, j));
				if (curCounts[ID] == 0) {
					curCnt += compSize[ID];
				}
				++curCounts[ID];
			};
			auto rem_if = [&](int i, int j) {
				if (i < 0 || i >= n || j < 0 || j >= n || s[i][j] != '.') {
					return;
				}
				int ID = (int) dsu.getSet(id(i, j));
				--curCounts[ID];
				if (curCounts[ID] == 0) {
					curCnt -= compSize[ID];
				}
			};

			for (int i: range(startI, startI + k)) {
				for (int j: range(k)) {
					add(i, j);
				}
				add_if(i, k);
			}
			for (int i: {startI - 1, startI + k}) {
				for (int j: range(k)) {
					add_if(i, j);
				}
			}

			ans = max(ans, curCnt);

			for (int startJ = 1; startJ + k <= n; ++startJ) {
				for (int i: range(startI, startI + k)) {
					rem_if(i, startJ - 2);
				}
				for (int i: range(startI, startI + k)) {
					add_if(i, startJ - 1);
				}
				for (int i: range(startI, startI + k)) {
					rem(i, startJ - 1);
				}
				for (int i: range(startI, startI + k)) {
					add(i, startJ + k - 1);
				}
				for (int i: range(startI, startI + k)) {
					rem_if(i, startJ + k - 1);
				}
				for (int i: range(startI, startI + k)) {
					add_if(i, startJ + k);
				}

				for (int i: {startI - 1, startI + k}) {
					rem_if(i, startJ - 1);
					add_if(i, startJ + k - 1);
				}
				ans = max(ans, curCnt);
			}
		}
		out << ans;
	}
};


int main() {
	std::ios_base::sync_with_stdio(false);
	TaskC solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	in.tie(0);
	out << std::fixed;
	out.precision(20);
	solver.solve(in, out);
	return 0;
}