/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll q, A[7] = {1, 2, 3, 4, 5, 6, 7};

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    cin >> q;
    while (q--) {
        ll x[3], y[3], cur = 0, ans = 0;
        cin >> x[0] >> x[1] >> x[2];
        do {
            for (ll i = 0; i < 3; i++) y[i] = x[i];
            for (ll i = 0; i < 7; i++) {
                ll ok = 1;
                for (ll j = 0; j < 3; j++) {
                    if (A[i] & (1ll << j)) {
                        if (y[j] == 0) ok = 0;
                    }
                }
                cur += ok;
                for (ll j = 0; j < 3; j++) {
                    if (A[i] & (1ll << j)) y[j] -= ok;
                }
            }
            ans = max(ans, cur);
            cur = 0;
        } while (next_permutation(A, A + 7));
        cout << ans << endl;
    }

    return 0;
}
/*

*/