/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author majk
 */

#ifndef MAJK_LIB
#define MAJK_LIB

#include <vector>
#include <stack>
#include <iostream>
#include <unordered_map>
#include <unordered_set>
#include <map>
#include <iomanip>
#include <set>
#include <functional>
#include <fstream>
#include <algorithm>
#include <cassert>
#include <cmath>
#include <string>
#include <sstream>
#include <queue>
#include <bitset>
using namespace std;

#define x first
#define y second
typedef std::pair<int,int> pii; typedef long long ll; typedef unsigned long long ull; typedef unsigned int ui; typedef pair<ui,ui> puu;

template <typename T, typename U> std::istream&operator>>(std::istream&i, pair<T,U>&p) {i >> p.x >> p.y; return i;}
template<typename T>std::istream&operator>>(std::istream&i,vector<T>&t) {for(auto&v:t){i>>v;}return i;}
template <typename T, typename U> std::ostream&operator<<(std::ostream&o, const pair<T,U>&p) {o << p.x << ' ' << p.y; return o;}
template<typename T>std::ostream&operator<<(std::ostream&o,const vector<T>&t) {if(t.empty())o<<'\n';for(size_t i=0;i<t.size();++i){o<<t[i]<<" \n"[i == t.size()-1];}return o;}
template<typename T> using minheap = priority_queue<T, vector<T>, greater<T>>;
template<typename T> using maxheap = priority_queue<T, vector<T>, less<T>>;
template <typename T> bool in(T a, T b, T c) { return a <= b && b < c; }
ui logceil(int x) { return x?8*sizeof(int)-__builtin_clz(x):0; }

namespace std { template<typename T,typename U>struct hash<pair<T,U>>{hash<T>t;hash<U>u;size_t operator()(const pair<T,U>&p)const{return t(p.x)^(u(p.y)<<7);}}; }
template<typename T,typename F>T bsh(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){l=m+1;r=m;}else{h=m-1;}}return r;}
template<typename F> double bshd(double l,double h,const F&f,double p=1e-9){ui r=3+(ui)log2((h-l)/p);while(r--){double m=(l+h)/2;if(f(m)){l=m;}else{h=m;}}return (l+h)/2;}
template<typename T,typename F>T bsl(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){h=m-1;r=m;}else{l=m+1;}}return r;}
template<typename F> double bsld(double l,double h,const F&f,double p=1e-9){ui r=3+(ui)log2((h-l)/p);while(r--){double m=(l+h)/2;if(f(m)){h=m;}else{l=m;}}return (l+h)/2;}
template<typename T> T gcd(T a,T b) { if (a<b) swap(a,b); return b?gcd(b,a%b):a; }

template<typename T>class vector2:public vector<vector<T>>{public:vector2(){} vector2(size_t a,size_t b,T t=T()):vector<vector<T>>(a,vector<T>(b,t)){}};
template<typename T>class vector3:public vector<vector2<T>>{public:vector3(){} vector3(size_t a,size_t b,size_t c,T t=T()):vector<vector2<T>>(a,vector2<T>(b,c,t)){}};
template<typename T>class vector4:public vector<vector3<T>>{public:vector4(){} vector4(size_t a,size_t b,size_t c,size_t d,T t=T()):vector<vector3<T>>(a,vector3<T>(b,c,d,t)){}};
template<typename T>class vector5:public vector<vector4<T>>{public:vector5(){} vector5(size_t a,size_t b,size_t c,size_t d,size_t e,T t=T()):vector<vector4<T>>(a,vector4<T>(b,c,d,e,t)){}};


#endif
// #include "../l/mod.h"

int RMQ[11][1000][11][1000];

class TaskD {
public:

void solve(istream& cin, ostream& cout) {

    int N, M;
    cin >> N >> M;
    vector2<int> X(N, M), P(N + 1, M + 1, 0), S(N, M);
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < M; ++j) {
            cin >> X[i][j];
            P[i + 1][j + 1] = P[i + 1][j] + P[i][j + 1] - P[i][j] + X[i][j];
        }
    }

    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < M; ++j) {
            S[i][j] = bsh(0, min(N - i, M - j), [&](int s) {
                return P[i + s][j + s] - P[i + s][j] - P[i][j + s] + P[i][j] == s * s;
            });
        }
    }

    // TODO: Extract 2D RMQ from here
    for(int ir = 0; ir < N; ir++)
    {
        for(int ic=0; ic < M; ic++)
            RMQ[0][ir][0][ic] = S[ir][ic];

        for (int jc = 1; jc <= 10; jc++)
            for (int ic = 0; ic+(1<<(jc-1)) < M; ic++)
                RMQ[0][ir][jc][ic] = max(RMQ[0][ir][jc-1][ic], RMQ[0][ir][jc-1][ic+(1<<(jc-1))]);
    }
    for (int jr = 1; jr <= 10; jr++) {
        for (int ir = 0; ir < N; ir++)
            for (int jc = 0; jc <= 10; jc++)
                for (int ic = 0; ic < M; ic++)
                    RMQ[jr][ir][jc][ic] = max(RMQ[jr-1][ir][jc][ic], RMQ[jr-1][ir+(1<<(jr-1))][jc][ic]);
    }


    auto query = [&](int x1, int y1, int x2, int y2) {
        int lenx=x2-x1+1;
        int kx=logceil(lenx)-1;
        int leny=y2-y1+1;
        int ky=logceil(leny)-1;

        int max_R1 = max(RMQ[kx][x1][ky][y1] , RMQ[kx][x1][ky][y2+1-(1<<ky)] );
        int max_R2 = max(RMQ[kx][x2+1-(1<<kx)][ky][y1], RMQ[kx][x2+1-(1<<kx)][ky][y2+1-(1<<ky)] );
        return max(max_R1, max_R2);
    };

    int Q;
    cin >> Q;
    for (int q = 0; q < Q; ++q) {
        int x1, y1, x2, y2;
        cin >> x1 >> y1 >> x2 >> y2;
        x1--; y1--; x2--; y2--;
        cout << bsh(0, 1+min(x2-x1, y2-y1), [&](int s) {
             return query(x1, y1, x2 - s + 1, y2 - s + 1) >= s;
        }) << '\n';
    }

}
};


int main() {
	ios_base::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr);
	TaskD solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
    return 0;
}