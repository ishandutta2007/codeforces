/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Oleg Mingalev <oleg@mingalev.net> aka shhdup
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <cmath>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <cstdio>
#include <cstdlib>
#include <string>
#include <bitset>
#include <cassert>
#include <algorithm>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;

#define pb push_back
#define fs first
#define sc second
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()

class TaskA {
public:
    TaskA() {
        std::ios::sync_with_stdio(false);
    }
    ll gcd(ll a, ll b, ll & x, ll & y) {
        if (a == 0) {
            x = 0; y = 1;
            return b;
        }
        ll x1, y1;
        ll d = gcd (b%a, a, x1, y1);
        x = y1 - (b / a) * x1;
        y = x1;
        return d;
    }
    inline ll divup(ll numerator, ll denominator) {
        return numerator / denominator
               + (((numerator < 0) ^ (denominator > 0)) && (numerator % denominator));
    }

    bool find_any_solution(ll a, ll b, ll c, ll & x0, ll & y0, ll & g) {
        g = gcd(abs(a), abs(b), x0, y0);
        if (c % g != 0)
            return false;
        x0 *= c / g;
        y0 *= c / g;
        if (a < 0)   x0 *= -1;
        if (b < 0)   y0 *= -1;
        return true;
    }
    void bigsolve(std::istream& in, std::ostream& out) {
        long long x, y, p ,q;
        in >> x >> y >> p >> q;
        ll a_coeff = p-q;
        ll b_coeff = p;
        ll c_coeff = q*x-p*y;
        if (p == 0) {
            if (x == 0) {
                out << 0 << endl;
            } else {
                out << -1 << endl;
            }
            return;
        }
        if (p == q) {
            if (x == y) {
                out << 0 << endl;
            } else {
                out << -1 << endl;
            }
            return;
        }
        if (x == 0 && y == 0) {
            out << q << endl;
            return;
        }
        ll k = max(divup(x, p), divup(y, q));
        k = max(k, divup(y-x, q-p));
        out << k*q-y << endl;
    }
    void solve(std::istream& in, std::ostream& out) {
        divup(-14, 3);
        int t;
        in >> t;
        for (int ct = 0; ct < t; ++ct) bigsolve(in, out);
    }
};


int main() {
    TaskA solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}