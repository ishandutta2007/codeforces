/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 3e3 + 10;
const ll LOG = 22;
const ll INF = 1e9;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

int n, k, A[MAXN], cnt[MAXN][3], dist[MAXN * MAXN];

int ind(ll x, ll y) {
    return x * MAXN + y;
}

vector<int> adj(int v) {
    int i = v / MAXN, j = v % MAXN;
    if (i > n || j > n || i >= j) return {};
    vector<int> ans;
    if (cnt[j][1] + cnt[j][2] != 0 && A[i] != 1) {
        ans.push_back(ind(j, j + 1));
    }
    if (cnt[j][1] + cnt[j][2] != 0 && A[i] != 0) {
        ans.push_back(ind(j + 1, j + 2));
    }
    if (cnt[j][1] == 0 && A[i] != 0) {
        ans.push_back(ind(i, j + 1));
    }
    return ans;
}

void BFS(ll v) {
    fill(dist, dist + MAXN * MAXN, INF);
    queue<ll> q;
    q.push(v);
    dist[v] = 0;

    while (!q.empty()) {
        ll v = q.front();
        q.pop();
        if (dist[v] >= k) return;
        for (ll u : adj(v)) {
            if (dist[u] == INF) {
                dist[u] = dist[v] + 1;
                q.push(u);
            }
        }
    }
}

int main() {
    fast_io;

    cin >> n >> k;
    for (ll i = 1; i <= n; i++) {
        cin >> A[i];
        if (A[i] == 0) A[i] = 0;
        else if (A[i] == 100) A[i] = 1;
        else A[i] = 2;
    }

    for (ll i = n; i >= 1; i--) {
        for (ll j = 0; j <= 2; j++) {
            cnt[i][j] = cnt[i + 1][j] + (A[i] == j);
        }
    }

    BFS(ind(1, 2));

    ll ans = 0;
    for (ll i = 0; i < MAXN * MAXN; i++) {
        ans += dist[i] <= k;
    }
    cout << ans << endl;

    return 0;
}
/*

*/