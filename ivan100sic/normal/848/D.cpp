#include <iostream>
#include <algorithm>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <numeric>
#include <iterator>
#include <cstring>
using namespace std;

const int MOD = 1'000'000'007;

int n, k;
int sol[55][55];
int dp[2][55][55];
int bk[105][105];
int dabl[55][55];
int dabl_ex[55][55][55];

inline void dod(int& x, int y) {
	x += y;
	if (x >= MOD) {
		x -= MOD;
	}
}

/*
	sol[i][j] = Imas u pocetku jednu granu. Dodaj i novih
	cvorova tako da flow bude tacno j << broj nacina.

	dp[a][b][i][j] = U pocetku nemas granu. Broj nacina 
	da dodas i cvorova, tako da je flow tacno j i tako da
	koristis samo dabl-komponente koje su formata *lex*<= (a, b)

	dabl[i][j] = Imas jedan cvor na sredini a sve ostalo sto si
	dodao si nakacio na jednu od ove dve grane gore. U zbiru
	imas i cvorova i protok je j
*/

int mpow(int a, int b) {
	if (b == 0) {
		return 1;
	}
	int t = mpow(a, b/2);
	if (b % 2) {
		return t * 1ll * t % MOD * a % MOD;
	} else {
		return t * 1ll * t % MOD;
	}
}

int fact[105], finv[105];
int inv[105];

void init() {
		sol[45][1] = 0;
	sol[45][2] = 227169509;
	sol[45][3] = 545240090;
	sol[45][4] = 21373631;
	sol[45][5] = 4703558;
	sol[45][6] = 149454127;
	sol[45][7] = 906947250;
	sol[45][8] = 436226575;
	sol[45][9] = 231453773;
	sol[45][10] = 520829752;
	sol[45][11] = 657885509;
	sol[45][12] = 940170245;
	sol[45][13] = 816566317;
	sol[45][14] = 211196753;
	sol[45][15] = 118819980;
	sol[45][16] = 726741982;
	sol[45][17] = 596789649;
	sol[45][18] = 939963244;
	sol[45][19] = 486112971;
	sol[45][20] = 653096931;
	sol[45][21] = 608998341;
	sol[45][22] = 286609915;
	sol[45][23] = 821835078;
	sol[45][24] = 678102815;
	sol[45][25] = 131197840;
	sol[45][26] = 377949300;
	sol[45][27] = 485031731;
	sol[45][28] = 805970495;
	sol[45][29] = 503837396;
	sol[45][30] = 48150129;
	sol[45][31] = 541824455;
	sol[45][32] = 808260696;
	sol[45][33] = 645692430;
	sol[45][34] = 804201748;
	sol[45][35] = 139049769;
	sol[45][36] = 24013833;
	sol[45][37] = 4141435;
	sol[45][38] = 713470;
	sol[45][39] = 122678;
	sol[45][40] = 21105;
	sol[45][41] = 3613;
	sol[45][42] = 625;
	sol[45][43] = 106;
	sol[45][44] = 19;
	sol[45][45] = 3;
	sol[45][46] = 1;
	sol[45][47] = 0;
	sol[45][48] = 0;
	sol[45][49] = 0;
	sol[45][50] = 0;
	sol[46][1] = 0;
	sol[46][2] = 812941513;
	sol[46][3] = 632016277;
	sol[46][4] = 587752971;
	sol[46][5] = 907369437;
	sol[46][6] = 245365463;
	sol[46][7] = 237152744;
	sol[46][8] = 770806419;
	sol[46][9] = 254057260;
	sol[46][10] = 256931484;
	sol[46][11] = 657088179;
	sol[46][12] = 685991399;
	sol[46][13] = 165335468;
	sol[46][14] = 793178596;
	sol[46][15] = 943503554;
	sol[46][16] = 488208964;
	sol[46][17] = 862646224;
	sol[46][18] = 801219250;
	sol[46][19] = 113427800;
	sol[46][20] = 680954452;
	sol[46][21] = 973579312;
	sol[46][22] = 138931569;
	sol[46][23] = 370928377;
	sol[46][24] = 622393891;
	sol[46][25] = 633659803;
	sol[46][26] = 573653877;
	sol[46][27] = 394885434;
	sol[46][28] = 485638439;
	sol[46][29] = 805990346;
	sol[46][30] = 503837959;
	sol[46][31] = 48150142;
	sol[46][32] = 541824455;
	sol[46][33] = 808260696;
	sol[46][34] = 645692430;
	sol[46][35] = 804201748;
	sol[46][36] = 139049769;
	sol[46][37] = 24013833;
	sol[46][38] = 4141435;
	sol[46][39] = 713470;
	sol[46][40] = 122678;
	sol[46][41] = 21105;
	sol[46][42] = 3613;
	sol[46][43] = 625;
	sol[46][44] = 106;
	sol[46][45] = 19;
	sol[46][46] = 3;
	sol[46][47] = 1;
	sol[46][48] = 0;
	sol[46][49] = 0;
	sol[46][50] = 0;
	sol[47][1] = 0;
	sol[47][2] = 831284912;
	sol[47][3] = 920930216;
	sol[47][4] = 121837637;
	sol[47][5] = 363197429;
	sol[47][6] = 615372675;
	sol[47][7] = 818973396;
	sol[47][8] = 465784421;
	sol[47][9] = 249654262;
	sol[47][10] = 962863505;
	sol[47][11] = 443733107;
	sol[47][12] = 862431829;
	sol[47][13] = 259718701;
	sol[47][14] = 674328903;
	sol[47][15] = 72003370;
	sol[47][16] = 27941538;
	sol[47][17] = 457774123;
	sol[47][18] = 769643354;
	sol[47][19] = 316096474;
	sol[47][20] = 198211169;
	sol[47][21] = 732391072;
	sol[47][22] = 973293491;
	sol[47][23] = 813065869;
	sol[47][24] = 598354179;
	sol[47][25] = 515441584;
	sol[47][26] = 416189909;
	sol[47][27] = 723747383;
	sol[47][28] = 400516472;
	sol[47][29] = 485834719;
	sol[47][30] = 805996514;
	sol[47][31] = 503838126;
	sol[47][32] = 48150145;
	sol[47][33] = 541824455;
	sol[47][34] = 808260696;
	sol[47][35] = 645692430;
	sol[47][36] = 804201748;
	sol[47][37] = 139049769;
	sol[47][38] = 24013833;
	sol[47][39] = 4141435;
	sol[47][40] = 713470;
	sol[47][41] = 122678;
	sol[47][42] = 21105;
	sol[47][43] = 3613;
	sol[47][44] = 625;
	sol[47][45] = 106;
	sol[47][46] = 19;
	sol[47][47] = 3;
	sol[47][48] = 1;
	sol[47][49] = 0;
	sol[47][50] = 0;
	sol[48][1] = 0;
	sol[48][2] = 833292674;
	sol[48][3] = 298848298;
	sol[48][4] = 168903770;
	sol[48][5] = 545074331;
	sol[48][6] = 52799215;
	sol[48][7] = 758871225;
	sol[48][8] = 252495511;
	sol[48][9] = 924121755;
	sol[48][10] = 374266136;
	sol[48][11] = 669478514;
	sol[48][12] = 60769576;
	sol[48][13] = 806058403;
	sol[48][14] = 907911655;
	sol[48][15] = 394903137;
	sol[48][16] = 121208854;
	sol[48][17] = 373718471;
	sol[48][18] = 645725760;
	sol[48][19] = 64527479;
	sol[48][20] = 804531912;
	sol[48][21] = 436447112;
	sol[48][22] = 588689529;
	sol[48][23] = 502994369;
	sol[48][24] = 593283887;
	sol[48][25] = 897804374;
	sol[48][26] = 214286791;
	sol[48][27] = 714026394;
	sol[48][28] = 774353518;
	sol[48][29] = 402372566;
	sol[48][30] = 485897517;
	sol[48][31] = 805998409;
	sol[48][32] = 503838172;
	sol[48][33] = 48150146;
	sol[48][34] = 541824455;
	sol[48][35] = 808260696;
	sol[48][36] = 645692430;
	sol[48][37] = 804201748;
	sol[48][38] = 139049769;
	sol[48][39] = 24013833;
	sol[48][40] = 4141435;
	sol[48][41] = 713470;
	sol[48][42] = 122678;
	sol[48][43] = 21105;
	sol[48][44] = 3613;
	sol[48][45] = 625;
	sol[48][46] = 106;
	sol[48][47] = 19;
	sol[48][48] = 3;
	sol[48][49] = 1;
	sol[48][50] = 0;
	sol[49][1] = 0;
	sol[49][2] = 987390633;
	sol[49][3] = 352790884;
	sol[49][4] = 614135688;
	sol[49][5] = 73248057;
	sol[49][6] = 535068088;
	sol[49][7] = 778378333;
	sol[49][8] = 304699153;
	sol[49][9] = 787437186;
	sol[49][10] = 778598899;
	sol[49][11] = 436272891;
	sol[49][12] = 717326240;
	sol[49][13] = 327325089;
	sol[49][14] = 183229809;
	sol[49][15] = 956509573;
	sol[49][16] = 178816507;
	sol[49][17] = 780681714;
	sol[49][18] = 939063227;
	sol[49][19] = 78846995;
	sol[49][20] = 42468967;
	sol[49][21] = 482999731;
	sol[49][22] = 874463719;
	sol[49][23] = 105692341;
	sol[49][24] = 586003573;
	sol[49][25] = 658414122;
	sol[49][26] = 894144031;
	sol[49][27] = 201549678;
	sol[49][28] = 156845346;
	sol[49][29] = 791292622;
	sol[49][30] = 402979287;
	sol[49][31] = 485917368;
	sol[49][32] = 805998972;
	sol[49][33] = 503838185;
	sol[49][34] = 48150146;
	sol[49][35] = 541824455;
	sol[49][36] = 808260696;
	sol[49][37] = 645692430;
	sol[49][38] = 804201748;
	sol[49][39] = 139049769;
	sol[49][40] = 24013833;
	sol[49][41] = 4141435;
	sol[49][42] = 713470;
	sol[49][43] = 122678;
	sol[49][44] = 21105;
	sol[49][45] = 3613;
	sol[49][46] = 625;
	sol[49][47] = 106;
	sol[49][48] = 19;
	sol[49][49] = 3;
	sol[49][50] = 1;
	sol[50][1] = 0;
	sol[50][2] = 637245807;
	sol[50][3] = 499830334;
	sol[50][4] = 750632612;
	sol[50][5] = 151627894;
	sol[50][6] = 974119694;
	sol[50][7] = 567468624;
	sol[50][8] = 244879604;
	sol[50][9] = 269170082;
	sol[50][10] = 396392266;
	sol[50][11] = 280843475;
	sol[50][12] = 343181990;
	sol[50][13] = 746080370;
	sol[50][14] = 730888752;
	sol[50][15] = 810540922;
	sol[50][16] = 910735707;
	sol[50][17] = 103336517;
	sol[50][18] = 104943638;
	sol[50][19] = 266354616;
	sol[50][20] = 664188130;
	sol[50][21] = 338775312;
	sol[50][22] = 887579699;
	sol[50][23] = 740792318;
	sol[50][24] = 467888722;
	sol[50][25] = 667892662;
	sol[50][26] = 673680617;
	sol[50][27] = 203733589;
	sol[50][28] = 989562192;
	sol[50][29] = 306994734;
	sol[50][30] = 796924034;
	sol[50][31] = 403175568;
	sol[50][32] = 485923536;
	sol[50][33] = 805999139;
	sol[50][34] = 503838188;
	sol[50][35] = 48150146;
	sol[50][36] = 541824455;
	sol[50][37] = 808260696;
	sol[50][38] = 645692430;
	sol[50][39] = 804201748;
	sol[50][40] = 139049769;
	sol[50][41] = 24013833;
	sol[50][42] = 4141435;
	sol[50][43] = 713470;
	sol[50][44] = 122678;
	sol[50][45] = 21105;
	sol[50][46] = 3613;
	sol[50][47] = 625;
	sol[50][48] = 106;
	sol[50][49] = 19;
	sol[50][50] = 3;

}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);
	cout.tie(nullptr);
	cerr.tie(nullptr);

	cin >> n >> k;

	init();

	if (n > 44) {
		cout << sol[n][k] << '\n';
		return 0;
	}

	sol[0][1] = 1;

	fact[0] = finv[0] = 1;
	for (int i=1; i<=104; i++) {
		fact[i] = fact[i-1] * 1ll * i % MOD;
		finv[i] = mpow(fact[i], MOD - 2);
		inv[i] = mpow(i, MOD-2);
	}

	for (int i=1; i<=n+1; i++) {
		for (int j=1; j<=n+1; j++) {
			dabl_ex[i][j][0] = 1;
		}
	}

	for (int i=1; i<=n; i++) {

		for (int j=1; j<=i+1; j++) {

			if (i - j > n - k + 1) {
				continue;
			}

			// izracunaj dabl
			for (int li=0; li<i; li++) {
				int ri = i - li - 1;

				// lj = rj = j
				dod(dabl[i][j], sol[li][j] * 1ll * sol[ri][j] % MOD);

				// lj = j, rj > j
				for (int rj=j+1; rj<=ri+1; rj++) {
					dod(dabl[i][j], sol[li][j] * 1ll * sol[ri][rj] % MOD);
				}

				// lj > j, rj = j
				for (int lj=j+1; lj<=li+1; lj++) {
					dod(dabl[i][j], sol[li][lj] * 1ll * sol[ri][j] % MOD);
				}
			}

			// extenduj dabl

			{
				int run_and_gun = 1;
				for (int rep=0; rep<=n+1; rep++) {
					dabl_ex[i][j][rep] = run_and_gun;
					run_and_gun = run_and_gun * 1ll * (dabl[i][j] + rep) % MOD;
					run_and_gun = run_and_gun * 1ll * inv[rep+1] % MOD;
				}
			}

			auto prev = dp[0];
			auto curr = dp[1];

			memset(dp, 0, sizeof(dp));

			prev[0][0] = 1;

			for (int a=1; a<=i; a++) {
				for (int b=1; b<=min(j, (a+1)/2); b++) {

					memset(curr, 0, sizeof(dp[0]));
					curr[0][0] = 1;

					for (int c=1; c<=i; c++) {
						for (int d=1; d<=min(c, j); d++) {

							for (int rep=0; a*rep <= c && b*rep <= d; rep++) {

								dod(curr[c][d], prev[c - a*rep][d - b*rep] *
									1ll * dabl_ex[a][b][rep] % MOD);
							}
						}
					}

					swap(prev, curr);
				}
			}

			sol[i][j] = prev[i][j-1];
		}
	}

	cout << sol[n][k] << '\n';

}